# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2018 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects.
#
Import('atEnv')


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
#sources_netx4000 = """
#	src/driver/netx4000/drv_eth_xc.c
#	src/driver/netx4000/rpu_eth0.c
#	src/driver/netx4000/rpu_eth1.c
#	src/driver/netx4000/rpu_eth2.c
#	src/driver/netx4000/rpu_eth3.c
#	src/driver/netx4000/tpu_eth0.c
#	src/driver/netx4000/tpu_eth1.c
#	src/driver/netx4000/tpu_eth2.c
#	src/driver/netx4000/tpu_eth3.c
#	src/driver/netx4000/xpec_clean_tpec0.c
#	src/driver/netx4000/xpec_clean_tpec1.c
#	src/driver/netx4000/xpec_clean_tpec2.c
#	src/driver/netx4000/xpec_clean_tpec3.c
#	src/driver/netx4000/xpec_eth_std_mac_rpec0.c
#	src/driver/netx4000/xpec_eth_std_mac_rpec1.c
#	src/driver/netx4000/xpec_eth_std_mac_rpec2.c
#	src/driver/netx4000/xpec_eth_std_mac_rpec3.c
#	src/netx4000/cr7_global_timer.c
#"""

#sources_netx500 = """
#	src/driver/netx500/interface.c
#	src/driver/netx500/miimu.c
#	src/driver/netx500/nec_cb12.c
#	src/driver/netx500/rpu_eth0.c
#	src/driver/netx500/rpu_eth1.c
#	src/driver/netx500/tpu_eth0.c
#	src/driver/netx500/tpu_eth1.c
#	src/driver/netx500/xc.c
#	src/driver/netx500/xc_codes_reset.c
#	src/driver/netx500/xpec_eth_std_mac0.c
#	src/driver/netx500/xpec_eth_std_mac1.c
#"""

sources_netx90 = """
	src/driver/netx90/drv_eth_xc.c
	src/driver/netx90/phy.c
	src/driver/netx90/rpec_ethmac_rpec0.c
	src/driver/netx90/rpec_ethmac_rpec1.c
	src/driver/netx90/rpu_ethmac0.c
	src/driver/netx90/rpu_ethmac1.c
	src/driver/netx90/tpec_ethmac_tpec0.c
	src/driver/netx90/tpec_ethmac_tpec1.c
	src/driver/netx90/tpu_ethmac0.c
	src/driver/netx90/tpu_ethmac1.c
"""

sources_common = """
	src/test.c

	src/boot_drv_eth.c
	src/options.c
	src/options_default.c
	src/rng.c
	src/stack/arp.c
	src/stack/buckets.c
	src/stack/checksum.c
	src/stack/dhcp.c
	src/stack/eth.c
	src/stack/icmp.c
	src/stack/ipv4.c
	src/stack/udp.c
"""

sources_muhkuh = """
	src/header_muhkuh.c
	src/init_muhkuh.S
	src/main_muhkuh.c
"""

sources_standalone = """
	src/header_standalone.c
	src/init_standalone.S
	src/main_standalone.c
"""

#----------------------------------------------------------------------------
#
# Build the crc test.
#
aCppPath = ['src', '#platform/src', '#platform/src/lib', '#targets/version']

#env_netx4000_t = atEnv.NETX4000.Clone()
#env_netx4000_t.CompileDb('targets/netx4000/compile_commands.json')
#env_netx4000_t.Replace(LDFILE = 'src/netx4000/netx4000.ld')
#env_netx4000_t.Append(CPPPATH = aCppPath)
#src_netx4000_t = env_netx4000_t.SetBuildPath('targets/netx4000', 'src', sources_common + sources_netx4000)
#elf_netx4000_t = env_netx4000_t.Elf('targets/netx4000/eth_netx4000.elf', src_netx4000_t + env_netx4000_t['PLATFORM_LIBRARY'])
#ETH_NETX4000 = env_netx4000_t.ObjCopy('targets/netx4000/eth_netx4000.bin', elf_netx4000_t)
#txt_netx4000_t = env_netx4000_t.ObjDump('targets/netx4000/eth_netx4000.txt', elf_netx4000_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
#Export('ETH_NETX4000')

#env_netx500_t = atEnv.NETX500.Clone()
#env_netx500_t.CompileDb('targets/netx500/compile_commands.json')
#env_netx500_t.Replace(LDFILE = 'src/netx500/netx500.ld')
#env_netx500_t.Append(CPPPATH = aCppPath)
#src_netx500_t = env_netx500_t.SetBuildPath('targets/netx500', 'src', sources_common + sources_netx500)
#elf_netx500_t = env_netx500_t.Elf('targets/netx500/eth_netx500.elf', src_netx500_t + env_netx500_t['PLATFORM_LIBRARY'])
#ETH_NETX500 = env_netx500_t.ObjCopy('targets/netx500/eth_netx500.bin', elf_netx500_t)
#txt_netx500_t = env_netx500_t.ObjDump('targets/netx500/eth_netx500.txt', elf_netx500_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
#Export('ETH_NETX500')

#env_netx90_mpw_t = atEnv.NETX90_MPW.Clone()
#env_netx90_mpw_t.CompileDb('targets/netx90_mpw/compile_commands.json')
#env_netx90_mpw_t.Replace(LDFILE = 'src/netx90_mpw/netx90.ld')
#env_netx90_mpw_t.Append(CPPPATH = aCppPath)
#src_netx90_mpw_t = env_netx90_mpw_t.SetBuildPath('targets/netx90_mpw', 'src', sources_common + sources_netx90)
#elf_netx90_mpw_t = env_netx90_mpw_t.Elf('targets/netx90_mpw/eth_netx90_mpw.elf', src_netx90_mpw_t + env_netx90_mpw_t['PLATFORM_LIBRARY'])
#ETH_NETX90_MPW = env_netx90_mpw_t.ObjCopy('targets/netx90_mpw/eth_netx90_mpw.bin', elf_netx90_mpw_t)
#txt_netx90_mpw_t = env_netx90_mpw_t.ObjDump('targets/netx90_mpw/eth_netx90_mpw.txt', elf_netx90_mpw_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
#Export('ETH_NETX90_MPW')

env_netx90_t = atEnv.NETX90.Clone()
env_netx90_t.CompileDb('targets/netx90/muhkuh/compile_commands.json')
env_netx90_t.Replace(LDFILE = 'src/netx90/netx90_muhkuh.ld')
env_netx90_t.Append(CPPPATH = aCppPath)
src_netx90_t = env_netx90_t.SetBuildPath('targets/netx90/muhkuh', 'src', sources_muhkuh + sources_common + sources_netx90)
elf_netx90_t = env_netx90_t.Elf('targets/netx90/muhkuh/eth_netx90.elf', src_netx90_t + env_netx90_t['PLATFORM_LIBRARY'])
ETH_NETX90 = env_netx90_t.ObjCopy('targets/netx90/muhkuh/eth_netx90.bin', elf_netx90_t)
txt_netx90_t = env_netx90_t.ObjDump('targets/netx90/muhkuh/eth_netx90.txt', elf_netx90_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
Export('ETH_NETX90')

env_netx90_s = atEnv.NETX90.Clone()
env_netx90_s.CompileDb('targets/netx90/standalone/compile_commands.json')
env_netx90_s.Replace(LDFILE = 'src/netx90/netx90_standalone.ld')
env_netx90_s.Append(CPPPATH = aCppPath)
src_netx90_s = env_netx90_s.SetBuildPath('targets/netx90/standalone', 'src', sources_standalone + sources_common + sources_netx90)
elf_netx90_s = env_netx90_s.Elf('targets/netx90/standalone/eth_netx90.elf', src_netx90_s + env_netx90_s['PLATFORM_LIBRARY'])
bb0_netx90_s = env_netx90_s.HBootImage('targets/netx90/standalone/eth_netx90.img', 'src/netx90/COM_to_INTRAM.xml', HBOOTIMAGE_KNOWN_FILES=dict({'tElfCOM': elf_netx90_s}))

#eth_netx90_s = env_netx90_s.ObjCopy('targets/netx90/standalone/eth_netx90.bin', elf_netx90_s)
txt_netx90_s = env_netx90_s.ObjDump('targets/netx90/standalone/eth_netx90.txt', elf_netx90_s, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

#----------------------------------------------------------------------------
#
# Generate the LUA scripts from the template.
# This extracts symbols and enumeration values from the ELF file and inserts
# them into the LUA script.
#
LUA_TEST_CLASS_ETH = env_netx90_t.GccSymbolTemplate('targets/lua/test_class_eth.lua', elf_netx90_t, GCCSYMBOLTEMPLATE_TEMPLATE=File('lua/test_class_eth.lua'))
Export('LUA_TEST_CLASS_ETH')
