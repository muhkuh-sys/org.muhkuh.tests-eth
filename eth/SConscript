# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2018 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects.
#
Import('atEnv')


#----------------------------------------------------------------------------
# Build the ETHMAC HAL as a library.

sources_ethmac_netx90 = """
    src/driver/hal_ethmac_wrapper.c
    src/driver/HETHMAC/ARM_Application/Components/hal_common/Sources/hal_pfifo.c
    src/driver/HETHMAC/ARM_Application/Components/hal_common/Sources/hal_xc.c
    src/driver/HETHMAC/ARM_Application/Components/hal_common/netx90/Sources/hal_armtimer.c
    src/driver/HETHMAC/ARM_Application/Components/hal_common/netx90/Sources/hal_asicctrl.c
    src/driver/HETHMAC/ARM_Application/Components/hal_common/netx90/Sources/hal_intphy.c
    src/driver/HETHMAC/ARM_Application/Components/hal_common/netx90/Sources/hal_miimu.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/hal_ethmac.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/rpu_ethmac0.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/rpu_ethmac1.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/tpu_ethmac0.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/tpu_ethmac1.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/rpec_ethmac_rpec0.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/rpec_ethmac_rpec1.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/tpec_ethmac_tpec0.c
    src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Sources/tpec_ethmac_tpec1.c
    src/driver/HETHMAC/ARM_Application/Components/ip_stack/Sources/phy.c
"""

aCppPathLibEthMac_netx90 = [
    'src/driver/HETHMAC/ARM_Application/Components/Includes',
    'src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/netx90/Includes',
    'src/driver/HETHMAC/ARM_Application/Components/hal_ethmac/Includes',
    'src/driver/HETHMAC/ARM_Application/Components/hal_common/netx90/Includes',
    'src/driver/HETHMAC/ARM_Application/Components/hal_common/Includes',
    'src/driver/HETHMAC/ARM_Application/Components/ip_stack/Includes',
]

env_netx90_ethmac_l = atEnv.NETX90.Clone()
env_netx90_ethmac_l.CompileDb('targets/netx90/libethmac/compile_commands.json')
env_netx90_ethmac_l.Append(CPPPATH = aCppPathLibEthMac_netx90)
env_netx90_ethmac_l.Append(CPPDEFINES = [['__NETX90', '1'], ['HAL_ETHMAC_TARGET_NX90', '1']])
src_netx90_ethmac_l = env_netx90_ethmac_l.SetBuildPath('targets/netx90/libethmac', 'src', sources_ethmac_netx90)
lib_netx90_ethmac_l = env_netx90_ethmac_l.StaticLibrary('targets/netx90/libethmac/libethmac_netx90.a', src_netx90_ethmac_l)

#----------------------------------------------------------------------------
# Build the ETH2PS HAL as a library.

sources_eth2ps_netx90 = """
    src/driver/hal_eth2ps_wrapper.c
    src/driver/HETH2PS/ARM_Application/Components/hal_adinphy/Sources/hal_adinphy.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/Sources/hal_pfifo.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/Sources/hal_phyctrl.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/Sources/hal_xc.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_armirq.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_armtimer.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_asicctrl_com.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_asicctrl.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_intphy.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_miimu.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_mled_ctrl.c
    src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Sources/hal_padctrl.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/hal_eth2ps.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/rpu_eth2ps0.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/rpu_eth2ps1.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/tpu_eth2ps0.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/tpu_eth2ps1.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/rpec_eth2ps_rpec0.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/rpec_eth2ps_rpec1.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/tpec_eth2ps_tpec0.c
    src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Sources/tpec_eth2ps_tpec1.c
    src/driver/HETH2PS/ARM_Application/Components/targetlib/Soft/Sources/phy.c
    src/driver/HETH2PS/ARM_Application/Targets/Sources/eth_2ps.c


"""

aCppPathLibEth2ps_netx90 = [
    'src/driver/HETH2PS/ARM_Application/Components/hal_adinphy/Includes/',
    'src/driver/HETH2PS/ARM_Application/Components/hal_adinphy/adin1100_u2/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/netx90/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/hal_eth2ps/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/hal_common/netx90/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/hal_common/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/ip_stack/Includes',
    'src/driver/HETH2PS/ARM_Application/Components/targetlib/Soft/Includes',
    'src/driver/HETH2PS/ARM_Application/Targets/Includes'
]

env_netx90_eth2ps_l = atEnv.NETX90.Clone()
env_netx90_eth2ps_l.CompileDb('targets/netx90/libeth2ps/compile_commands.json')
env_netx90_eth2ps_l.Append(CPPPATH = aCppPathLibEth2ps_netx90)
env_netx90_eth2ps_l.Append(CPPDEFINES = [['__NETX90', '1'], ['HAL_ETH2PS_TARGET_NX90', '1']])
src_netx90_eth2ps_l = env_netx90_eth2ps_l.SetBuildPath('targets/netx90/libeth2ps', 'src', sources_eth2ps_netx90)
lib_netx90_eth2ps_l = env_netx90_eth2ps_l.StaticLibrary('targets/netx90/libeth2ps/libeth2ps_netx90.a', src_netx90_eth2ps_l)

#----------------------------------------------------------------------------



#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.

sources_netx90 = """
    src/driver/hal_muhkuh.c
"""

sources_common = """
	src/test.c

	src/boot_drv_eth.c
	src/options.c
	src/options_default.c
	src/rng.c
	src/stack/arp.c
	src/stack/buckets.c
	src/stack/checksum.c
	src/stack/dhcp.c
	src/stack/eth.c
	src/stack/icmp.c
	src/stack/ipv4.c
	src/stack/udp.c
"""

sources_muhkuh = """
	src/header_muhkuh.c
	src/init_muhkuh.S
	src/main_muhkuh.c
"""

sources_standalone = """
	src/header_standalone.c
	src/init_standalone.S
	src/main_standalone.c
"""

#----------------------------------------------------------------------------
#
# Build the crc test.
#
aCppPath = [
    'src',
    '#platform/src',
    '#platform/src/lib',
    '#targets/version'
]

env_netx90_ethmac_t = atEnv.NETX90.Clone()
env_netx90_ethmac_t.CompileDb('targets/netx90/muhkuh_ethmac/compile_commands.json')
env_netx90_ethmac_t.Replace(LDFILE = 'src/netx90/netx90_muhkuh.ld')
env_netx90_ethmac_t.Append(CPPPATH = aCppPath)
env_netx90_ethmac_t.Append(CPPDEFINES = [['CFG_USE_ETHMAC', '1'], ['CFG_USE_ETH2PS', '0']])
src_netx90_ethmac_t = env_netx90_ethmac_t.SetBuildPath('targets/netx90/muhkuh_ethmac', 'src', sources_muhkuh + sources_common + sources_netx90)
elf_netx90_ethmac_t = env_netx90_ethmac_t.Elf('targets/netx90/muhkuh_ethmac/eth_ethmac_netx90.elf', src_netx90_ethmac_t + env_netx90_ethmac_t['PLATFORM_LIBRARY'] + lib_netx90_ethmac_l)
ETH_ETHMAC_NETX90 = env_netx90_ethmac_t.ObjCopy('targets/netx90/muhkuh_ethmac/eth_ethmac_netx90.bin', elf_netx90_ethmac_t)
txt_netx90_ethmac_t = env_netx90_ethmac_t.ObjDump('targets/netx90/muhkuh_ethmac/eth_ethmac_netx90.txt', elf_netx90_ethmac_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
Export('ETH_ETHMAC_NETX90')

env_netx90_eth2ps_t = atEnv.NETX90.Clone()
env_netx90_eth2ps_t.CompileDb('targets/netx90/muhkuh_eth2ps/compile_commands.json')
env_netx90_eth2ps_t.Replace(LDFILE = 'src/netx90/netx90_muhkuh.ld')
env_netx90_eth2ps_t.Append(CPPPATH = aCppPath)
env_netx90_eth2ps_t.Append(CPPDEFINES = [['CFG_USE_ETHMAC', '0'], ['CFG_USE_ETH2PS', '1']])
src_netx90_eth2ps_t = env_netx90_eth2ps_t.SetBuildPath('targets/netx90/muhkuh_eth2ps', 'src', sources_muhkuh + sources_common + sources_netx90)
elf_netx90_eth2ps_t = env_netx90_eth2ps_t.Elf('targets/netx90/muhkuh_eth2ps/eth_eth2ps_netx90.elf', src_netx90_eth2ps_t + env_netx90_eth2ps_t['PLATFORM_LIBRARY'] + lib_netx90_eth2ps_l)
ETH_ETH2PS_NETX90 = env_netx90_eth2ps_t.ObjCopy('targets/netx90/muhkuh_eth2ps/eth_eth2ps_netx90.bin', elf_netx90_eth2ps_t)
txt_netx90_eth2ps_t = env_netx90_eth2ps_t.ObjDump('targets/netx90/muhkuh_eth2ps/eth_eth2ps_netx90.txt', elf_netx90_eth2ps_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
Export('ETH_ETH2PS_NETX90')

env_netx90_ethmac_s = atEnv.NETX90.Clone()
env_netx90_ethmac_s.CompileDb('targets/netx90/standalone_ethmac/compile_commands.json')
env_netx90_ethmac_s.Replace(LDFILE = 'src/netx90/netx90_standalone.ld')
env_netx90_ethmac_s.Append(CPPPATH = aCppPath)
env_netx90_ethmac_s.Append(CPPDEFINES = [['CFG_USE_ETHMAC', '1'], ['CFG_USE_ETH2PS', '0']])
src_netx90_ethmac_s = env_netx90_ethmac_s.SetBuildPath('targets/netx90/standalone_ethmac', 'src', sources_standalone + sources_common + sources_netx90)
elf_netx90_ethmac_s = env_netx90_ethmac_s.Elf('targets/netx90/standalone_ethmac/eth_netx90.elf', src_netx90_ethmac_s + env_netx90_ethmac_s['PLATFORM_LIBRARY'] + lib_netx90_ethmac_l)
bb0_netx90_ethmac_s = env_netx90_ethmac_s.HBootImage('targets/netx90/standalone_ethmac/eth_ethmac_netx90.img', 'src/netx90/COM_to_INTRAM.xml', HBOOTIMAGE_KNOWN_FILES=dict({'tElfCOM': elf_netx90_ethmac_s}))
txt_netx90_ethmac_s = env_netx90_ethmac_s.ObjDump('targets/netx90/standalone_ethmac/eth_netx90.txt', elf_netx90_ethmac_s, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

env_netx90_eth2ps_s = atEnv.NETX90.Clone()
env_netx90_eth2ps_s.CompileDb('targets/netx90/standalone_eth2ps/compile_commands.json')
env_netx90_eth2ps_s.Replace(LDFILE = 'src/netx90/netx90_standalone.ld')
env_netx90_eth2ps_s.Append(CPPPATH = aCppPath)
env_netx90_eth2ps_s.Append(CPPDEFINES = [['CFG_USE_ETHMAC', '0'], ['CFG_USE_ETH2PS', '1']])
src_netx90_eth2ps_s = env_netx90_eth2ps_s.SetBuildPath('targets/netx90/standalone_eth2ps', 'src', sources_standalone + sources_common + sources_netx90)
elf_netx90_eth2ps_s = env_netx90_eth2ps_s.Elf('targets/netx90/standalone_eth2ps/eth_netx90.elf', src_netx90_eth2ps_s + env_netx90_eth2ps_s['PLATFORM_LIBRARY'] + lib_netx90_eth2ps_l)
bb0_netx90_eth2ps_s = env_netx90_eth2ps_s.HBootImage('targets/netx90/standalone_eth2ps/eth_eth2ps_netx90.img', 'src/netx90/COM_to_INTRAM.xml', HBOOTIMAGE_KNOWN_FILES=dict({'tElfCOM': elf_netx90_eth2ps_s}))
txt_netx90_eth2ps_s = env_netx90_eth2ps_s.ObjDump('targets/netx90/standalone_eth2ps/eth_netx90.txt', elf_netx90_eth2ps_s, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

#----------------------------------------------------------------------------
#
# Generate the LUA scripts from the template.
# This extracts symbols and enumeration values from the ELF file and inserts
# them into the LUA script.
#
LUA_TEST_CLASS_ETH = env_netx90_ethmac_t.GccSymbolTemplate('targets/lua/test_class_eth.lua', elf_netx90_ethmac_t, GCCSYMBOLTEMPLATE_TEMPLATE=File('lua/test_class_eth.lua'))
Export('LUA_TEST_CLASS_ETH')
