# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2018 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects.
#
Import('atEnv')


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_common = """
	src/header.c
	src/init_muhkuh.S
	src/main_test.c

	src/boot_drv_eth.c
	src/options.c
	src/options_default.c
	src/pad_control.c
	src/rng.c
	src/driver/drv_eth_xc.c
	src/driver/phy.c
	src/driver/rpec_ethmac_rpec0.c
	src/driver/rpec_ethmac_rpec1.c
	src/driver/rpu_ethmac0.c
	src/driver/rpu_ethmac1.c
	src/driver/tpec_ethmac_tpec0.c
	src/driver/tpec_ethmac_tpec1.c
	src/driver/tpu_ethmac0.c
	src/driver/tpu_ethmac1.c
	src/stack/arp.c
	src/stack/buckets.c
	src/stack/checksum.c
	src/stack/dhcp.c
	src/stack/eth.c
	src/stack/icmp.c
	src/stack/ipv4.c
	src/stack/udp.c
"""


sources_netx90_mpw = """
"""

#----------------------------------------------------------------------------
#
# Build the crc test.
#
aCppPath = ['src', '#platform/src', '#platform/src/lib', '#targets/version']

#env_netx500_t = atEnv.NETX500.Clone()
#env_netx500_t.Replace(LDFILE = 'src/netx500/netx500.ld')
#env_netx500_t.Append(CPPPATH = aCppPath)
#src_netx500_t = env_netx500_t.SetBuildPath('targets/netx500', 'src', sources_common + sources_netx500)
#elf_netx500_t = env_netx500_t.Elf('targets/netx500/iomatrix_netx500.elf', src_netx500_t + env_netx500_t['PLATFORM_LIBRARY'])
#IOMATRIX_NETX500 = env_netx500_t.ObjCopy('targets/netx500/iomatrix_netx500.bin', elf_netx500_t)

env_netx90_mpw_t = atEnv.NETX90_MPW.Clone()
env_netx90_mpw_t.Replace(LDFILE = 'src/netx90_mpw/netx90.ld')
env_netx90_mpw_t.Append(CPPPATH = aCppPath)
src_netx90_mpw_t = env_netx90_mpw_t.SetBuildPath('targets/netx90_mpw', 'src', sources_common + sources_netx90_mpw)
elf_netx90_mpw_t = env_netx90_mpw_t.Elf('targets/netx90_mpw/eth_netx90_mpw.elf', src_netx90_mpw_t + env_netx90_mpw_t['PLATFORM_LIBRARY'])
ETH_NETX90_MPW = env_netx90_mpw_t.ObjCopy('targets/netx90_mpw/eth_netx90_mpw.bin', elf_netx90_mpw_t)
txt_netx90_mpw_t = env_netx90_mpw_t.ObjDump('targets/netx90_mpw/eth_netx90_mpw.txt', elf_netx90_mpw_t, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

#env_netx56_t = atEnv.NETX56.Clone()
#env_netx56_t.Replace(LDFILE = 'src/netx56/netx56.ld')
#env_netx56_t.Append(CPPPATH = aCppPath)
#src_netx56_t = env_netx56_t.SetBuildPath('targets/netx56', 'src', sources_common + sources_netx56)
#elf_netx56_t = env_netx56_t.Elf('targets/netx56/iomatrix_netx56.elf', src_netx56_t + env_netx56_t['PLATFORM_LIBRARY'])
#IOMATRIX_NETX56 = env_netx56_t.ObjCopy('targets/netx56/iomatrix_netx56.bin', elf_netx56_t)

#env_netx50_t = atEnv.NETX50.Clone()
#env_netx50_t.Replace(LDFILE = 'src/netx50/netx50.ld')
#env_netx50_t.Append(CPPPATH = aCppPath)
#src_netx50_t = env_netx50_t.SetBuildPath('targets/netx50', 'src', sources_common)
#elf_netx50_t = env_netx50_t.Elf('targets/netx50/crctest.elf', src_netx50_t + env_netx50_t['PLATFORM_LIBRARY'])
#crctest_netx50 = env_netx50_t.ObjCopy('targets/netx50/crctest.bin', elf_netx50_t)

#env_netx10_t = atEnv.NETX10.Clone()
#env_netx10_t.Replace(LDFILE = 'src/netx10/netx10.ld')
#env_netx10_t.Append(CPPPATH = aCppPath)
#src_netx10_t = env_netx10_t.SetBuildPath('targets/netx10', 'src', sources_common + sources_netx10)
#elf_netx10_t = env_netx10_t.Elf('targets/netx10/iomatrix_netx10.elf', src_netx10_t + env_netx10_t['PLATFORM_LIBRARY'])
#IOMATRIX_NETX10 = env_netx10_t.ObjCopy('targets/netx10/iomatrix_netx10.bin', elf_netx10_t)

Export('ETH_NETX90_MPW')


#----------------------------------------------------------------------------
#
# Generate the LUA scripts from the template.
# This extracts symbols and enumeration values from the ELF file and inserts
# them into the LUA script.
#
#LUA_NETX_BASE = atEnv.NETX56.GccSymbolTemplate('targets/lua/io_matrix/netx_base.lua', elf_netx56_t, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/io_matrix/netx_base.lua'))
#LUA_NETX90_MPW = atEnv.NETX56.GccSymbolTemplate('targets/lua/io_matrix/netx90_mpw.lua', elf_netx56_t, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/io_matrix/netx90_mpw.lua'))
#Export('LUA_NETX_BASE', 'LUA_NETX90_MPW')


