/*********************************************************************/
/* from regdef.v by regdef2h auto-generated C-header file            */
/* please see the regdef.html file for detailed register description */
/*********************************************************************/

#ifndef __regdef_netx90mpw_h__
#define __regdef_netx90mpw_h__

#include <stdint.h>

/* ===================================================================== */

/* Area of intflash2_mirror_app_boot */

/* ===================================================================== */

#define Addr_NX90_intflash2_mirror_app_boot 0x00000000U

/* ===================================================================== */

/* Area of rom */

/* ===================================================================== */

#define Addr_NX90_rom 0x00000000U

/* --------------------------------------------------------------------- */
/* Register rom_base */
/* => internal ROM start address */
/*    Area size: 96kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Highest 4kB of ROM will be hidden after ROM Watchdog timed out (secure data). */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_rom_base 0x00000000U
#define Adr_NX90_rom_rom_base 0x00000000U
#define Adr_NX90_rom_base     0x00000000U

/* --------------------------------------------------------------------- */
/* Register rom_end */
/* => internal ROM end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_rom_end 0x0001FFFCU
#define Adr_NX90_rom_rom_end 0x0001FFFCU
#define Adr_NX90_rom_end     0x0001FFFCU


/* ===================================================================== */

/* AREA intram0 */
/* Area of intram0, intram0_mirror_sram, intram0_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram0             0x00020000U
#define Addr_NX90_intram0_mirror_sram 0x20020000U
#define Addr_NX90_intram0_mirror_ocp  0x40020000U

/* --------------------------------------------------------------------- */
/* Register intram0_base */
/* => internal SRAM AHBL slave 0 start address */
/*    Area size: 128kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    Offset 0x0 is ROM Boot-vector */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram0_base                 0x00000000U
#define Adr_NX90_intram0_intram0_base             0x00020000U
#define Adr_NX90_intram0_mirror_sram_intram0_base 0x20020000U
#define Adr_NX90_intram0_mirror_ocp_intram0_base  0x40020000U

/* --------------------------------------------------------------------- */
/* Register intram0_end */
/* => internal SRAM AHBL slave 0 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram0_end                 0x0001FFFCU
#define Adr_NX90_intram0_intram0_end             0x0003FFFCU
#define Adr_NX90_intram0_mirror_sram_intram0_end 0x2003FFFCU
#define Adr_NX90_intram0_mirror_ocp_intram0_end  0x4003FFFCU


/* ===================================================================== */

/* AREA intram1 */
/* Area of intram1, intram1_mirror_sram, intram1_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram1             0x00040000U
#define Addr_NX90_intram1_mirror_sram 0x20040000U
#define Addr_NX90_intram1_mirror_ocp  0x40040000U

/* --------------------------------------------------------------------- */
/* Register intram1_base */
/* => internal SRAM AHBL slave 1 start address */
/*    Area size: 128kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram1_base                 0x00000000U
#define Adr_NX90_intram1_intram1_base             0x00040000U
#define Adr_NX90_intram1_mirror_sram_intram1_base 0x20040000U
#define Adr_NX90_intram1_mirror_ocp_intram1_base  0x40040000U

/* --------------------------------------------------------------------- */
/* Register intram1_end */
/* => internal SRAM AHBL slave 1 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram1_end                 0x0001FFFCU
#define Adr_NX90_intram1_intram1_end             0x0005FFFCU
#define Adr_NX90_intram1_mirror_sram_intram1_end 0x2005FFFCU
#define Adr_NX90_intram1_mirror_ocp_intram1_end  0x4005FFFCU


/* ===================================================================== */

/* AREA intram2 */
/* Area of intram2, intram2_mirror_sram, intram2_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram2             0x00060000U
#define Addr_NX90_intram2_mirror_sram 0x20060000U
#define Addr_NX90_intram2_mirror_ocp  0x40060000U

/* --------------------------------------------------------------------- */
/* Register intram2_base */
/* => internal SRAM AHBL slave 2 start address */
/*    Area size: 128kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram2_base                 0x00000000U
#define Adr_NX90_intram2_intram2_base             0x00060000U
#define Adr_NX90_intram2_mirror_sram_intram2_base 0x20060000U
#define Adr_NX90_intram2_mirror_ocp_intram2_base  0x40060000U

/* --------------------------------------------------------------------- */
/* Register intram2_end */
/* => internal SRAM AHBL slave 2 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram2_end                 0x0001FFFCU
#define Adr_NX90_intram2_intram2_end             0x0007FFFCU
#define Adr_NX90_intram2_mirror_sram_intram2_end 0x2007FFFCU
#define Adr_NX90_intram2_mirror_ocp_intram2_end  0x4007FFFCU


/* ===================================================================== */

/* AREA intram3 */
/* Area of intram3, intram3_mirror_sram, intram3_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram3             0x00080000U
#define Addr_NX90_intram3_mirror_sram 0x20080000U
#define Addr_NX90_intram3_mirror_ocp  0x40080000U

/* --------------------------------------------------------------------- */
/* Register intram3_base */
/* => internal SRAM AHBL slave 3 start address */
/*    Area size: 64kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram3_base                 0x00000000U
#define Adr_NX90_intram3_intram3_base             0x00080000U
#define Adr_NX90_intram3_mirror_sram_intram3_base 0x20080000U
#define Adr_NX90_intram3_mirror_ocp_intram3_base  0x40080000U

/* --------------------------------------------------------------------- */
/* Register intram3_end */
/* => internal SRAM AHBL slave 3 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram3_end                 0x0000FFFCU
#define Adr_NX90_intram3_intram3_end             0x0008FFFCU
#define Adr_NX90_intram3_mirror_sram_intram3_end 0x2008FFFCU
#define Adr_NX90_intram3_mirror_ocp_intram3_end  0x4008FFFCU


/* ===================================================================== */

/* AREA intram4 */
/* Area of intram4, intram4_mirror_sram, intram4_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram4             0x00090000U
#define Addr_NX90_intram4_mirror_sram 0x20090000U
#define Addr_NX90_intram4_mirror_ocp  0x40090000U

/* --------------------------------------------------------------------- */
/* Register intram4_base */
/* => internal SRAM AHBL slave 4 start address */
/*    Area size: 64kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram4_base                 0x00000000U
#define Adr_NX90_intram4_intram4_base             0x00090000U
#define Adr_NX90_intram4_mirror_sram_intram4_base 0x20090000U
#define Adr_NX90_intram4_mirror_ocp_intram4_base  0x40090000U

/* --------------------------------------------------------------------- */
/* Register intram4_end */
/* => internal SRAM AHBL slave 4 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram4_end                 0x0000FFFCU
#define Adr_NX90_intram4_intram4_end             0x0009FFFCU
#define Adr_NX90_intram4_mirror_sram_intram4_end 0x2009FFFCU
#define Adr_NX90_intram4_mirror_ocp_intram4_end  0x4009FFFCU


/* ===================================================================== */

/* AREA intram5 */
/* Area of intram5, intram5_mirror_sram, intram5_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram5             0x000A0000U
#define Addr_NX90_intram5_mirror_sram 0x200A0000U
#define Addr_NX90_intram5_mirror_ocp  0x400A0000U

/* --------------------------------------------------------------------- */
/* Register intram5_base */
/* => internal SRAM AHBL slave 5 start address */
/*    Area size: 32kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram5_base                 0x00000000U
#define Adr_NX90_intram5_intram5_base             0x000A0000U
#define Adr_NX90_intram5_mirror_sram_intram5_base 0x200A0000U
#define Adr_NX90_intram5_mirror_ocp_intram5_base  0x400A0000U

/* --------------------------------------------------------------------- */
/* Register intram5_end */
/* => internal SRAM AHBL slave 5 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram5_end                 0x00007FFCU
#define Adr_NX90_intram5_intram5_end             0x000A7FFCU
#define Adr_NX90_intram5_mirror_sram_intram5_end 0x200A7FFCU
#define Adr_NX90_intram5_mirror_ocp_intram5_end  0x400A7FFCU


/* ===================================================================== */

/* AREA intram6 */
/* Area of intram6, intram6_mirror_sram, intram6_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram6             0x000B0000U
#define Addr_NX90_intram6_mirror_sram 0x200B0000U
#define Addr_NX90_intram6_mirror_ocp  0x400B0000U

/* --------------------------------------------------------------------- */
/* Register intram6_base */
/* => internal SRAM AHBL slave 6 start address */
/*    Area size: 32kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram6_base                 0x00000000U
#define Adr_NX90_intram6_intram6_base             0x000B0000U
#define Adr_NX90_intram6_mirror_sram_intram6_base 0x200B0000U
#define Adr_NX90_intram6_mirror_ocp_intram6_base  0x400B0000U

/* --------------------------------------------------------------------- */
/* Register intram6_end */
/* => internal SRAM AHBL slave 6 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram6_end                 0x00007FFCU
#define Adr_NX90_intram6_intram6_end             0x000B7FFCU
#define Adr_NX90_intram6_mirror_sram_intram6_end 0x200B7FFCU
#define Adr_NX90_intram6_mirror_ocp_intram6_end  0x400B7FFCU


/* ===================================================================== */

/* AREA intram7 */
/* Area of intram7, intram7_mirror_sram, intram7_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram7             0x000B8000U
#define Addr_NX90_intram7_mirror_sram 0x200B8000U
#define Addr_NX90_intram7_mirror_ocp  0x400B8000U

/* --------------------------------------------------------------------- */
/* Register intram7_base */
/* => internal SRAM AHBL slave 7 start address */
/*    Area size: 32kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram7_base                 0x00000000U
#define Adr_NX90_intram7_intram7_base             0x000B8000U
#define Adr_NX90_intram7_mirror_sram_intram7_base 0x200B8000U
#define Adr_NX90_intram7_mirror_ocp_intram7_base  0x400B8000U

/* --------------------------------------------------------------------- */
/* Register intram7_end */
/* => internal SRAM AHBL slave 7 end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram7_end                 0x00007FFCU
#define Adr_NX90_intram7_intram7_end             0x000BFFFCU
#define Adr_NX90_intram7_mirror_sram_intram7_end 0x200BFFFCU
#define Adr_NX90_intram7_mirror_ocp_intram7_end  0x400BFFFCU


/* ===================================================================== */

/* AREA intramhs */
/* Area of intramhs, intramhs_mirror_sram, intramhs_straight_mirror_sram, intramhs_dpm_mirror_sram, intramhs_arm_mirror_sram, intramhs_xpic_mirror_sram, intramhs_mirror_ocp, intramhs_straight_mirror, intramhs_dpm_mirror, intramhs_arm_mirror, intramhs_xpic_mirror */

/* ===================================================================== */

#define Addr_NX90_intramhs                      0x000C0000U
#define Addr_NX90_intramhs_mirror_sram          0x200C0000U
#define Addr_NX90_intramhs_straight_mirror_sram 0x200C0000U
#define Addr_NX90_intramhs_dpm_mirror_sram      0x200C8000U
#define Addr_NX90_intramhs_arm_mirror_sram      0x200D0000U
#define Addr_NX90_intramhs_xpic_mirror_sram     0x200D8000U
#define Addr_NX90_intramhs_mirror_ocp           0x400C0000U
#define Addr_NX90_intramhs_straight_mirror      0x400C0000U
#define Addr_NX90_intramhs_dpm_mirror           0x400C8000U
#define Addr_NX90_intramhs_arm_mirror           0x400D0000U
#define Addr_NX90_intramhs_xpic_mirror          0x400D8000U

/* --------------------------------------------------------------------- */
/* Register intramhs_base */
/* => Internal Handshake RAM start address. */
/*    Area size: 32kB */
/*    Handshake RAM is mirrored several times in this AHBL slave. Special handshake IRQ generation can be */
/*    associated to single mirrors. View HANDSHAKE_CTRL register area for details. */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intramhs_base                           0x00000000U
#define Adr_NX90_intramhs_intramhs_base                      0x000C0000U
#define Adr_NX90_intramhs_mirror_sram_intramhs_base          0x200C0000U
#define Adr_NX90_intramhs_straight_mirror_sram_intramhs_base 0x200C0000U
#define Adr_NX90_intramhs_dpm_mirror_sram_intramhs_base      0x200C8000U
#define Adr_NX90_intramhs_arm_mirror_sram_intramhs_base      0x200D0000U
#define Adr_NX90_intramhs_xpic_mirror_sram_intramhs_base     0x200D8000U
#define Adr_NX90_intramhs_mirror_ocp_intramhs_base           0x400C0000U
#define Adr_NX90_intramhs_straight_mirror_intramhs_base      0x400C0000U
#define Adr_NX90_intramhs_dpm_mirror_intramhs_base           0x400C8000U
#define Adr_NX90_intramhs_arm_mirror_intramhs_base           0x400D0000U
#define Adr_NX90_intramhs_xpic_mirror_intramhs_base          0x400D8000U

/* --------------------------------------------------------------------- */
/* Register intramhs_end */
/* => Internal Handshake RAM end address */
/*    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM. */
/*    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intramhs_end                           0x00007FFCU
#define Adr_NX90_intramhs_intramhs_end                      0x000C7FFCU
#define Adr_NX90_intramhs_mirror_sram_intramhs_end          0x200C7FFCU
#define Adr_NX90_intramhs_straight_mirror_sram_intramhs_end 0x200C7FFCU
#define Adr_NX90_intramhs_dpm_mirror_sram_intramhs_end      0x200CFFFCU
#define Adr_NX90_intramhs_arm_mirror_sram_intramhs_end      0x200D7FFCU
#define Adr_NX90_intramhs_xpic_mirror_sram_intramhs_end     0x200DFFFCU
#define Adr_NX90_intramhs_mirror_ocp_intramhs_end           0x400C7FFCU
#define Adr_NX90_intramhs_straight_mirror_intramhs_end      0x400C7FFCU
#define Adr_NX90_intramhs_dpm_mirror_intramhs_end           0x400CFFFCU
#define Adr_NX90_intramhs_arm_mirror_intramhs_end           0x400D7FFCU
#define Adr_NX90_intramhs_xpic_mirror_intramhs_end          0x400DFFFCU


/* ===================================================================== */

/* Area of intflash0 */

/* ===================================================================== */

#define Addr_NX90_intflash0 0x00100000U

/* ===================================================================== */

/* Area of intflash1 */

/* ===================================================================== */

#define Addr_NX90_intflash1 0x00180000U

/* ===================================================================== */

/* Area of intflash2 */

/* ===================================================================== */

#define Addr_NX90_intflash2 0x00200000U

/* ===================================================================== */

/* Area of sdram */

/* ===================================================================== */

#define Addr_NX90_sdram 0x10000000U

/* --------------------------------------------------------------------- */
/* Register sdram_base */
/* => external SDRAM chip-select start address */
/*    Area size: 256MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_base   0x00000000U
#define Adr_NX90_sdram_sdram_base 0x10000000U
#define Adr_NX90_sdram_base       0x10000000U

/* --------------------------------------------------------------------- */
/* Register sdram_end */
/* => external SDRAM chip-select end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_end   0x0FFFFFFCU
#define Adr_NX90_sdram_sdram_end 0x1FFFFFFCU
#define Adr_NX90_sdram_end       0x1FFFFFFCU


/* ===================================================================== */

/* Area of sqirom */

/* ===================================================================== */

#define Addr_NX90_sqirom 0x64000000U

/* ===================================================================== */

/* Area of extsram */

/* ===================================================================== */

#define Addr_NX90_extsram 0x68000000U

/* --------------------------------------------------------------------- */
/* Register cs0_base */
/* => external SRAM/Flash/NVRAM,... chip-select 0 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs0_base     0x00000000U
#define Adr_NX90_extsram_cs0_base 0x68000000U
#define Adr_NX90_cs0_base         0x68000000U

/* --------------------------------------------------------------------- */
/* Register cs0_end */
/* => external SRAM/Flash/NVRAM,... chip-select 0 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs0_end     0x01FFFFFCU
#define Adr_NX90_extsram_cs0_end 0x69FFFFFCU
#define Adr_NX90_cs0_end         0x69FFFFFCU

/* --------------------------------------------------------------------- */
/* Register cs1_base */
/* => external SRAM/Flash/NVRAM,... chip-select 1 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs1_base     0x02000000U
#define Adr_NX90_extsram_cs1_base 0x6A000000U
#define Adr_NX90_cs1_base         0x6A000000U

/* --------------------------------------------------------------------- */
/* Register cs1_end */
/* => external SRAM/Flash/NVRAM,... chip-select 1 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs1_end     0x03FFFFFCU
#define Adr_NX90_extsram_cs1_end 0x6BFFFFFCU
#define Adr_NX90_cs1_end         0x6BFFFFFCU

/* --------------------------------------------------------------------- */
/* Register cs2_base */
/* => external SRAM/Flash/NVRAM,... chip-select 2 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs2_base     0x04000000U
#define Adr_NX90_extsram_cs2_base 0x6C000000U
#define Adr_NX90_cs2_base         0x6C000000U

/* --------------------------------------------------------------------- */
/* Register cs2_end */
/* => external SRAM/Flash/NVRAM,... chip-select 2 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs2_end     0x05FFFFFCU
#define Adr_NX90_extsram_cs2_end 0x6DFFFFFCU
#define Adr_NX90_cs2_end         0x6DFFFFFCU

/* --------------------------------------------------------------------- */
/* Register cs3_base */
/* => external SRAM/Flash/NVRAM,... chip-select 3 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs3_base     0x06000000U
#define Adr_NX90_extsram_cs3_base 0x6E000000U
#define Adr_NX90_cs3_base         0x6E000000U

/* --------------------------------------------------------------------- */
/* Register cs3_end */
/* => external SRAM/Flash/NVRAM,... chip-select 3 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs3_end     0x07FFFFFCU
#define Adr_NX90_extsram_cs3_end 0x6FFFFFFCU
#define Adr_NX90_cs3_end         0x6FFFFFFCU


/* ===================================================================== */

/* Area of idpm_slave */

/* ===================================================================== */

#define Addr_NX90_idpm_slave 0x70000000U

/* ===================================================================== */

/* Area of sqirom_mirror_ext_peri */

/* ===================================================================== */

#define Addr_NX90_sqirom_mirror_ext_peri 0xA4000000U

/* ===================================================================== */

/* Area of extsram_mirror_ext_peri */

/* ===================================================================== */

#define Addr_NX90_extsram_mirror_ext_peri 0xA8000000U

/* ===================================================================== */

/* Area of idpm_slave_mirror_ext_peri */

/* ===================================================================== */

#define Addr_NX90_idpm_slave_mirror_ext_peri 0xB0000000U

/* ===================================================================== */

/* Area of cm4_private_peripherals */

/* ===================================================================== */

#define Addr_NX90_cm4_private_peripherals 0xE0000000U

/* ===================================================================== */

/* Area of cm4_itm */

/* ===================================================================== */

#define Addr_NX90_cm4_itm 0xE0000000U

/* ===================================================================== */

/* Area of cm4_dwt */

/* ===================================================================== */

#define Addr_NX90_cm4_dwt 0xE0001000U

/* ===================================================================== */

/* Area of cm4_fpb */

/* ===================================================================== */

#define Addr_NX90_cm4_fpb 0xE0002000U

/* ===================================================================== */

/* Area of cm4_scs */

/* ===================================================================== */

#define Addr_NX90_cm4_scs 0xE000E000U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_actlr */
/* => Auxiliary control register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_actlr     0x00000008U
#define Adr_NX90_cm4_scs_cm4_scs_actlr 0xE000E008U
#define Adr_NX90_cm4_scs_actlr         0xE000E008U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_stcsr */
/* => SysTick control and status register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_stcsr     0x00000010U
#define Adr_NX90_cm4_scs_cm4_scs_stcsr 0xE000E010U
#define Adr_NX90_cm4_scs_stcsr         0xE000E010U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_strvr */
/* => SysTick Reload Value register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_strvr     0x00000014U
#define Adr_NX90_cm4_scs_cm4_scs_strvr 0xE000E014U
#define Adr_NX90_cm4_scs_strvr         0xE000E014U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_stcvr */
/* => SysTick current value register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_stcvr     0x00000018U
#define Adr_NX90_cm4_scs_cm4_scs_stcvr 0xE000E018U
#define Adr_NX90_cm4_scs_stcvr         0xE000E018U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_stcr */
/* => SysTick calibration value register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_stcr     0x0000001CU
#define Adr_NX90_cm4_scs_cm4_scs_stcr 0xE000E01CU
#define Adr_NX90_cm4_scs_stcr         0xE000E01CU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iser0 */
/* => Interrupt set-enable register 0 */
/*    Enables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iser0     0x00000100U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iser0 0xE000E100U
#define Adr_NX90_cm4_scs_nvic_iser0         0xE000E100U
#define DFLT_VAL_NX90_cm4_scs_nvic_iser0    0x00000000U

#define MSK_NX90_cm4_scs_nvic_iser0_setena         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_iser0_setena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_iser0_setena    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_iser0_setena 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_iser0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iser0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iser1 */
/* => Interrupt set-enable register 1 */
/*    Enables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iser1     0x00000104U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iser1 0xE000E104U
#define Adr_NX90_cm4_scs_nvic_iser1         0xE000E104U
#define DFLT_VAL_NX90_cm4_scs_nvic_iser1    0x00000000U

#define MSK_NX90_cm4_scs_nvic_iser1_setena         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_iser1_setena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_iser1_setena    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_iser1_setena 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_iser1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iser1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iser2 */
/* => Interrupt set-enable register 2 */
/*    Enables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iser2     0x00000108U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iser2 0xE000E108U
#define Adr_NX90_cm4_scs_nvic_iser2         0xE000E108U
#define DFLT_VAL_NX90_cm4_scs_nvic_iser2    0x00000000U

#define MSK_NX90_cm4_scs_nvic_iser2_setena         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_iser2_setena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_iser2_setena    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_iser2_setena 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_iser2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iser2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icer0 */
/* => Interrupt clear-enable register 0 */
/*    Disables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icer0     0x00000180U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icer0 0xE000E180U
#define Adr_NX90_cm4_scs_nvic_icer0         0xE000E180U
#define DFLT_VAL_NX90_cm4_scs_nvic_icer0    0x00000000U

#define MSK_NX90_cm4_scs_nvic_icer0_clrena         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_icer0_clrena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icer0_clrena    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icer0_clrena 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_icer0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icer0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icer1 */
/* => Interrupt clear-enable register 1 */
/*    Disables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icer1     0x00000184U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icer1 0xE000E184U
#define Adr_NX90_cm4_scs_nvic_icer1         0xE000E184U
#define DFLT_VAL_NX90_cm4_scs_nvic_icer1    0x00000000U

#define MSK_NX90_cm4_scs_nvic_icer1_clrena         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_icer1_clrena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icer1_clrena    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icer1_clrena 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_icer1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icer1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icer2 */
/* => Interrupt clear-enable register 2 */
/*    Disables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icer2     0x00000188U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icer2 0xE000E188U
#define Adr_NX90_cm4_scs_nvic_icer2         0xE000E188U
#define DFLT_VAL_NX90_cm4_scs_nvic_icer2    0x00000000U

#define MSK_NX90_cm4_scs_nvic_icer2_clrena         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_icer2_clrena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icer2_clrena    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icer2_clrena 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_icer2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icer2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ispr0 */
/* => Interrupt set-pending register 0 */
/*    For a group of interrupts, changes interrupt status to pending, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ispr0     0x00000200U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ispr0 0xE000E200U
#define Adr_NX90_cm4_scs_nvic_ispr0         0xE000E200U
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr0    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ispr0_setpend         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_ispr0_setpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr0_setpend    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ispr0_setpend 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ispr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ispr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ispr1 */
/* => Interrupt set-pending register 1 */
/*    For a group of interrupts, changes interrupt status to pending, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ispr1     0x00000204U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ispr1 0xE000E204U
#define Adr_NX90_cm4_scs_nvic_ispr1         0xE000E204U
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr1    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ispr1_setpend         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_ispr1_setpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr1_setpend    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ispr1_setpend 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ispr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ispr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ispr2 */
/* => Interrupt set-pending register 2 */
/*    For a group of interrupts, changes interrupt status to pending, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ispr2     0x00000208U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ispr2 0xE000E208U
#define Adr_NX90_cm4_scs_nvic_ispr2         0xE000E208U
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr2    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ispr2_setpend         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_ispr2_setpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr2_setpend    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ispr2_setpend 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ispr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ispr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icpr0 */
/* => Interrupt clear-pending register 0 */
/*    For a group of interrupts, clears the interrupt pending status, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icpr0     0x00000280U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icpr0 0xE000E280U
#define Adr_NX90_cm4_scs_nvic_icpr0         0xE000E280U
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr0    0x00000000U

#define MSK_NX90_cm4_scs_nvic_icpr0_clrpend         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_icpr0_clrpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr0_clrpend    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icpr0_clrpend 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_icpr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icpr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icpr1 */
/* => Interrupt clear-pending register 1 */
/*    For a group of interrupts, clears the interrupt pending status, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icpr1     0x00000284U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icpr1 0xE000E284U
#define Adr_NX90_cm4_scs_nvic_icpr1         0xE000E284U
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr1    0x00000000U

#define MSK_NX90_cm4_scs_nvic_icpr1_clrpend         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_icpr1_clrpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr1_clrpend    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icpr1_clrpend 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_icpr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icpr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icpr2 */
/* => Interrupt clear-pending register 2 */
/*    For a group of interrupts, clears the interrupt pending status, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icpr2     0x00000288U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icpr2 0xE000E288U
#define Adr_NX90_cm4_scs_nvic_icpr2         0xE000E288U
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr2    0x00000000U

#define MSK_NX90_cm4_scs_nvic_icpr2_clrpend         0xffffffffU
#define SRT_NX90_cm4_scs_nvic_icpr2_clrpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr2_clrpend    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icpr2_clrpend 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_icpr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icpr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iabr0 */
/* => Interrupt active bit register 0 */
/*    For a group of 32 interrupts, shows whether each interrupt is active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iabr0     0x00000300U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iabr0 0xE000E300U
#define Adr_NX90_cm4_scs_nvic_iabr0         0xE000E300U

#define MSK_NX90_cm4_scs_nvic_iabr0_active 0xffffffffU
#define SRT_NX90_cm4_scs_nvic_iabr0_active 0

/* all used bits of 'NX90_cm4_scs_nvic_iabr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iabr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iabr1 */
/* => Interrupt active bit register 1 */
/*    For a group of 32 interrupts, shows whether each interrupt is active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iabr1     0x00000304U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iabr1 0xE000E304U
#define Adr_NX90_cm4_scs_nvic_iabr1         0xE000E304U

#define MSK_NX90_cm4_scs_nvic_iabr1_active 0xffffffffU
#define SRT_NX90_cm4_scs_nvic_iabr1_active 0

/* all used bits of 'NX90_cm4_scs_nvic_iabr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iabr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iabr2 */
/* => Interrupt active bit register 2 */
/*    For a group of 32 interrupts, shows whether each interrupt is active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iabr2     0x00000308U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iabr2 0xE000E308U
#define Adr_NX90_cm4_scs_nvic_iabr2         0xE000E308U

#define MSK_NX90_cm4_scs_nvic_iabr2_active 0xffffffffU
#define SRT_NX90_cm4_scs_nvic_iabr2_active 0

/* all used bits of 'NX90_cm4_scs_nvic_iabr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iabr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr0 */
/* => Interrupt priority register 0 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr0     0x00000400U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr0 0xE000E400U
#define Adr_NX90_cm4_scs_nvic_ipr0         0xE000E400U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr1 */
/* => Interrupt priority register 1 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr1     0x00000404U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr1 0xE000E404U
#define Adr_NX90_cm4_scs_nvic_ipr1         0xE000E404U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr2 */
/* => Interrupt priority register 2 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr2     0x00000408U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr2 0xE000E408U
#define Adr_NX90_cm4_scs_nvic_ipr2         0xE000E408U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr3 */
/* => Interrupt priority register 3 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr3     0x0000040CU
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr3 0xE000E40CU
#define Adr_NX90_cm4_scs_nvic_ipr3         0xE000E40CU
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr3': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr4 */
/* => Interrupt priority register 4 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr4     0x00000410U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr4 0xE000E410U
#define Adr_NX90_cm4_scs_nvic_ipr4         0xE000E410U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr4': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr5 */
/* => Interrupt priority register 5 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr5     0x00000414U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr5 0xE000E414U
#define Adr_NX90_cm4_scs_nvic_ipr5         0xE000E414U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr5': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr6 */
/* => Interrupt priority register 6 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr6     0x00000418U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr6 0xE000E418U
#define Adr_NX90_cm4_scs_nvic_ipr6         0xE000E418U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr6': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr7 */
/* => Interrupt priority register 7 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr7     0x0000041CU
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr7 0xE000E41CU
#define Adr_NX90_cm4_scs_nvic_ipr7         0xE000E41CU
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr7': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr8 */
/* => Interrupt priority register 8 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr8     0x00000420U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr8 0xE000E420U
#define Adr_NX90_cm4_scs_nvic_ipr8         0xE000E420U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr8': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr9 */
/* => Interrupt priority register 9 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr9     0x00000424U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr9 0xE000E424U
#define Adr_NX90_cm4_scs_nvic_ipr9         0xE000E424U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr9': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr10 */
/* => Interrupt priority register 10 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr10     0x00000428U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr10 0xE000E428U
#define Adr_NX90_cm4_scs_nvic_ipr10         0xE000E428U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr10': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr11 */
/* => Interrupt priority register 11 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr11     0x0000042CU
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr11 0xE000E42CU
#define Adr_NX90_cm4_scs_nvic_ipr11         0xE000E42CU
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr11': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr12 */
/* => Interrupt priority register 12 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr12     0x00000430U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr12 0xE000E430U
#define Adr_NX90_cm4_scs_nvic_ipr12         0xE000E430U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr12': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr13 */
/* => Interrupt priority register 13 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr13     0x00000434U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr13 0xE000E434U
#define Adr_NX90_cm4_scs_nvic_ipr13         0xE000E434U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr13': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr14 */
/* => Interrupt priority register 14 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr14     0x00000438U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr14 0xE000E438U
#define Adr_NX90_cm4_scs_nvic_ipr14         0xE000E438U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr14': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr15 */
/* => Interrupt priority register 15 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr15     0x0000043CU
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr15 0xE000E43CU
#define Adr_NX90_cm4_scs_nvic_ipr15         0xE000E43CU
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr15': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr16 */
/* => Interrupt priority register 16 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr16     0x00000440U
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr16 0xE000E440U
#define Adr_NX90_cm4_scs_nvic_ipr16         0xE000E440U
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16    0x00000000U

#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n0         0x000000ffU
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n0    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n0 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n1         0x0000ff00U
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n1    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n1 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n2         0x00ff0000U
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n2    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n2 0x00000000U
#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n3         0xff000000U
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n3    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n3 0x00000000U

/* all used bits of 'NX90_cm4_scs_nvic_ipr16': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cpuid */
/* => CPUID base register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cpuid     0x00000D00U
#define Adr_NX90_cm4_scs_cm4_scs_cpuid 0xE000ED00U
#define Adr_NX90_cm4_scs_cpuid         0xE000ED00U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_icsr */
/* => Interrupt control and state register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_icsr     0x00000D04U
#define Adr_NX90_cm4_scs_cm4_scs_icsr 0xE000ED04U
#define Adr_NX90_cm4_scs_icsr         0xE000ED04U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_vtor */
/* => Vector table offset register */
/*    Holds the vector table address. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_vtor     0x00000D08U
#define Adr_NX90_cm4_scs_cm4_scs_vtor 0xE000ED08U
#define Adr_NX90_cm4_scs_vtor         0xE000ED08U
#define DFLT_VAL_NX90_cm4_scs_vtor    0x00000000U

#define MSK_NX90_cm4_scs_vtor_tbloff         0xffffff80U
#define SRT_NX90_cm4_scs_vtor_tbloff         7
#define DFLT_VAL_NX90_cm4_scs_vtor_tbloff    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_vtor_tbloff 0x00000000U

/* all used bits of 'NX90_cm4_scs_vtor': */
#define MSK_USED_BITS_NX90_cm4_scs_vtor 0xffffff80U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_aircr */
/* => Application interrupt and reset control reister */
/*    Sets or returns interrupt control data. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_aircr     0x00000D0CU
#define Adr_NX90_cm4_scs_cm4_scs_aircr 0xE000ED0CU
#define Adr_NX90_cm4_scs_aircr         0xE000ED0CU
#define DFLT_VAL_NX90_cm4_scs_aircr    0xfa050000U

#define MSK_NX90_cm4_scs_aircr_vectreset             0x00000001U
#define SRT_NX90_cm4_scs_aircr_vectreset             0
#define DFLT_VAL_NX90_cm4_scs_aircr_vectreset        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_vectreset     0x00000000U
#define MSK_NX90_cm4_scs_aircr_vectclractive         0x00000002U
#define SRT_NX90_cm4_scs_aircr_vectclractive         1
#define DFLT_VAL_NX90_cm4_scs_aircr_vectclractive    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_vectclractive 0x00000000U
#define MSK_NX90_cm4_scs_aircr_sysresetreq           0x00000004U
#define SRT_NX90_cm4_scs_aircr_sysresetreq           2
#define DFLT_VAL_NX90_cm4_scs_aircr_sysresetreq      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_sysresetreq   0x00000000U
#define MSK_NX90_cm4_scs_aircr_prigroup              0x00000700U
#define SRT_NX90_cm4_scs_aircr_prigroup              8
#define DFLT_VAL_NX90_cm4_scs_aircr_prigroup         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_prigroup      0x00000000U
#define MSK_NX90_cm4_scs_aircr_endianness            0x00008000U
#define SRT_NX90_cm4_scs_aircr_endianness            15
#define DFLT_VAL_NX90_cm4_scs_aircr_endianness       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_endianness    0x00000000U
#define MSK_NX90_cm4_scs_aircr_vectkey               0xffff0000U
#define SRT_NX90_cm4_scs_aircr_vectkey               16
#define DFLT_VAL_NX90_cm4_scs_aircr_vectkey          0xfa050000U
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_vectkey       0x0000fa05U

/* all used bits of 'NX90_cm4_scs_aircr': */
#define MSK_USED_BITS_NX90_cm4_scs_aircr 0xffff8707U/* --------------------------------------------------------------------- */
/* Register cm4_scs_scr */
/* => System control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_scr     0x00000D10U
#define Adr_NX90_cm4_scs_cm4_scs_scr 0xE000ED10U
#define Adr_NX90_cm4_scs_scr         0xE000ED10U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_ccr */
/* => Configuration and control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_ccr     0x00000D14U
#define Adr_NX90_cm4_scs_cm4_scs_ccr 0xE000ED14U
#define Adr_NX90_cm4_scs_ccr         0xE000ED14U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shpr1 */
/* => System Handler Priority Register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shpr1     0x00000D18U
#define Adr_NX90_cm4_scs_cm4_scs_shpr1 0xE000ED18U
#define Adr_NX90_cm4_scs_shpr1         0xE000ED18U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shpr2 */
/* => System Handler Priority Register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shpr2     0x00000D1CU
#define Adr_NX90_cm4_scs_cm4_scs_shpr2 0xE000ED1CU
#define Adr_NX90_cm4_scs_shpr2         0xE000ED1CU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shpr3 */
/* => System Handler Priority Register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shpr3     0x00000D20U
#define Adr_NX90_cm4_scs_cm4_scs_shpr3 0xE000ED20U
#define Adr_NX90_cm4_scs_shpr3         0xE000ED20U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shcsr */
/* => System Handler Control and State Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shcsr     0x00000D24U
#define Adr_NX90_cm4_scs_cm4_scs_shcsr 0xE000ED24U
#define Adr_NX90_cm4_scs_shcsr         0xE000ED24U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cfsr */
/* => Configurable Fault Status Register */
/*    Contains the three Configurable Fault Status Registers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cfsr     0x00000D28U
#define Adr_NX90_cm4_scs_cm4_scs_cfsr 0xE000ED28U
#define Adr_NX90_cm4_scs_cfsr         0xE000ED28U
#define DFLT_VAL_NX90_cm4_scs_cfsr    0x00000000U

#define MSK_NX90_cm4_scs_cfsr_mmfsr_iaccviol           0x00000001U
#define SRT_NX90_cm4_scs_cfsr_mmfsr_iaccviol           0
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_iaccviol      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_iaccviol   0x00000000U
#define MSK_NX90_cm4_scs_cfsr_mmfsr_daccviol           0x00000002U
#define SRT_NX90_cm4_scs_cfsr_mmfsr_daccviol           1
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_daccviol      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_daccviol   0x00000000U
#define MSK_NX90_cm4_scs_cfsr_mmfsr_munstkerr          0x00000008U
#define SRT_NX90_cm4_scs_cfsr_mmfsr_munstkerr          3
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_munstkerr     0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_munstkerr  0x00000000U
#define MSK_NX90_cm4_scs_cfsr_mmfsr_mstkerr            0x00000010U
#define SRT_NX90_cm4_scs_cfsr_mmfsr_mstkerr            4
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_mstkerr       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_mstkerr    0x00000000U
#define MSK_NX90_cm4_scs_cfsr_mmfsr_lsperr             0x00000020U
#define SRT_NX90_cm4_scs_cfsr_mmfsr_lsperr             5
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_lsperr        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_lsperr     0x00000000U
#define MSK_NX90_cm4_scs_cfsr_mmfsr_mmarvalid          0x00000080U
#define SRT_NX90_cm4_scs_cfsr_mmfsr_mmarvalid          7
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_mmarvalid     0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_mmarvalid  0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_ibuserr             0x00000100U
#define SRT_NX90_cm4_scs_cfsr_bfsr_ibuserr             8
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_ibuserr        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_ibuserr     0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_preciserr           0x00000200U
#define SRT_NX90_cm4_scs_cfsr_bfsr_preciserr           9
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_preciserr      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_preciserr   0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_impreciserr         0x00000400U
#define SRT_NX90_cm4_scs_cfsr_bfsr_impreciserr         10
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_impreciserr    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_impreciserr 0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_unstkerr            0x00000800U
#define SRT_NX90_cm4_scs_cfsr_bfsr_unstkerr            11
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_unstkerr       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_unstkerr    0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_stkerr              0x00001000U
#define SRT_NX90_cm4_scs_cfsr_bfsr_stkerr              12
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_stkerr         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_stkerr      0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_lsperr              0x00002000U
#define SRT_NX90_cm4_scs_cfsr_bfsr_lsperr              13
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_lsperr         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_lsperr      0x00000000U
#define MSK_NX90_cm4_scs_cfsr_bfsr_bfarvalid           0x00008000U
#define SRT_NX90_cm4_scs_cfsr_bfsr_bfarvalid           15
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_bfarvalid      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_bfarvalid   0x00000000U
#define MSK_NX90_cm4_scs_cfsr_ufsr_undefinstr          0x00010000U
#define SRT_NX90_cm4_scs_cfsr_ufsr_undefinstr          16
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_undefinstr     0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_undefinstr  0x00000000U
#define MSK_NX90_cm4_scs_cfsr_ufsr_invstate            0x00020000U
#define SRT_NX90_cm4_scs_cfsr_ufsr_invstate            17
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_invstate       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_invstate    0x00000000U
#define MSK_NX90_cm4_scs_cfsr_ufsr_invpc               0x00040000U
#define SRT_NX90_cm4_scs_cfsr_ufsr_invpc               18
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_invpc          0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_invpc       0x00000000U
#define MSK_NX90_cm4_scs_cfsr_ufsr_nocp                0x00080000U
#define SRT_NX90_cm4_scs_cfsr_ufsr_nocp                19
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_nocp           0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_nocp        0x00000000U
#define MSK_NX90_cm4_scs_cfsr_ufsr_unaligned           0x01000000U
#define SRT_NX90_cm4_scs_cfsr_ufsr_unaligned           24
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_unaligned      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_unaligned   0x00000000U
#define MSK_NX90_cm4_scs_cfsr_ufsr_divbyzero           0x02000000U
#define SRT_NX90_cm4_scs_cfsr_ufsr_divbyzero           25
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_divbyzero      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_divbyzero   0x00000000U

/* all used bits of 'NX90_cm4_scs_cfsr': */
#define MSK_USED_BITS_NX90_cm4_scs_cfsr 0x030fbfbbU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_hfsr */
/* => HardFault Status Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_hfsr     0x00000D2CU
#define Adr_NX90_cm4_scs_cm4_scs_hfsr 0xE000ED2CU
#define Adr_NX90_cm4_scs_hfsr         0xE000ED2CU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dfsr */
/* => Debug fault status Register */
/*    Shows which debug event occurred. */
/*    Note: Writing 1 to a register bit clears the bit to 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dfsr     0x00000D30U
#define Adr_NX90_cm4_scs_cm4_scs_dfsr 0xE000ED30U
#define Adr_NX90_cm4_scs_dfsr         0xE000ED30U
#define DFLT_VAL_NX90_cm4_scs_dfsr    0x00000000U

#define MSK_NX90_cm4_scs_dfsr_halted           0x00000001U
#define SRT_NX90_cm4_scs_dfsr_halted           0
#define DFLT_VAL_NX90_cm4_scs_dfsr_halted      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_halted   0x00000000U
#define MSK_NX90_cm4_scs_dfsr_bkpt             0x00000002U
#define SRT_NX90_cm4_scs_dfsr_bkpt             1
#define DFLT_VAL_NX90_cm4_scs_dfsr_bkpt        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_bkpt     0x00000000U
#define MSK_NX90_cm4_scs_dfsr_dwttrap          0x00000004U
#define SRT_NX90_cm4_scs_dfsr_dwttrap          2
#define DFLT_VAL_NX90_cm4_scs_dfsr_dwttrap     0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_dwttrap  0x00000000U
#define MSK_NX90_cm4_scs_dfsr_vcatch           0x00000008U
#define SRT_NX90_cm4_scs_dfsr_vcatch           3
#define DFLT_VAL_NX90_cm4_scs_dfsr_vcatch      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_vcatch   0x00000000U
#define MSK_NX90_cm4_scs_dfsr_external         0x00000010U
#define SRT_NX90_cm4_scs_dfsr_external         4
#define DFLT_VAL_NX90_cm4_scs_dfsr_external    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_external 0x00000000U

/* all used bits of 'NX90_cm4_scs_dfsr': */
#define MSK_USED_BITS_NX90_cm4_scs_dfsr 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_mmfar */
/* => MemManage Faul Address Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_mmfar     0x00000D34U
#define Adr_NX90_cm4_scs_cm4_scs_mmfar 0xE000ED34U
#define Adr_NX90_cm4_scs_mmfar         0xE000ED34U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_bfar */
/* => BusFault Address Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_bfar     0x00000D38U
#define Adr_NX90_cm4_scs_cm4_scs_bfar 0xE000ED38U
#define Adr_NX90_cm4_scs_bfar         0xE000ED38U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_afsr */
/* => Auxiliary Fault Status Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_afsr     0x00000D3CU
#define Adr_NX90_cm4_scs_cm4_scs_afsr 0xE000ED3CU
#define Adr_NX90_cm4_scs_afsr         0xE000ED3CU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cpacr */
/* => Coprocessor Access Control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cpacr     0x00000D88U
#define Adr_NX90_cm4_scs_cm4_scs_cpacr 0xE000ED88U
#define Adr_NX90_cm4_scs_cpacr         0xE000ED88U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dhcsr */
/* => Debug halting control and status register */
/*    Controls halting debug. */
/*    Note: On writes bits 31-16 (dbgkey) must be set to 0xA05F. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dhcsr     0x00000DF0U
#define Adr_NX90_cm4_scs_cm4_scs_dhcsr 0xE000EDF0U
#define Adr_NX90_cm4_scs_dhcsr         0xE000EDF0U
#define DFLT_VAL_NX90_cm4_scs_dhcsr    0x00000000U

#define MSK_NX90_cm4_scs_dhcsr_c_debugen           0x00000001U
#define SRT_NX90_cm4_scs_dhcsr_c_debugen           0
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_debugen      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_debugen   0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_c_halt              0x00000002U
#define SRT_NX90_cm4_scs_dhcsr_c_halt              1
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_halt         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_halt      0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_c_step              0x00000004U
#define SRT_NX90_cm4_scs_dhcsr_c_step              2
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_step         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_step      0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_c_maskints          0x00000008U
#define SRT_NX90_cm4_scs_dhcsr_c_maskints          3
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_maskints     0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_maskints  0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_c_snapstall         0x00000020U
#define SRT_NX90_cm4_scs_dhcsr_c_snapstall         5
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_snapstall    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_snapstall 0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_s_regrdy            0x00010000U
#define SRT_NX90_cm4_scs_dhcsr_s_regrdy            16
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_regrdy       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_regrdy    0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_s_halt              0x00020000U
#define SRT_NX90_cm4_scs_dhcsr_s_halt              17
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_halt         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_halt      0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_s_sleep             0x00040000U
#define SRT_NX90_cm4_scs_dhcsr_s_sleep             18
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_sleep        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_sleep     0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_s_lockup            0x00080000U
#define SRT_NX90_cm4_scs_dhcsr_s_lockup            19
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_lockup       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_lockup    0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_s_retire_st         0x01000000U
#define SRT_NX90_cm4_scs_dhcsr_s_retire_st         24
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_retire_st    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_retire_st 0x00000000U
#define MSK_NX90_cm4_scs_dhcsr_s_reset_st          0x02000000U
#define SRT_NX90_cm4_scs_dhcsr_s_reset_st          25
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_reset_st     0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_reset_st  0x00000000U

/* all used bits of 'NX90_cm4_scs_dhcsr': */
#define MSK_USED_BITS_NX90_cm4_scs_dhcsr 0x030f002fU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dcrsr */
/* => Debug core register selector register */
/*    With the DCRDR, the DCRSR provides debug access to the ARM core registers, special-purpose registers, and \ */
/*    Floating-point extension registers. A write to DCRSR specifies the register to transfer, \ */
/*    whether the transfer is a read or a write, and starts the transfer. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dcrsr     0x00000DF4U
#define Adr_NX90_cm4_scs_cm4_scs_dcrsr 0xE000EDF4U
#define Adr_NX90_cm4_scs_dcrsr         0xE000EDF4U
#define DFLT_VAL_NX90_cm4_scs_dcrsr    0x00000000U

#define MSK_NX90_cm4_scs_dcrsr_regsel         0x0000007fU
#define SRT_NX90_cm4_scs_dcrsr_regsel         0
#define DFLT_VAL_NX90_cm4_scs_dcrsr_regsel    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dcrsr_regsel 0x00000000U
#define MSK_NX90_cm4_scs_dcrsr_regwnr         0x00010000U
#define SRT_NX90_cm4_scs_dcrsr_regwnr         16
#define DFLT_VAL_NX90_cm4_scs_dcrsr_regwnr    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dcrsr_regwnr 0x00000000U

/* all used bits of 'NX90_cm4_scs_dcrsr': */
#define MSK_USED_BITS_NX90_cm4_scs_dcrsr 0x0001007fU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dcrdr */
/* => Debug core register data register */
/*    With the DCRSR, the DCRDR provides debug access to the ARM core registers, \ */
/*    special-purpose registers, and Floating-point extension registers. The DCRDR is the \ */
/*    data register for these accesses. */
/*    Used on its own, the DCRDR provides a message passing resource between an \ */
/*    external debugger and a debug agent running on the processor. */
/*    Note: The architecture does not define any handshaking mechanism for this use of DCRDR. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dcrdr     0x00000DF8U
#define Adr_NX90_cm4_scs_cm4_scs_dcrdr 0xE000EDF8U
#define Adr_NX90_cm4_scs_dcrdr         0xE000EDF8U
#define DFLT_VAL_NX90_cm4_scs_dcrdr    0x00000000U

#define MSK_NX90_cm4_scs_dcrdr_dbgtmp         0xffffffffU
#define SRT_NX90_cm4_scs_dcrdr_dbgtmp         0
#define DFLT_VAL_NX90_cm4_scs_dcrdr_dbgtmp    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_dcrdr_dbgtmp 0x00000000U

/* all used bits of 'NX90_cm4_scs_dcrdr': */
#define MSK_USED_BITS_NX90_cm4_scs_dcrdr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_demcr */
/* => Debug exception and monitor control register */
/*    Manages vector catch behavior and DebugMonitor handling when debugging. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_demcr     0x00000DFCU
#define Adr_NX90_cm4_scs_cm4_scs_demcr 0xE000EDFCU
#define Adr_NX90_cm4_scs_demcr         0xE000EDFCU
#define DFLT_VAL_NX90_cm4_scs_demcr    0x00000000U

#define MSK_NX90_cm4_scs_demcr_vc_corereset         0x00000001U
#define SRT_NX90_cm4_scs_demcr_vc_corereset         0
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_corereset    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_corereset 0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_mmerr             0x00000010U
#define SRT_NX90_cm4_scs_demcr_vc_mmerr             4
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_mmerr        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_mmerr     0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_nocperr           0x00000020U
#define SRT_NX90_cm4_scs_demcr_vc_nocperr           5
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_nocperr      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_nocperr   0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_chkerr            0x00000040U
#define SRT_NX90_cm4_scs_demcr_vc_chkerr            6
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_chkerr       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_chkerr    0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_staterr           0x00000080U
#define SRT_NX90_cm4_scs_demcr_vc_staterr           7
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_staterr      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_staterr   0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_buserr            0x00000100U
#define SRT_NX90_cm4_scs_demcr_vc_buserr            8
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_buserr       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_buserr    0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_interr            0x00000200U
#define SRT_NX90_cm4_scs_demcr_vc_interr            9
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_interr       0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_interr    0x00000000U
#define MSK_NX90_cm4_scs_demcr_vc_harderr           0x00000400U
#define SRT_NX90_cm4_scs_demcr_vc_harderr           10
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_harderr      0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_harderr   0x00000000U
#define MSK_NX90_cm4_scs_demcr_mon_en               0x00010000U
#define SRT_NX90_cm4_scs_demcr_mon_en               16
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_en          0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_en       0x00000000U
#define MSK_NX90_cm4_scs_demcr_mon_pend             0x00020000U
#define SRT_NX90_cm4_scs_demcr_mon_pend             17
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_pend        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_pend     0x00000000U
#define MSK_NX90_cm4_scs_demcr_mon_step             0x00040000U
#define SRT_NX90_cm4_scs_demcr_mon_step             18
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_step        0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_step     0x00000000U
#define MSK_NX90_cm4_scs_demcr_mon_req              0x00080000U
#define SRT_NX90_cm4_scs_demcr_mon_req              19
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_req         0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_req      0x00000000U
#define MSK_NX90_cm4_scs_demcr_trcena               0x01000000U
#define SRT_NX90_cm4_scs_demcr_trcena               24
#define DFLT_VAL_NX90_cm4_scs_demcr_trcena          0x00000000U
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_trcena       0x00000000U

/* all used bits of 'NX90_cm4_scs_demcr': */
#define MSK_USED_BITS_NX90_cm4_scs_demcr 0x010f07f1U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr4 */
/* => Peripheral ID Register 4 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr4     0x00000FD0U
#define Adr_NX90_cm4_scs_cm4_scs_pidr4 0xE000EFD0U
#define Adr_NX90_cm4_scs_pidr4         0xE000EFD0U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr0 */
/* => Peripheral ID Register 0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr0     0x00000FE0U
#define Adr_NX90_cm4_scs_cm4_scs_pidr0 0xE000EFE0U
#define Adr_NX90_cm4_scs_pidr0         0xE000EFE0U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr1 */
/* => Peripheral ID Register 1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr1     0x00000FE4U
#define Adr_NX90_cm4_scs_cm4_scs_pidr1 0xE000EFE4U
#define Adr_NX90_cm4_scs_pidr1         0xE000EFE4U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr2 */
/* => Peripheral ID Register 2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr2     0x00000FE8U
#define Adr_NX90_cm4_scs_cm4_scs_pidr2 0xE000EFE8U
#define Adr_NX90_cm4_scs_pidr2         0xE000EFE8U

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr3 */
/* => Peripheral ID Register 3 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr3     0x00000FECU
#define Adr_NX90_cm4_scs_cm4_scs_pidr3 0xE000EFECU
#define Adr_NX90_cm4_scs_pidr3         0xE000EFECU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr0 */
/* => Component ID Register 0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr0     0x00000FF0U
#define Adr_NX90_cm4_scs_cm4_scs_cidr0 0xE000EFF0U
#define Adr_NX90_cm4_scs_cidr0         0xE000EFF0U

#define MSK_NX90_cm4_scs_cidr0_prmbl_0 0x000000ffU
#define SRT_NX90_cm4_scs_cidr0_prmbl_0 0

/* all used bits of 'NX90_cm4_scs_cidr0': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr0 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr1 */
/* => Component ID Register 1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr1     0x00000FF4U
#define Adr_NX90_cm4_scs_cm4_scs_cidr1 0xE000EFF4U
#define Adr_NX90_cm4_scs_cidr1         0xE000EFF4U

#define MSK_NX90_cm4_scs_cidr1_prmbl_1 0x0000000fU
#define SRT_NX90_cm4_scs_cidr1_prmbl_1 0
#define MSK_NX90_cm4_scs_cidr1_class   0x000000f0U
#define SRT_NX90_cm4_scs_cidr1_class   4

/* all used bits of 'NX90_cm4_scs_cidr1': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr1 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr2 */
/* => Component ID Register 2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr2     0x00000FF8U
#define Adr_NX90_cm4_scs_cm4_scs_cidr2 0xE000EFF8U
#define Adr_NX90_cm4_scs_cidr2         0xE000EFF8U

#define MSK_NX90_cm4_scs_cidr2_prmbl_2 0x000000ffU
#define SRT_NX90_cm4_scs_cidr2_prmbl_2 0

/* all used bits of 'NX90_cm4_scs_cidr2': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr2 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr3 */
/* => Component ID Register 3 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr3     0x00000FFCU
#define Adr_NX90_cm4_scs_cm4_scs_cidr3 0xE000EFFCU
#define Adr_NX90_cm4_scs_cidr3         0xE000EFFCU

#define MSK_NX90_cm4_scs_cidr3_prmbl_3 0x000000ffU
#define SRT_NX90_cm4_scs_cidr3_prmbl_3 0

/* all used bits of 'NX90_cm4_scs_cidr3': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr3 0x000000ffU

/* ===================================================================== */

/* Area of cm4_etm */

/* ===================================================================== */

#define Addr_NX90_cm4_etm 0xE0041000U

/* ===================================================================== */

/* Area of cm4_cti */

/* ===================================================================== */

#define Addr_NX90_cm4_cti 0xE0042000U

/* ===================================================================== */

/* Area of cm4_misc_ctrl */

/* ===================================================================== */

#define Addr_NX90_cm4_misc_ctrl 0xE0043000U

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_cpu_info */
/* => CPU information register */
/*    Provides a processor identification mechanism to distinguish between Com ARM and App ARM. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_cpu_info           0x00000000U
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_cpu_info 0xE0043000U
#define Adr_NX90_cm4_misc_ctrl_cpu_info               0xE0043000U

#define MSK_NX90_cm4_misc_ctrl_cpu_info_id  0x00000001U
#define SRT_NX90_cm4_misc_ctrl_cpu_info_id  0
#define MSK_NX90_cm4_misc_ctrl_cpu_info_fpu 0x00000002U
#define SRT_NX90_cm4_misc_ctrl_cpu_info_fpu 1

/* all used bits of 'NX90_cm4_misc_ctrl_cpu_info': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_cpu_info 0x00000003U

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_raw */
/* => FPU raw IRQ */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    Note: Before clearing an IRQ in this register, the corresponding exception status must be cleared within the FPU. Otherwise */
/*    the IRQ will be re-asserted immediately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_raw           0x00000004U
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_raw 0xE0043004U
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_raw               0xE0043004U
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw          0x00000000U

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc         0x00000001U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc         0
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc         0x00000002U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc         1
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc         0x00000004U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc         2
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc         0x00000008U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc         3
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc         0x00000010U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc         4
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_idc         0x00000020U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_idc         5
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_idc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_idc 0x00000000U

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_raw': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_raw 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_masked */
/* => FPU masked IRQ */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_masked           0x00000008U
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_masked 0xE0043008U
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_masked               0xE0043008U

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ixc 0x00000001U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ixc 0
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ufc 0x00000002U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ufc 1
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ofc 0x00000004U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ofc 2
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_dzc 0x00000008U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_dzc 3
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ioc 0x00000010U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ioc 4
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_idc 0x00000020U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_idc 5

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_masked': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_masked 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_msk_set */
/* => FPU IRQ mask set */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to cm4_misc_ctrl_fpu_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_set           0x0000000CU
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_msk_set 0xE004300CU
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_set               0xE004300CU
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set          0x00000000U

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc         0x00000001U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc         0
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc         0x00000002U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc         1
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc         0x00000004U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc         2
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc         0x00000008U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc         3
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc         0x00000010U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc         4
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc         0x00000020U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc         5
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc 0x00000000U

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_msk_set': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_msk_set 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_msk_reset */
/* => FPU IRQ mask reset */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_reset           0x00000010U
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_msk_reset 0xE0043010U
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_reset               0xE0043010U
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset          0x00000000U

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc         0x00000001U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc         0
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc         0x00000002U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc         1
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc         0x00000004U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc         2
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc         0x00000008U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc         3
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc         0x00000010U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc         4
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc 0x00000000U
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc         0x00000020U
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc         5
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc    0x00000000U
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc 0x00000000U

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_msk_reset': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_msk_reset 0x0000003fU


/* ===================================================================== */

/* AREA intlogic */
/* Area of intlogic_com */

/* ===================================================================== */

#define Addr_NX90_intlogic_com 0xFF000000U

/* ===================================================================== */

/* AREA dmac */
/* Area of dmac, dmac_com, dmac_app */

/* ===================================================================== */

#define Addr_NX90_dmac     0xFF000000U
#define Addr_NX90_dmac_com 0xFF000000U
#define Addr_NX90_dmac_app 0xFF800000U

/* ===================================================================== */

/* Area of dmac_ch0 */

/* ===================================================================== */

#define Addr_NX90_dmac_ch0 0xFF000100U

/* ===================================================================== */

/* AREA dmac_ch */
/* Area of dmac_com_ch0, dmac_com_ch1, dmac_com_ch2, dmac_app_ch0, dmac_app_ch1, dmac_app_ch2 */

/* ===================================================================== */

#define Addr_NX90_dmac_com_ch0 0xFF000100U
#define Addr_NX90_dmac_com_ch1 0xFF000120U
#define Addr_NX90_dmac_com_ch2 0xFF000140U
#define Addr_NX90_dmac_app_ch0 0xFF800100U
#define Addr_NX90_dmac_app_ch1 0xFF800120U
#define Addr_NX90_dmac_app_ch2 0xFF800140U

/* --------------------------------------------------------------------- */
/* Register dmac_chsrc_ad */
/* => channel source address registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chsrc_ad          0x00000000U
#define Adr_NX90_dmac_com_ch0_dmac_chsrc_ad 0xFF000100U
#define Adr_NX90_dmac_com_ch1_dmac_chsrc_ad 0xFF000120U
#define Adr_NX90_dmac_com_ch2_dmac_chsrc_ad 0xFF000140U
#define Adr_NX90_dmac_app_ch0_dmac_chsrc_ad 0xFF800100U
#define Adr_NX90_dmac_app_ch1_dmac_chsrc_ad 0xFF800120U
#define Adr_NX90_dmac_app_ch2_dmac_chsrc_ad 0xFF800140U
#define DFLT_VAL_NX90_dmac_chsrc_ad         0x00000000U

#define MSK_NX90_dmac_chsrc_ad_DMACCHSRCADDR         0xffffffffU
#define SRT_NX90_dmac_chsrc_ad_DMACCHSRCADDR         0
#define DFLT_VAL_NX90_dmac_chsrc_ad_DMACCHSRCADDR    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chsrc_ad_DMACCHSRCADDR 0x00000000U

/* all used bits of 'NX90_dmac_chsrc_ad': */
#define MSK_USED_BITS_NX90_dmac_chsrc_ad 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dmac_chdest_ad */
/* => channel destination address registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chdest_ad          0x00000004U
#define Adr_NX90_dmac_com_ch0_dmac_chdest_ad 0xFF000104U
#define Adr_NX90_dmac_com_ch1_dmac_chdest_ad 0xFF000124U
#define Adr_NX90_dmac_com_ch2_dmac_chdest_ad 0xFF000144U
#define Adr_NX90_dmac_app_ch0_dmac_chdest_ad 0xFF800104U
#define Adr_NX90_dmac_app_ch1_dmac_chdest_ad 0xFF800124U
#define Adr_NX90_dmac_app_ch2_dmac_chdest_ad 0xFF800144U
#define DFLT_VAL_NX90_dmac_chdest_ad         0x00000000U

#define MSK_NX90_dmac_chdest_ad_DMACCHDESTADDR         0xffffffffU
#define SRT_NX90_dmac_chdest_ad_DMACCHDESTADDR         0
#define DFLT_VAL_NX90_dmac_chdest_ad_DMACCHDESTADDR    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chdest_ad_DMACCHDESTADDR 0x00000000U

/* all used bits of 'NX90_dmac_chdest_ad': */
#define MSK_USED_BITS_NX90_dmac_chdest_ad 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dmac_chlink */
/* => channel linked list item register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chlink          0x00000008U
#define Adr_NX90_dmac_com_ch0_dmac_chlink 0xFF000108U
#define Adr_NX90_dmac_com_ch1_dmac_chlink 0xFF000128U
#define Adr_NX90_dmac_com_ch2_dmac_chlink 0xFF000148U
#define Adr_NX90_dmac_app_ch0_dmac_chlink 0xFF800108U
#define Adr_NX90_dmac_app_ch1_dmac_chlink 0xFF800128U
#define Adr_NX90_dmac_app_ch2_dmac_chlink 0xFF800148U
#define DFLT_VAL_NX90_dmac_chlink         0x00000000U

#define MSK_NX90_dmac_chlink_LLIADDR         0xfffffffcU
#define SRT_NX90_dmac_chlink_LLIADDR         2
#define DFLT_VAL_NX90_dmac_chlink_LLIADDR    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chlink_LLIADDR 0x00000000U

/* all used bits of 'NX90_dmac_chlink': */
#define MSK_USED_BITS_NX90_dmac_chlink 0xfffffffcU

/* --------------------------------------------------------------------- */
/* Register dmac_chctrl */
/* => channel control registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chctrl          0x0000000CU
#define Adr_NX90_dmac_com_ch0_dmac_chctrl 0xFF00010CU
#define Adr_NX90_dmac_com_ch1_dmac_chctrl 0xFF00012CU
#define Adr_NX90_dmac_com_ch2_dmac_chctrl 0xFF00014CU
#define Adr_NX90_dmac_app_ch0_dmac_chctrl 0xFF80010CU
#define Adr_NX90_dmac_app_ch1_dmac_chctrl 0xFF80012CU
#define Adr_NX90_dmac_app_ch2_dmac_chctrl 0xFF80014CU
#define DFLT_VAL_NX90_dmac_chctrl         0x00000000U

#define MSK_NX90_dmac_chctrl_TransferSize         0x00000fffU
#define SRT_NX90_dmac_chctrl_TransferSize         0
#define DFLT_VAL_NX90_dmac_chctrl_TransferSize    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_TransferSize 0x00000000U
#define MSK_NX90_dmac_chctrl_SBSize               0x00007000U
#define SRT_NX90_dmac_chctrl_SBSize               12
#define DFLT_VAL_NX90_dmac_chctrl_SBSize          0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_SBSize       0x00000000U
#define MSK_NX90_dmac_chctrl_DBSize               0x00038000U
#define SRT_NX90_dmac_chctrl_DBSize               15
#define DFLT_VAL_NX90_dmac_chctrl_DBSize          0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_DBSize       0x00000000U
#define MSK_NX90_dmac_chctrl_SWidth               0x001c0000U
#define SRT_NX90_dmac_chctrl_SWidth               18
#define DFLT_VAL_NX90_dmac_chctrl_SWidth          0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_SWidth       0x00000000U
#define MSK_NX90_dmac_chctrl_DWidth               0x00e00000U
#define SRT_NX90_dmac_chctrl_DWidth               21
#define DFLT_VAL_NX90_dmac_chctrl_DWidth          0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_DWidth       0x00000000U
#define MSK_NX90_dmac_chctrl_ARM_EQ               0x01000000U
#define SRT_NX90_dmac_chctrl_ARM_EQ               24
#define DFLT_VAL_NX90_dmac_chctrl_ARM_EQ          0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_ARM_EQ       0x00000000U
#define MSK_NX90_dmac_chctrl_SI                   0x04000000U
#define SRT_NX90_dmac_chctrl_SI                   26
#define DFLT_VAL_NX90_dmac_chctrl_SI              0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_SI           0x00000000U
#define MSK_NX90_dmac_chctrl_DI                   0x08000000U
#define SRT_NX90_dmac_chctrl_DI                   27
#define DFLT_VAL_NX90_dmac_chctrl_DI              0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_DI           0x00000000U
#define MSK_NX90_dmac_chctrl_Prot                 0x70000000U
#define SRT_NX90_dmac_chctrl_Prot                 28
#define DFLT_VAL_NX90_dmac_chctrl_Prot            0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_Prot         0x00000000U
#define MSK_NX90_dmac_chctrl_I                    0x80000000U
#define SRT_NX90_dmac_chctrl_I                    31
#define DFLT_VAL_NX90_dmac_chctrl_I               0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chctrl_I            0x00000000U

/* all used bits of 'NX90_dmac_chctrl': */
#define MSK_USED_BITS_NX90_dmac_chctrl 0xfdffffffU

/* --------------------------------------------------------------------- */
/* Register dmac_chcfg */
/* => channel configuration registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chcfg          0x00000010U
#define Adr_NX90_dmac_com_ch0_dmac_chcfg 0xFF000110U
#define Adr_NX90_dmac_com_ch1_dmac_chcfg 0xFF000130U
#define Adr_NX90_dmac_com_ch2_dmac_chcfg 0xFF000150U
#define Adr_NX90_dmac_app_ch0_dmac_chcfg 0xFF800110U
#define Adr_NX90_dmac_app_ch1_dmac_chcfg 0xFF800130U
#define Adr_NX90_dmac_app_ch2_dmac_chcfg 0xFF800150U
#define DFLT_VAL_NX90_dmac_chcfg         0x00000000U

#define MSK_NX90_dmac_chcfg_E                      0x00000001U
#define SRT_NX90_dmac_chcfg_E                      0
#define DFLT_VAL_NX90_dmac_chcfg_E                 0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_E              0x00000000U
#define MSK_NX90_dmac_chcfg_SrcPeripheral          0x0000001eU
#define SRT_NX90_dmac_chcfg_SrcPeripheral          1
#define DFLT_VAL_NX90_dmac_chcfg_SrcPeripheral     0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_SrcPeripheral  0x00000000U
#define MSK_NX90_dmac_chcfg_DestPeripheral         0x000003c0U
#define SRT_NX90_dmac_chcfg_DestPeripheral         6
#define DFLT_VAL_NX90_dmac_chcfg_DestPeripheral    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_DestPeripheral 0x00000000U
#define MSK_NX90_dmac_chcfg_FlowCntrl              0x00003800U
#define SRT_NX90_dmac_chcfg_FlowCntrl              11
#define DFLT_VAL_NX90_dmac_chcfg_FlowCntrl         0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_FlowCntrl      0x00000000U
#define MSK_NX90_dmac_chcfg_IE                     0x00004000U
#define SRT_NX90_dmac_chcfg_IE                     14
#define DFLT_VAL_NX90_dmac_chcfg_IE                0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_IE             0x00000000U
#define MSK_NX90_dmac_chcfg_ITC                    0x00008000U
#define SRT_NX90_dmac_chcfg_ITC                    15
#define DFLT_VAL_NX90_dmac_chcfg_ITC               0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_ITC            0x00000000U
#define MSK_NX90_dmac_chcfg_L                      0x00010000U
#define SRT_NX90_dmac_chcfg_L                      16
#define DFLT_VAL_NX90_dmac_chcfg_L                 0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_L              0x00000000U
#define MSK_NX90_dmac_chcfg_A                      0x00020000U
#define SRT_NX90_dmac_chcfg_A                      17
#define DFLT_VAL_NX90_dmac_chcfg_A                 0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_A              0x00000000U
#define MSK_NX90_dmac_chcfg_H                      0x00040000U
#define SRT_NX90_dmac_chcfg_H                      18
#define DFLT_VAL_NX90_dmac_chcfg_H                 0x00000000U
#define DFLT_BF_VAL_NX90_dmac_chcfg_H              0x00000000U

/* all used bits of 'NX90_dmac_chcfg': */
#define MSK_USED_BITS_NX90_dmac_chcfg 0x0007fbdfU


/* ===================================================================== */

/* Area of dmac_ch1 */

/* ===================================================================== */

#define Addr_NX90_dmac_ch1 0xFF000120U

/* ===================================================================== */

/* Area of dmac_ch2 */

/* ===================================================================== */

#define Addr_NX90_dmac_ch2 0xFF000140U

/* ===================================================================== */

/* AREA dmac_reg */
/* Area of dmac_reg, dmac_com_reg, dmac_app_reg */

/* ===================================================================== */

#define Addr_NX90_dmac_reg     0xFF000800U
#define Addr_NX90_dmac_com_reg 0xFF000800U
#define Addr_NX90_dmac_app_reg 0xFF800800U

/* --------------------------------------------------------------------- */
/* Register dmac_int_status */
/* => interrupt status register */
/*    reset value 0x0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_int_status          0x00000000U
#define Adr_NX90_dmac_reg_dmac_int_status     0xFF000800U
#define Adr_NX90_dmac_com_reg_dmac_int_status 0xFF000800U
#define Adr_NX90_dmac_app_reg_dmac_int_status 0xFF800800U

#define MSK_NX90_dmac_int_status_DMACINT_ch0 0x00000001U
#define SRT_NX90_dmac_int_status_DMACINT_ch0 0
#define MSK_NX90_dmac_int_status_DMACINT_ch1 0x00000002U
#define SRT_NX90_dmac_int_status_DMACINT_ch1 1
#define MSK_NX90_dmac_int_status_DMACINT_ch2 0x00000004U
#define SRT_NX90_dmac_int_status_DMACINT_ch2 2

/* all used bits of 'NX90_dmac_int_status': */
#define MSK_USED_BITS_NX90_dmac_int_status 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_inttc_status */
/* => interrupt terminal count status register */
/*    reset value 0x0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_inttc_status          0x00000004U
#define Adr_NX90_dmac_reg_dmac_inttc_status     0xFF000804U
#define Adr_NX90_dmac_com_reg_dmac_inttc_status 0xFF000804U
#define Adr_NX90_dmac_app_reg_dmac_inttc_status 0xFF800804U

#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch0 0x00000001U
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch0 0
#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch1 0x00000002U
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch1 1
#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch2 0x00000004U
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch2 2

/* all used bits of 'NX90_dmac_inttc_status': */
#define MSK_USED_BITS_NX90_dmac_inttc_status 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_inttc_clear */
/* => interrupt terminal count clear register */
/*    reset value 0x0 */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_inttc_clear          0x00000008U
#define Adr_NX90_dmac_reg_dmac_inttc_clear     0xFF000808U
#define Adr_NX90_dmac_com_reg_dmac_inttc_clear 0xFF000808U
#define Adr_NX90_dmac_app_reg_dmac_inttc_clear 0xFF800808U
#define DFLT_VAL_NX90_dmac_inttc_clear         0x00000000U

#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0         0x00000001U
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0         0
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0 0x00000000U
#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1         0x00000002U
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1         1
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1 0x00000000U
#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2         0x00000004U
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2         2
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2 0x00000000U

/* all used bits of 'NX90_dmac_inttc_clear': */
#define MSK_USED_BITS_NX90_dmac_inttc_clear 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_interr_status */
/* => interrupt error status register */
/*    reset value 0x0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_interr_status          0x0000000CU
#define Adr_NX90_dmac_reg_dmac_interr_status     0xFF00080CU
#define Adr_NX90_dmac_com_reg_dmac_interr_status 0xFF00080CU
#define Adr_NX90_dmac_app_reg_dmac_interr_status 0xFF80080CU

#define MSK_NX90_dmac_interr_status_DMACINTERR_ch0 0x00000001U
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch0 0
#define MSK_NX90_dmac_interr_status_DMACINTERR_ch1 0x00000002U
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch1 1
#define MSK_NX90_dmac_interr_status_DMACINTERR_ch2 0x00000004U
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch2 2

/* all used bits of 'NX90_dmac_interr_status': */
#define MSK_USED_BITS_NX90_dmac_interr_status 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_interr_clear */
/* => interrupt error clear register */
/*    reset value 0x0 */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_interr_clear          0x00000010U
#define Adr_NX90_dmac_reg_dmac_interr_clear     0xFF000810U
#define Adr_NX90_dmac_com_reg_dmac_interr_clear 0xFF000810U
#define Adr_NX90_dmac_app_reg_dmac_interr_clear 0xFF800810U
#define DFLT_VAL_NX90_dmac_interr_clear         0x00000000U

#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch0         0x00000001U
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch0         0
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch0    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch0 0x00000000U
#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch1         0x00000002U
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch1         1
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch1    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch1 0x00000000U
#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch2         0x00000004U
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch2         2
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch2    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch2 0x00000000U

/* all used bits of 'NX90_dmac_interr_clear': */
#define MSK_USED_BITS_NX90_dmac_interr_clear 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_rawinttc_status */
/* => raw interrupt terminal count status register */
/*    reset value 0x0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_rawinttc_status          0x00000014U
#define Adr_NX90_dmac_reg_dmac_rawinttc_status     0xFF000814U
#define Adr_NX90_dmac_com_reg_dmac_rawinttc_status 0xFF000814U
#define Adr_NX90_dmac_app_reg_dmac_rawinttc_status 0xFF800814U

#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch0 0x00000001U
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch0 0
#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch1 0x00000002U
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch1 1
#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch2 0x00000004U
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch2 2

/* all used bits of 'NX90_dmac_rawinttc_status': */
#define MSK_USED_BITS_NX90_dmac_rawinttc_status 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_rawinterr_status */
/* => raw interrupt error status register */
/*    reset value 0x0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_rawinterr_status          0x00000018U
#define Adr_NX90_dmac_reg_dmac_rawinterr_status     0xFF000818U
#define Adr_NX90_dmac_com_reg_dmac_rawinterr_status 0xFF000818U
#define Adr_NX90_dmac_app_reg_dmac_rawinterr_status 0xFF800818U

#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch0 0x00000001U
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch0 0
#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch1 0x00000002U
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch1 1
#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch2 0x00000004U
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch2 2

/* all used bits of 'NX90_dmac_rawinterr_status': */
#define MSK_USED_BITS_NX90_dmac_rawinterr_status 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_enabled_channel */
/* => channel enable register */
/*    reset value 0x0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_enabled_channel          0x0000001CU
#define Adr_NX90_dmac_reg_dmac_enabled_channel     0xFF00081CU
#define Adr_NX90_dmac_com_reg_dmac_enabled_channel 0xFF00081CU
#define Adr_NX90_dmac_app_reg_dmac_enabled_channel 0xFF80081CU

#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch0 0x00000001U
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch0 0
#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch1 0x00000002U
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch1 1
#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch2 0x00000004U
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch2 2

/* all used bits of 'NX90_dmac_enabled_channel': */
#define MSK_USED_BITS_NX90_dmac_enabled_channel 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dmac_softb_req */
/* => software burst request register */
/*    reset value 0x0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softb_req          0x00000020U
#define Adr_NX90_dmac_reg_dmac_softb_req     0xFF000820U
#define Adr_NX90_dmac_com_reg_dmac_softb_req 0xFF000820U
#define Adr_NX90_dmac_app_reg_dmac_softb_req 0xFF800820U
#define DFLT_VAL_NX90_dmac_softb_req         0x00000000U

#define MSK_NX90_dmac_softb_req_DMACSoftBReq         0x0000ffffU
#define SRT_NX90_dmac_softb_req_DMACSoftBReq         0
#define DFLT_VAL_NX90_dmac_softb_req_DMACSoftBReq    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_softb_req_DMACSoftBReq 0x00000000U

/* all used bits of 'NX90_dmac_softb_req': */
#define MSK_USED_BITS_NX90_dmac_softb_req 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dmac_softs_req */
/* => software single request register */
/*    reset value 0x0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softs_req          0x00000024U
#define Adr_NX90_dmac_reg_dmac_softs_req     0xFF000824U
#define Adr_NX90_dmac_com_reg_dmac_softs_req 0xFF000824U
#define Adr_NX90_dmac_app_reg_dmac_softs_req 0xFF800824U
#define DFLT_VAL_NX90_dmac_softs_req         0x00000000U

#define MSK_NX90_dmac_softs_req_DMACSoftSReq         0x0000ffffU
#define SRT_NX90_dmac_softs_req_DMACSoftSReq         0
#define DFLT_VAL_NX90_dmac_softs_req_DMACSoftSReq    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_softs_req_DMACSoftSReq 0x00000000U

/* all used bits of 'NX90_dmac_softs_req': */
#define MSK_USED_BITS_NX90_dmac_softs_req 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dmac_softlb_req */
/* => software last burst request register */
/*    reset value 0x0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softlb_req          0x00000028U
#define Adr_NX90_dmac_reg_dmac_softlb_req     0xFF000828U
#define Adr_NX90_dmac_com_reg_dmac_softlb_req 0xFF000828U
#define Adr_NX90_dmac_app_reg_dmac_softlb_req 0xFF800828U
#define DFLT_VAL_NX90_dmac_softlb_req         0x00000000U

#define MSK_NX90_dmac_softlb_req_DMACSoftLBReq         0x0000ffffU
#define SRT_NX90_dmac_softlb_req_DMACSoftLBReq         0
#define DFLT_VAL_NX90_dmac_softlb_req_DMACSoftLBReq    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_softlb_req_DMACSoftLBReq 0x00000000U

/* all used bits of 'NX90_dmac_softlb_req': */
#define MSK_USED_BITS_NX90_dmac_softlb_req 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dmac_softls_req */
/* => software last single request register */
/*    reset value 0x0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softls_req          0x0000002CU
#define Adr_NX90_dmac_reg_dmac_softls_req     0xFF00082CU
#define Adr_NX90_dmac_com_reg_dmac_softls_req 0xFF00082CU
#define Adr_NX90_dmac_app_reg_dmac_softls_req 0xFF80082CU
#define DFLT_VAL_NX90_dmac_softls_req         0x00000000U

#define MSK_NX90_dmac_softls_req_DMACSoftLSReq         0x0000ffffU
#define SRT_NX90_dmac_softls_req_DMACSoftLSReq         0
#define DFLT_VAL_NX90_dmac_softls_req_DMACSoftLSReq    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_softls_req_DMACSoftLSReq 0x00000000U

/* all used bits of 'NX90_dmac_softls_req': */
#define MSK_USED_BITS_NX90_dmac_softls_req 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dmac_config */
/* => configuration register */
/*    reset value 0x0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_config          0x00000030U
#define Adr_NX90_dmac_reg_dmac_config     0xFF000830U
#define Adr_NX90_dmac_com_reg_dmac_config 0xFF000830U
#define Adr_NX90_dmac_app_reg_dmac_config 0xFF800830U
#define DFLT_VAL_NX90_dmac_config         0x00000000U

#define MSK_NX90_dmac_config_DMACENABLE         0x00000001U
#define SRT_NX90_dmac_config_DMACENABLE         0
#define DFLT_VAL_NX90_dmac_config_DMACENABLE    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_config_DMACENABLE 0x00000000U

/* all used bits of 'NX90_dmac_config': */
#define MSK_USED_BITS_NX90_dmac_config 0x00000001U

/* --------------------------------------------------------------------- */
/* Register dmac_sync */
/* => sync register */
/*    DMA synchronization logic for DMA request signals enabled or disabled */
/*    A 1'b0 bit indicates that the synchronization logic for */
/*    the DMACBREQ[15:0], DMACSREQ[15:0], DMACLBREQ[15:0], and DMACLSREQ[15:0] request signals is enabled. */
/*    A HIGH bit indicates that the synchronization logic is disabled. */
/*    reset value 0x0 */
/*    Note: Within the netX system all peripherals and the DMAC are running in the same clock-domain. Therefore, */
/*    it is recommended to disable the synchronisation for all channels (i.e. write 0xffff). This results in a */
/*    performance gain. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_sync          0x00000034U
#define Adr_NX90_dmac_reg_dmac_sync     0xFF000834U
#define Adr_NX90_dmac_com_reg_dmac_sync 0xFF000834U
#define Adr_NX90_dmac_app_reg_dmac_sync 0xFF800834U
#define DFLT_VAL_NX90_dmac_sync         0x00000000U

#define MSK_NX90_dmac_sync_DIS_SYNC         0x0000ffffU
#define SRT_NX90_dmac_sync_DIS_SYNC         0
#define DFLT_VAL_NX90_dmac_sync_DIS_SYNC    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_sync_DIS_SYNC 0x00000000U

/* all used bits of 'NX90_dmac_sync': */
#define MSK_USED_BITS_NX90_dmac_sync 0x0000ffffU


/* ===================================================================== */

/* AREA uart */
/* Area of uart_com, uart_app, uart_xpic_app */

/* ===================================================================== */

#define Addr_NX90_uart_com      0xFF001040U
#define Addr_NX90_uart_app      0xFF801040U
#define Addr_NX90_uart_xpic_app 0xFF900300U

/* --------------------------------------------------------------------- */
/* Register uartdr */
/* => data read or written from the interface */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartdr           0x00000000U
#define Adr_NX90_uart_com_uartdr      0xFF001040U
#define Adr_NX90_uart_app_uartdr      0xFF801040U
#define Adr_NX90_uart_xpic_app_uartdr 0xFF900300U
#define DFLT_VAL_NX90_uartdr          0x00000000U

#define MSK_NX90_uartdr_DATA         0x000000ffU
#define SRT_NX90_uartdr_DATA         0
#define DFLT_VAL_NX90_uartdr_DATA    0x00000000U
#define DFLT_BF_VAL_NX90_uartdr_DATA 0x00000000U
#define MSK_NX90_uartdr_FE           0x00000100U
#define SRT_NX90_uartdr_FE           8
#define DFLT_VAL_NX90_uartdr_FE      0x00000000U
#define DFLT_BF_VAL_NX90_uartdr_FE   0x00000000U
#define MSK_NX90_uartdr_PE           0x00000200U
#define SRT_NX90_uartdr_PE           9
#define DFLT_VAL_NX90_uartdr_PE      0x00000000U
#define DFLT_BF_VAL_NX90_uartdr_PE   0x00000000U
#define MSK_NX90_uartdr_BE           0x00000400U
#define SRT_NX90_uartdr_BE           10
#define DFLT_VAL_NX90_uartdr_BE      0x00000000U
#define DFLT_BF_VAL_NX90_uartdr_BE   0x00000000U

/* all used bits of 'NX90_uartdr': */
#define MSK_USED_BITS_NX90_uartdr 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register uartrsr */
/* => receive status register (read) / Error Clear Register (write) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartrsr           0x00000004U
#define Adr_NX90_uart_com_uartrsr      0xFF001044U
#define Adr_NX90_uart_app_uartrsr      0xFF801044U
#define Adr_NX90_uart_xpic_app_uartrsr 0xFF900304U
#define DFLT_VAL_NX90_uartrsr          0x00000000U

#define MSK_NX90_uartrsr_FE         0x00000001U
#define SRT_NX90_uartrsr_FE         0
#define DFLT_VAL_NX90_uartrsr_FE    0x00000000U
#define DFLT_BF_VAL_NX90_uartrsr_FE 0x00000000U
#define MSK_NX90_uartrsr_PE         0x00000002U
#define SRT_NX90_uartrsr_PE         1
#define DFLT_VAL_NX90_uartrsr_PE    0x00000000U
#define DFLT_BF_VAL_NX90_uartrsr_PE 0x00000000U
#define MSK_NX90_uartrsr_BE         0x00000004U
#define SRT_NX90_uartrsr_BE         2
#define DFLT_VAL_NX90_uartrsr_BE    0x00000000U
#define DFLT_BF_VAL_NX90_uartrsr_BE 0x00000000U
#define MSK_NX90_uartrsr_OE         0x00000008U
#define SRT_NX90_uartrsr_OE         3
#define DFLT_VAL_NX90_uartrsr_OE    0x00000000U
#define DFLT_BF_VAL_NX90_uartrsr_OE 0x00000000U

/* all used bits of 'NX90_uartrsr': */
#define MSK_USED_BITS_NX90_uartrsr 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register uartlcr_h */
/* => Line control Register, high byte */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartlcr_h           0x00000008U
#define Adr_NX90_uart_com_uartlcr_h      0xFF001048U
#define Adr_NX90_uart_app_uartlcr_h      0xFF801048U
#define Adr_NX90_uart_xpic_app_uartlcr_h 0xFF900308U
#define DFLT_VAL_NX90_uartlcr_h          0x00000000U

#define MSK_NX90_uartlcr_h_BRK          0x00000001U
#define SRT_NX90_uartlcr_h_BRK          0
#define DFLT_VAL_NX90_uartlcr_h_BRK     0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_h_BRK  0x00000000U
#define MSK_NX90_uartlcr_h_PEN          0x00000002U
#define SRT_NX90_uartlcr_h_PEN          1
#define DFLT_VAL_NX90_uartlcr_h_PEN     0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_h_PEN  0x00000000U
#define MSK_NX90_uartlcr_h_EPS          0x00000004U
#define SRT_NX90_uartlcr_h_EPS          2
#define DFLT_VAL_NX90_uartlcr_h_EPS     0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_h_EPS  0x00000000U
#define MSK_NX90_uartlcr_h_STP2         0x00000008U
#define SRT_NX90_uartlcr_h_STP2         3
#define DFLT_VAL_NX90_uartlcr_h_STP2    0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_h_STP2 0x00000000U
#define MSK_NX90_uartlcr_h_FEN          0x00000010U
#define SRT_NX90_uartlcr_h_FEN          4
#define DFLT_VAL_NX90_uartlcr_h_FEN     0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_h_FEN  0x00000000U
#define MSK_NX90_uartlcr_h_WLEN         0x00000060U
#define SRT_NX90_uartlcr_h_WLEN         5
#define DFLT_VAL_NX90_uartlcr_h_WLEN    0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_h_WLEN 0x00000000U

/* all used bits of 'NX90_uartlcr_h': */
#define MSK_USED_BITS_NX90_uartlcr_h 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register uartlcr_m */
/* => Line control Register, middle byte */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartlcr_m           0x0000000CU
#define Adr_NX90_uart_com_uartlcr_m      0xFF00104CU
#define Adr_NX90_uart_app_uartlcr_m      0xFF80104CU
#define Adr_NX90_uart_xpic_app_uartlcr_m 0xFF90030CU
#define DFLT_VAL_NX90_uartlcr_m          0x00000000U

#define MSK_NX90_uartlcr_m_BAUDDIVMS         0x000000ffU
#define SRT_NX90_uartlcr_m_BAUDDIVMS         0
#define DFLT_VAL_NX90_uartlcr_m_BAUDDIVMS    0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_m_BAUDDIVMS 0x00000000U

/* all used bits of 'NX90_uartlcr_m': */
#define MSK_USED_BITS_NX90_uartlcr_m 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uartlcr_l */
/* => Line control Register, low byte */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartlcr_l           0x00000010U
#define Adr_NX90_uart_com_uartlcr_l      0xFF001050U
#define Adr_NX90_uart_app_uartlcr_l      0xFF801050U
#define Adr_NX90_uart_xpic_app_uartlcr_l 0xFF900310U
#define DFLT_VAL_NX90_uartlcr_l          0x00000000U

#define MSK_NX90_uartlcr_l_BAUDDIVLS         0x000000ffU
#define SRT_NX90_uartlcr_l_BAUDDIVLS         0
#define DFLT_VAL_NX90_uartlcr_l_BAUDDIVLS    0x00000000U
#define DFLT_BF_VAL_NX90_uartlcr_l_BAUDDIVLS 0x00000000U

/* all used bits of 'NX90_uartlcr_l': */
#define MSK_USED_BITS_NX90_uartlcr_l 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uartcr */
/* => uart control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartcr           0x00000014U
#define Adr_NX90_uart_com_uartcr      0xFF001054U
#define Adr_NX90_uart_app_uartcr      0xFF801054U
#define Adr_NX90_uart_xpic_app_uartcr 0xFF900314U
#define DFLT_VAL_NX90_uartcr          0x00000000U

#define MSK_NX90_uartcr_uartEN             0x00000001U
#define SRT_NX90_uartcr_uartEN             0
#define DFLT_VAL_NX90_uartcr_uartEN        0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_uartEN     0x00000000U
#define MSK_NX90_uartcr_SIREN              0x00000002U
#define SRT_NX90_uartcr_SIREN              1
#define DFLT_VAL_NX90_uartcr_SIREN         0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_SIREN      0x00000000U
#define MSK_NX90_uartcr_SIRLP              0x00000004U
#define SRT_NX90_uartcr_SIRLP              2
#define DFLT_VAL_NX90_uartcr_SIRLP         0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_SIRLP      0x00000000U
#define MSK_NX90_uartcr_MSIE               0x00000008U
#define SRT_NX90_uartcr_MSIE               3
#define DFLT_VAL_NX90_uartcr_MSIE          0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_MSIE       0x00000000U
#define MSK_NX90_uartcr_RIE                0x00000010U
#define SRT_NX90_uartcr_RIE                4
#define DFLT_VAL_NX90_uartcr_RIE           0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_RIE        0x00000000U
#define MSK_NX90_uartcr_TIE                0x00000020U
#define SRT_NX90_uartcr_TIE                5
#define DFLT_VAL_NX90_uartcr_TIE           0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_TIE        0x00000000U
#define MSK_NX90_uartcr_RTIE               0x00000040U
#define SRT_NX90_uartcr_RTIE               6
#define DFLT_VAL_NX90_uartcr_RTIE          0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_RTIE       0x00000000U
#define MSK_NX90_uartcr_LBE                0x00000080U
#define SRT_NX90_uartcr_LBE                7
#define DFLT_VAL_NX90_uartcr_LBE           0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_LBE        0x00000000U
#define MSK_NX90_uartcr_TX_RX_LOOP         0x00000100U
#define SRT_NX90_uartcr_TX_RX_LOOP         8
#define DFLT_VAL_NX90_uartcr_TX_RX_LOOP    0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_TX_RX_LOOP 0x00000000U

/* all used bits of 'NX90_uartcr': */
#define MSK_USED_BITS_NX90_uartcr 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register uartfr */
/* => uart Flag Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartfr           0x00000018U
#define Adr_NX90_uart_com_uartfr      0xFF001058U
#define Adr_NX90_uart_app_uartfr      0xFF801058U
#define Adr_NX90_uart_xpic_app_uartfr 0xFF900318U

#define MSK_NX90_uartfr_CTS  0x00000001U
#define SRT_NX90_uartfr_CTS  0
#define MSK_NX90_uartfr_DSR  0x00000002U
#define SRT_NX90_uartfr_DSR  1
#define MSK_NX90_uartfr_DCD  0x00000004U
#define SRT_NX90_uartfr_DCD  2
#define MSK_NX90_uartfr_BUSY 0x00000008U
#define SRT_NX90_uartfr_BUSY 3
#define MSK_NX90_uartfr_RXFE 0x00000010U
#define SRT_NX90_uartfr_RXFE 4
#define MSK_NX90_uartfr_TXFF 0x00000020U
#define SRT_NX90_uartfr_TXFF 5
#define MSK_NX90_uartfr_RXFF 0x00000040U
#define SRT_NX90_uartfr_RXFF 6
#define MSK_NX90_uartfr_TXFE 0x00000080U
#define SRT_NX90_uartfr_TXFE 7

/* all used bits of 'NX90_uartfr': */
#define MSK_USED_BITS_NX90_uartfr 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uartiir */
/* => Interrupt Identification (read) / interrupt clear (write) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartiir           0x0000001CU
#define Adr_NX90_uart_com_uartiir      0xFF00105CU
#define Adr_NX90_uart_app_uartiir      0xFF80105CU
#define Adr_NX90_uart_xpic_app_uartiir 0xFF90031CU
#define DFLT_VAL_NX90_uartiir          0x00000000U

#define MSK_NX90_uartiir_MIS          0x00000001U
#define SRT_NX90_uartiir_MIS          0
#define DFLT_VAL_NX90_uartiir_MIS     0x00000000U
#define DFLT_BF_VAL_NX90_uartiir_MIS  0x00000000U
#define MSK_NX90_uartiir_RIS          0x00000002U
#define SRT_NX90_uartiir_RIS          1
#define DFLT_VAL_NX90_uartiir_RIS     0x00000000U
#define DFLT_BF_VAL_NX90_uartiir_RIS  0x00000000U
#define MSK_NX90_uartiir_TIS          0x00000004U
#define SRT_NX90_uartiir_TIS          2
#define DFLT_VAL_NX90_uartiir_TIS     0x00000000U
#define DFLT_BF_VAL_NX90_uartiir_TIS  0x00000000U
#define MSK_NX90_uartiir_RTIS         0x00000008U
#define SRT_NX90_uartiir_RTIS         3
#define DFLT_VAL_NX90_uartiir_RTIS    0x00000000U
#define DFLT_BF_VAL_NX90_uartiir_RTIS 0x00000000U

/* all used bits of 'NX90_uartiir': */
#define MSK_USED_BITS_NX90_uartiir 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register uartilpr */
/* => IrDA Low Power Counter Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartilpr           0x00000020U
#define Adr_NX90_uart_com_uartilpr      0xFF001060U
#define Adr_NX90_uart_app_uartilpr      0xFF801060U
#define Adr_NX90_uart_xpic_app_uartilpr 0xFF900320U
#define DFLT_VAL_NX90_uartilpr          0x00000000U

#define MSK_NX90_uartilpr_ILPDVSR         0x000000ffU
#define SRT_NX90_uartilpr_ILPDVSR         0
#define DFLT_VAL_NX90_uartilpr_ILPDVSR    0x00000000U
#define DFLT_BF_VAL_NX90_uartilpr_ILPDVSR 0x00000000U

/* all used bits of 'NX90_uartilpr': */
#define MSK_USED_BITS_NX90_uartilpr 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uartrts */
/* => RTS Control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartrts           0x00000024U
#define Adr_NX90_uart_com_uartrts      0xFF001064U
#define Adr_NX90_uart_app_uartrts      0xFF801064U
#define Adr_NX90_uart_xpic_app_uartrts 0xFF900324U
#define DFLT_VAL_NX90_uartrts          0x00000000U

#define MSK_NX90_uartrts_AUTO            0x00000001U
#define SRT_NX90_uartrts_AUTO            0
#define DFLT_VAL_NX90_uartrts_AUTO       0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_AUTO    0x00000000U
#define MSK_NX90_uartrts_RTS             0x00000002U
#define SRT_NX90_uartrts_RTS             1
#define DFLT_VAL_NX90_uartrts_RTS        0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_RTS     0x00000000U
#define MSK_NX90_uartrts_COUNT           0x00000004U
#define SRT_NX90_uartrts_COUNT           2
#define DFLT_VAL_NX90_uartrts_COUNT      0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_COUNT   0x00000000U
#define MSK_NX90_uartrts_MOD2            0x00000008U
#define SRT_NX90_uartrts_MOD2            3
#define DFLT_VAL_NX90_uartrts_MOD2       0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_MOD2    0x00000000U
#define MSK_NX90_uartrts_RTS_pol         0x00000010U
#define SRT_NX90_uartrts_RTS_pol         4
#define DFLT_VAL_NX90_uartrts_RTS_pol    0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_RTS_pol 0x00000000U
#define MSK_NX90_uartrts_CTS_ctr         0x00000020U
#define SRT_NX90_uartrts_CTS_ctr         5
#define DFLT_VAL_NX90_uartrts_CTS_ctr    0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_CTS_ctr 0x00000000U
#define MSK_NX90_uartrts_CTS_pol         0x00000040U
#define SRT_NX90_uartrts_CTS_pol         6
#define DFLT_VAL_NX90_uartrts_CTS_pol    0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_CTS_pol 0x00000000U
#define MSK_NX90_uartrts_STICK           0x00000080U
#define SRT_NX90_uartrts_STICK           7
#define DFLT_VAL_NX90_uartrts_STICK      0x00000000U
#define DFLT_BF_VAL_NX90_uartrts_STICK   0x00000000U

/* all used bits of 'NX90_uartrts': */
#define MSK_USED_BITS_NX90_uartrts 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uartforerun */
/* => RTS forerun cycles */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartforerun           0x00000028U
#define Adr_NX90_uart_com_uartforerun      0xFF001068U
#define Adr_NX90_uart_app_uartforerun      0xFF801068U
#define Adr_NX90_uart_xpic_app_uartforerun 0xFF900328U
#define DFLT_VAL_NX90_uartforerun          0x00000000U

#define MSK_NX90_uartforerun_FORERUN         0x000000ffU
#define SRT_NX90_uartforerun_FORERUN         0
#define DFLT_VAL_NX90_uartforerun_FORERUN    0x00000000U
#define DFLT_BF_VAL_NX90_uartforerun_FORERUN 0x00000000U

/* all used bits of 'NX90_uartforerun': */
#define MSK_USED_BITS_NX90_uartforerun 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uarttrail */
/* => RTS trail cycles */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uarttrail           0x0000002CU
#define Adr_NX90_uart_com_uarttrail      0xFF00106CU
#define Adr_NX90_uart_app_uarttrail      0xFF80106CU
#define Adr_NX90_uart_xpic_app_uarttrail 0xFF90032CU
#define DFLT_VAL_NX90_uarttrail          0x00000000U

#define MSK_NX90_uarttrail_TRAIL         0x000000ffU
#define SRT_NX90_uarttrail_TRAIL         0
#define DFLT_VAL_NX90_uarttrail_TRAIL    0x00000000U
#define DFLT_BF_VAL_NX90_uarttrail_TRAIL 0x00000000U

/* all used bits of 'NX90_uarttrail': */
#define MSK_USED_BITS_NX90_uarttrail 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register uartdrvout */
/* => Drive Output */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartdrvout           0x00000030U
#define Adr_NX90_uart_com_uartdrvout      0xFF001070U
#define Adr_NX90_uart_app_uartdrvout      0xFF801070U
#define Adr_NX90_uart_xpic_app_uartdrvout 0xFF900330U
#define DFLT_VAL_NX90_uartdrvout          0x00000000U

#define MSK_NX90_uartdrvout_DRVTX          0x00000001U
#define SRT_NX90_uartdrvout_DRVTX          0
#define DFLT_VAL_NX90_uartdrvout_DRVTX     0x00000000U
#define DFLT_BF_VAL_NX90_uartdrvout_DRVTX  0x00000000U
#define MSK_NX90_uartdrvout_DRVRTS         0x00000002U
#define SRT_NX90_uartdrvout_DRVRTS         1
#define DFLT_VAL_NX90_uartdrvout_DRVRTS    0x00000000U
#define DFLT_BF_VAL_NX90_uartdrvout_DRVRTS 0x00000000U

/* all used bits of 'NX90_uartdrvout': */
#define MSK_USED_BITS_NX90_uartdrvout 0x00000003U

/* --------------------------------------------------------------------- */
/* Register uartcr_2 */
/* => Control Register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartcr_2           0x00000034U
#define Adr_NX90_uart_com_uartcr_2      0xFF001074U
#define Adr_NX90_uart_app_uartcr_2      0xFF801074U
#define Adr_NX90_uart_xpic_app_uartcr_2 0xFF900334U
#define DFLT_VAL_NX90_uartcr_2          0x00000000U

#define MSK_NX90_uartcr_2_Baud_Rate_Mode         0x00000001U
#define SRT_NX90_uartcr_2_Baud_Rate_Mode         0
#define DFLT_VAL_NX90_uartcr_2_Baud_Rate_Mode    0x00000000U
#define DFLT_BF_VAL_NX90_uartcr_2_Baud_Rate_Mode 0x00000000U

/* all used bits of 'NX90_uartcr_2': */
#define MSK_USED_BITS_NX90_uartcr_2 0x00000001U

/* --------------------------------------------------------------------- */
/* Register uartrxiflsel */
/* => RX FIFO trigger level and RX-DMA enable */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartrxiflsel           0x00000038U
#define Adr_NX90_uart_com_uartrxiflsel      0xFF001078U
#define Adr_NX90_uart_app_uartrxiflsel      0xFF801078U
#define Adr_NX90_uart_xpic_app_uartrxiflsel 0xFF900338U
#define DFLT_VAL_NX90_uartrxiflsel          0x00000008U

#define MSK_NX90_uartrxiflsel_RXIFLSEL         0x0000001fU
#define SRT_NX90_uartrxiflsel_RXIFLSEL         0
#define DFLT_VAL_NX90_uartrxiflsel_RXIFLSEL    0x00000008U
#define DFLT_BF_VAL_NX90_uartrxiflsel_RXIFLSEL 0x00000008U
#define MSK_NX90_uartrxiflsel_RXDMA            0x00000020U
#define SRT_NX90_uartrxiflsel_RXDMA            5
#define DFLT_VAL_NX90_uartrxiflsel_RXDMA       0x00000000U
#define DFLT_BF_VAL_NX90_uartrxiflsel_RXDMA    0x00000000U

/* all used bits of 'NX90_uartrxiflsel': */
#define MSK_USED_BITS_NX90_uartrxiflsel 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register uarttxiflsel */
/* => TX FIFO trigger level and TX-DMA enable */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uarttxiflsel           0x0000003CU
#define Adr_NX90_uart_com_uarttxiflsel      0xFF00107CU
#define Adr_NX90_uart_app_uarttxiflsel      0xFF80107CU
#define Adr_NX90_uart_xpic_app_uarttxiflsel 0xFF90033CU
#define DFLT_VAL_NX90_uarttxiflsel          0x00000008U

#define MSK_NX90_uarttxiflsel_TXIFLSEL         0x0000001fU
#define SRT_NX90_uarttxiflsel_TXIFLSEL         0
#define DFLT_VAL_NX90_uarttxiflsel_TXIFLSEL    0x00000008U
#define DFLT_BF_VAL_NX90_uarttxiflsel_TXIFLSEL 0x00000008U
#define MSK_NX90_uarttxiflsel_TXDMA            0x00000020U
#define SRT_NX90_uarttxiflsel_TXDMA            5
#define DFLT_VAL_NX90_uarttxiflsel_TXDMA       0x00000000U
#define DFLT_BF_VAL_NX90_uarttxiflsel_TXDMA    0x00000000U

/* all used bits of 'NX90_uarttxiflsel': */
#define MSK_USED_BITS_NX90_uarttxiflsel 0x0000003fU


/* ===================================================================== */

/* AREA i2c */
/* Area of i2c0_com, i2c1_com, i2c_app, i2c_xpic_app */

/* ===================================================================== */

#define Addr_NX90_i2c0_com     0xFF001080U
#define Addr_NX90_i2c1_com     0xFF0010C0U
#define Addr_NX90_i2c_app      0xFF801080U
#define Addr_NX90_i2c_xpic_app 0xFF900340U

/* --------------------------------------------------------------------- */
/* Register i2c_mcr */
/* => I2C master control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_mcr          0x00000000U
#define Adr_NX90_i2c0_com_i2c_mcr     0xFF001080U
#define Adr_NX90_i2c1_com_i2c_mcr     0xFF0010C0U
#define Adr_NX90_i2c_app_i2c_mcr      0xFF801080U
#define Adr_NX90_i2c_xpic_app_i2c_mcr 0xFF900340U
#define DFLT_VAL_NX90_i2c_mcr         0x00000000U

#define MSK_NX90_i2c_mcr_en_i2c             0x00000001U
#define SRT_NX90_i2c_mcr_en_i2c             0
#define DFLT_VAL_NX90_i2c_mcr_en_i2c        0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mcr_en_i2c     0x00000000U
#define MSK_NX90_i2c_mcr_mode               0x0000000eU
#define SRT_NX90_i2c_mcr_mode               1
#define DFLT_VAL_NX90_i2c_mcr_mode          0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mcr_mode       0x00000000U
#define MSK_NX90_i2c_mcr_sadr               0x000007f0U
#define SRT_NX90_i2c_mcr_sadr               4
#define DFLT_VAL_NX90_i2c_mcr_sadr          0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mcr_sadr       0x00000000U
#define MSK_NX90_i2c_mcr_pio_mode           0x00010000U
#define SRT_NX90_i2c_mcr_pio_mode           16
#define DFLT_VAL_NX90_i2c_mcr_pio_mode      0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mcr_pio_mode   0x00000000U
#define MSK_NX90_i2c_mcr_rst_i2c            0x00020000U
#define SRT_NX90_i2c_mcr_rst_i2c            17
#define DFLT_VAL_NX90_i2c_mcr_rst_i2c       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mcr_rst_i2c    0x00000000U
#define MSK_NX90_i2c_mcr_en_timeout         0x00040000U
#define SRT_NX90_i2c_mcr_en_timeout         18
#define DFLT_VAL_NX90_i2c_mcr_en_timeout    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mcr_en_timeout 0x00000000U

/* all used bits of 'NX90_i2c_mcr': */
#define MSK_USED_BITS_NX90_i2c_mcr 0x000707ffU

/* --------------------------------------------------------------------- */
/* Register i2c_scr */
/* => I2C slave control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_scr          0x00000004U
#define Adr_NX90_i2c0_com_i2c_scr     0xFF001084U
#define Adr_NX90_i2c1_com_i2c_scr     0xFF0010C4U
#define Adr_NX90_i2c_app_i2c_scr      0xFF801084U
#define Adr_NX90_i2c_xpic_app_i2c_scr 0xFF900344U
#define DFLT_VAL_NX90_i2c_scr         0x00000000U

#define MSK_NX90_i2c_scr_sid                        0x000003ffU
#define SRT_NX90_i2c_scr_sid                        0
#define DFLT_VAL_NX90_i2c_scr_sid                   0x00000000U
#define DFLT_BF_VAL_NX90_i2c_scr_sid                0x00000000U
#define MSK_NX90_i2c_scr_sid10                      0x00000400U
#define SRT_NX90_i2c_scr_sid10                      10
#define DFLT_VAL_NX90_i2c_scr_sid10                 0x00000000U
#define DFLT_BF_VAL_NX90_i2c_scr_sid10              0x00000000U
#define MSK_NX90_i2c_scr_ac_srx                     0x00010000U
#define SRT_NX90_i2c_scr_ac_srx                     16
#define DFLT_VAL_NX90_i2c_scr_ac_srx                0x00000000U
#define DFLT_BF_VAL_NX90_i2c_scr_ac_srx             0x00000000U
#define MSK_NX90_i2c_scr_ac_start                   0x00020000U
#define SRT_NX90_i2c_scr_ac_start                   17
#define DFLT_VAL_NX90_i2c_scr_ac_start              0x00000000U
#define DFLT_BF_VAL_NX90_i2c_scr_ac_start           0x00000000U
#define MSK_NX90_i2c_scr_ac_gcall                   0x00040000U
#define SRT_NX90_i2c_scr_ac_gcall                   18
#define DFLT_VAL_NX90_i2c_scr_ac_gcall              0x00000000U
#define DFLT_BF_VAL_NX90_i2c_scr_ac_gcall           0x00000000U
#define MSK_NX90_i2c_scr_autoreset_ac_start         0x00100000U
#define SRT_NX90_i2c_scr_autoreset_ac_start         20
#define DFLT_VAL_NX90_i2c_scr_autoreset_ac_start    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_scr_autoreset_ac_start 0x00000000U

/* all used bits of 'NX90_i2c_scr': */
#define MSK_USED_BITS_NX90_i2c_scr 0x001707ffU

/* --------------------------------------------------------------------- */
/* Register i2c_cmd */
/* => I2C master command register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_cmd          0x00000008U
#define Adr_NX90_i2c0_com_i2c_cmd     0xFF001088U
#define Adr_NX90_i2c1_com_i2c_cmd     0xFF0010C8U
#define Adr_NX90_i2c_app_i2c_cmd      0xFF801088U
#define Adr_NX90_i2c_xpic_app_i2c_cmd 0xFF900348U
#define DFLT_VAL_NX90_i2c_cmd         0x0000000eU

#define MSK_NX90_i2c_cmd_nwr               0x00000001U
#define SRT_NX90_i2c_cmd_nwr               0
#define DFLT_VAL_NX90_i2c_cmd_nwr          0x00000000U
#define DFLT_BF_VAL_NX90_i2c_cmd_nwr       0x00000000U
#define MSK_NX90_i2c_cmd_cmd               0x0000000eU
#define SRT_NX90_i2c_cmd_cmd               1
#define DFLT_VAL_NX90_i2c_cmd_cmd          0x0000000eU
#define DFLT_BF_VAL_NX90_i2c_cmd_cmd       0x00000007U
#define MSK_NX90_i2c_cmd_tsize             0x0003ff00U
#define SRT_NX90_i2c_cmd_tsize             8
#define DFLT_VAL_NX90_i2c_cmd_tsize        0x00000000U
#define DFLT_BF_VAL_NX90_i2c_cmd_tsize     0x00000000U
#define MSK_NX90_i2c_cmd_acpollmax         0x0ff00000U
#define SRT_NX90_i2c_cmd_acpollmax         20
#define DFLT_VAL_NX90_i2c_cmd_acpollmax    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_cmd_acpollmax 0x00000000U

/* all used bits of 'NX90_i2c_cmd': */
#define MSK_USED_BITS_NX90_i2c_cmd 0x0ff3ff0fU

/* --------------------------------------------------------------------- */
/* Register i2c_mdr */
/* => I2C master data register (master FIFO): */
/*    There is only one FIFO for both, receive and transmit master data with a depth of 16 bytes. For master write access, data send by the master */
/*    is delivered from the FIFO, for master read access data received by the master is stored in the FIFO. */
/*    In case of imminent data transfer failure (read transfer and FIFO is full or write transfer and FIFO is empty), the cmd_err IRQ will be set after the last */
/*    byte that could be transmitted. No FIFO-underrun or overflow will occur. i2c_cmd.tsize+1 will show the amount of not transmitted data. */
/*    In case of master write transfer direction, either the FIFO can be filled and the transfer may be completed (CTC, CT) or the transfer can be broken (rSTART, STOP). */
/*    In case of master read transfer direction, the command will terminate when the FIFO is full. The last read byte will be acknowledged and */
/*    stored in the FIFO. After reading out data from the FIFO the transfer must be completed (CTC, CT) to flag read data end (no acknowledge at last byte). STOP or rSTART */
/*    will fail if next read data MSB is 0 (as the next bit already driven by the slave is 0). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_mdr          0x0000000CU
#define Adr_NX90_i2c0_com_i2c_mdr     0xFF00108CU
#define Adr_NX90_i2c1_com_i2c_mdr     0xFF0010CCU
#define Adr_NX90_i2c_app_i2c_mdr      0xFF80108CU
#define Adr_NX90_i2c_xpic_app_i2c_mdr 0xFF90034CU
#define DFLT_VAL_NX90_i2c_mdr         0x00000000U

#define MSK_NX90_i2c_mdr_mdata         0x000000ffU
#define SRT_NX90_i2c_mdr_mdata         0
#define DFLT_VAL_NX90_i2c_mdr_mdata    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mdr_mdata 0x00000000U

/* all used bits of 'NX90_i2c_mdr': */
#define MSK_USED_BITS_NX90_i2c_mdr 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register i2c_sdr */
/* => I2C slave data register (slave FIFO): */
/*    There is only one FIFO for both, receive and transmit slave data with a depth of 16 bytes. For master read access, data send by the slave */
/*    is delivered from the FIFO, for master write access data received by the slave is stored in the FIFO. */
/*    A transfer is initiated after detection of I2C-start-sequence to the device address (i2c_scr.sid, sreq IRQ) which is acknowledged by this device (i2c_scr.ac_start). For read */
/*    transfers send data is read from the FIFO immediately after acknowledge was detected on the I2C-bus. SDA will be driven with next data MSB immediately after acknowledge SCL high phase. */
/*    In case of master read transfer and slave FIFO underrun, corrupted data will be send to the master and the fifo_err IRQ will be set. */
/*    In case of master write transfer and slave FIFO is full, no acknowledge will be generated for the last received byte. No FIFO overflow will occur but */
/*    the last transferred byte (not acknowledged) will be lost and has to be send again by the master. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_sdr          0x00000010U
#define Adr_NX90_i2c0_com_i2c_sdr     0xFF001090U
#define Adr_NX90_i2c1_com_i2c_sdr     0xFF0010D0U
#define Adr_NX90_i2c_app_i2c_sdr      0xFF801090U
#define Adr_NX90_i2c_xpic_app_i2c_sdr 0xFF900350U
#define DFLT_VAL_NX90_i2c_sdr         0x00000000U

#define MSK_NX90_i2c_sdr_sdata         0x000000ffU
#define SRT_NX90_i2c_sdr_sdata         0
#define DFLT_VAL_NX90_i2c_sdr_sdata    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sdr_sdata 0x00000000U

/* all used bits of 'NX90_i2c_sdr': */
#define MSK_USED_BITS_NX90_i2c_sdr 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register i2c_mfifo_cr */
/* => I2C master FIFO control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_mfifo_cr          0x00000014U
#define Adr_NX90_i2c0_com_i2c_mfifo_cr     0xFF001094U
#define Adr_NX90_i2c1_com_i2c_mfifo_cr     0xFF0010D4U
#define Adr_NX90_i2c_app_i2c_mfifo_cr      0xFF801094U
#define Adr_NX90_i2c_xpic_app_i2c_mfifo_cr 0xFF900354U
#define DFLT_VAL_NX90_i2c_mfifo_cr         0x00000000U

#define MSK_NX90_i2c_mfifo_cr_mfifo_wm          0x0000000fU
#define SRT_NX90_i2c_mfifo_cr_mfifo_wm          0
#define DFLT_VAL_NX90_i2c_mfifo_cr_mfifo_wm     0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mfifo_cr_mfifo_wm  0x00000000U
#define MSK_NX90_i2c_mfifo_cr_mfifo_clr         0x00000100U
#define SRT_NX90_i2c_mfifo_cr_mfifo_clr         8
#define DFLT_VAL_NX90_i2c_mfifo_cr_mfifo_clr    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_mfifo_cr_mfifo_clr 0x00000000U

/* all used bits of 'NX90_i2c_mfifo_cr': */
#define MSK_USED_BITS_NX90_i2c_mfifo_cr 0x0000010fU

/* --------------------------------------------------------------------- */
/* Register i2c_sfifo_cr */
/* => I2C slave FIFO control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_sfifo_cr          0x00000018U
#define Adr_NX90_i2c0_com_i2c_sfifo_cr     0xFF001098U
#define Adr_NX90_i2c1_com_i2c_sfifo_cr     0xFF0010D8U
#define Adr_NX90_i2c_app_i2c_sfifo_cr      0xFF801098U
#define Adr_NX90_i2c_xpic_app_i2c_sfifo_cr 0xFF900358U
#define DFLT_VAL_NX90_i2c_sfifo_cr         0x00000000U

#define MSK_NX90_i2c_sfifo_cr_sfifo_wm          0x0000000fU
#define SRT_NX90_i2c_sfifo_cr_sfifo_wm          0
#define DFLT_VAL_NX90_i2c_sfifo_cr_sfifo_wm     0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sfifo_cr_sfifo_wm  0x00000000U
#define MSK_NX90_i2c_sfifo_cr_sfifo_clr         0x00000100U
#define SRT_NX90_i2c_sfifo_cr_sfifo_clr         8
#define DFLT_VAL_NX90_i2c_sfifo_cr_sfifo_clr    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sfifo_cr_sfifo_clr 0x00000000U

/* all used bits of 'NX90_i2c_sfifo_cr': */
#define MSK_USED_BITS_NX90_i2c_sfifo_cr 0x0000010fU

/* --------------------------------------------------------------------- */
/* Register i2c_sr */
/* => I2C status register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_sr          0x0000001CU
#define Adr_NX90_i2c0_com_i2c_sr     0xFF00109CU
#define Adr_NX90_i2c1_com_i2c_sr     0xFF0010DCU
#define Adr_NX90_i2c_app_i2c_sr      0xFF80109CU
#define Adr_NX90_i2c_xpic_app_i2c_sr 0xFF90035CU
#define DFLT_VAL_NX90_i2c_sr         0xc0110040U

#define MSK_NX90_i2c_sr_mfifo_level            0x0000001fU
#define SRT_NX90_i2c_sr_mfifo_level            0
#define DFLT_VAL_NX90_i2c_sr_mfifo_level       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_level    0x00000000U
#define MSK_NX90_i2c_sr_mfifo_empty            0x00000040U
#define SRT_NX90_i2c_sr_mfifo_empty            6
#define DFLT_VAL_NX90_i2c_sr_mfifo_empty       0x00000040U
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_empty    0x00000001U
#define MSK_NX90_i2c_sr_mfifo_full             0x00000080U
#define SRT_NX90_i2c_sr_mfifo_full             7
#define DFLT_VAL_NX90_i2c_sr_mfifo_full        0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_full     0x00000000U
#define MSK_NX90_i2c_sr_mfifo_err_ovfl         0x00000100U
#define SRT_NX90_i2c_sr_mfifo_err_ovfl         8
#define DFLT_VAL_NX90_i2c_sr_mfifo_err_ovfl    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_err_ovfl 0x00000000U
#define MSK_NX90_i2c_sr_mfifo_err_undr         0x00000200U
#define SRT_NX90_i2c_sr_mfifo_err_undr         9
#define DFLT_VAL_NX90_i2c_sr_mfifo_err_undr    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_err_undr 0x00000000U
#define MSK_NX90_i2c_sr_sfifo_level            0x00007c00U
#define SRT_NX90_i2c_sr_sfifo_level            10
#define DFLT_VAL_NX90_i2c_sr_sfifo_level       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_level    0x00000000U
#define MSK_NX90_i2c_sr_sfifo_empty            0x00010000U
#define SRT_NX90_i2c_sr_sfifo_empty            16
#define DFLT_VAL_NX90_i2c_sr_sfifo_empty       0x00010000U
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_empty    0x00000001U
#define MSK_NX90_i2c_sr_sfifo_full             0x00020000U
#define SRT_NX90_i2c_sr_sfifo_full             17
#define DFLT_VAL_NX90_i2c_sr_sfifo_full        0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_full     0x00000000U
#define MSK_NX90_i2c_sr_sfifo_err_ovfl         0x00040000U
#define SRT_NX90_i2c_sr_sfifo_err_ovfl         18
#define DFLT_VAL_NX90_i2c_sr_sfifo_err_ovfl    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_err_ovfl 0x00000000U
#define MSK_NX90_i2c_sr_sfifo_err_undr         0x00080000U
#define SRT_NX90_i2c_sr_sfifo_err_undr         19
#define DFLT_VAL_NX90_i2c_sr_sfifo_err_undr    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_err_undr 0x00000000U
#define MSK_NX90_i2c_sr_bus_master             0x00100000U
#define SRT_NX90_i2c_sr_bus_master             20
#define DFLT_VAL_NX90_i2c_sr_bus_master        0x00100000U
#define DFLT_BF_VAL_NX90_i2c_sr_bus_master     0x00000001U
#define MSK_NX90_i2c_sr_nwr                    0x00200000U
#define SRT_NX90_i2c_sr_nwr                    21
#define DFLT_VAL_NX90_i2c_sr_nwr               0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_nwr            0x00000000U
#define MSK_NX90_i2c_sr_started                0x00400000U
#define SRT_NX90_i2c_sr_started                22
#define DFLT_VAL_NX90_i2c_sr_started           0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_started        0x00000000U
#define MSK_NX90_i2c_sr_slave_access           0x00800000U
#define SRT_NX90_i2c_sr_slave_access           23
#define DFLT_VAL_NX90_i2c_sr_slave_access      0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_slave_access   0x00000000U
#define MSK_NX90_i2c_sr_last_ac                0x01000000U
#define SRT_NX90_i2c_sr_last_ac                24
#define DFLT_VAL_NX90_i2c_sr_last_ac           0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_last_ac        0x00000000U
#define MSK_NX90_i2c_sr_nwr_aced               0x02000000U
#define SRT_NX90_i2c_sr_nwr_aced               25
#define DFLT_VAL_NX90_i2c_sr_nwr_aced          0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_nwr_aced       0x00000000U
#define MSK_NX90_i2c_sr_gcall_aced             0x04000000U
#define SRT_NX90_i2c_sr_gcall_aced             26
#define DFLT_VAL_NX90_i2c_sr_gcall_aced        0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_gcall_aced     0x00000000U
#define MSK_NX90_i2c_sr_sid10_aced             0x08000000U
#define SRT_NX90_i2c_sr_sid10_aced             27
#define DFLT_VAL_NX90_i2c_sr_sid10_aced        0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_sid10_aced     0x00000000U
#define MSK_NX90_i2c_sr_timeout                0x10000000U
#define SRT_NX90_i2c_sr_timeout                28
#define DFLT_VAL_NX90_i2c_sr_timeout           0x00000000U
#define DFLT_BF_VAL_NX90_i2c_sr_timeout        0x00000000U
#define MSK_NX90_i2c_sr_scl_state              0x40000000U
#define SRT_NX90_i2c_sr_scl_state              30
#define DFLT_VAL_NX90_i2c_sr_scl_state         0x40000000U
#define DFLT_BF_VAL_NX90_i2c_sr_scl_state      0x00000001U
#define MSK_NX90_i2c_sr_sda_state              0x80000000U
#define SRT_NX90_i2c_sr_sda_state              31
#define DFLT_VAL_NX90_i2c_sr_sda_state         0x80000000U
#define DFLT_BF_VAL_NX90_i2c_sr_sda_state      0x00000001U

/* all used bits of 'NX90_i2c_sr': */
#define MSK_USED_BITS_NX90_i2c_sr 0xdfff7fdfU

/* --------------------------------------------------------------------- */
/* Register i2c_irqmsk */
/* => I2C interrupt mask set or clear register: */
/*    These bits have AND-mask character (only if mask bit is set, the appropriate IRQ generates the module IRQ). Changing a mask-bit */
/*    from "0" to "1" will clear according raw IRQ-state. */
/*    For detailed IRQ-description see i2c_irqraw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_irqmsk          0x00000020U
#define Adr_NX90_i2c0_com_i2c_irqmsk     0xFF0010A0U
#define Adr_NX90_i2c1_com_i2c_irqmsk     0xFF0010E0U
#define Adr_NX90_i2c_app_i2c_irqmsk      0xFF8010A0U
#define Adr_NX90_i2c_xpic_app_i2c_irqmsk 0xFF900360U
#define DFLT_VAL_NX90_i2c_irqmsk         0x00000000U

#define MSK_NX90_i2c_irqmsk_cmd_ok            0x00000001U
#define SRT_NX90_i2c_irqmsk_cmd_ok            0
#define DFLT_VAL_NX90_i2c_irqmsk_cmd_ok       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_cmd_ok    0x00000000U
#define MSK_NX90_i2c_irqmsk_cmd_err           0x00000002U
#define SRT_NX90_i2c_irqmsk_cmd_err           1
#define DFLT_VAL_NX90_i2c_irqmsk_cmd_err      0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_cmd_err   0x00000000U
#define MSK_NX90_i2c_irqmsk_fifo_err          0x00000004U
#define SRT_NX90_i2c_irqmsk_fifo_err          2
#define DFLT_VAL_NX90_i2c_irqmsk_fifo_err     0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_fifo_err  0x00000000U
#define MSK_NX90_i2c_irqmsk_bus_busy          0x00000008U
#define SRT_NX90_i2c_irqmsk_bus_busy          3
#define DFLT_VAL_NX90_i2c_irqmsk_bus_busy     0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_bus_busy  0x00000000U
#define MSK_NX90_i2c_irqmsk_mfifo_req         0x00000010U
#define SRT_NX90_i2c_irqmsk_mfifo_req         4
#define DFLT_VAL_NX90_i2c_irqmsk_mfifo_req    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_mfifo_req 0x00000000U
#define MSK_NX90_i2c_irqmsk_sfifo_req         0x00000020U
#define SRT_NX90_i2c_irqmsk_sfifo_req         5
#define DFLT_VAL_NX90_i2c_irqmsk_sfifo_req    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_sfifo_req 0x00000000U
#define MSK_NX90_i2c_irqmsk_sreq              0x00000040U
#define SRT_NX90_i2c_irqmsk_sreq              6
#define DFLT_VAL_NX90_i2c_irqmsk_sreq         0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqmsk_sreq      0x00000000U

/* all used bits of 'NX90_i2c_irqmsk': */
#define MSK_USED_BITS_NX90_i2c_irqmsk 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register i2c_irqsr */
/* => I2C interrupt state register (raw interrupt before masking): */
/*    Writing '1' will clear according IRQ. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_irqsr          0x00000024U
#define Adr_NX90_i2c0_com_i2c_irqsr     0xFF0010A4U
#define Adr_NX90_i2c1_com_i2c_irqsr     0xFF0010E4U
#define Adr_NX90_i2c_app_i2c_irqsr      0xFF8010A4U
#define Adr_NX90_i2c_xpic_app_i2c_irqsr 0xFF900364U
#define DFLT_VAL_NX90_i2c_irqsr         0x00000000U

#define MSK_NX90_i2c_irqsr_cmd_ok            0x00000001U
#define SRT_NX90_i2c_irqsr_cmd_ok            0
#define DFLT_VAL_NX90_i2c_irqsr_cmd_ok       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_cmd_ok    0x00000000U
#define MSK_NX90_i2c_irqsr_cmd_err           0x00000002U
#define SRT_NX90_i2c_irqsr_cmd_err           1
#define DFLT_VAL_NX90_i2c_irqsr_cmd_err      0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_cmd_err   0x00000000U
#define MSK_NX90_i2c_irqsr_fifo_err          0x00000004U
#define SRT_NX90_i2c_irqsr_fifo_err          2
#define DFLT_VAL_NX90_i2c_irqsr_fifo_err     0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_fifo_err  0x00000000U
#define MSK_NX90_i2c_irqsr_bus_busy          0x00000008U
#define SRT_NX90_i2c_irqsr_bus_busy          3
#define DFLT_VAL_NX90_i2c_irqsr_bus_busy     0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_bus_busy  0x00000000U
#define MSK_NX90_i2c_irqsr_mfifo_req         0x00000010U
#define SRT_NX90_i2c_irqsr_mfifo_req         4
#define DFLT_VAL_NX90_i2c_irqsr_mfifo_req    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_mfifo_req 0x00000000U
#define MSK_NX90_i2c_irqsr_sfifo_req         0x00000020U
#define SRT_NX90_i2c_irqsr_sfifo_req         5
#define DFLT_VAL_NX90_i2c_irqsr_sfifo_req    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_sfifo_req 0x00000000U
#define MSK_NX90_i2c_irqsr_sreq              0x00000040U
#define SRT_NX90_i2c_irqsr_sreq              6
#define DFLT_VAL_NX90_i2c_irqsr_sreq         0x00000000U
#define DFLT_BF_VAL_NX90_i2c_irqsr_sreq      0x00000000U

/* all used bits of 'NX90_i2c_irqsr': */
#define MSK_USED_BITS_NX90_i2c_irqsr 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register i2c_irqmsked */
/* => I2C masked interrupt state register: */
/*    If one of these bits is set, the I2C IRQ will be asserted to the Interrupt-Controller. */
/*    For detailed IRQ-description see i2c_irqraw. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_irqmsked          0x00000028U
#define Adr_NX90_i2c0_com_i2c_irqmsked     0xFF0010A8U
#define Adr_NX90_i2c1_com_i2c_irqmsked     0xFF0010E8U
#define Adr_NX90_i2c_app_i2c_irqmsked      0xFF8010A8U
#define Adr_NX90_i2c_xpic_app_i2c_irqmsked 0xFF900368U

#define MSK_NX90_i2c_irqmsked_cmd_ok    0x00000001U
#define SRT_NX90_i2c_irqmsked_cmd_ok    0
#define MSK_NX90_i2c_irqmsked_cmd_err   0x00000002U
#define SRT_NX90_i2c_irqmsked_cmd_err   1
#define MSK_NX90_i2c_irqmsked_fifo_err  0x00000004U
#define SRT_NX90_i2c_irqmsked_fifo_err  2
#define MSK_NX90_i2c_irqmsked_bus_busy  0x00000008U
#define SRT_NX90_i2c_irqmsked_bus_busy  3
#define MSK_NX90_i2c_irqmsked_mfifo_req 0x00000010U
#define SRT_NX90_i2c_irqmsked_mfifo_req 4
#define MSK_NX90_i2c_irqmsked_sfifo_req 0x00000020U
#define SRT_NX90_i2c_irqmsked_sfifo_req 5
#define MSK_NX90_i2c_irqmsked_sreq      0x00000040U
#define SRT_NX90_i2c_irqmsked_sreq      6

/* all used bits of 'NX90_i2c_irqmsked': */
#define MSK_USED_BITS_NX90_i2c_irqmsked 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register i2c_dmacr */
/* => I2C DMA control register: */
/*    Required settings for the DMA controller: */
/*    - DMA transfer size to/from I2C-module: byte. */
/*    - DMA burst length to/from I2C-module: 4. */
/*    DMA burst requests are generated if the according FIFO contains more than 4 bytes (receive case), or if */
/*    there are more than 4 bytes writable to the according FIFO (transmit case). */
/*    DMA single transfer requests are generated if the according FIFO contains more than 1 byte (receive case), or if */
/*    there is more than 1 byte writable to the according FIFO (transmit case). */
/*    No further DMA requests will be generated if all transmit data was written to the master FIFO and flow-controlling */
/*    is done by the I2C module (for master data only). Once all data is written */
/*    to the master FIFO, last burst/single request is generated for the DMA controller. */
/*    If the DMA-Controller flags transfer-end by setting DMACTC (terminal count), the appropriate bit will be cleared. */
/*    If one of the bits of this register is set to 0 by software and a DMA-transfer was requested before, one last */
/*    transfer will be done by the DMA-Controller to reset DMA-request signals. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_dmacr          0x0000002CU
#define Adr_NX90_i2c0_com_i2c_dmacr     0xFF0010ACU
#define Adr_NX90_i2c1_com_i2c_dmacr     0xFF0010ECU
#define Adr_NX90_i2c_app_i2c_dmacr      0xFF8010ACU
#define Adr_NX90_i2c_xpic_app_i2c_dmacr 0xFF90036CU
#define DFLT_VAL_NX90_i2c_dmacr         0x00000000U

#define MSK_NX90_i2c_dmacr_mdmas_en         0x00000001U
#define SRT_NX90_i2c_dmacr_mdmas_en         0
#define DFLT_VAL_NX90_i2c_dmacr_mdmas_en    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_dmacr_mdmas_en 0x00000000U
#define MSK_NX90_i2c_dmacr_mdmab_en         0x00000002U
#define SRT_NX90_i2c_dmacr_mdmab_en         1
#define DFLT_VAL_NX90_i2c_dmacr_mdmab_en    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_dmacr_mdmab_en 0x00000000U
#define MSK_NX90_i2c_dmacr_sdmas_en         0x00000004U
#define SRT_NX90_i2c_dmacr_sdmas_en         2
#define DFLT_VAL_NX90_i2c_dmacr_sdmas_en    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_dmacr_sdmas_en 0x00000000U
#define MSK_NX90_i2c_dmacr_sdmab_en         0x00000008U
#define SRT_NX90_i2c_dmacr_sdmab_en         3
#define DFLT_VAL_NX90_i2c_dmacr_sdmab_en    0x00000000U
#define DFLT_BF_VAL_NX90_i2c_dmacr_sdmab_en 0x00000000U

/* all used bits of 'NX90_i2c_dmacr': */
#define MSK_USED_BITS_NX90_i2c_dmacr 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register i2c_pio */
/* => Direct I2C IO controlling: */
/*    The I2C signals SCL and SDA can directly be controlled by this register, if in i2c_mcr-register pio_mode is enabled. */
/*    In PIO-mode the I2C-controller state machine is disabled: No FIFO-action is done, no IRQs occur and no DMA-controlling is possible. */
/*    Warning: I2C signals SCL and SDA are never driven active high by I2C specification. High-level should be done by pad pullup and setting */
/*    the appropriate output enable to 0 (scl_oe, sda_oe) instead of active high level driving to avoid external driving conflicts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_pio          0x00000030U
#define Adr_NX90_i2c0_com_i2c_pio     0xFF0010B0U
#define Adr_NX90_i2c1_com_i2c_pio     0xFF0010F0U
#define Adr_NX90_i2c_app_i2c_pio      0xFF8010B0U
#define Adr_NX90_i2c_xpic_app_i2c_pio 0xFF900370U
#define DFLT_VAL_NX90_i2c_pio         0x00000044U

#define MSK_NX90_i2c_pio_scl_out           0x00000001U
#define SRT_NX90_i2c_pio_scl_out           0
#define DFLT_VAL_NX90_i2c_pio_scl_out      0x00000000U
#define DFLT_BF_VAL_NX90_i2c_pio_scl_out   0x00000000U
#define MSK_NX90_i2c_pio_scl_oe            0x00000002U
#define SRT_NX90_i2c_pio_scl_oe            1
#define DFLT_VAL_NX90_i2c_pio_scl_oe       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_pio_scl_oe    0x00000000U
#define MSK_NX90_i2c_pio_scl_in_ro         0x00000004U
#define SRT_NX90_i2c_pio_scl_in_ro         2
#define DFLT_VAL_NX90_i2c_pio_scl_in_ro    0x00000004U
#define DFLT_BF_VAL_NX90_i2c_pio_scl_in_ro 0x00000001U
#define MSK_NX90_i2c_pio_sda_out           0x00000010U
#define SRT_NX90_i2c_pio_sda_out           4
#define DFLT_VAL_NX90_i2c_pio_sda_out      0x00000000U
#define DFLT_BF_VAL_NX90_i2c_pio_sda_out   0x00000000U
#define MSK_NX90_i2c_pio_sda_oe            0x00000020U
#define SRT_NX90_i2c_pio_sda_oe            5
#define DFLT_VAL_NX90_i2c_pio_sda_oe       0x00000000U
#define DFLT_BF_VAL_NX90_i2c_pio_sda_oe    0x00000000U
#define MSK_NX90_i2c_pio_sda_in_ro         0x00000040U
#define SRT_NX90_i2c_pio_sda_in_ro         6
#define DFLT_VAL_NX90_i2c_pio_sda_in_ro    0x00000040U
#define DFLT_BF_VAL_NX90_i2c_pio_sda_in_ro 0x00000001U

/* all used bits of 'NX90_i2c_pio': */
#define MSK_USED_BITS_NX90_i2c_pio 0x00000077U


/* ===================================================================== */

/* AREA mled_ctrl */
/* Area of mled_ctrl_com */

/* ===================================================================== */

#define Addr_NX90_mled_ctrl_com 0xFF001100U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_cfg */
/* => Multi LED control configuration register. */
/*    This register controls global configuration options for all MLED outputs. */
/*    Description of MLED control module operation: */
/*    Each output drives two LEDs: the low-side and the high-side LED. To achieve this, the output pin \ */
/*    can be in three states: driven high (i.e. the low-side LED is on), driven low (i.e. the high-side \ */
/*    LED is on) or high-z (i.e. both LEDs are off). */
/*    The MLED control module will drive the output in a fixed PWM scheme to make use of both LEDs at \ */
/*    the same time. The PWM period is the same for all outputs and is determined by the prescale_counter_max \ */
/*    bit field. The prescale counter will be increased with the netX system clock (i.e. 100 MHz). */
/*    If the prescale counter reaches the configured value, a second PWM counter will be increased by one. */
/*    The PWM counter is a fixed-width counter (0-511). If the counter is in the range of 0-255, the high-side LED \ */
/*    will be driven depending on the configured on_time (registers on_timeX, where X is an even number). If the \ */
/*    PWM counter reaches the on_time minus 1, the output pin will go to high-z state. */
/*    If the PWM counter is in the range of 256-511, the low-side LED will be driven depending on the configured \ */
/*    on_time (registers on_timeX, where X is an odd number). If the PWM counter reaches 256 plus the \ */
/*    on_time minus 1, the output pin will go to high-z state. */
/*    The use of two LEDs at the same time implies that each LED is on for a maximum of the half period (minus one). \ */
/*    This fact needs to be taken into account when determining the series resistors for the LEDs. The on_time can be \ */
/*    used for dimming effects or to compensate differences in the brightness of different (colored) LEDs. */
/*    The state of a LED depends on the configuration of the input multiplexer, which is configured by the \ */
/*    mled_ctrl_output_selX registers. There are several MLED control internal signals as well as netX system internal \ */
/*    signals. The internal signals include an always-off state, a state defined by a line-register and a signal \ */
/*    generated by a module internal blink generator. Each input signal can also be inverted (internal signals and \ */
/*    netX system signals). */
/*    The internal blink signal can be used to have a uniform blinking of several LEDs. The blink frequency is \ */
/*    determined by the blink_counter_max bit field. The blink frequency is always the same for all outputs configured \ */
/*    to blink mode. */
/*    Another mode of operation is the passthrough mode: This mode disables the PWM entierly and a configured signal */
/*    will be output directly or inverted (delayed by one netX system cycle). This mode will be used when the 'sel' \ */
/*    bit field of the phase 0 sel register is set to all '1's. The input signal (and inversion) is selected by the \ */
/*    the corresponding phase 1 sel register. The output can also be configured to high-z state if the corresponding \ */
/*    phase 1 on_time register is set to '0', therefore it must be sent != 0 for regular passthrough operation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_cfg           0x00000000U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_cfg 0xFF001100U
#define Adr_NX90_mled_ctrl_cfg               0xFF001100U
#define DFLT_VAL_NX90_mled_ctrl_cfg          0x00018ffeU

#define MSK_NX90_mled_ctrl_cfg_enable                       0x00000001U
#define SRT_NX90_mled_ctrl_cfg_enable                       0
#define DFLT_VAL_NX90_mled_ctrl_cfg_enable                  0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_cfg_enable               0x00000000U
#define MSK_NX90_mled_ctrl_cfg_prescale_counter_max         0x000007feU
#define SRT_NX90_mled_ctrl_cfg_prescale_counter_max         1
#define DFLT_VAL_NX90_mled_ctrl_cfg_prescale_counter_max    0x000007feU
#define DFLT_BF_VAL_NX90_mled_ctrl_cfg_prescale_counter_max 0x000003ffU
#define MSK_NX90_mled_ctrl_cfg_blink_counter_max            0x000ff800U
#define SRT_NX90_mled_ctrl_cfg_blink_counter_max            11
#define DFLT_VAL_NX90_mled_ctrl_cfg_blink_counter_max       0x00018800U
#define DFLT_BF_VAL_NX90_mled_ctrl_cfg_blink_counter_max    0x00000031U

/* all used bits of 'NX90_mled_ctrl_cfg': */
#define MSK_USED_BITS_NX90_mled_ctrl_cfg 0x000fffffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel0 */
/* => Input signal configuration for output 0 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel0           0x00000004U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel0 0xFF001104U
#define Adr_NX90_mled_ctrl_output_sel0               0xFF001104U
#define DFLT_VAL_NX90_mled_ctrl_output_sel0          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel0_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel0_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel0_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel0_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel0_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel0_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel0_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel0_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel0': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel0 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel1 */
/* => Input signal configuration for output 0 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel1           0x00000008U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel1 0xFF001108U
#define Adr_NX90_mled_ctrl_output_sel1               0xFF001108U
#define DFLT_VAL_NX90_mled_ctrl_output_sel1          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel1_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel1_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel1_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel1_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel1_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel1_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel1_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel1_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel1': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel1 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel2 */
/* => Input signal configuration for output 1 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel2           0x0000000CU
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel2 0xFF00110CU
#define Adr_NX90_mled_ctrl_output_sel2               0xFF00110CU
#define DFLT_VAL_NX90_mled_ctrl_output_sel2          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel2_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel2_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel2_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel2_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel2_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel2_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel2_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel2_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel2': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel2 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel3 */
/* => Input signal configuration for output 1 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel3           0x00000010U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel3 0xFF001110U
#define Adr_NX90_mled_ctrl_output_sel3               0xFF001110U
#define DFLT_VAL_NX90_mled_ctrl_output_sel3          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel3_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel3_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel3_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel3_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel3_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel3_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel3_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel3_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel3': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel3 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel4 */
/* => Input signal configuration for output 2 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel4           0x00000014U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel4 0xFF001114U
#define Adr_NX90_mled_ctrl_output_sel4               0xFF001114U
#define DFLT_VAL_NX90_mled_ctrl_output_sel4          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel4_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel4_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel4_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel4_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel4_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel4_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel4_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel4_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel4': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel4 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel5 */
/* => Input signal configuration for output 2 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel5           0x00000018U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel5 0xFF001118U
#define Adr_NX90_mled_ctrl_output_sel5               0xFF001118U
#define DFLT_VAL_NX90_mled_ctrl_output_sel5          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel5_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel5_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel5_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel5_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel5_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel5_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel5_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel5_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel5': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel5 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel6 */
/* => Input signal configuration for output 3 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel6           0x0000001CU
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel6 0xFF00111CU
#define Adr_NX90_mled_ctrl_output_sel6               0xFF00111CU
#define DFLT_VAL_NX90_mled_ctrl_output_sel6          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel6_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel6_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel6_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel6_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel6_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel6_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel6_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel6_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel6': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel6 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_sel7 */
/* => Input signal configuration for output 3 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_sel7           0x00000020U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_sel7 0xFF001120U
#define Adr_NX90_mled_ctrl_output_sel7               0xFF001120U
#define DFLT_VAL_NX90_mled_ctrl_output_sel7          0x00000000U

#define MSK_NX90_mled_ctrl_output_sel7_inv         0x00000001U
#define SRT_NX90_mled_ctrl_output_sel7_inv         0
#define DFLT_VAL_NX90_mled_ctrl_output_sel7_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel7_inv 0x00000000U
#define MSK_NX90_mled_ctrl_output_sel7_sel         0x0000003eU
#define SRT_NX90_mled_ctrl_output_sel7_sel         1
#define DFLT_VAL_NX90_mled_ctrl_output_sel7_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_output_sel7_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_output_sel7': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_sel7 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time0 */
/* => On-time for output 0 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time0           0x00000024U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time0 0xFF001124U
#define Adr_NX90_mled_ctrl_output_on_time0               0xFF001124U
#define DFLT_VAL_NX90_mled_ctrl_output_on_time0          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time0_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time0_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time0_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time0_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time0': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time0 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time1 */
/* => On-time for output 0 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time1           0x00000028U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time1 0xFF001128U
#define Adr_NX90_mled_ctrl_output_on_time1               0xFF001128U
#define DFLT_VAL_NX90_mled_ctrl_output_on_time1          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time1_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time1_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time1_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time1_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time1': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time1 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time2 */
/* => On-time for output 1 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time2           0x0000002CU
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time2 0xFF00112CU
#define Adr_NX90_mled_ctrl_output_on_time2               0xFF00112CU
#define DFLT_VAL_NX90_mled_ctrl_output_on_time2          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time2_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time2_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time2_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time2_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time2': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time2 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time3 */
/* => On-time for output 1 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time3           0x00000030U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time3 0xFF001130U
#define Adr_NX90_mled_ctrl_output_on_time3               0xFF001130U
#define DFLT_VAL_NX90_mled_ctrl_output_on_time3          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time3_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time3_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time3_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time3_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time3': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time3 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time4 */
/* => On-time for output 2 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time4           0x00000034U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time4 0xFF001134U
#define Adr_NX90_mled_ctrl_output_on_time4               0xFF001134U
#define DFLT_VAL_NX90_mled_ctrl_output_on_time4          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time4_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time4_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time4_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time4_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time4': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time4 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time5 */
/* => On-time for output 2 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time5           0x00000038U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time5 0xFF001138U
#define Adr_NX90_mled_ctrl_output_on_time5               0xFF001138U
#define DFLT_VAL_NX90_mled_ctrl_output_on_time5          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time5_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time5_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time5_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time5_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time5': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time5 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time6 */
/* => On-time for output 3 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time6           0x0000003CU
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time6 0xFF00113CU
#define Adr_NX90_mled_ctrl_output_on_time6               0xFF00113CU
#define DFLT_VAL_NX90_mled_ctrl_output_on_time6          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time6_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time6_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time6_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time6_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time6': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time6 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_output_on_time7 */
/* => On-time for output 3 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_output_on_time7           0x00000040U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_output_on_time7 0xFF001140U
#define Adr_NX90_mled_ctrl_output_on_time7               0xFF001140U
#define DFLT_VAL_NX90_mled_ctrl_output_on_time7          0x000000ffU

#define MSK_NX90_mled_ctrl_output_on_time7_val         0x000000ffU
#define SRT_NX90_mled_ctrl_output_on_time7_val         0
#define DFLT_VAL_NX90_mled_ctrl_output_on_time7_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_output_on_time7_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_output_on_time7': */
#define MSK_USED_BITS_NX90_mled_ctrl_output_on_time7 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_line0 */
/* => MLED line register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_line0           0x00000044U
#define Adr_NX90_mled_ctrl_com_mled_ctrl_line0 0xFF001144U
#define Adr_NX90_mled_ctrl_line0               0xFF001144U
#define DFLT_VAL_NX90_mled_ctrl_line0          0x00000000U

#define MSK_NX90_mled_ctrl_line0_val         0x000000ffU
#define SRT_NX90_mled_ctrl_line0_val         0
#define DFLT_VAL_NX90_mled_ctrl_line0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_line0_val 0x00000000U

/* all used bits of 'NX90_mled_ctrl_line0': */
#define MSK_USED_BITS_NX90_mled_ctrl_line0 0x000000ffU


/* ===================================================================== */

/* AREA ecc_ctrl */
/* Area of ecc_ctrl_com, ecc_ctrl_app */

/* ===================================================================== */

#define Addr_NX90_ecc_ctrl_com 0xFF001200U
#define Addr_NX90_ecc_ctrl_app 0xFF801200U

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram0_ctrl */
/* => INTRAM0 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram0_ctrl          0x00000000U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram0_ctrl 0xFF001200U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram0_ctrl 0xFF801200U
#define DFLT_VAL_NX90_ecc_ctrl_intram0_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram0_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram0_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram0_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram0_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram0_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intram0_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram0_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram0_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram0_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram0_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram1_ctrl */
/* => INTRAM1 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram1_ctrl          0x00000004U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram1_ctrl 0xFF001204U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram1_ctrl 0xFF801204U
#define DFLT_VAL_NX90_ecc_ctrl_intram1_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram1_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram1_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram1_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram1_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram1_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intram1_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram1_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram1_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram1_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram1_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram2_ctrl */
/* => INTRAM2 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram2_ctrl          0x00000008U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram2_ctrl 0xFF001208U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram2_ctrl 0xFF801208U
#define DFLT_VAL_NX90_ecc_ctrl_intram2_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram2_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram2_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram2_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram2_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram2_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intram2_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram2_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram2_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram2_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram2_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram3_ctrl */
/* => INTRAM3 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram3_ctrl          0x0000000CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram3_ctrl 0xFF00120CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram3_ctrl 0xFF80120CU
#define DFLT_VAL_NX90_ecc_ctrl_intram3_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram3_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram3_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram3_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram3_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram3_ctrl_syndrome_inv         0x0000003eU
#define SRT_NX90_ecc_ctrl_intram3_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram3_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram3_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram3_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram3_ctrl 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram4_ctrl */
/* => INTRAM4 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram4_ctrl          0x00000010U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram4_ctrl 0xFF001210U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram4_ctrl 0xFF801210U
#define DFLT_VAL_NX90_ecc_ctrl_intram4_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram4_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram4_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram4_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram4_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram4_ctrl_syndrome_inv         0x0000003eU
#define SRT_NX90_ecc_ctrl_intram4_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram4_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram4_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram4_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram4_ctrl 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram5_ctrl */
/* => INTRAM5 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram5_ctrl          0x00000014U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram5_ctrl 0xFF001214U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram5_ctrl 0xFF801214U
#define DFLT_VAL_NX90_ecc_ctrl_intram5_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram5_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram5_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram5_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram5_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram5_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intram5_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram5_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram5_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram5_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram5_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram6_ctrl */
/* => INTRAM6 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram6_ctrl          0x00000018U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram6_ctrl 0xFF001218U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram6_ctrl 0xFF801218U
#define DFLT_VAL_NX90_ecc_ctrl_intram6_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram6_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram6_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram6_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram6_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram6_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intram6_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram6_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram6_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram6_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram6_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram7_ctrl */
/* => INTRAM7 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram7_ctrl          0x0000001CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram7_ctrl 0xFF00121CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram7_ctrl 0xFF80121CU
#define DFLT_VAL_NX90_ecc_ctrl_intram7_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intram7_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intram7_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intram7_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram7_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intram7_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intram7_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intram7_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intram7_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intram7_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram7_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intramhs_ctrl */
/* => INTRAMHS syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intramhs_ctrl          0x00000020U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intramhs_ctrl 0xFF001220U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intramhs_ctrl 0xFF801220U
#define DFLT_VAL_NX90_ecc_ctrl_intramhs_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_intramhs_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_intramhs_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_intramhs_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intramhs_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_intramhs_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_intramhs_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_intramhs_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_intramhs_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_intramhs_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intramhs_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpec0_pram_ctrl */
/* => XC0_RPEC0_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl          0x00000024U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpec0_pram_ctrl 0xFF001224U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpec0_pram_ctrl 0xFF801224U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_rpec0_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpec0_pram_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpec1_pram_ctrl */
/* => XC0_RPEC1_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl          0x00000028U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpec1_pram_ctrl 0xFF001228U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpec1_pram_ctrl 0xFF801228U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_rpec1_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpec1_pram_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpec0_pram_ctrl */
/* => XC0_TPEC0_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl          0x0000002CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpec0_pram_ctrl 0xFF00122CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpec0_pram_ctrl 0xFF80122CU
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_tpec0_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpec0_pram_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpec1_pram_ctrl */
/* => XC0_TPEC1_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl          0x00000030U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpec1_pram_ctrl 0xFF001230U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpec1_pram_ctrl 0xFF801230U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_tpec1_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpec1_pram_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_dpram0_ctrl */
/* => XC0_DPRAM0 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_dpram0_ctrl          0x00000034U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_dpram0_ctrl 0xFF001234U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_dpram0_ctrl 0xFF801234U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_dpram0_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_dpram0_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_dpram0_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_dpram0_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_dpram0_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_dpram0_ctrl_syndrome_inv         0x0000003eU
#define SRT_NX90_ecc_ctrl_xc0_dpram0_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_dpram0_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_dpram0_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_dpram0_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_dpram0_ctrl 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_dpram1_ctrl */
/* => XC0_DPRAM1 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_dpram1_ctrl          0x00000038U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_dpram1_ctrl 0xFF001238U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_dpram1_ctrl 0xFF801238U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_dpram1_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_dpram1_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_dpram1_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_dpram1_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_dpram1_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_dpram1_ctrl_syndrome_inv         0x0000003eU
#define SRT_NX90_ecc_ctrl_xc0_dpram1_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_dpram1_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_dpram1_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_dpram1_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_dpram1_ctrl 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpu0_ram_ctrl */
/* => XC0_RPU0_RAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl          0x0000003CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpu0_ram_ctrl 0xFF00123CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpu0_ram_ctrl 0xFF80123CU
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_rpu0_ram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpu0_ram_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpu1_ram_ctrl */
/* => XC0_RPU1_RAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl          0x00000040U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpu1_ram_ctrl 0xFF001240U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpu1_ram_ctrl 0xFF801240U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_rpu1_ram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpu1_ram_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpu0_ram_ctrl */
/* => XC0_TPU0_RAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl          0x00000044U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpu0_ram_ctrl 0xFF001244U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpu0_ram_ctrl 0xFF801244U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_tpu0_ram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpu0_ram_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpu1_ram_ctrl */
/* => XC0_TPU1_RAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl          0x00000048U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpu1_ram_ctrl 0xFF001248U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpu1_ram_ctrl 0xFF801248U
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_tpu1_ram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpu1_ram_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_pfifo_ctrl */
/* => XC0_PFIFO syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_pfifo_ctrl          0x0000004CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_pfifo_ctrl 0xFF00124CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_pfifo_ctrl 0xFF80124CU
#define DFLT_VAL_NX90_ecc_ctrl_xc0_pfifo_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xc0_pfifo_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xc0_pfifo_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xc0_pfifo_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_pfifo_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xc0_pfifo_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xc0_pfifo_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xc0_pfifo_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xc0_pfifo_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xc0_pfifo_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_pfifo_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic0_pram_ctrl */
/* => XPIC0_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic0_pram_ctrl          0x00000050U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic0_pram_ctrl 0xFF001250U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic0_pram_ctrl 0xFF801250U
#define DFLT_VAL_NX90_ecc_ctrl_xpic0_pram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xpic0_pram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xpic0_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xpic0_pram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic0_pram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xpic0_pram_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xpic0_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xpic0_pram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic0_pram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xpic0_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic0_pram_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic1_pram_ctrl */
/* => XPIC1_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic1_pram_ctrl          0x00000054U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic1_pram_ctrl 0xFF001254U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic1_pram_ctrl 0xFF801254U
#define DFLT_VAL_NX90_ecc_ctrl_xpic1_pram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xpic1_pram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xpic1_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xpic1_pram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic1_pram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xpic1_pram_ctrl_syndrome_inv         0x000000feU
#define SRT_NX90_ecc_ctrl_xpic1_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xpic1_pram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic1_pram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xpic1_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic1_pram_ctrl 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic0_dram_ctrl */
/* => XPIC0_DRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic0_dram_ctrl          0x00000058U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic0_dram_ctrl 0xFF001258U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic0_dram_ctrl 0xFF801258U
#define DFLT_VAL_NX90_ecc_ctrl_xpic0_dram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xpic0_dram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xpic0_dram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xpic0_dram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic0_dram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xpic0_dram_ctrl_syndrome_inv         0x0000003eU
#define SRT_NX90_ecc_ctrl_xpic0_dram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xpic0_dram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic0_dram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xpic0_dram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic0_dram_ctrl 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic1_dram_ctrl */
/* => XPIC1_DRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic1_dram_ctrl          0x0000005CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic1_dram_ctrl 0xFF00125CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic1_dram_ctrl 0xFF80125CU
#define DFLT_VAL_NX90_ecc_ctrl_xpic1_dram_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_xpic1_dram_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_xpic1_dram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_xpic1_dram_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic1_dram_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_xpic1_dram_ctrl_syndrome_inv         0x0000003eU
#define SRT_NX90_ecc_ctrl_xpic1_dram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_xpic1_dram_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_xpic1_dram_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_xpic1_dram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic1_dram_ctrl 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash0_ctrl */
/* => IFLASH0 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash0_ctrl          0x00000060U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash0_ctrl 0xFF001260U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash0_ctrl 0xFF801260U
#define DFLT_VAL_NX90_ecc_ctrl_iflash0_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_iflash0_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_iflash0_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_iflash0_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash0_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_iflash0_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_iflash0_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_iflash0_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash0_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_iflash0_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash0_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash1_ctrl */
/* => IFLASH1 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash1_ctrl          0x00000064U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash1_ctrl 0xFF001264U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash1_ctrl 0xFF801264U
#define DFLT_VAL_NX90_ecc_ctrl_iflash1_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_iflash1_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_iflash1_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_iflash1_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash1_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_iflash1_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_iflash1_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_iflash1_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash1_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_iflash1_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash1_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash2_ctrl */
/* => IFLASH2 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash2_ctrl          0x00000068U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash2_ctrl 0xFF001268U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash2_ctrl 0xFF801268U
#define DFLT_VAL_NX90_ecc_ctrl_iflash2_ctrl         0x00000000U

#define MSK_NX90_ecc_ctrl_iflash2_ctrl_enable               0x00000001U
#define SRT_NX90_ecc_ctrl_iflash2_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_iflash2_ctrl_enable          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash2_ctrl_enable       0x00000000U
#define MSK_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv         0x000001feU
#define SRT_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv 0x00000000U

/* all used bits of 'NX90_ecc_ctrl_iflash2_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash2_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram0_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram0_addr_sbe          0x0000006CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram0_addr_sbe 0xFF00126CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram0_addr_sbe 0xFF80126CU

#define MSK_NX90_ecc_ctrl_intram0_addr_sbe_address  0x00007fffU
#define SRT_NX90_ecc_ctrl_intram0_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram0_addr_sbe_add_addr 0x001f8000U
#define SRT_NX90_ecc_ctrl_intram0_addr_sbe_add_addr 15

/* all used bits of 'NX90_ecc_ctrl_intram0_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram0_addr_sbe 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram1_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram1_addr_sbe          0x00000070U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram1_addr_sbe 0xFF001270U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram1_addr_sbe 0xFF801270U

#define MSK_NX90_ecc_ctrl_intram1_addr_sbe_address  0x00007fffU
#define SRT_NX90_ecc_ctrl_intram1_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram1_addr_sbe_add_addr 0x001f8000U
#define SRT_NX90_ecc_ctrl_intram1_addr_sbe_add_addr 15

/* all used bits of 'NX90_ecc_ctrl_intram1_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram1_addr_sbe 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram2_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram2_addr_sbe          0x00000074U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram2_addr_sbe 0xFF001274U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram2_addr_sbe 0xFF801274U

#define MSK_NX90_ecc_ctrl_intram2_addr_sbe_address  0x00007fffU
#define SRT_NX90_ecc_ctrl_intram2_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram2_addr_sbe_add_addr 0x001f8000U
#define SRT_NX90_ecc_ctrl_intram2_addr_sbe_add_addr 15

/* all used bits of 'NX90_ecc_ctrl_intram2_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram2_addr_sbe 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram3_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram3_addr_sbe          0x00000078U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram3_addr_sbe 0xFF001278U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram3_addr_sbe 0xFF801278U

#define MSK_NX90_ecc_ctrl_intram3_addr_sbe_address  0x00003fffU
#define SRT_NX90_ecc_ctrl_intram3_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram3_addr_sbe_add_addr 0x0007c000U
#define SRT_NX90_ecc_ctrl_intram3_addr_sbe_add_addr 14

/* all used bits of 'NX90_ecc_ctrl_intram3_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram3_addr_sbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram4_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram4_addr_sbe          0x0000007CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram4_addr_sbe 0xFF00127CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram4_addr_sbe 0xFF80127CU

#define MSK_NX90_ecc_ctrl_intram4_addr_sbe_address  0x00003fffU
#define SRT_NX90_ecc_ctrl_intram4_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram4_addr_sbe_add_addr 0x0007c000U
#define SRT_NX90_ecc_ctrl_intram4_addr_sbe_add_addr 14

/* all used bits of 'NX90_ecc_ctrl_intram4_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram4_addr_sbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram5_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram5_addr_sbe          0x00000080U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram5_addr_sbe 0xFF001280U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram5_addr_sbe 0xFF801280U

#define MSK_NX90_ecc_ctrl_intram5_addr_sbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intram5_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram5_addr_sbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intram5_addr_sbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intram5_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram5_addr_sbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram6_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram6_addr_sbe          0x00000084U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram6_addr_sbe 0xFF001284U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram6_addr_sbe 0xFF801284U

#define MSK_NX90_ecc_ctrl_intram6_addr_sbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intram6_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram6_addr_sbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intram6_addr_sbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intram6_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram6_addr_sbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram7_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram7_addr_sbe          0x00000088U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram7_addr_sbe 0xFF001288U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram7_addr_sbe 0xFF801288U

#define MSK_NX90_ecc_ctrl_intram7_addr_sbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intram7_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intram7_addr_sbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intram7_addr_sbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intram7_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram7_addr_sbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intramhs_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intramhs_addr_sbe          0x0000008CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intramhs_addr_sbe 0xFF00128CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intramhs_addr_sbe 0xFF80128CU

#define MSK_NX90_ecc_ctrl_intramhs_addr_sbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intramhs_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_intramhs_addr_sbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intramhs_addr_sbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intramhs_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intramhs_addr_sbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpec0_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpec0_pram_addr_sbe          0x00000090U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpec0_pram_addr_sbe 0xFF001290U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpec0_pram_addr_sbe 0xFF801290U

#define MSK_NX90_ecc_ctrl_xc0_rpec0_pram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_rpec0_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpec0_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpec0_pram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpec1_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpec1_pram_addr_sbe          0x00000094U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpec1_pram_addr_sbe 0xFF001294U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpec1_pram_addr_sbe 0xFF801294U

#define MSK_NX90_ecc_ctrl_xc0_rpec1_pram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_rpec1_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpec1_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpec1_pram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpec0_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpec0_pram_addr_sbe          0x00000098U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpec0_pram_addr_sbe 0xFF001298U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpec0_pram_addr_sbe 0xFF801298U

#define MSK_NX90_ecc_ctrl_xc0_tpec0_pram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_tpec0_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpec0_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpec0_pram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpec1_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpec1_pram_addr_sbe          0x0000009CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpec1_pram_addr_sbe 0xFF00129CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpec1_pram_addr_sbe 0xFF80129CU

#define MSK_NX90_ecc_ctrl_xc0_tpec1_pram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_tpec1_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpec1_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpec1_pram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpu0_ram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpu0_ram_addr_sbe          0x000000A0U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpu0_ram_addr_sbe 0xFF0012A0U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpu0_ram_addr_sbe 0xFF8012A0U

#define MSK_NX90_ecc_ctrl_xc0_rpu0_ram_addr_sbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_rpu0_ram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpu0_ram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpu0_ram_addr_sbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpu1_ram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpu1_ram_addr_sbe          0x000000A4U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpu1_ram_addr_sbe 0xFF0012A4U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpu1_ram_addr_sbe 0xFF8012A4U

#define MSK_NX90_ecc_ctrl_xc0_rpu1_ram_addr_sbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_rpu1_ram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpu1_ram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpu1_ram_addr_sbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpu0_ram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpu0_ram_addr_sbe          0x000000A8U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpu0_ram_addr_sbe 0xFF0012A8U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpu0_ram_addr_sbe 0xFF8012A8U

#define MSK_NX90_ecc_ctrl_xc0_tpu0_ram_addr_sbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_tpu0_ram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpu0_ram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpu0_ram_addr_sbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpu1_ram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpu1_ram_addr_sbe          0x000000ACU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpu1_ram_addr_sbe 0xFF0012ACU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpu1_ram_addr_sbe 0xFF8012ACU

#define MSK_NX90_ecc_ctrl_xc0_tpu1_ram_addr_sbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_tpu1_ram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpu1_ram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpu1_ram_addr_sbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic0_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic0_pram_addr_sbe          0x000000B0U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic0_pram_addr_sbe 0xFF0012B0U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic0_pram_addr_sbe 0xFF8012B0U

#define MSK_NX90_ecc_ctrl_xpic0_pram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic0_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic0_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic0_pram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic1_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic1_pram_addr_sbe          0x000000B4U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic1_pram_addr_sbe 0xFF0012B4U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic1_pram_addr_sbe 0xFF8012B4U

#define MSK_NX90_ecc_ctrl_xpic1_pram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic1_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic1_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic1_pram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic0_dram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic0_dram_addr_sbe          0x000000B8U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic0_dram_addr_sbe 0xFF0012B8U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic0_dram_addr_sbe 0xFF8012B8U

#define MSK_NX90_ecc_ctrl_xpic0_dram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic0_dram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic0_dram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic0_dram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic1_dram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic1_dram_addr_sbe          0x000000BCU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic1_dram_addr_sbe 0xFF0012BCU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic1_dram_addr_sbe 0xFF8012BCU

#define MSK_NX90_ecc_ctrl_xpic1_dram_addr_sbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic1_dram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic1_dram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic1_dram_addr_sbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash0_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash0_addr_sbe          0x000000C0U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash0_addr_sbe 0xFF0012C0U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash0_addr_sbe 0xFF8012C0U

#define MSK_NX90_ecc_ctrl_iflash0_addr_sbe_address 0x00007fffU
#define SRT_NX90_ecc_ctrl_iflash0_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash0_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash0_addr_sbe 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash1_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash1_addr_sbe          0x000000C4U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash1_addr_sbe 0xFF0012C4U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash1_addr_sbe 0xFF8012C4U

#define MSK_NX90_ecc_ctrl_iflash1_addr_sbe_address 0x00007fffU
#define SRT_NX90_ecc_ctrl_iflash1_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash1_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash1_addr_sbe 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash2_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash2_addr_sbe          0x000000C8U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash2_addr_sbe 0xFF0012C8U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash2_addr_sbe 0xFF8012C8U

#define MSK_NX90_ecc_ctrl_iflash2_addr_sbe_address 0x00007fffU
#define SRT_NX90_ecc_ctrl_iflash2_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash2_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash2_addr_sbe 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram0_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram0_addr_dbe          0x000000CCU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram0_addr_dbe 0xFF0012CCU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram0_addr_dbe 0xFF8012CCU

#define MSK_NX90_ecc_ctrl_intram0_addr_dbe_address  0x00007fffU
#define SRT_NX90_ecc_ctrl_intram0_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram0_addr_dbe_add_addr 0x001f8000U
#define SRT_NX90_ecc_ctrl_intram0_addr_dbe_add_addr 15

/* all used bits of 'NX90_ecc_ctrl_intram0_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram0_addr_dbe 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram1_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram1_addr_dbe          0x000000D0U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram1_addr_dbe 0xFF0012D0U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram1_addr_dbe 0xFF8012D0U

#define MSK_NX90_ecc_ctrl_intram1_addr_dbe_address  0x00007fffU
#define SRT_NX90_ecc_ctrl_intram1_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram1_addr_dbe_add_addr 0x001f8000U
#define SRT_NX90_ecc_ctrl_intram1_addr_dbe_add_addr 15

/* all used bits of 'NX90_ecc_ctrl_intram1_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram1_addr_dbe 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram2_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram2_addr_dbe          0x000000D4U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram2_addr_dbe 0xFF0012D4U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram2_addr_dbe 0xFF8012D4U

#define MSK_NX90_ecc_ctrl_intram2_addr_dbe_address  0x00007fffU
#define SRT_NX90_ecc_ctrl_intram2_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram2_addr_dbe_add_addr 0x001f8000U
#define SRT_NX90_ecc_ctrl_intram2_addr_dbe_add_addr 15

/* all used bits of 'NX90_ecc_ctrl_intram2_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram2_addr_dbe 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram3_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram3_addr_dbe          0x000000D8U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram3_addr_dbe 0xFF0012D8U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram3_addr_dbe 0xFF8012D8U

#define MSK_NX90_ecc_ctrl_intram3_addr_dbe_address  0x00003fffU
#define SRT_NX90_ecc_ctrl_intram3_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram3_addr_dbe_add_addr 0x0007c000U
#define SRT_NX90_ecc_ctrl_intram3_addr_dbe_add_addr 14

/* all used bits of 'NX90_ecc_ctrl_intram3_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram3_addr_dbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram4_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram4_addr_dbe          0x000000DCU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram4_addr_dbe 0xFF0012DCU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram4_addr_dbe 0xFF8012DCU

#define MSK_NX90_ecc_ctrl_intram4_addr_dbe_address  0x00003fffU
#define SRT_NX90_ecc_ctrl_intram4_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram4_addr_dbe_add_addr 0x0007c000U
#define SRT_NX90_ecc_ctrl_intram4_addr_dbe_add_addr 14

/* all used bits of 'NX90_ecc_ctrl_intram4_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram4_addr_dbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram5_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram5_addr_dbe          0x000000E0U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram5_addr_dbe 0xFF0012E0U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram5_addr_dbe 0xFF8012E0U

#define MSK_NX90_ecc_ctrl_intram5_addr_dbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intram5_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram5_addr_dbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intram5_addr_dbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intram5_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram5_addr_dbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram6_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram6_addr_dbe          0x000000E4U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram6_addr_dbe 0xFF0012E4U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram6_addr_dbe 0xFF8012E4U

#define MSK_NX90_ecc_ctrl_intram6_addr_dbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intram6_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram6_addr_dbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intram6_addr_dbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intram6_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram6_addr_dbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intram7_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intram7_addr_dbe          0x000000E8U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intram7_addr_dbe 0xFF0012E8U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intram7_addr_dbe 0xFF8012E8U

#define MSK_NX90_ecc_ctrl_intram7_addr_dbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intram7_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intram7_addr_dbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intram7_addr_dbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intram7_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intram7_addr_dbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_intramhs_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_intramhs_addr_dbe          0x000000ECU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_intramhs_addr_dbe 0xFF0012ECU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_intramhs_addr_dbe 0xFF8012ECU

#define MSK_NX90_ecc_ctrl_intramhs_addr_dbe_address  0x00001fffU
#define SRT_NX90_ecc_ctrl_intramhs_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_intramhs_addr_dbe_add_addr 0x0007e000U
#define SRT_NX90_ecc_ctrl_intramhs_addr_dbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_intramhs_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_intramhs_addr_dbe 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpec0_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpec0_pram_addr_dbe          0x000000F0U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpec0_pram_addr_dbe 0xFF0012F0U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpec0_pram_addr_dbe 0xFF8012F0U

#define MSK_NX90_ecc_ctrl_xc0_rpec0_pram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_rpec0_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpec0_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpec0_pram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpec1_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpec1_pram_addr_dbe          0x000000F4U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpec1_pram_addr_dbe 0xFF0012F4U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpec1_pram_addr_dbe 0xFF8012F4U

#define MSK_NX90_ecc_ctrl_xc0_rpec1_pram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_rpec1_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpec1_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpec1_pram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpec0_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpec0_pram_addr_dbe          0x000000F8U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpec0_pram_addr_dbe 0xFF0012F8U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpec0_pram_addr_dbe 0xFF8012F8U

#define MSK_NX90_ecc_ctrl_xc0_tpec0_pram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_tpec0_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpec0_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpec0_pram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpec1_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpec1_pram_addr_dbe          0x000000FCU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpec1_pram_addr_dbe 0xFF0012FCU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpec1_pram_addr_dbe 0xFF8012FCU

#define MSK_NX90_ecc_ctrl_xc0_tpec1_pram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xc0_tpec1_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpec1_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpec1_pram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpu0_ram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpu0_ram_addr_dbe          0x00000100U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpu0_ram_addr_dbe 0xFF001300U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpu0_ram_addr_dbe 0xFF801300U

#define MSK_NX90_ecc_ctrl_xc0_rpu0_ram_addr_dbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_rpu0_ram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpu0_ram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpu0_ram_addr_dbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_rpu1_ram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_rpu1_ram_addr_dbe          0x00000104U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_rpu1_ram_addr_dbe 0xFF001304U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_rpu1_ram_addr_dbe 0xFF801304U

#define MSK_NX90_ecc_ctrl_xc0_rpu1_ram_addr_dbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_rpu1_ram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_rpu1_ram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_rpu1_ram_addr_dbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpu0_ram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpu0_ram_addr_dbe          0x00000108U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpu0_ram_addr_dbe 0xFF001308U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpu0_ram_addr_dbe 0xFF801308U

#define MSK_NX90_ecc_ctrl_xc0_tpu0_ram_addr_dbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_tpu0_ram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpu0_ram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpu0_ram_addr_dbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xc0_tpu1_ram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xc0_tpu1_ram_addr_dbe          0x0000010CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xc0_tpu1_ram_addr_dbe 0xFF00130CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xc0_tpu1_ram_addr_dbe 0xFF80130CU

#define MSK_NX90_ecc_ctrl_xc0_tpu1_ram_addr_dbe_address 0x0000007fU
#define SRT_NX90_ecc_ctrl_xc0_tpu1_ram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xc0_tpu1_ram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xc0_tpu1_ram_addr_dbe 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic0_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic0_pram_addr_dbe          0x00000110U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic0_pram_addr_dbe 0xFF001310U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic0_pram_addr_dbe 0xFF801310U

#define MSK_NX90_ecc_ctrl_xpic0_pram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic0_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic0_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic0_pram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic1_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic1_pram_addr_dbe          0x00000114U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic1_pram_addr_dbe 0xFF001314U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic1_pram_addr_dbe 0xFF801314U

#define MSK_NX90_ecc_ctrl_xpic1_pram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic1_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic1_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic1_pram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic0_dram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic0_dram_addr_dbe          0x00000118U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic0_dram_addr_dbe 0xFF001318U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic0_dram_addr_dbe 0xFF801318U

#define MSK_NX90_ecc_ctrl_xpic0_dram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic0_dram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic0_dram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic0_dram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_xpic1_dram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_xpic1_dram_addr_dbe          0x0000011CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_xpic1_dram_addr_dbe 0xFF00131CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_xpic1_dram_addr_dbe 0xFF80131CU

#define MSK_NX90_ecc_ctrl_xpic1_dram_addr_dbe_address 0x000007ffU
#define SRT_NX90_ecc_ctrl_xpic1_dram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_xpic1_dram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_xpic1_dram_addr_dbe 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash0_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash0_addr_dbe          0x00000120U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash0_addr_dbe 0xFF001320U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash0_addr_dbe 0xFF801320U

#define MSK_NX90_ecc_ctrl_iflash0_addr_dbe_address 0x00007fffU
#define SRT_NX90_ecc_ctrl_iflash0_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash0_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash0_addr_dbe 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash1_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash1_addr_dbe          0x00000124U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash1_addr_dbe 0xFF001324U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash1_addr_dbe 0xFF801324U

#define MSK_NX90_ecc_ctrl_iflash1_addr_dbe_address 0x00007fffU
#define SRT_NX90_ecc_ctrl_iflash1_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash1_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash1_addr_dbe 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash2_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash2_addr_dbe          0x00000128U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_iflash2_addr_dbe 0xFF001328U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_iflash2_addr_dbe 0xFF801328U

#define MSK_NX90_ecc_ctrl_iflash2_addr_dbe_address 0x00007fffU
#define SRT_NX90_ecc_ctrl_iflash2_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash2_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash2_addr_dbe 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_status_sbe */
/* => ECC status SBE: */
/*    This register collects single bit error (SBE) status information. */
/*    In case of ECC SBE, a bit in this register will be set. */
/*    Bits can be reset by writing '1' to the apprpriate bit position (write to clear). */
/*    If a SBE or DBE bit is set, IRQ signal will be asserted. */
/*    Note: No mask register is required, as error correction can be enabled for each RAM separately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_status_sbe          0x0000012CU
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_status_sbe 0xFF00132CU
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_status_sbe 0xFF80132CU
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe         0x00000000U

#define MSK_NX90_ecc_ctrl_status_sbe_intram0                0x00000001U
#define SRT_NX90_ecc_ctrl_status_sbe_intram0                0
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram0           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram0        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram1                0x00000002U
#define SRT_NX90_ecc_ctrl_status_sbe_intram1                1
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram1           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram1        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram2                0x00000004U
#define SRT_NX90_ecc_ctrl_status_sbe_intram2                2
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram2           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram2        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram3                0x00000008U
#define SRT_NX90_ecc_ctrl_status_sbe_intram3                3
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram3           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram3        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram4                0x00000010U
#define SRT_NX90_ecc_ctrl_status_sbe_intram4                4
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram4           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram4        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram5                0x00000020U
#define SRT_NX90_ecc_ctrl_status_sbe_intram5                5
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram5           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram5        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram6                0x00000040U
#define SRT_NX90_ecc_ctrl_status_sbe_intram6                6
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram6           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram6        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intram7                0x00000080U
#define SRT_NX90_ecc_ctrl_status_sbe_intram7                7
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intram7           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intram7        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_intramhs               0x00000100U
#define SRT_NX90_ecc_ctrl_status_sbe_intramhs               8
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_intramhs          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_intramhs       0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_rpec0_pram         0x00000200U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_rpec0_pram         9
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpec0_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpec0_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_rpec1_pram         0x00000400U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_rpec1_pram         10
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpec1_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpec1_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_tpec0_pram         0x00000800U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_tpec0_pram         11
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpec0_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpec0_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_tpec1_pram         0x00001000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_tpec1_pram         12
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpec1_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpec1_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_dpram0             0x00002000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_dpram0             13
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_dpram0        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_dpram0     0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_dpram1             0x00004000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_dpram1             14
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_dpram1        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_dpram1     0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_rpu0_ram           0x00008000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_rpu0_ram           15
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpu0_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpu0_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_rpu1_ram           0x00010000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_rpu1_ram           16
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpu1_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_rpu1_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_tpu0_ram           0x00020000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_tpu0_ram           17
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpu0_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpu0_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_tpu1_ram           0x00040000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_tpu1_ram           18
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpu1_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_tpu1_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xc0_pfifo              0x00080000U
#define SRT_NX90_ecc_ctrl_status_sbe_xc0_pfifo              19
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xc0_pfifo         0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xc0_pfifo      0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xpic0_pram             0x00100000U
#define SRT_NX90_ecc_ctrl_status_sbe_xpic0_pram             20
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xpic0_pram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xpic0_pram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xpic1_pram             0x00200000U
#define SRT_NX90_ecc_ctrl_status_sbe_xpic1_pram             21
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xpic1_pram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xpic1_pram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xpic0_dram             0x00400000U
#define SRT_NX90_ecc_ctrl_status_sbe_xpic0_dram             22
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xpic0_dram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xpic0_dram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_xpic1_dram             0x00800000U
#define SRT_NX90_ecc_ctrl_status_sbe_xpic1_dram             23
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_xpic1_dram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_xpic1_dram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_iflash0                0x01000000U
#define SRT_NX90_ecc_ctrl_status_sbe_iflash0                24
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_iflash0           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_iflash0        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_iflash1                0x02000000U
#define SRT_NX90_ecc_ctrl_status_sbe_iflash1                25
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_iflash1           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_iflash1        0x00000000U
#define MSK_NX90_ecc_ctrl_status_sbe_iflash2                0x04000000U
#define SRT_NX90_ecc_ctrl_status_sbe_iflash2                26
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_iflash2           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_iflash2        0x00000000U

/* all used bits of 'NX90_ecc_ctrl_status_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_status_sbe 0x07ffffffU

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_status_dbe */
/* => ECC status DBE: */
/*    This register collects double bit error (DBE) status information. */
/*    In case of ECC DBE, a bit of the appropriate RAM in this register will be set. */
/*    Bits can be reset by writing '1' to the apprpriate bit position (write to clear). */
/*    If a SBE or DBE bit is set, IRQ signal will be asserted. */
/*    Note: No mask register is required, as error correction can be enabled for each RAM separately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_status_dbe          0x00000130U
#define Adr_NX90_ecc_ctrl_com_ecc_ctrl_status_dbe 0xFF001330U
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_status_dbe 0xFF801330U
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe         0x00000000U

#define MSK_NX90_ecc_ctrl_status_dbe_intram0                0x00000001U
#define SRT_NX90_ecc_ctrl_status_dbe_intram0                0
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram0           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram0        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram1                0x00000002U
#define SRT_NX90_ecc_ctrl_status_dbe_intram1                1
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram1           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram1        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram2                0x00000004U
#define SRT_NX90_ecc_ctrl_status_dbe_intram2                2
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram2           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram2        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram3                0x00000008U
#define SRT_NX90_ecc_ctrl_status_dbe_intram3                3
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram3           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram3        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram4                0x00000010U
#define SRT_NX90_ecc_ctrl_status_dbe_intram4                4
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram4           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram4        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram5                0x00000020U
#define SRT_NX90_ecc_ctrl_status_dbe_intram5                5
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram5           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram5        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram6                0x00000040U
#define SRT_NX90_ecc_ctrl_status_dbe_intram6                6
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram6           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram6        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intram7                0x00000080U
#define SRT_NX90_ecc_ctrl_status_dbe_intram7                7
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intram7           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intram7        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_intramhs               0x00000100U
#define SRT_NX90_ecc_ctrl_status_dbe_intramhs               8
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_intramhs          0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_intramhs       0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_rpec0_pram         0x00000200U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_rpec0_pram         9
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpec0_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpec0_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_rpec1_pram         0x00000400U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_rpec1_pram         10
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpec1_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpec1_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_tpec0_pram         0x00000800U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_tpec0_pram         11
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpec0_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpec0_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_tpec1_pram         0x00001000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_tpec1_pram         12
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpec1_pram    0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpec1_pram 0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_dpram0             0x00002000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_dpram0             13
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_dpram0        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_dpram0     0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_dpram1             0x00004000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_dpram1             14
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_dpram1        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_dpram1     0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_rpu0_ram           0x00008000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_rpu0_ram           15
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpu0_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpu0_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_rpu1_ram           0x00010000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_rpu1_ram           16
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpu1_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_rpu1_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_tpu0_ram           0x00020000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_tpu0_ram           17
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpu0_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpu0_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_tpu1_ram           0x00040000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_tpu1_ram           18
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpu1_ram      0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_tpu1_ram   0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xc0_pfifo              0x00080000U
#define SRT_NX90_ecc_ctrl_status_dbe_xc0_pfifo              19
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xc0_pfifo         0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xc0_pfifo      0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xpic0_pram             0x00100000U
#define SRT_NX90_ecc_ctrl_status_dbe_xpic0_pram             20
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xpic0_pram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xpic0_pram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xpic1_pram             0x00200000U
#define SRT_NX90_ecc_ctrl_status_dbe_xpic1_pram             21
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xpic1_pram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xpic1_pram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xpic0_dram             0x00400000U
#define SRT_NX90_ecc_ctrl_status_dbe_xpic0_dram             22
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xpic0_dram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xpic0_dram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_xpic1_dram             0x00800000U
#define SRT_NX90_ecc_ctrl_status_dbe_xpic1_dram             23
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_xpic1_dram        0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_xpic1_dram     0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_iflash0                0x01000000U
#define SRT_NX90_ecc_ctrl_status_dbe_iflash0                24
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_iflash0           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_iflash0        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_iflash1                0x02000000U
#define SRT_NX90_ecc_ctrl_status_dbe_iflash1                25
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_iflash1           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_iflash1        0x00000000U
#define MSK_NX90_ecc_ctrl_status_dbe_iflash2                0x04000000U
#define SRT_NX90_ecc_ctrl_status_dbe_iflash2                26
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_iflash2           0x00000000U
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_iflash2        0x00000000U

/* all used bits of 'NX90_ecc_ctrl_status_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_status_dbe 0x07ffffffU


/* ===================================================================== */

/* AREA gpio */
/* Area of gpio_com */

/* ===================================================================== */

#define Addr_NX90_gpio_com 0xFF001400U

/* --------------------------------------------------------------------- */
/* Register gpio_cfg0 */
/* => GPIO pin 0 config register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cfg0      0x00000000U
#define Adr_NX90_gpio_com_gpio_cfg0 0xFF001400U
#define Adr_NX90_gpio_cfg0          0xFF001400U
#define DFLT_VAL_NX90_gpio_cfg0     0x00000000U

#define MSK_NX90_gpio_cfg0_mode               0x0000000fU
#define SRT_NX90_gpio_cfg0_mode               0
#define DFLT_VAL_NX90_gpio_cfg0_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg0_mode       0x00000000U
#define MSK_NX90_gpio_cfg0_inv                0x00000010U
#define SRT_NX90_gpio_cfg0_inv                4
#define DFLT_VAL_NX90_gpio_cfg0_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg0_inv        0x00000000U
#define MSK_NX90_gpio_cfg0_count_ref          0x00000020U
#define SRT_NX90_gpio_cfg0_count_ref          5
#define DFLT_VAL_NX90_gpio_cfg0_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg0_count_ref  0x00000000U
#define MSK_NX90_gpio_cfg0_blink_len          0x000007c0U
#define SRT_NX90_gpio_cfg0_blink_len          6
#define DFLT_VAL_NX90_gpio_cfg0_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg0_blink_len  0x00000000U
#define MSK_NX90_gpio_cfg0_blink_once         0x00000800U
#define SRT_NX90_gpio_cfg0_blink_once         11
#define DFLT_VAL_NX90_gpio_cfg0_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg0_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_cfg0': */
#define MSK_USED_BITS_NX90_gpio_cfg0 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register gpio_cfg1 */
/* => GPIO pin 1 config register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cfg1      0x00000004U
#define Adr_NX90_gpio_com_gpio_cfg1 0xFF001404U
#define Adr_NX90_gpio_cfg1          0xFF001404U
#define DFLT_VAL_NX90_gpio_cfg1     0x00000000U

#define MSK_NX90_gpio_cfg1_mode               0x0000000fU
#define SRT_NX90_gpio_cfg1_mode               0
#define DFLT_VAL_NX90_gpio_cfg1_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg1_mode       0x00000000U
#define MSK_NX90_gpio_cfg1_inv                0x00000010U
#define SRT_NX90_gpio_cfg1_inv                4
#define DFLT_VAL_NX90_gpio_cfg1_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg1_inv        0x00000000U
#define MSK_NX90_gpio_cfg1_count_ref          0x00000020U
#define SRT_NX90_gpio_cfg1_count_ref          5
#define DFLT_VAL_NX90_gpio_cfg1_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg1_count_ref  0x00000000U
#define MSK_NX90_gpio_cfg1_blink_len          0x000007c0U
#define SRT_NX90_gpio_cfg1_blink_len          6
#define DFLT_VAL_NX90_gpio_cfg1_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg1_blink_len  0x00000000U
#define MSK_NX90_gpio_cfg1_blink_once         0x00000800U
#define SRT_NX90_gpio_cfg1_blink_once         11
#define DFLT_VAL_NX90_gpio_cfg1_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg1_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_cfg1': */
#define MSK_USED_BITS_NX90_gpio_cfg1 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register gpio_cfg2 */
/* => GPIO pin 2 config register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cfg2      0x00000008U
#define Adr_NX90_gpio_com_gpio_cfg2 0xFF001408U
#define Adr_NX90_gpio_cfg2          0xFF001408U
#define DFLT_VAL_NX90_gpio_cfg2     0x00000000U

#define MSK_NX90_gpio_cfg2_mode               0x0000000fU
#define SRT_NX90_gpio_cfg2_mode               0
#define DFLT_VAL_NX90_gpio_cfg2_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg2_mode       0x00000000U
#define MSK_NX90_gpio_cfg2_inv                0x00000010U
#define SRT_NX90_gpio_cfg2_inv                4
#define DFLT_VAL_NX90_gpio_cfg2_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg2_inv        0x00000000U
#define MSK_NX90_gpio_cfg2_count_ref          0x00000020U
#define SRT_NX90_gpio_cfg2_count_ref          5
#define DFLT_VAL_NX90_gpio_cfg2_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg2_count_ref  0x00000000U
#define MSK_NX90_gpio_cfg2_blink_len          0x000007c0U
#define SRT_NX90_gpio_cfg2_blink_len          6
#define DFLT_VAL_NX90_gpio_cfg2_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg2_blink_len  0x00000000U
#define MSK_NX90_gpio_cfg2_blink_once         0x00000800U
#define SRT_NX90_gpio_cfg2_blink_once         11
#define DFLT_VAL_NX90_gpio_cfg2_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg2_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_cfg2': */
#define MSK_USED_BITS_NX90_gpio_cfg2 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register gpio_cfg3 */
/* => GPIO pin 3 config register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cfg3      0x0000000CU
#define Adr_NX90_gpio_com_gpio_cfg3 0xFF00140CU
#define Adr_NX90_gpio_cfg3          0xFF00140CU
#define DFLT_VAL_NX90_gpio_cfg3     0x00000000U

#define MSK_NX90_gpio_cfg3_mode               0x0000000fU
#define SRT_NX90_gpio_cfg3_mode               0
#define DFLT_VAL_NX90_gpio_cfg3_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg3_mode       0x00000000U
#define MSK_NX90_gpio_cfg3_inv                0x00000010U
#define SRT_NX90_gpio_cfg3_inv                4
#define DFLT_VAL_NX90_gpio_cfg3_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg3_inv        0x00000000U
#define MSK_NX90_gpio_cfg3_count_ref          0x00000020U
#define SRT_NX90_gpio_cfg3_count_ref          5
#define DFLT_VAL_NX90_gpio_cfg3_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg3_count_ref  0x00000000U
#define MSK_NX90_gpio_cfg3_blink_len          0x000007c0U
#define SRT_NX90_gpio_cfg3_blink_len          6
#define DFLT_VAL_NX90_gpio_cfg3_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg3_blink_len  0x00000000U
#define MSK_NX90_gpio_cfg3_blink_once         0x00000800U
#define SRT_NX90_gpio_cfg3_blink_once         11
#define DFLT_VAL_NX90_gpio_cfg3_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cfg3_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_cfg3': */
#define MSK_USED_BITS_NX90_gpio_cfg3 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register gpio_tc0 */
/* => GPIO pin 0 threshold or capture register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_tc0      0x00000010U
#define Adr_NX90_gpio_com_gpio_tc0 0xFF001410U
#define Adr_NX90_gpio_tc0          0xFF001410U
#define DFLT_VAL_NX90_gpio_tc0     0x00000000U

#define MSK_NX90_gpio_tc0_val         0xffffffffU
#define SRT_NX90_gpio_tc0_val         0
#define DFLT_VAL_NX90_gpio_tc0_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_tc0_val 0x00000000U

/* all used bits of 'NX90_gpio_tc0': */
#define MSK_USED_BITS_NX90_gpio_tc0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_tc1 */
/* => GPIO pin 1 threshold or capture register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_tc1      0x00000014U
#define Adr_NX90_gpio_com_gpio_tc1 0xFF001414U
#define Adr_NX90_gpio_tc1          0xFF001414U
#define DFLT_VAL_NX90_gpio_tc1     0x00000000U

#define MSK_NX90_gpio_tc1_val         0xffffffffU
#define SRT_NX90_gpio_tc1_val         0
#define DFLT_VAL_NX90_gpio_tc1_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_tc1_val 0x00000000U

/* all used bits of 'NX90_gpio_tc1': */
#define MSK_USED_BITS_NX90_gpio_tc1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_tc2 */
/* => GPIO pin 2 threshold or capture register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_tc2      0x00000018U
#define Adr_NX90_gpio_com_gpio_tc2 0xFF001418U
#define Adr_NX90_gpio_tc2          0xFF001418U
#define DFLT_VAL_NX90_gpio_tc2     0x00000000U

#define MSK_NX90_gpio_tc2_val         0xffffffffU
#define SRT_NX90_gpio_tc2_val         0
#define DFLT_VAL_NX90_gpio_tc2_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_tc2_val 0x00000000U

/* all used bits of 'NX90_gpio_tc2': */
#define MSK_USED_BITS_NX90_gpio_tc2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_tc3 */
/* => GPIO pin 3 threshold or capture register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_tc3      0x0000001CU
#define Adr_NX90_gpio_com_gpio_tc3 0xFF00141CU
#define Adr_NX90_gpio_tc3          0xFF00141CU
#define DFLT_VAL_NX90_gpio_tc3     0x00000000U

#define MSK_NX90_gpio_tc3_val         0xffffffffU
#define SRT_NX90_gpio_tc3_val         0
#define DFLT_VAL_NX90_gpio_tc3_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_tc3_val 0x00000000U

/* all used bits of 'NX90_gpio_tc3': */
#define MSK_USED_BITS_NX90_gpio_tc3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_counter0_ctrl */
/* => GPIO counter0 control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_counter0_ctrl      0x00000020U
#define Adr_NX90_gpio_com_gpio_counter0_ctrl 0xFF001420U
#define Adr_NX90_gpio_counter0_ctrl          0xFF001420U
#define DFLT_VAL_NX90_gpio_counter0_ctrl     0x00000000U

#define MSK_NX90_gpio_counter0_ctrl_run               0x00000001U
#define SRT_NX90_gpio_counter0_ctrl_run               0
#define DFLT_VAL_NX90_gpio_counter0_ctrl_run          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_run       0x00000000U
#define MSK_NX90_gpio_counter0_ctrl_sym_nasym         0x00000002U
#define SRT_NX90_gpio_counter0_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_counter0_ctrl_sym_nasym    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_sym_nasym 0x00000000U
#define MSK_NX90_gpio_counter0_ctrl_irq_en            0x00000004U
#define SRT_NX90_gpio_counter0_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_counter0_ctrl_irq_en       0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_irq_en    0x00000000U
#define MSK_NX90_gpio_counter0_ctrl_sel_event         0x00000008U
#define SRT_NX90_gpio_counter0_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_counter0_ctrl_sel_event    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_sel_event 0x00000000U
#define MSK_NX90_gpio_counter0_ctrl_once              0x00000010U
#define SRT_NX90_gpio_counter0_ctrl_once              4
#define DFLT_VAL_NX90_gpio_counter0_ctrl_once         0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_once      0x00000000U
#define MSK_NX90_gpio_counter0_ctrl_event_act         0x00000060U
#define SRT_NX90_gpio_counter0_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_counter0_ctrl_event_act    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_event_act 0x00000000U
#define MSK_NX90_gpio_counter0_ctrl_gpio_ref          0x00000180U
#define SRT_NX90_gpio_counter0_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_counter0_ctrl_gpio_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_ctrl_gpio_ref  0x00000000U

/* all used bits of 'NX90_gpio_counter0_ctrl': */
#define MSK_USED_BITS_NX90_gpio_counter0_ctrl 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register gpio_counter0_max */
/* => GPIO counter0 max value: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_counter0_max      0x00000024U
#define Adr_NX90_gpio_com_gpio_counter0_max 0xFF001424U
#define Adr_NX90_gpio_counter0_max          0xFF001424U
#define DFLT_VAL_NX90_gpio_counter0_max     0x00000000U

#define MSK_NX90_gpio_counter0_max_val         0xffffffffU
#define SRT_NX90_gpio_counter0_max_val         0
#define DFLT_VAL_NX90_gpio_counter0_max_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_max_val 0x00000000U

/* all used bits of 'NX90_gpio_counter0_max': */
#define MSK_USED_BITS_NX90_gpio_counter0_max 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_counter0_cnt */
/* => GPIO counter0 current value: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_counter0_cnt      0x00000028U
#define Adr_NX90_gpio_com_gpio_counter0_cnt 0xFF001428U
#define Adr_NX90_gpio_counter0_cnt          0xFF001428U
#define DFLT_VAL_NX90_gpio_counter0_cnt     0x00000000U

#define MSK_NX90_gpio_counter0_cnt_val         0xffffffffU
#define SRT_NX90_gpio_counter0_cnt_val         0
#define DFLT_VAL_NX90_gpio_counter0_cnt_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_counter0_cnt_val 0x00000000U

/* all used bits of 'NX90_gpio_counter0_cnt': */
#define MSK_USED_BITS_NX90_gpio_counter0_cnt 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_line */
/* => GPIO line register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_line      0x0000002CU
#define Adr_NX90_gpio_com_gpio_line 0xFF00142CU
#define Adr_NX90_gpio_line          0xFF00142CU
#define DFLT_VAL_NX90_gpio_line     0x00000000U

#define MSK_NX90_gpio_line_val         0x0000000fU
#define SRT_NX90_gpio_line_val         0
#define DFLT_VAL_NX90_gpio_line_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_line_val 0x00000000U

/* all used bits of 'NX90_gpio_line': */
#define MSK_USED_BITS_NX90_gpio_line 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register gpio_in */
/* => GPIO latched inputs register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_in      0x00000030U
#define Adr_NX90_gpio_com_gpio_in 0xFF001430U
#define Adr_NX90_gpio_in          0xFF001430U

#define MSK_NX90_gpio_in_val 0x0000000fU
#define SRT_NX90_gpio_in_val 0

/* all used bits of 'NX90_gpio_in': */
#define MSK_USED_BITS_NX90_gpio_in 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register gpio_irq_raw */
/* => GPIO Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_irq_raw      0x00000034U
#define Adr_NX90_gpio_com_gpio_irq_raw 0xFF001434U
#define Adr_NX90_gpio_irq_raw          0xFF001434U
#define DFLT_VAL_NX90_gpio_irq_raw     0x00000000U

#define MSK_NX90_gpio_irq_raw_gpio0         0x00000001U
#define SRT_NX90_gpio_irq_raw_gpio0         0
#define DFLT_VAL_NX90_gpio_irq_raw_gpio0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_raw_gpio0 0x00000000U
#define MSK_NX90_gpio_irq_raw_gpio1         0x00000002U
#define SRT_NX90_gpio_irq_raw_gpio1         1
#define DFLT_VAL_NX90_gpio_irq_raw_gpio1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_raw_gpio1 0x00000000U
#define MSK_NX90_gpio_irq_raw_gpio2         0x00000004U
#define SRT_NX90_gpio_irq_raw_gpio2         2
#define DFLT_VAL_NX90_gpio_irq_raw_gpio2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_raw_gpio2 0x00000000U
#define MSK_NX90_gpio_irq_raw_gpio3         0x00000008U
#define SRT_NX90_gpio_irq_raw_gpio3         3
#define DFLT_VAL_NX90_gpio_irq_raw_gpio3    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_raw_gpio3 0x00000000U

/* all used bits of 'NX90_gpio_irq_raw': */
#define MSK_USED_BITS_NX90_gpio_irq_raw 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register gpio_irq_masked */
/* => GPIO Masked IRQ register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_irq_masked      0x00000038U
#define Adr_NX90_gpio_com_gpio_irq_masked 0xFF001438U
#define Adr_NX90_gpio_irq_masked          0xFF001438U

#define MSK_NX90_gpio_irq_masked_gpio0 0x00000001U
#define SRT_NX90_gpio_irq_masked_gpio0 0
#define MSK_NX90_gpio_irq_masked_gpio1 0x00000002U
#define SRT_NX90_gpio_irq_masked_gpio1 1
#define MSK_NX90_gpio_irq_masked_gpio2 0x00000004U
#define SRT_NX90_gpio_irq_masked_gpio2 2
#define MSK_NX90_gpio_irq_masked_gpio3 0x00000008U
#define SRT_NX90_gpio_irq_masked_gpio3 3

/* all used bits of 'NX90_gpio_irq_masked': */
#define MSK_USED_BITS_NX90_gpio_irq_masked 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register gpio_irq_mask_set */
/* => GPIO interrupt mask set: */
/*    As the single bits might be changed by different software tasks, */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to gpio_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_irq_mask_set      0x0000003CU
#define Adr_NX90_gpio_com_gpio_irq_mask_set 0xFF00143CU
#define Adr_NX90_gpio_irq_mask_set          0xFF00143CU
#define DFLT_VAL_NX90_gpio_irq_mask_set     0x00000000U

#define MSK_NX90_gpio_irq_mask_set_gpio0         0x00000001U
#define SRT_NX90_gpio_irq_mask_set_gpio0         0
#define DFLT_VAL_NX90_gpio_irq_mask_set_gpio0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_set_gpio0 0x00000000U
#define MSK_NX90_gpio_irq_mask_set_gpio1         0x00000002U
#define SRT_NX90_gpio_irq_mask_set_gpio1         1
#define DFLT_VAL_NX90_gpio_irq_mask_set_gpio1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_set_gpio1 0x00000000U
#define MSK_NX90_gpio_irq_mask_set_gpio2         0x00000004U
#define SRT_NX90_gpio_irq_mask_set_gpio2         2
#define DFLT_VAL_NX90_gpio_irq_mask_set_gpio2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_set_gpio2 0x00000000U
#define MSK_NX90_gpio_irq_mask_set_gpio3         0x00000008U
#define SRT_NX90_gpio_irq_mask_set_gpio3         3
#define DFLT_VAL_NX90_gpio_irq_mask_set_gpio3    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_set_gpio3 0x00000000U

/* all used bits of 'NX90_gpio_irq_mask_set': */
#define MSK_USED_BITS_NX90_gpio_irq_mask_set 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register gpio_irq_mask_rst */
/* => GPIO interrupt mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_irq_mask_rst      0x00000040U
#define Adr_NX90_gpio_com_gpio_irq_mask_rst 0xFF001440U
#define Adr_NX90_gpio_irq_mask_rst          0xFF001440U
#define DFLT_VAL_NX90_gpio_irq_mask_rst     0x00000000U

#define MSK_NX90_gpio_irq_mask_rst_gpio0         0x00000001U
#define SRT_NX90_gpio_irq_mask_rst_gpio0         0
#define DFLT_VAL_NX90_gpio_irq_mask_rst_gpio0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_rst_gpio0 0x00000000U
#define MSK_NX90_gpio_irq_mask_rst_gpio1         0x00000002U
#define SRT_NX90_gpio_irq_mask_rst_gpio1         1
#define DFLT_VAL_NX90_gpio_irq_mask_rst_gpio1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_rst_gpio1 0x00000000U
#define MSK_NX90_gpio_irq_mask_rst_gpio2         0x00000004U
#define SRT_NX90_gpio_irq_mask_rst_gpio2         2
#define DFLT_VAL_NX90_gpio_irq_mask_rst_gpio2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_rst_gpio2 0x00000000U
#define MSK_NX90_gpio_irq_mask_rst_gpio3         0x00000008U
#define SRT_NX90_gpio_irq_mask_rst_gpio3         3
#define DFLT_VAL_NX90_gpio_irq_mask_rst_gpio3    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_irq_mask_rst_gpio3 0x00000000U

/* all used bits of 'NX90_gpio_irq_mask_rst': */
#define MSK_USED_BITS_NX90_gpio_irq_mask_rst 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register gpio_cnt_irq_raw */
/* => Counter Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cnt_irq_raw      0x00000044U
#define Adr_NX90_gpio_com_gpio_cnt_irq_raw 0xFF001444U
#define Adr_NX90_gpio_cnt_irq_raw          0xFF001444U
#define DFLT_VAL_NX90_gpio_cnt_irq_raw     0x00000000U

#define MSK_NX90_gpio_cnt_irq_raw_cnt0         0x00000001U
#define SRT_NX90_gpio_cnt_irq_raw_cnt0         0
#define DFLT_VAL_NX90_gpio_cnt_irq_raw_cnt0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cnt_irq_raw_cnt0 0x00000000U

/* all used bits of 'NX90_gpio_cnt_irq_raw': */
#define MSK_USED_BITS_NX90_gpio_cnt_irq_raw 0x00000001U

/* --------------------------------------------------------------------- */
/* Register gpio_cnt_irq_masked */
/* => Counter Masked IRQ register: */
/*    Read access shows status of masked IRQs (cnt_irq_raw AND cnt_irq_mask). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cnt_irq_masked      0x00000048U
#define Adr_NX90_gpio_com_gpio_cnt_irq_masked 0xFF001448U
#define Adr_NX90_gpio_cnt_irq_masked          0xFF001448U

#define MSK_NX90_gpio_cnt_irq_masked_cnt0 0x00000001U
#define SRT_NX90_gpio_cnt_irq_masked_cnt0 0

/* all used bits of 'NX90_gpio_cnt_irq_masked': */
#define MSK_USED_BITS_NX90_gpio_cnt_irq_masked 0x00000001U

/* --------------------------------------------------------------------- */
/* Register gpio_cnt_irq_mask_set */
/* => Counter interrupt mask set: */
/*    As the single bits might be changed by different software tasks, */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to cnt_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cnt_irq_mask_set      0x0000004CU
#define Adr_NX90_gpio_com_gpio_cnt_irq_mask_set 0xFF00144CU
#define Adr_NX90_gpio_cnt_irq_mask_set          0xFF00144CU
#define DFLT_VAL_NX90_gpio_cnt_irq_mask_set     0x00000000U

#define MSK_NX90_gpio_cnt_irq_mask_set_cnt0         0x00000001U
#define SRT_NX90_gpio_cnt_irq_mask_set_cnt0         0
#define DFLT_VAL_NX90_gpio_cnt_irq_mask_set_cnt0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cnt_irq_mask_set_cnt0 0x00000000U

/* all used bits of 'NX90_gpio_cnt_irq_mask_set': */
#define MSK_USED_BITS_NX90_gpio_cnt_irq_mask_set 0x00000001U

/* --------------------------------------------------------------------- */
/* Register gpio_cnt_irq_mask_rst */
/* => Counter interrupt mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_cnt_irq_mask_rst      0x00000050U
#define Adr_NX90_gpio_com_gpio_cnt_irq_mask_rst 0xFF001450U
#define Adr_NX90_gpio_cnt_irq_mask_rst          0xFF001450U
#define DFLT_VAL_NX90_gpio_cnt_irq_mask_rst     0x00000000U

#define MSK_NX90_gpio_cnt_irq_mask_rst_cnt0         0x00000001U
#define SRT_NX90_gpio_cnt_irq_mask_rst_cnt0         0
#define DFLT_VAL_NX90_gpio_cnt_irq_mask_rst_cnt0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_cnt_irq_mask_rst_cnt0 0x00000000U

/* all used bits of 'NX90_gpio_cnt_irq_mask_rst': */
#define MSK_USED_BITS_NX90_gpio_cnt_irq_mask_rst 0x00000001U


/* ===================================================================== */

/* AREA blink */
/* Area of blink_com */

/* ===================================================================== */

#define Addr_NX90_blink_com 0xFF001500U

/* --------------------------------------------------------------------- */
/* Register blink_enable */
/* => Blinking output enable register: */
/*    Upper bits are write mask and thus not readable. */
/*    This allows synchronous start of multiple blinking outputs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_enable       0x00000000U
#define Adr_NX90_blink_com_blink_enable 0xFF001500U
#define Adr_NX90_blink_enable           0xFF001500U
#define DFLT_VAL_NX90_blink_enable      0x00000000U

#define MSK_NX90_blink_enable_en0            0x00000001U
#define SRT_NX90_blink_enable_en0            0
#define DFLT_VAL_NX90_blink_enable_en0       0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en0    0x00000000U
#define MSK_NX90_blink_enable_en1            0x00000002U
#define SRT_NX90_blink_enable_en1            1
#define DFLT_VAL_NX90_blink_enable_en1       0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en1    0x00000000U
#define MSK_NX90_blink_enable_en2            0x00000004U
#define SRT_NX90_blink_enable_en2            2
#define DFLT_VAL_NX90_blink_enable_en2       0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en2    0x00000000U
#define MSK_NX90_blink_enable_en3            0x00000008U
#define SRT_NX90_blink_enable_en3            3
#define DFLT_VAL_NX90_blink_enable_en3       0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en3    0x00000000U
#define MSK_NX90_blink_enable_en0_wm         0x00010000U
#define SRT_NX90_blink_enable_en0_wm         16
#define DFLT_VAL_NX90_blink_enable_en0_wm    0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en0_wm 0x00000000U
#define MSK_NX90_blink_enable_en1_wm         0x00020000U
#define SRT_NX90_blink_enable_en1_wm         17
#define DFLT_VAL_NX90_blink_enable_en1_wm    0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en1_wm 0x00000000U
#define MSK_NX90_blink_enable_en2_wm         0x00040000U
#define SRT_NX90_blink_enable_en2_wm         18
#define DFLT_VAL_NX90_blink_enable_en2_wm    0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en2_wm 0x00000000U
#define MSK_NX90_blink_enable_en3_wm         0x00080000U
#define SRT_NX90_blink_enable_en3_wm         19
#define DFLT_VAL_NX90_blink_enable_en3_wm    0x00000000U
#define DFLT_BF_VAL_NX90_blink_enable_en3_wm 0x00000000U

/* all used bits of 'NX90_blink_enable': */
#define MSK_USED_BITS_NX90_blink_enable 0x000f000fU

/* --------------------------------------------------------------------- */
/* Register blink_config0 */
/* => Blinking output config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_config0       0x00000004U
#define Adr_NX90_blink_com_blink_config0 0xFF001504U
#define Adr_NX90_blink_config0           0xFF001504U
#define DFLT_VAL_NX90_blink_config0      0x00000163U

#define MSK_NX90_blink_config0_period            0x000000ffU
#define SRT_NX90_blink_config0_period            0
#define DFLT_VAL_NX90_blink_config0_period       0x00000063U
#define DFLT_BF_VAL_NX90_blink_config0_period    0x00000063U
#define MSK_NX90_blink_config0_blink_len         0x00001f00U
#define SRT_NX90_blink_config0_blink_len         8
#define DFLT_VAL_NX90_blink_config0_blink_len    0x00000100U
#define DFLT_BF_VAL_NX90_blink_config0_blink_len 0x00000001U

/* all used bits of 'NX90_blink_config0': */
#define MSK_USED_BITS_NX90_blink_config0 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register blink_seq0 */
/* => Blinking output sequence register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_seq0       0x00000008U
#define Adr_NX90_blink_com_blink_seq0 0xFF001508U
#define Adr_NX90_blink_seq0           0xFF001508U
#define DFLT_VAL_NX90_blink_seq0      0x00000001U

#define MSK_NX90_blink_seq0_val         0xffffffffU
#define SRT_NX90_blink_seq0_val         0
#define DFLT_VAL_NX90_blink_seq0_val    0x00000001U
#define DFLT_BF_VAL_NX90_blink_seq0_val 0x00000001U

/* all used bits of 'NX90_blink_seq0': */
#define MSK_USED_BITS_NX90_blink_seq0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register blink_config1 */
/* => Blinking output config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_config1       0x0000000CU
#define Adr_NX90_blink_com_blink_config1 0xFF00150CU
#define Adr_NX90_blink_config1           0xFF00150CU
#define DFLT_VAL_NX90_blink_config1      0x00000163U

#define MSK_NX90_blink_config1_period            0x000000ffU
#define SRT_NX90_blink_config1_period            0
#define DFLT_VAL_NX90_blink_config1_period       0x00000063U
#define DFLT_BF_VAL_NX90_blink_config1_period    0x00000063U
#define MSK_NX90_blink_config1_blink_len         0x00001f00U
#define SRT_NX90_blink_config1_blink_len         8
#define DFLT_VAL_NX90_blink_config1_blink_len    0x00000100U
#define DFLT_BF_VAL_NX90_blink_config1_blink_len 0x00000001U

/* all used bits of 'NX90_blink_config1': */
#define MSK_USED_BITS_NX90_blink_config1 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register blink_seq1 */
/* => Blinking output sequence register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_seq1       0x00000010U
#define Adr_NX90_blink_com_blink_seq1 0xFF001510U
#define Adr_NX90_blink_seq1           0xFF001510U
#define DFLT_VAL_NX90_blink_seq1      0x00000001U

#define MSK_NX90_blink_seq1_val         0xffffffffU
#define SRT_NX90_blink_seq1_val         0
#define DFLT_VAL_NX90_blink_seq1_val    0x00000001U
#define DFLT_BF_VAL_NX90_blink_seq1_val 0x00000001U

/* all used bits of 'NX90_blink_seq1': */
#define MSK_USED_BITS_NX90_blink_seq1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register blink_config2 */
/* => Blinking output config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_config2       0x00000014U
#define Adr_NX90_blink_com_blink_config2 0xFF001514U
#define Adr_NX90_blink_config2           0xFF001514U
#define DFLT_VAL_NX90_blink_config2      0x00000163U

#define MSK_NX90_blink_config2_period            0x000000ffU
#define SRT_NX90_blink_config2_period            0
#define DFLT_VAL_NX90_blink_config2_period       0x00000063U
#define DFLT_BF_VAL_NX90_blink_config2_period    0x00000063U
#define MSK_NX90_blink_config2_blink_len         0x00001f00U
#define SRT_NX90_blink_config2_blink_len         8
#define DFLT_VAL_NX90_blink_config2_blink_len    0x00000100U
#define DFLT_BF_VAL_NX90_blink_config2_blink_len 0x00000001U

/* all used bits of 'NX90_blink_config2': */
#define MSK_USED_BITS_NX90_blink_config2 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register blink_seq2 */
/* => Blinking output sequence register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_seq2       0x00000018U
#define Adr_NX90_blink_com_blink_seq2 0xFF001518U
#define Adr_NX90_blink_seq2           0xFF001518U
#define DFLT_VAL_NX90_blink_seq2      0x00000001U

#define MSK_NX90_blink_seq2_val         0xffffffffU
#define SRT_NX90_blink_seq2_val         0
#define DFLT_VAL_NX90_blink_seq2_val    0x00000001U
#define DFLT_BF_VAL_NX90_blink_seq2_val 0x00000001U

/* all used bits of 'NX90_blink_seq2': */
#define MSK_USED_BITS_NX90_blink_seq2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register blink_config3 */
/* => Blinking output config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_config3       0x0000001CU
#define Adr_NX90_blink_com_blink_config3 0xFF00151CU
#define Adr_NX90_blink_config3           0xFF00151CU
#define DFLT_VAL_NX90_blink_config3      0x00000163U

#define MSK_NX90_blink_config3_period            0x000000ffU
#define SRT_NX90_blink_config3_period            0
#define DFLT_VAL_NX90_blink_config3_period       0x00000063U
#define DFLT_BF_VAL_NX90_blink_config3_period    0x00000063U
#define MSK_NX90_blink_config3_blink_len         0x00001f00U
#define SRT_NX90_blink_config3_blink_len         8
#define DFLT_VAL_NX90_blink_config3_blink_len    0x00000100U
#define DFLT_BF_VAL_NX90_blink_config3_blink_len 0x00000001U

/* all used bits of 'NX90_blink_config3': */
#define MSK_USED_BITS_NX90_blink_config3 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register blink_seq3 */
/* => Blinking output sequence register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_blink_seq3       0x00000020U
#define Adr_NX90_blink_com_blink_seq3 0xFF001520U
#define Adr_NX90_blink_seq3           0xFF001520U
#define DFLT_VAL_NX90_blink_seq3      0x00000001U

#define MSK_NX90_blink_seq3_val         0xffffffffU
#define SRT_NX90_blink_seq3_val         0
#define DFLT_VAL_NX90_blink_seq3_val    0x00000001U
#define DFLT_BF_VAL_NX90_blink_seq3_val 0x00000001U

/* all used bits of 'NX90_blink_seq3': */
#define MSK_USED_BITS_NX90_blink_seq3 0xffffffffU


/* ===================================================================== */

/* AREA intlogic_systime_lt */
/* Area of systime_lt_com, systime_lt_xpic_com, systime_lt_app, systime_lt_xpic_app */

/* ===================================================================== */

#define Addr_NX90_systime_lt_com      0xFF001540U
#define Addr_NX90_systime_lt_xpic_com 0xFF2001C0U
#define Addr_NX90_systime_lt_app      0xFF801540U
#define Addr_NX90_systime_lt_xpic_app 0xFF9001C0U

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_ns */
/* => systime_com_ns last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_ns                 0x00000000U
#define Adr_NX90_systime_lt_com_intlogic_lt_systime_com_ns      0xFF001540U
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systime_com_ns 0xFF2001C0U
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_ns      0xFF801540U
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_ns 0xFF9001C0U

#define MSK_NX90_intlogic_lt_systime_com_ns_val 0xffffffffU
#define SRT_NX90_intlogic_lt_systime_com_ns_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_ns': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_s */
/* => systime_com_s last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_s                 0x00000004U
#define Adr_NX90_systime_lt_com_intlogic_lt_systime_com_s      0xFF001544U
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systime_com_s 0xFF2001C4U
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_s      0xFF801544U
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_s 0xFF9001C4U

#define MSK_NX90_intlogic_lt_systime_com_s_val 0xffffffffU
#define SRT_NX90_intlogic_lt_systime_com_s_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_s': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_s 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_uc_ns */
/* => systime_com_uc_ns last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_uc_ns                 0x00000008U
#define Adr_NX90_systime_lt_com_intlogic_lt_systime_com_uc_ns      0xFF001548U
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systime_com_uc_ns 0xFF2001C8U
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_uc_ns      0xFF801548U
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_uc_ns 0xFF9001C8U

#define MSK_NX90_intlogic_lt_systime_com_uc_ns_val 0xffffffffU
#define SRT_NX90_intlogic_lt_systime_com_uc_ns_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_uc_ns': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_uc_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_uc_s */
/* => systime_com_uc_s last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_uc_s                 0x0000000CU
#define Adr_NX90_systime_lt_com_intlogic_lt_systime_com_uc_s      0xFF00154CU
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systime_com_uc_s 0xFF2001CCU
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_uc_s      0xFF80154CU
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_uc_s 0xFF9001CCU

#define MSK_NX90_intlogic_lt_systime_com_uc_s_val 0xffffffffU
#define SRT_NX90_intlogic_lt_systime_com_uc_s_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_uc_s': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_uc_s 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_app_ns */
/* => systime_app_ns last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_app_ns                 0x00000010U
#define Adr_NX90_systime_lt_com_intlogic_lt_systime_app_ns      0xFF001550U
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systime_app_ns 0xFF2001D0U
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_app_ns      0xFF801550U
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_app_ns 0xFF9001D0U

#define MSK_NX90_intlogic_lt_systime_app_ns_val 0xffffffffU
#define SRT_NX90_intlogic_lt_systime_app_ns_val 0

/* all used bits of 'NX90_intlogic_lt_systime_app_ns': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_app_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_app_s */
/* => systime_app_s last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_app_s                 0x00000014U
#define Adr_NX90_systime_lt_com_intlogic_lt_systime_app_s      0xFF001554U
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systime_app_s 0xFF2001D4U
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_app_s      0xFF801554U
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_app_s 0xFF9001D4U

#define MSK_NX90_intlogic_lt_systime_app_s_val 0xffffffffU
#define SRT_NX90_intlogic_lt_systime_app_s_val 0

/* all used bits of 'NX90_intlogic_lt_systime_app_s': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_app_s 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systimes_latch */
/* => latch systimes by writing 1'b1 to the assigned bit */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systimes_latch                 0x00000018U
#define Adr_NX90_systime_lt_com_intlogic_lt_systimes_latch      0xFF001558U
#define Adr_NX90_systime_lt_xpic_com_intlogic_lt_systimes_latch 0xFF2001D8U
#define Adr_NX90_systime_lt_app_intlogic_lt_systimes_latch      0xFF801558U
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systimes_latch 0xFF9001D8U
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch                0x00000000U

#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_ns            0x00000001U
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_ns            0
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_ns       0x00000000U
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_ns    0x00000000U
#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_s             0x00000002U
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_s             1
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_s        0x00000000U
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_s     0x00000000U
#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns         0x00000004U
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns         2
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns    0x00000000U
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns 0x00000000U
#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_uc_s          0x00000008U
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_uc_s          3
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_s     0x00000000U
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_s  0x00000000U
#define MSK_NX90_intlogic_lt_systimes_latch_systime_app_ns            0x00000010U
#define SRT_NX90_intlogic_lt_systimes_latch_systime_app_ns            4
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_app_ns       0x00000000U
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_app_ns    0x00000000U
#define MSK_NX90_intlogic_lt_systimes_latch_systime_app_s             0x00000020U
#define SRT_NX90_intlogic_lt_systimes_latch_systime_app_s             5
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_app_s        0x00000000U
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_app_s     0x00000000U

/* all used bits of 'NX90_intlogic_lt_systimes_latch': */
#define MSK_USED_BITS_NX90_intlogic_lt_systimes_latch 0x0000003fU


/* ===================================================================== */

/* AREA arm_timer */
/* Area of timer_com, timer_xpic_com, timer_app, timer_xpic_app */

/* ===================================================================== */

#define Addr_NX90_timer_com      0xFF001580U
#define Addr_NX90_timer_xpic_com 0xFF200100U
#define Addr_NX90_timer_app      0xFF801580U
#define Addr_NX90_timer_xpic_app 0xFF900100U

/* --------------------------------------------------------------------- */
/* Register timer_config_timer0 */
/* => ARM TIMER Config register0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_config_timer0            0x00000000U
#define Adr_NX90_timer_com_timer_config_timer0      0xFF001580U
#define Adr_NX90_timer_xpic_com_timer_config_timer0 0xFF200100U
#define Adr_NX90_timer_app_timer_config_timer0      0xFF801580U
#define Adr_NX90_timer_xpic_app_timer_config_timer0 0xFF900100U
#define DFLT_VAL_NX90_timer_config_timer0           0x00000000U

#define MSK_NX90_timer_config_timer0_mode                   0x00000003U
#define SRT_NX90_timer_config_timer0_mode                   0
#define DFLT_VAL_NX90_timer_config_timer0_mode              0x00000000U
#define DFLT_BF_VAL_NX90_timer_config_timer0_mode           0x00000000U
#define MSK_NX90_timer_config_timer0_systime_config         0x0000000cU
#define SRT_NX90_timer_config_timer0_systime_config         2
#define DFLT_VAL_NX90_timer_config_timer0_systime_config    0x00000000U
#define DFLT_BF_VAL_NX90_timer_config_timer0_systime_config 0x00000000U

/* all used bits of 'NX90_timer_config_timer0': */
#define MSK_USED_BITS_NX90_timer_config_timer0 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_config_timer1 */
/* => ARM TIMER Config register1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_config_timer1            0x00000004U
#define Adr_NX90_timer_com_timer_config_timer1      0xFF001584U
#define Adr_NX90_timer_xpic_com_timer_config_timer1 0xFF200104U
#define Adr_NX90_timer_app_timer_config_timer1      0xFF801584U
#define Adr_NX90_timer_xpic_app_timer_config_timer1 0xFF900104U
#define DFLT_VAL_NX90_timer_config_timer1           0x00000000U

#define MSK_NX90_timer_config_timer1_mode                   0x00000003U
#define SRT_NX90_timer_config_timer1_mode                   0
#define DFLT_VAL_NX90_timer_config_timer1_mode              0x00000000U
#define DFLT_BF_VAL_NX90_timer_config_timer1_mode           0x00000000U
#define MSK_NX90_timer_config_timer1_systime_config         0x0000000cU
#define SRT_NX90_timer_config_timer1_systime_config         2
#define DFLT_VAL_NX90_timer_config_timer1_systime_config    0x00000000U
#define DFLT_BF_VAL_NX90_timer_config_timer1_systime_config 0x00000000U

/* all used bits of 'NX90_timer_config_timer1': */
#define MSK_USED_BITS_NX90_timer_config_timer1 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_config_timer2 */
/* => ARM TIMER Config register2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_config_timer2            0x00000008U
#define Adr_NX90_timer_com_timer_config_timer2      0xFF001588U
#define Adr_NX90_timer_xpic_com_timer_config_timer2 0xFF200108U
#define Adr_NX90_timer_app_timer_config_timer2      0xFF801588U
#define Adr_NX90_timer_xpic_app_timer_config_timer2 0xFF900108U
#define DFLT_VAL_NX90_timer_config_timer2           0x00000000U

#define MSK_NX90_timer_config_timer2_mode                   0x00000003U
#define SRT_NX90_timer_config_timer2_mode                   0
#define DFLT_VAL_NX90_timer_config_timer2_mode              0x00000000U
#define DFLT_BF_VAL_NX90_timer_config_timer2_mode           0x00000000U
#define MSK_NX90_timer_config_timer2_systime_config         0x0000000cU
#define SRT_NX90_timer_config_timer2_systime_config         2
#define DFLT_VAL_NX90_timer_config_timer2_systime_config    0x00000000U
#define DFLT_BF_VAL_NX90_timer_config_timer2_systime_config 0x00000000U

/* all used bits of 'NX90_timer_config_timer2': */
#define MSK_USED_BITS_NX90_timer_config_timer2 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_preload_timer0 */
/* => ARM TIMER Timer 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_preload_timer0            0x0000000CU
#define Adr_NX90_timer_com_timer_preload_timer0      0xFF00158CU
#define Adr_NX90_timer_xpic_com_timer_preload_timer0 0xFF20010CU
#define Adr_NX90_timer_app_timer_preload_timer0      0xFF80158CU
#define Adr_NX90_timer_xpic_app_timer_preload_timer0 0xFF90010CU
#define DFLT_VAL_NX90_timer_preload_timer0           0x00000000U

#define MSK_NX90_timer_preload_timer0_val         0xffffffffU
#define SRT_NX90_timer_preload_timer0_val         0
#define DFLT_VAL_NX90_timer_preload_timer0_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_preload_timer0_val 0x00000000U

/* all used bits of 'NX90_timer_preload_timer0': */
#define MSK_USED_BITS_NX90_timer_preload_timer0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_preload_timer1 */
/* => ARM TIMER Timer 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_preload_timer1            0x00000010U
#define Adr_NX90_timer_com_timer_preload_timer1      0xFF001590U
#define Adr_NX90_timer_xpic_com_timer_preload_timer1 0xFF200110U
#define Adr_NX90_timer_app_timer_preload_timer1      0xFF801590U
#define Adr_NX90_timer_xpic_app_timer_preload_timer1 0xFF900110U
#define DFLT_VAL_NX90_timer_preload_timer1           0x00000000U

#define MSK_NX90_timer_preload_timer1_val         0xffffffffU
#define SRT_NX90_timer_preload_timer1_val         0
#define DFLT_VAL_NX90_timer_preload_timer1_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_preload_timer1_val 0x00000000U

/* all used bits of 'NX90_timer_preload_timer1': */
#define MSK_USED_BITS_NX90_timer_preload_timer1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_preload_timer2 */
/* => ARM TIMER Timer 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_preload_timer2            0x00000014U
#define Adr_NX90_timer_com_timer_preload_timer2      0xFF001594U
#define Adr_NX90_timer_xpic_com_timer_preload_timer2 0xFF200114U
#define Adr_NX90_timer_app_timer_preload_timer2      0xFF801594U
#define Adr_NX90_timer_xpic_app_timer_preload_timer2 0xFF900114U
#define DFLT_VAL_NX90_timer_preload_timer2           0x00000000U

#define MSK_NX90_timer_preload_timer2_val         0xffffffffU
#define SRT_NX90_timer_preload_timer2_val         0
#define DFLT_VAL_NX90_timer_preload_timer2_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_preload_timer2_val 0x00000000U

/* all used bits of 'NX90_timer_preload_timer2': */
#define MSK_USED_BITS_NX90_timer_preload_timer2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_timer0 */
/* => ARM TIMER Timer 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_timer0            0x00000018U
#define Adr_NX90_timer_com_timer_timer0      0xFF001598U
#define Adr_NX90_timer_xpic_com_timer_timer0 0xFF200118U
#define Adr_NX90_timer_app_timer_timer0      0xFF801598U
#define Adr_NX90_timer_xpic_app_timer_timer0 0xFF900118U
#define DFLT_VAL_NX90_timer_timer0           0x00000000U

#define MSK_NX90_timer_timer0_val         0xffffffffU
#define SRT_NX90_timer_timer0_val         0
#define DFLT_VAL_NX90_timer_timer0_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_timer0_val 0x00000000U

/* all used bits of 'NX90_timer_timer0': */
#define MSK_USED_BITS_NX90_timer_timer0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_timer1 */
/* => ARM TIMER Timer 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_timer1            0x0000001CU
#define Adr_NX90_timer_com_timer_timer1      0xFF00159CU
#define Adr_NX90_timer_xpic_com_timer_timer1 0xFF20011CU
#define Adr_NX90_timer_app_timer_timer1      0xFF80159CU
#define Adr_NX90_timer_xpic_app_timer_timer1 0xFF90011CU
#define DFLT_VAL_NX90_timer_timer1           0x00000000U

#define MSK_NX90_timer_timer1_val         0xffffffffU
#define SRT_NX90_timer_timer1_val         0
#define DFLT_VAL_NX90_timer_timer1_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_timer1_val 0x00000000U

/* all used bits of 'NX90_timer_timer1': */
#define MSK_USED_BITS_NX90_timer_timer1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_timer2 */
/* => ARM TIMER Timer 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_timer2            0x00000020U
#define Adr_NX90_timer_com_timer_timer2      0xFF0015A0U
#define Adr_NX90_timer_xpic_com_timer_timer2 0xFF200120U
#define Adr_NX90_timer_app_timer_timer2      0xFF8015A0U
#define Adr_NX90_timer_xpic_app_timer_timer2 0xFF900120U
#define DFLT_VAL_NX90_timer_timer2           0x00000000U

#define MSK_NX90_timer_timer2_val         0xffffffffU
#define SRT_NX90_timer_timer2_val         0
#define DFLT_VAL_NX90_timer_timer2_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_timer2_val 0x00000000U

/* all used bits of 'NX90_timer_timer2': */
#define MSK_USED_BITS_NX90_timer_timer2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_systime_s */
/* => ARM_TIMER upper SYSTIME register */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    This register should be dedicated to accesses via ARM. */
/*    xPIC software should access systime via xpic_timer_systime_s. */
/*    Host software should access systime via DPM at systime_s. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_systime_s            0x00000024U
#define Adr_NX90_timer_com_timer_systime_s      0xFF0015A4U
#define Adr_NX90_timer_xpic_com_timer_systime_s 0xFF200124U
#define Adr_NX90_timer_app_timer_systime_s      0xFF8015A4U
#define Adr_NX90_timer_xpic_app_timer_systime_s 0xFF900124U

#define MSK_NX90_timer_systime_s_val 0xffffffffU
#define SRT_NX90_timer_systime_s_val 0

/* all used bits of 'NX90_timer_systime_s': */
#define MSK_USED_BITS_NX90_timer_systime_s 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_systime_ns */
/* => ARM_TIMER lower SYSTIME register */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    If no systime_s is read before (e.g. at 2nd read access of systime_ns), the actual value of systime_ns is read. */
/*    This register should be dedicated to accesses via ARM. */
/*    xPIC software should access systime via xpic_timer_systime_ns. */
/*    Host software should access systime via DPM at systime_ns. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_systime_ns            0x00000028U
#define Adr_NX90_timer_com_timer_systime_ns      0xFF0015A8U
#define Adr_NX90_timer_xpic_com_timer_systime_ns 0xFF200128U
#define Adr_NX90_timer_app_timer_systime_ns      0xFF8015A8U
#define Adr_NX90_timer_xpic_app_timer_systime_ns 0xFF900128U

#define MSK_NX90_timer_systime_ns_val 0xffffffffU
#define SRT_NX90_timer_systime_ns_val 0

/* all used bits of 'NX90_timer_systime_ns': */
#define MSK_USED_BITS_NX90_timer_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_compare_systime_s_value */
/* => SYSTIME sec compare value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_compare_systime_s_value            0x0000002CU
#define Adr_NX90_timer_com_timer_compare_systime_s_value      0xFF0015ACU
#define Adr_NX90_timer_xpic_com_timer_compare_systime_s_value 0xFF20012CU
#define Adr_NX90_timer_app_timer_compare_systime_s_value      0xFF8015ACU
#define Adr_NX90_timer_xpic_app_timer_compare_systime_s_value 0xFF90012CU
#define DFLT_VAL_NX90_timer_compare_systime_s_value           0x00000000U

#define MSK_NX90_timer_compare_systime_s_value_val         0xffffffffU
#define SRT_NX90_timer_compare_systime_s_value_val         0
#define DFLT_VAL_NX90_timer_compare_systime_s_value_val    0x00000000U
#define DFLT_BF_VAL_NX90_timer_compare_systime_s_value_val 0x00000000U

/* all used bits of 'NX90_timer_compare_systime_s_value': */
#define MSK_USED_BITS_NX90_timer_compare_systime_s_value 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer_irq_raw */
/* => ARM_TIMER Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_raw            0x00000030U
#define Adr_NX90_timer_com_timer_irq_raw      0xFF0015B0U
#define Adr_NX90_timer_xpic_com_timer_irq_raw 0xFF200130U
#define Adr_NX90_timer_app_timer_irq_raw      0xFF8015B0U
#define Adr_NX90_timer_xpic_app_timer_irq_raw 0xFF900130U
#define DFLT_VAL_NX90_timer_irq_raw           0x00000000U

#define MSK_NX90_timer_irq_raw_timer0_irq            0x00000001U
#define SRT_NX90_timer_irq_raw_timer0_irq            0
#define DFLT_VAL_NX90_timer_irq_raw_timer0_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_raw_timer0_irq    0x00000000U
#define MSK_NX90_timer_irq_raw_timer1_irq            0x00000002U
#define SRT_NX90_timer_irq_raw_timer1_irq            1
#define DFLT_VAL_NX90_timer_irq_raw_timer1_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_raw_timer1_irq    0x00000000U
#define MSK_NX90_timer_irq_raw_timer2_irq            0x00000004U
#define SRT_NX90_timer_irq_raw_timer2_irq            2
#define DFLT_VAL_NX90_timer_irq_raw_timer2_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_raw_timer2_irq    0x00000000U
#define MSK_NX90_timer_irq_raw_systime_s_irq         0x00000008U
#define SRT_NX90_timer_irq_raw_systime_s_irq         3
#define DFLT_VAL_NX90_timer_irq_raw_systime_s_irq    0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_raw_systime_s_irq 0x00000000U

/* all used bits of 'NX90_timer_irq_raw': */
#define MSK_USED_BITS_NX90_timer_irq_raw 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_irq_masked */
/* => ARM_TIMER Masked IRQ register: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_masked            0x00000034U
#define Adr_NX90_timer_com_timer_irq_masked      0xFF0015B4U
#define Adr_NX90_timer_xpic_com_timer_irq_masked 0xFF200134U
#define Adr_NX90_timer_app_timer_irq_masked      0xFF8015B4U
#define Adr_NX90_timer_xpic_app_timer_irq_masked 0xFF900134U

#define MSK_NX90_timer_irq_masked_timer0_irq    0x00000001U
#define SRT_NX90_timer_irq_masked_timer0_irq    0
#define MSK_NX90_timer_irq_masked_timer1_irq    0x00000002U
#define SRT_NX90_timer_irq_masked_timer1_irq    1
#define MSK_NX90_timer_irq_masked_timer2_irq    0x00000004U
#define SRT_NX90_timer_irq_masked_timer2_irq    2
#define MSK_NX90_timer_irq_masked_systime_s_irq 0x00000008U
#define SRT_NX90_timer_irq_masked_systime_s_irq 3

/* all used bits of 'NX90_timer_irq_masked': */
#define MSK_USED_BITS_NX90_timer_irq_masked 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_irq_msk_set */
/* => ARM_TIMER interrupt mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to arm_timer_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_msk_set            0x00000038U
#define Adr_NX90_timer_com_timer_irq_msk_set      0xFF0015B8U
#define Adr_NX90_timer_xpic_com_timer_irq_msk_set 0xFF200138U
#define Adr_NX90_timer_app_timer_irq_msk_set      0xFF8015B8U
#define Adr_NX90_timer_xpic_app_timer_irq_msk_set 0xFF900138U
#define DFLT_VAL_NX90_timer_irq_msk_set           0x00000000U

#define MSK_NX90_timer_irq_msk_set_timer0_irq            0x00000001U
#define SRT_NX90_timer_irq_msk_set_timer0_irq            0
#define DFLT_VAL_NX90_timer_irq_msk_set_timer0_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_timer0_irq    0x00000000U
#define MSK_NX90_timer_irq_msk_set_timer1_irq            0x00000002U
#define SRT_NX90_timer_irq_msk_set_timer1_irq            1
#define DFLT_VAL_NX90_timer_irq_msk_set_timer1_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_timer1_irq    0x00000000U
#define MSK_NX90_timer_irq_msk_set_timer2_irq            0x00000004U
#define SRT_NX90_timer_irq_msk_set_timer2_irq            2
#define DFLT_VAL_NX90_timer_irq_msk_set_timer2_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_timer2_irq    0x00000000U
#define MSK_NX90_timer_irq_msk_set_systime_s_irq         0x00000008U
#define SRT_NX90_timer_irq_msk_set_systime_s_irq         3
#define DFLT_VAL_NX90_timer_irq_msk_set_systime_s_irq    0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_systime_s_irq 0x00000000U

/* all used bits of 'NX90_timer_irq_msk_set': */
#define MSK_USED_BITS_NX90_timer_irq_msk_set 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_irq_msk_reset */
/* => ARM_TIMER interrupt mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_msk_reset            0x0000003CU
#define Adr_NX90_timer_com_timer_irq_msk_reset      0xFF0015BCU
#define Adr_NX90_timer_xpic_com_timer_irq_msk_reset 0xFF20013CU
#define Adr_NX90_timer_app_timer_irq_msk_reset      0xFF8015BCU
#define Adr_NX90_timer_xpic_app_timer_irq_msk_reset 0xFF90013CU
#define DFLT_VAL_NX90_timer_irq_msk_reset           0x00000000U

#define MSK_NX90_timer_irq_msk_reset_timer0_irq            0x00000001U
#define SRT_NX90_timer_irq_msk_reset_timer0_irq            0
#define DFLT_VAL_NX90_timer_irq_msk_reset_timer0_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_timer0_irq    0x00000000U
#define MSK_NX90_timer_irq_msk_reset_timer1_irq            0x00000002U
#define SRT_NX90_timer_irq_msk_reset_timer1_irq            1
#define DFLT_VAL_NX90_timer_irq_msk_reset_timer1_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_timer1_irq    0x00000000U
#define MSK_NX90_timer_irq_msk_reset_timer2_irq            0x00000004U
#define SRT_NX90_timer_irq_msk_reset_timer2_irq            2
#define DFLT_VAL_NX90_timer_irq_msk_reset_timer2_irq       0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_timer2_irq    0x00000000U
#define MSK_NX90_timer_irq_msk_reset_systime_s_irq         0x00000008U
#define SRT_NX90_timer_irq_msk_reset_systime_s_irq         3
#define DFLT_VAL_NX90_timer_irq_msk_reset_systime_s_irq    0x00000000U
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_systime_s_irq 0x00000000U

/* all used bits of 'NX90_timer_irq_msk_reset': */
#define MSK_USED_BITS_NX90_timer_irq_msk_reset 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register timer_systime_config */
/* => Select systime  for arm_timer_systime_(ns)s functions */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_systime_config            0x00000040U
#define Adr_NX90_timer_com_timer_systime_config      0xFF0015C0U
#define Adr_NX90_timer_xpic_com_timer_systime_config 0xFF200140U
#define Adr_NX90_timer_app_timer_systime_config      0xFF8015C0U
#define Adr_NX90_timer_xpic_app_timer_systime_config 0xFF900140U
#define DFLT_VAL_NX90_timer_systime_config           0x00000000U

#define MSK_NX90_timer_systime_config_systime_config         0x00000003U
#define SRT_NX90_timer_systime_config_systime_config         0
#define DFLT_VAL_NX90_timer_systime_config_systime_config    0x00000000U
#define DFLT_BF_VAL_NX90_timer_systime_config_systime_config 0x00000000U

/* all used bits of 'NX90_timer_systime_config': */
#define MSK_USED_BITS_NX90_timer_systime_config 0x00000003U


/* ===================================================================== */

/* AREA systime */
/* Area of systime_com, systime_uc_com, systime_app */

/* ===================================================================== */

#define Addr_NX90_systime_com    0xFF001600U
#define Addr_NX90_systime_uc_com 0xFF001610U
#define Addr_NX90_systime_app    0xFF801600U

/* --------------------------------------------------------------------- */
/* Register systime_s */
/* => Upper SYSTIME register: */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    This register should be dedicated to accesses via DPM. */
/*    ARM software should access systime via arm_timer_systime_s. */
/*    xPIC software should access systime via xpic_timer_systime_s. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_s            0x00000000U
#define Adr_NX90_systime_com_systime_s    0xFF001600U
#define Adr_NX90_systime_uc_com_systime_s 0xFF001610U
#define Adr_NX90_systime_app_systime_s    0xFF801600U
#define DFLT_VAL_NX90_systime_s           0x00000000U

#define MSK_NX90_systime_s_systime_s         0xffffffffU
#define SRT_NX90_systime_s_systime_s         0
#define DFLT_VAL_NX90_systime_s_systime_s    0x00000000U
#define DFLT_BF_VAL_NX90_systime_s_systime_s 0x00000000U

/* all used bits of 'NX90_systime_s': */
#define MSK_USED_BITS_NX90_systime_s 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register systime_ns */
/* => Lower SYSTIME register: */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    If no systime_s is read before (or at 2nd read access of systime_ns), the actual value of systime_ns is read. */
/*    This register should be dedicated to accesses via DPM. */
/*    ARM software should access systime via arm_timer_systime_ns. */
/*    xPIC software should access systime via xpic_timer_systime_ns. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_ns            0x00000004U
#define Adr_NX90_systime_com_systime_ns    0xFF001604U
#define Adr_NX90_systime_uc_com_systime_ns 0xFF001614U
#define Adr_NX90_systime_app_systime_ns    0xFF801604U
#define DFLT_VAL_NX90_systime_ns           0x00000000U

#define MSK_NX90_systime_ns_systime_ns         0xffffffffU
#define SRT_NX90_systime_ns_systime_ns         0
#define DFLT_VAL_NX90_systime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_systime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_systime_ns': */
#define MSK_USED_BITS_NX90_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register systime_border */
/* => SYSTIME border register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_border            0x00000008U
#define Adr_NX90_systime_com_systime_border    0xFF001608U
#define Adr_NX90_systime_uc_com_systime_border 0xFF001618U
#define Adr_NX90_systime_app_systime_border    0xFF801608U
#define DFLT_VAL_NX90_systime_border           0x3b9ac9ffU

#define MSK_NX90_systime_border_systime_border         0xffffffffU
#define SRT_NX90_systime_border_systime_border         0
#define DFLT_VAL_NX90_systime_border_systime_border    0x3b9ac9ffU
#define DFLT_BF_VAL_NX90_systime_border_systime_border 0x3b9ac9ffU

/* all used bits of 'NX90_systime_border': */
#define MSK_USED_BITS_NX90_systime_border 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register systime_count_value */
/* => SYSTIME count register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_count_value            0x0000000CU
#define Adr_NX90_systime_com_systime_count_value    0xFF00160CU
#define Adr_NX90_systime_uc_com_systime_count_value 0xFF00161CU
#define Adr_NX90_systime_app_systime_count_value    0xFF80160CU
#define DFLT_VAL_NX90_systime_count_value           0xa0000000U

#define MSK_NX90_systime_count_value_systime_count_value         0xffffffffU
#define SRT_NX90_systime_count_value_systime_count_value         0
#define DFLT_VAL_NX90_systime_count_value_systime_count_value    0xa0000000U
#define DFLT_BF_VAL_NX90_systime_count_value_systime_count_value 0xa0000000U

/* all used bits of 'NX90_systime_count_value': */
#define MSK_USED_BITS_NX90_systime_count_value 0xffffffffU


/* ===================================================================== */

/* AREA hs_irq_reg */
/* Area of mcp_com, mcp_xpic_com, mcp_app, mcp_xpic_app */

/* ===================================================================== */

#define Addr_NX90_mcp_com      0xFF001620U
#define Addr_NX90_mcp_xpic_com 0xFF2001A0U
#define Addr_NX90_mcp_app      0xFF801620U
#define Addr_NX90_mcp_xpic_app 0xFF9001A0U

/* --------------------------------------------------------------------- */
/* Register hs_irq_set_raw */
/* => read: hs_iq_reg value */
/*    write: hs_iq_reg set bit(s) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_set_raw          0x00000000U
#define Adr_NX90_mcp_com_hs_irq_set_raw      0xFF001620U
#define Adr_NX90_mcp_xpic_com_hs_irq_set_raw 0xFF2001A0U
#define Adr_NX90_mcp_app_hs_irq_set_raw      0xFF801620U
#define Adr_NX90_mcp_xpic_app_hs_irq_set_raw 0xFF9001A0U
#define DFLT_VAL_NX90_hs_irq_set_raw         0x00000000U

#define MSK_NX90_hs_irq_set_raw_hs_irq_set_bits         0xffffffffU
#define SRT_NX90_hs_irq_set_raw_hs_irq_set_bits         0
#define DFLT_VAL_NX90_hs_irq_set_raw_hs_irq_set_bits    0x00000000U
#define DFLT_BF_VAL_NX90_hs_irq_set_raw_hs_irq_set_bits 0x00000000U

/* all used bits of 'NX90_hs_irq_set_raw': */
#define MSK_USED_BITS_NX90_hs_irq_set_raw 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hs_irq_reset_raw */
/* => read: hs_iq_reg value */
/*    write: hs_iq_reg reset bit(s) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_reset_raw          0x00000004U
#define Adr_NX90_mcp_com_hs_irq_reset_raw      0xFF001624U
#define Adr_NX90_mcp_xpic_com_hs_irq_reset_raw 0xFF2001A4U
#define Adr_NX90_mcp_app_hs_irq_reset_raw      0xFF801624U
#define Adr_NX90_mcp_xpic_app_hs_irq_reset_raw 0xFF9001A4U
#define DFLT_VAL_NX90_hs_irq_reset_raw         0x00000000U

#define MSK_NX90_hs_irq_reset_raw_hs_irq_reset_bits         0xffffffffU
#define SRT_NX90_hs_irq_reset_raw_hs_irq_reset_bits         0
#define DFLT_VAL_NX90_hs_irq_reset_raw_hs_irq_reset_bits    0x00000000U
#define DFLT_BF_VAL_NX90_hs_irq_reset_raw_hs_irq_reset_bits 0x00000000U

/* all used bits of 'NX90_hs_irq_reset_raw': */
#define MSK_USED_BITS_NX90_hs_irq_reset_raw 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hs_irq_set_mask */
/* => read: mask value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_set_mask          0x00000008U
#define Adr_NX90_mcp_com_hs_irq_set_mask      0xFF001628U
#define Adr_NX90_mcp_xpic_com_hs_irq_set_mask 0xFF2001A8U
#define Adr_NX90_mcp_app_hs_irq_set_mask      0xFF801628U
#define Adr_NX90_mcp_xpic_app_hs_irq_set_mask 0xFF9001A8U
#define DFLT_VAL_NX90_hs_irq_set_mask         0x00000000U

#define MSK_NX90_hs_irq_set_mask_hs_irq_set_mask         0xffffffffU
#define SRT_NX90_hs_irq_set_mask_hs_irq_set_mask         0
#define DFLT_VAL_NX90_hs_irq_set_mask_hs_irq_set_mask    0x00000000U
#define DFLT_BF_VAL_NX90_hs_irq_set_mask_hs_irq_set_mask 0x00000000U

/* all used bits of 'NX90_hs_irq_set_mask': */
#define MSK_USED_BITS_NX90_hs_irq_set_mask 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hs_irq_reset_mask */
/* => read: mask value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_reset_mask          0x0000000CU
#define Adr_NX90_mcp_com_hs_irq_reset_mask      0xFF00162CU
#define Adr_NX90_mcp_xpic_com_hs_irq_reset_mask 0xFF2001ACU
#define Adr_NX90_mcp_app_hs_irq_reset_mask      0xFF80162CU
#define Adr_NX90_mcp_xpic_app_hs_irq_reset_mask 0xFF9001ACU
#define DFLT_VAL_NX90_hs_irq_reset_mask         0x00000000U

#define MSK_NX90_hs_irq_reset_mask_hs_irq_reset_mask         0xffffffffU
#define SRT_NX90_hs_irq_reset_mask_hs_irq_reset_mask         0
#define DFLT_VAL_NX90_hs_irq_reset_mask_hs_irq_reset_mask    0x00000000U
#define DFLT_BF_VAL_NX90_hs_irq_reset_mask_hs_irq_reset_mask 0x00000000U

/* all used bits of 'NX90_hs_irq_reset_mask': */
#define MSK_USED_BITS_NX90_hs_irq_reset_mask 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hs_irq_masked */
/* => read: hs_iq_reg masked value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_masked          0x00000010U
#define Adr_NX90_mcp_com_hs_irq_masked      0xFF001630U
#define Adr_NX90_mcp_xpic_com_hs_irq_masked 0xFF2001B0U
#define Adr_NX90_mcp_app_hs_irq_masked      0xFF801630U
#define Adr_NX90_mcp_xpic_app_hs_irq_masked 0xFF9001B0U
#define DFLT_VAL_NX90_hs_irq_masked         0x00000000U

#define MSK_NX90_hs_irq_masked_hs_irq_masked         0xffffffffU
#define SRT_NX90_hs_irq_masked_hs_irq_masked         0
#define DFLT_VAL_NX90_hs_irq_masked_hs_irq_masked    0x00000000U
#define DFLT_BF_VAL_NX90_hs_irq_masked_hs_irq_masked 0x00000000U

/* all used bits of 'NX90_hs_irq_masked': */
#define MSK_USED_BITS_NX90_hs_irq_masked 0xffffffffU


/* ===================================================================== */

/* AREA watchdog */
/* Area of wdg_com, wdg_app */

/* ===================================================================== */

#define Addr_NX90_wdg_com 0xFF001640U
#define Addr_NX90_wdg_app 0xFF801640U

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_ctrl */
/* => netX System Watchdog Trigger Register. */
/*    The watchdog access code is generated by a pseudo random generator. It must be written correctly */
/*    for a valid write access to this register (not only for triggering e.g. also for IRQ clearing). */
/*    Note: */
/*       WDGACT signal is available as MMIO function.. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_ctrl     0x00000000U
#define Adr_NX90_wdg_com_netx_sys_wdg_ctrl 0xFF001640U
#define Adr_NX90_wdg_app_netx_sys_wdg_ctrl 0xFF801640U
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl    0x00000000U

#define MSK_NX90_netx_sys_wdg_ctrl_wdg_access_code               0x000fffffU
#define SRT_NX90_netx_sys_wdg_ctrl_wdg_access_code               0
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_wdg_access_code          0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_wdg_access_code       0x00000000U
#define MSK_NX90_netx_sys_wdg_ctrl_irq_req_watchdog              0x01000000U
#define SRT_NX90_netx_sys_wdg_ctrl_irq_req_watchdog              24
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_irq_req_watchdog         0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_irq_req_watchdog      0x00000000U
#define MSK_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w         0x10000000U
#define SRT_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w         28
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w    0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w 0x00000000U
#define MSK_NX90_netx_sys_wdg_ctrl_write_enable                  0x80000000U
#define SRT_NX90_netx_sys_wdg_ctrl_write_enable                  31
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_write_enable             0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_write_enable          0x00000000U

/* all used bits of 'NX90_netx_sys_wdg_ctrl': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_ctrl 0x910fffffU

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg */
/* => netX System Watchdog Register */
/*    The counter value is decremented each 10000 system clock cycles. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg     0x00000004U
#define Adr_NX90_wdg_com_netx_sys_wdg 0xFF001644U
#define Adr_NX90_wdg_app_netx_sys_wdg 0xFF801644U

#define MSK_NX90_netx_sys_wdg_wdg_counter 0x0001ffffU
#define SRT_NX90_netx_sys_wdg_wdg_counter 0

/* all used bits of 'NX90_netx_sys_wdg': */
#define MSK_USED_BITS_NX90_netx_sys_wdg 0x0001ffffU

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_timeout */
/* => netX System Wachtdog Interrupt Timout Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_timeout     0x00000008U
#define Adr_NX90_wdg_com_netx_sys_wdg_irq_timeout 0xFF001648U
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_timeout 0xFF801648U
#define DFLT_VAL_NX90_netx_sys_wdg_irq_timeout    0x00000000U

#define MSK_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout         0x0000ffffU
#define SRT_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout    0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout 0x00000000U

/* all used bits of 'NX90_netx_sys_wdg_irq_timeout': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_timeout 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_res_timeout */
/* => netX System Watchdog Reset Timeout Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_res_timeout     0x0000000CU
#define Adr_NX90_wdg_com_netx_sys_wdg_res_timeout 0xFF00164CU
#define Adr_NX90_wdg_app_netx_sys_wdg_res_timeout 0xFF80164CU
#define DFLT_VAL_NX90_netx_sys_wdg_res_timeout    0x00000000U

#define MSK_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout         0x0000ffffU
#define SRT_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout         0
#define DFLT_VAL_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout    0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout 0x00000000U

/* all used bits of 'NX90_netx_sys_wdg_res_timeout': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_res_timeout 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_raw */
/* => netX System Wachtdog IRQ raw register: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_raw     0x00000010U
#define Adr_NX90_wdg_com_netx_sys_wdg_irq_raw 0xFF001650U
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_raw 0xFF801650U
#define DFLT_VAL_NX90_netx_sys_wdg_irq_raw    0x00000000U

#define MSK_NX90_netx_sys_wdg_irq_raw_wdg_res_irq         0x00000001U
#define SRT_NX90_netx_sys_wdg_irq_raw_wdg_res_irq         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_raw_wdg_res_irq    0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_raw_wdg_res_irq 0x00000000U

/* all used bits of 'NX90_netx_sys_wdg_irq_raw': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_raw 0x00000001U

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_masked */
/* => netX System Wachtdog Masked IRQ register: */
/*    Read access shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_masked     0x00000014U
#define Adr_NX90_wdg_com_netx_sys_wdg_irq_masked 0xFF001654U
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_masked 0xFF801654U

#define MSK_NX90_netx_sys_wdg_irq_masked_wdg_res_irq 0x00000001U
#define SRT_NX90_netx_sys_wdg_irq_masked_wdg_res_irq 0

/* all used bits of 'NX90_netx_sys_wdg_irq_masked': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_masked 0x00000001U

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_msk_set */
/* => netX System Wachtdog interrupt mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_msk_set     0x00000018U
#define Adr_NX90_wdg_com_netx_sys_wdg_irq_msk_set 0xFF001658U
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_msk_set 0xFF801658U
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_set    0x00000000U

#define MSK_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq         0x00000001U
#define SRT_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq    0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq 0x00000000U

/* all used bits of 'NX90_netx_sys_wdg_irq_msk_set': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_msk_set 0x00000001U

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_msk_reset */
/* => netX System Wachtdog interrupt mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_msk_reset     0x0000001CU
#define Adr_NX90_wdg_com_netx_sys_wdg_irq_msk_reset 0xFF00165CU
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_msk_reset 0xFF80165CU
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_reset    0x00000000U

#define MSK_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq         0x00000001U
#define SRT_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq    0x00000000U
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq 0x00000000U

/* all used bits of 'NX90_netx_sys_wdg_irq_msk_reset': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_msk_reset 0x00000001U


/* ===================================================================== */

/* AREA int_phy_cfg */
/* Area of int_phy_cfg_com */

/* ===================================================================== */

#define Addr_NX90_int_phy_cfg_com 0xFF001680U

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_phy_ctrl */
/* => PHY Control Register: */
/*    This register contains static connectors of the internal Ethernet PHY. \ */
/*    The PHY reads all values except phy0/1_enable only during reset, which can be controlled by Bit31. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_phy_ctrl             0x00000000U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_phy_ctrl 0xFF001680U
#define Adr_NX90_int_phy_cfg_phy_ctrl                 0xFF001680U
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl            0x8000e070U

#define MSK_NX90_int_phy_cfg_phy_ctrl_phy_address              0x0000000fU
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy_address              0
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy_address         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy_address      0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy0_mode                0x00000070U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy0_mode                4
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_mode           0x00000070U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_mode        0x00000007U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy0_fxmode              0x00000080U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy0_fxmode              7
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_fxmode         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_fxmode      0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy0_automdix            0x00000100U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy0_automdix            8
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_automdix       0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_automdix    0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy0_np_msg_code         0x00000e00U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy0_np_msg_code         9
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_np_msg_code    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_np_msg_code 0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy0_enable              0x00001000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy0_enable              12
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_enable         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy0_enable      0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy1_mode                0x0000e000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy1_mode                13
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_mode           0x0000e000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_mode        0x00000007U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy1_fxmode              0x00010000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy1_fxmode              16
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_fxmode         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_fxmode      0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy1_automdix            0x00020000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy1_automdix            17
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_automdix       0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_automdix    0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy1_np_msg_code         0x001c0000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy1_np_msg_code         18
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_np_msg_code    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_np_msg_code 0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy1_enable              0x00200000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy1_enable              21
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_enable         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy1_enable      0x00000000U
#define MSK_NX90_int_phy_cfg_phy_ctrl_phy_reset                0x80000000U
#define SRT_NX90_int_phy_cfg_phy_ctrl_phy_reset                31
#define DFLT_VAL_NX90_int_phy_cfg_phy_ctrl_phy_reset           0x80000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_phy_ctrl_phy_reset        0x00000001U

/* all used bits of 'NX90_int_phy_cfg_phy_ctrl': */
#define MSK_USED_BITS_NX90_int_phy_cfg_phy_ctrl 0x803fffffU

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_status */
/* => Status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_status             0x00000004U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_status 0xFF001684U
#define Adr_NX90_int_phy_cfg_status                 0xFF001684U

#define MSK_NX90_int_phy_cfg_status_phy0_powerup_reset 0x00000001U
#define SRT_NX90_int_phy_cfg_status_phy0_powerup_reset 0
#define MSK_NX90_int_phy_cfg_status_phy0_rx_offset     0x0000000eU
#define SRT_NX90_int_phy_cfg_status_phy0_rx_offset     1
#define MSK_NX90_int_phy_cfg_status_phy1_powerup_reset 0x00000010U
#define SRT_NX90_int_phy_cfg_status_phy1_powerup_reset 4
#define MSK_NX90_int_phy_cfg_status_phy1_rx_offset     0x000000e0U
#define SRT_NX90_int_phy_cfg_status_phy1_rx_offset     5

/* all used bits of 'NX90_int_phy_cfg_status': */
#define MSK_USED_BITS_NX90_int_phy_cfg_status 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_i2c_write */
/* => Control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_i2c_write             0x00000008U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_i2c_write 0xFF001688U
#define Adr_NX90_int_phy_cfg_i2c_write                 0xFF001688U
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write            0x00000000U

#define MSK_NX90_int_phy_cfg_i2c_write_wr_data          0x0000ffffU
#define SRT_NX90_int_phy_cfg_i2c_write_wr_data          0
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write_wr_data     0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_i2c_write_wr_data  0x00000000U
#define MSK_NX90_int_phy_cfg_i2c_write_addr             0x003f0000U
#define SRT_NX90_int_phy_cfg_i2c_write_addr             16
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write_addr        0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_i2c_write_addr     0x00000000U
#define MSK_NX90_int_phy_cfg_i2c_write_wr_req           0x00400000U
#define SRT_NX90_int_phy_cfg_i2c_write_wr_req           22
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write_wr_req      0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_i2c_write_wr_req   0x00000000U
#define MSK_NX90_int_phy_cfg_i2c_write_rd_req           0x00800000U
#define SRT_NX90_int_phy_cfg_i2c_write_rd_req           23
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write_rd_req      0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_i2c_write_rd_req   0x00000000U
#define MSK_NX90_int_phy_cfg_i2c_write_sel_phy0         0x01000000U
#define SRT_NX90_int_phy_cfg_i2c_write_sel_phy0         24
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write_sel_phy0    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_i2c_write_sel_phy0 0x00000000U
#define MSK_NX90_int_phy_cfg_i2c_write_sel_phy1         0x02000000U
#define SRT_NX90_int_phy_cfg_i2c_write_sel_phy1         25
#define DFLT_VAL_NX90_int_phy_cfg_i2c_write_sel_phy1    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_i2c_write_sel_phy1 0x00000000U

/* all used bits of 'NX90_int_phy_cfg_i2c_write': */
#define MSK_USED_BITS_NX90_int_phy_cfg_i2c_write 0x03ffffffU

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_i2c_read */
/* => Control register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_i2c_read             0x0000000CU
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_i2c_read 0xFF00168CU
#define Adr_NX90_int_phy_cfg_i2c_read                 0xFF00168CU

#define MSK_NX90_int_phy_cfg_i2c_read_rd_data       0x0000ffffU
#define SRT_NX90_int_phy_cfg_i2c_read_rd_data       0
#define MSK_NX90_int_phy_cfg_i2c_read_rd_data_valid 0x00010000U
#define SRT_NX90_int_phy_cfg_i2c_read_rd_data_valid 16

/* all used bits of 'NX90_int_phy_cfg_i2c_read': */
#define MSK_USED_BITS_NX90_int_phy_cfg_i2c_read 0x0001ffffU

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_debug */
/* => PHY Control Register: */
/*    Control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_debug             0x00000010U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_debug 0xFF001690U
#define Adr_NX90_int_phy_cfg_debug                 0xFF001690U
#define DFLT_VAL_NX90_int_phy_cfg_debug            0x0000000aU

#define MSK_NX90_int_phy_cfg_debug_write_phase            0x00000003U
#define SRT_NX90_int_phy_cfg_debug_write_phase            0
#define DFLT_VAL_NX90_int_phy_cfg_debug_write_phase       0x00000002U
#define DFLT_BF_VAL_NX90_int_phy_cfg_debug_write_phase    0x00000002U
#define MSK_NX90_int_phy_cfg_debug_read_phase             0x0000000cU
#define SRT_NX90_int_phy_cfg_debug_read_phase             2
#define DFLT_VAL_NX90_int_phy_cfg_debug_read_phase        0x00000008U
#define DFLT_BF_VAL_NX90_int_phy_cfg_debug_read_phase     0x00000002U
#define MSK_NX90_int_phy_cfg_debug_irq_low_active         0x00000010U
#define SRT_NX90_int_phy_cfg_debug_irq_low_active         4
#define DFLT_VAL_NX90_int_phy_cfg_debug_irq_low_active    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_debug_irq_low_active 0x00000000U

/* all used bits of 'NX90_int_phy_cfg_debug': */
#define MSK_USED_BITS_NX90_int_phy_cfg_debug 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_irq_raw             0x00000014U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_irq_raw 0xFF001694U
#define Adr_NX90_int_phy_cfg_irq_raw                 0xFF001694U
#define DFLT_VAL_NX90_int_phy_cfg_irq_raw            0x00000000U

#define MSK_NX90_int_phy_cfg_irq_raw_phy0         0x00000001U
#define SRT_NX90_int_phy_cfg_irq_raw_phy0         0
#define DFLT_VAL_NX90_int_phy_cfg_irq_raw_phy0    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_irq_raw_phy0 0x00000000U
#define MSK_NX90_int_phy_cfg_irq_raw_phy1         0x00000002U
#define SRT_NX90_int_phy_cfg_irq_raw_phy1         1
#define DFLT_VAL_NX90_int_phy_cfg_irq_raw_phy1    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_irq_raw_phy1 0x00000000U

/* all used bits of 'NX90_int_phy_cfg_irq_raw': */
#define MSK_USED_BITS_NX90_int_phy_cfg_irq_raw 0x00000003U

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_irq_masked             0x00000018U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_irq_masked 0xFF001698U
#define Adr_NX90_int_phy_cfg_irq_masked                 0xFF001698U

#define MSK_NX90_int_phy_cfg_irq_masked_phy0 0x00000001U
#define SRT_NX90_int_phy_cfg_irq_masked_phy0 0
#define MSK_NX90_int_phy_cfg_irq_masked_phy1 0x00000002U
#define SRT_NX90_int_phy_cfg_irq_masked_phy1 1

/* all used bits of 'NX90_int_phy_cfg_irq_masked': */
#define MSK_USED_BITS_NX90_int_phy_cfg_irq_masked 0x00000003U

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_irq_mask_set */
/* => IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to int_phy_cfg_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_irq_mask_set             0x0000001CU
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_irq_mask_set 0xFF00169CU
#define Adr_NX90_int_phy_cfg_irq_mask_set                 0xFF00169CU
#define DFLT_VAL_NX90_int_phy_cfg_irq_mask_set            0x00000000U

#define MSK_NX90_int_phy_cfg_irq_mask_set_phy0         0x00000001U
#define SRT_NX90_int_phy_cfg_irq_mask_set_phy0         0
#define DFLT_VAL_NX90_int_phy_cfg_irq_mask_set_phy0    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_irq_mask_set_phy0 0x00000000U
#define MSK_NX90_int_phy_cfg_irq_mask_set_phy1         0x00000002U
#define SRT_NX90_int_phy_cfg_irq_mask_set_phy1         1
#define DFLT_VAL_NX90_int_phy_cfg_irq_mask_set_phy1    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_irq_mask_set_phy1 0x00000000U

/* all used bits of 'NX90_int_phy_cfg_irq_mask_set': */
#define MSK_USED_BITS_NX90_int_phy_cfg_irq_mask_set 0x00000003U

/* --------------------------------------------------------------------- */
/* Register int_phy_cfg_irq_mask_reset */
/* => IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_cfg_irq_mask_reset             0x00000020U
#define Adr_NX90_int_phy_cfg_com_int_phy_cfg_irq_mask_reset 0xFF0016A0U
#define Adr_NX90_int_phy_cfg_irq_mask_reset                 0xFF0016A0U
#define DFLT_VAL_NX90_int_phy_cfg_irq_mask_reset            0x00000000U

#define MSK_NX90_int_phy_cfg_irq_mask_reset_phy0         0x00000001U
#define SRT_NX90_int_phy_cfg_irq_mask_reset_phy0         0
#define DFLT_VAL_NX90_int_phy_cfg_irq_mask_reset_phy0    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_irq_mask_reset_phy0 0x00000000U
#define MSK_NX90_int_phy_cfg_irq_mask_reset_phy1         0x00000002U
#define SRT_NX90_int_phy_cfg_irq_mask_reset_phy1         1
#define DFLT_VAL_NX90_int_phy_cfg_irq_mask_reset_phy1    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_cfg_irq_mask_reset_phy1 0x00000000U

/* all used bits of 'NX90_int_phy_cfg_irq_mask_reset': */
#define MSK_USED_BITS_NX90_int_phy_cfg_irq_mask_reset 0x00000003U


/* ===================================================================== */

/* Area of asic_ctrl_com */

/* ===================================================================== */

#define Addr_NX90_asic_ctrl_com 0xFF0016C0U

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_com_system_calibration0 */
/* => netX System Calibration Register 0: */
/*    This register is only reset at Power-On-Reset. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_system_cfg. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_com_system_calibration0           0x00000000U
#define Adr_NX90_asic_ctrl_com_asic_ctrl_com_system_calibration0 0xFF0016C0U
#define Adr_NX90_asic_ctrl_com_system_calibration0               0xFF0016C0U
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration0          0x00000000U

#define MSK_NX90_asic_ctrl_com_system_calibration0_ref_tc                0x0000000fU
#define SRT_NX90_asic_ctrl_com_system_calibration0_ref_tc                0
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration0_ref_tc           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration0_ref_tc        0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration0_ref_vref              0x000000f0U
#define SRT_NX90_asic_ctrl_com_system_calibration0_ref_vref              4
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration0_ref_vref         0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration0_ref_vref      0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration0_ref_iref              0x00000f00U
#define SRT_NX90_asic_ctrl_com_system_calibration0_ref_iref              8
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration0_ref_iref         0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration0_ref_iref      0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration0_ref_iref_tc           0x00007000U
#define SRT_NX90_asic_ctrl_com_system_calibration0_ref_iref_tc           12
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration0_ref_iref_tc      0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration0_ref_iref_tc   0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration0_ref_adc_vrefp         0x00018000U
#define SRT_NX90_asic_ctrl_com_system_calibration0_ref_adc_vrefp         15
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration0_ref_adc_vrefp    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration0_ref_adc_vrefp 0x00000000U

/* all used bits of 'NX90_asic_ctrl_com_system_calibration0': */
#define MSK_USED_BITS_NX90_asic_ctrl_com_system_calibration0 0x0001ffffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_com_system_calibration1 */
/* => netX System Calibration Register 1: */
/*    This register is only reset at Power-On-Reset. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_system_cfg. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_com_system_calibration1           0x00000004U
#define Adr_NX90_asic_ctrl_com_asic_ctrl_com_system_calibration1 0xFF0016C4U
#define Adr_NX90_asic_ctrl_com_system_calibration1               0xFF0016C4U
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration1          0x00000000U

#define MSK_NX90_asic_ctrl_com_system_calibration1_dcdc_slope           0x00000007U
#define SRT_NX90_asic_ctrl_com_system_calibration1_dcdc_slope           0
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration1_dcdc_slope      0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration1_dcdc_slope   0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration1_dcdc_uiconv          0x00000038U
#define SRT_NX90_asic_ctrl_com_system_calibration1_dcdc_uiconv          3
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration1_dcdc_uiconv     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration1_dcdc_uiconv  0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration1_adc0                 0x00000fc0U
#define SRT_NX90_asic_ctrl_com_system_calibration1_adc0                 6
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration1_adc0            0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration1_adc0         0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration1_adc1                 0x0003f000U
#define SRT_NX90_asic_ctrl_com_system_calibration1_adc1                 12
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration1_adc1            0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration1_adc1         0x00000000U
#define MSK_NX90_asic_ctrl_com_system_calibration1_analog_spare         0x003c0000U
#define SRT_NX90_asic_ctrl_com_system_calibration1_analog_spare         18
#define DFLT_VAL_NX90_asic_ctrl_com_system_calibration1_analog_spare    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_calibration1_analog_spare 0x00000000U

/* all used bits of 'NX90_asic_ctrl_com_system_calibration1': */
#define MSK_USED_BITS_NX90_asic_ctrl_com_system_calibration1 0x003fffffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_com_system_ctrl */
/* => netX System Configuration Register: */
/*    This register is only reset at Power-On-Reset. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_system_cfg. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_com_system_ctrl           0x00000008U
#define Adr_NX90_asic_ctrl_com_asic_ctrl_com_system_ctrl 0xFF0016C8U
#define Adr_NX90_asic_ctrl_com_system_ctrl               0xFF0016C8U
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl          0x00049f04U

#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_enable             0x00000001U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_enable             0
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_enable        0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_enable     0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_res_n              0x00000002U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_res_n              1
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_res_n         0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_res_n      0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_bypass             0x00000004U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_bypass             2
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_bypass        0x00000004U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_bypass     0x00000001U
#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_rd                 0x000000f8U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_rd                 3
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_rd            0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_rd         0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_fd                 0x00007f00U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_fd                 8
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_fd            0x00001f00U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_fd         0x0000001fU
#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_od                 0x00018000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_od                 15
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_od            0x00008000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_od         0x00000001U
#define MSK_NX90_asic_ctrl_com_system_ctrl_pll_int_bypass         0x00020000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_pll_int_bypass         17
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_pll_int_bypass    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_pll_int_bypass 0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_rc_osc_on              0x00040000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_rc_osc_on              18
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_rc_osc_on         0x00040000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_rc_osc_on      0x00000001U
#define MSK_NX90_asic_ctrl_com_system_ctrl_dcdc_enable_n          0x00080000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_dcdc_enable_n          19
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_enable_n     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_enable_n  0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_dcdc_set_boost         0x00300000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_dcdc_set_boost         20
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_set_boost    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_set_boost 0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_dcdc_set_slope         0x00c00000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_dcdc_set_slope         22
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_set_slope    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_set_slope 0x00000000U
#define MSK_NX90_asic_ctrl_com_system_ctrl_dcdc_use_clk           0x01000000U
#define SRT_NX90_asic_ctrl_com_system_ctrl_dcdc_use_clk           24
#define DFLT_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_use_clk      0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_system_ctrl_dcdc_use_clk   0x00000000U

/* all used bits of 'NX90_asic_ctrl_com_system_ctrl': */
#define MSK_USED_BITS_NX90_asic_ctrl_com_system_ctrl 0x01ffffffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_com_netx_lock */
/* => netX lock register: */
/*    Write 1 to lock registers / parts of ROM. */
/*    Bits in this register can be written to 1, only system reset can reset these bits to 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_com_netx_lock           0x0000000CU
#define Adr_NX90_asic_ctrl_com_asic_ctrl_com_netx_lock 0xFF0016CCU
#define Adr_NX90_asic_ctrl_com_netx_lock               0xFF0016CCU
#define DFLT_VAL_NX90_asic_ctrl_com_netx_lock          0x00000000U

#define MSK_NX90_asic_ctrl_com_netx_lock_rom_hide                0x00000001U
#define SRT_NX90_asic_ctrl_com_netx_lock_rom_hide                0
#define DFLT_VAL_NX90_asic_ctrl_com_netx_lock_rom_hide           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_netx_lock_rom_hide        0x00000000U
#define MSK_NX90_asic_ctrl_com_netx_lock_lock_register           0x00000002U
#define SRT_NX90_asic_ctrl_com_netx_lock_lock_register           1
#define DFLT_VAL_NX90_asic_ctrl_com_netx_lock_lock_register      0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_netx_lock_lock_register   0x00000000U
#define MSK_NX90_asic_ctrl_com_netx_lock_lock_system_cfg         0x00000004U
#define SRT_NX90_asic_ctrl_com_netx_lock_lock_system_cfg         2
#define DFLT_VAL_NX90_asic_ctrl_com_netx_lock_lock_system_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_netx_lock_lock_system_cfg 0x00000000U
#define MSK_NX90_asic_ctrl_com_netx_lock_lock_firewall           0x00000008U
#define SRT_NX90_asic_ctrl_com_netx_lock_lock_firewall           3
#define DFLT_VAL_NX90_asic_ctrl_com_netx_lock_lock_firewall      0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_com_netx_lock_lock_firewall   0x00000000U

/* all used bits of 'NX90_asic_ctrl_com_netx_lock': */
#define MSK_USED_BITS_NX90_asic_ctrl_com_netx_lock 0x0000000fU


/* ===================================================================== */

/* AREA lvds2mii */
/* Area of lvds2mii0_com, lvds2mii1_com */

/* ===================================================================== */

#define Addr_NX90_lvds2mii0_com 0xFF001700U
#define Addr_NX90_lvds2mii1_com 0xFF001800U

/* --------------------------------------------------------------------- */
/* Register lvds2mii_cfg */
/* => LVDS2MII control register */
/*    This register stores parameters for LVDS transmission. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_cfg           0x00000000U
#define Adr_NX90_lvds2mii0_com_lvds2mii_cfg 0xFF001700U
#define Adr_NX90_lvds2mii1_com_lvds2mii_cfg 0xFF001800U
#define DFLT_VAL_NX90_lvds2mii_cfg          0x00000000U

#define MSK_NX90_lvds2mii_cfg_output_ctrl               0x00000003U
#define SRT_NX90_lvds2mii_cfg_output_ctrl               0
#define DFLT_VAL_NX90_lvds2mii_cfg_output_ctrl          0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_cfg_output_ctrl       0x00000000U
#define MSK_NX90_lvds2mii_cfg_rx_fifo_reset             0x00000004U
#define SRT_NX90_lvds2mii_cfg_rx_fifo_reset             2
#define DFLT_VAL_NX90_lvds2mii_cfg_rx_fifo_reset        0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_cfg_rx_fifo_reset     0x00000000U
#define MSK_NX90_lvds2mii_cfg_debug_latch_once          0x00000008U
#define SRT_NX90_lvds2mii_cfg_debug_latch_once          3
#define DFLT_VAL_NX90_lvds2mii_cfg_debug_latch_once     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_cfg_debug_latch_once  0x00000000U
#define MSK_NX90_lvds2mii_cfg_debug_sample_bits         0x00000010U
#define SRT_NX90_lvds2mii_cfg_debug_sample_bits         4
#define DFLT_VAL_NX90_lvds2mii_cfg_debug_sample_bits    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_cfg_debug_sample_bits 0x00000000U
#define MSK_NX90_lvds2mii_cfg_debug_event               0x000000e0U
#define SRT_NX90_lvds2mii_cfg_debug_event               5
#define DFLT_VAL_NX90_lvds2mii_cfg_debug_event          0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_cfg_debug_event       0x00000000U

/* all used bits of 'NX90_lvds2mii_cfg': */
#define MSK_USED_BITS_NX90_lvds2mii_cfg 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_tune_cfg */
/* => LVDS2MII control register */
/*    This register stores parameters for LVDS transmission. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_tune_cfg           0x00000004U
#define Adr_NX90_lvds2mii0_com_lvds2mii_tune_cfg 0xFF001704U
#define Adr_NX90_lvds2mii1_com_lvds2mii_tune_cfg 0xFF001804U
#define DFLT_VAL_NX90_lvds2mii_tune_cfg          0x2ab20a0fU

#define MSK_NX90_lvds2mii_tune_cfg_clock_phase_sel              0x00000003U
#define SRT_NX90_lvds2mii_tune_cfg_clock_phase_sel              0
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_clock_phase_sel         0x00000003U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_clock_phase_sel      0x00000003U
#define MSK_NX90_lvds2mii_tune_cfg_start_sample_pos             0x0000007cU
#define SRT_NX90_lvds2mii_tune_cfg_start_sample_pos             2
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_start_sample_pos        0x0000000cU
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_start_sample_pos     0x00000003U
#define MSK_NX90_lvds2mii_tune_cfg_stop_sample_pos              0x00000f80U
#define SRT_NX90_lvds2mii_tune_cfg_stop_sample_pos              7
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_stop_sample_pos         0x00000a00U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_stop_sample_pos      0x00000014U
#define MSK_NX90_lvds2mii_tune_cfg_tx_mii_sample_phase          0x00003000U
#define SRT_NX90_lvds2mii_tune_cfg_tx_mii_sample_phase          12
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_tx_mii_sample_phase     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_tx_mii_sample_phase  0x00000000U
#define MSK_NX90_lvds2mii_tune_cfg_rx_mii_output_phase          0x0000c000U
#define SRT_NX90_lvds2mii_tune_cfg_rx_mii_output_phase          14
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_rx_mii_output_phase     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_rx_mii_output_phase  0x00000000U
#define MSK_NX90_lvds2mii_tune_cfg_rx_fifo_start_delay          0x001f0000U
#define SRT_NX90_lvds2mii_tune_cfg_rx_fifo_start_delay          16
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_rx_fifo_start_delay     0x00120000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_rx_fifo_start_delay  0x00000012U
#define MSK_NX90_lvds2mii_tune_cfg_link_ms_idle_cnt             0x00600000U
#define SRT_NX90_lvds2mii_tune_cfg_link_ms_idle_cnt             21
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_link_ms_idle_cnt        0x00200000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_link_ms_idle_cnt     0x00000001U
#define MSK_NX90_lvds2mii_tune_cfg_link_constant_cnt            0x01800000U
#define SRT_NX90_lvds2mii_tune_cfg_link_constant_cnt            23
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_link_constant_cnt       0x00800000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_link_constant_cnt    0x00000001U
#define MSK_NX90_lvds2mii_tune_cfg_link_nosync_cnt              0x06000000U
#define SRT_NX90_lvds2mii_tune_cfg_link_nosync_cnt              25
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_link_nosync_cnt         0x02000000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_link_nosync_cnt      0x00000001U
#define MSK_NX90_lvds2mii_tune_cfg_link_dummy_cnt               0x18000000U
#define SRT_NX90_lvds2mii_tune_cfg_link_dummy_cnt               27
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_link_dummy_cnt          0x08000000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_link_dummy_cnt       0x00000001U
#define MSK_NX90_lvds2mii_tune_cfg_link_with_good_clock         0x20000000U
#define SRT_NX90_lvds2mii_tune_cfg_link_with_good_clock         29
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_link_with_good_clock    0x20000000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_link_with_good_clock 0x00000001U
#define MSK_NX90_lvds2mii_tune_cfg_dis_link_detection           0x40000000U
#define SRT_NX90_lvds2mii_tune_cfg_dis_link_detection           30
#define DFLT_VAL_NX90_lvds2mii_tune_cfg_dis_link_detection      0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_tune_cfg_dis_link_detection   0x00000000U

/* all used bits of 'NX90_lvds2mii_tune_cfg': */
#define MSK_USED_BITS_NX90_lvds2mii_tune_cfg 0x7fffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_pad_cfg */
/* => LVDS2MII pad config register */
/*    This register stores static configuration of LVDS pads */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_pad_cfg           0x00000008U
#define Adr_NX90_lvds2mii0_com_lvds2mii_pad_cfg 0xFF001708U
#define Adr_NX90_lvds2mii1_com_lvds2mii_pad_cfg 0xFF001808U
#define DFLT_VAL_NX90_lvds2mii_pad_cfg          0x00000000U

#define MSK_NX90_lvds2mii_pad_cfg_en                     0x00000001U
#define SRT_NX90_lvds2mii_pad_cfg_en                     0
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_en                0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_en             0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_tx_isel                0x0000000eU
#define SRT_NX90_lvds2mii_pad_cfg_tx_isel                1
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_tx_isel           0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_tx_isel        0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_tx_iboost              0x00000010U
#define SRT_NX90_lvds2mii_pad_cfg_tx_iboost              4
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_tx_iboost         0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_tx_iboost      0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_tx_term_en             0x00000020U
#define SRT_NX90_lvds2mii_pad_cfg_tx_term_en             5
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_tx_term_en        0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_tx_term_en     0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_tx_term_lowres         0x00000040U
#define SRT_NX90_lvds2mii_pad_cfg_tx_term_lowres         6
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_tx_term_lowres    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_tx_term_lowres 0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_rx_ical                0x00000380U
#define SRT_NX90_lvds2mii_pad_cfg_rx_ical                7
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_rx_ical           0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_rx_ical        0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_rx_vcm_en              0x00000400U
#define SRT_NX90_lvds2mii_pad_cfg_rx_vcm_en              10
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_rx_vcm_en         0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_rx_vcm_en      0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_rx_term_en             0x00000800U
#define SRT_NX90_lvds2mii_pad_cfg_rx_term_en             11
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_rx_term_en        0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_rx_term_en     0x00000000U
#define MSK_NX90_lvds2mii_pad_cfg_rx_term_lowres         0x00001000U
#define SRT_NX90_lvds2mii_pad_cfg_rx_term_lowres         12
#define DFLT_VAL_NX90_lvds2mii_pad_cfg_rx_term_lowres    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_pad_cfg_rx_term_lowres 0x00000000U

/* all used bits of 'NX90_lvds2mii_pad_cfg': */
#define MSK_USED_BITS_NX90_lvds2mii_pad_cfg 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_status */
/* => LVDS2MII status register */
/*    This register shows some status information for LVDS transmission. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_status           0x0000000CU
#define Adr_NX90_lvds2mii0_com_lvds2mii_status 0xFF00170CU
#define Adr_NX90_lvds2mii1_com_lvds2mii_status 0xFF00180CU

#define MSK_NX90_lvds2mii_status_rx_invalid_token  0x00000001U
#define SRT_NX90_lvds2mii_status_rx_invalid_token  0
#define MSK_NX90_lvds2mii_status_rx_invalid_idle   0x00000002U
#define SRT_NX90_lvds2mii_status_rx_invalid_idle   1
#define MSK_NX90_lvds2mii_status_no_link           0x00000004U
#define SRT_NX90_lvds2mii_status_no_link           2
#define MSK_NX90_lvds2mii_status_rx_fifo_overflow  0x00000008U
#define SRT_NX90_lvds2mii_status_rx_fifo_overflow  3
#define MSK_NX90_lvds2mii_status_rx_fifo_underrun  0x00000010U
#define SRT_NX90_lvds2mii_status_rx_fifo_underrun  4
#define MSK_NX90_lvds2mii_status_rx_fifo_short_ifg 0x00000020U
#define SRT_NX90_lvds2mii_status_rx_fifo_short_ifg 5
#define MSK_NX90_lvds2mii_status_rx_fifo_fill      0x000001c0U
#define SRT_NX90_lvds2mii_status_rx_fifo_fill      6
#define MSK_NX90_lvds2mii_status_link_state        0x00000e00U
#define SRT_NX90_lvds2mii_status_link_state        9
#define MSK_NX90_lvds2mii_status_clock_sync_ok     0x00001000U
#define SRT_NX90_lvds2mii_status_clock_sync_ok     12
#define MSK_NX90_lvds2mii_status_clock_sync_good   0x00002000U
#define SRT_NX90_lvds2mii_status_clock_sync_good   13
#define MSK_NX90_lvds2mii_status_rx_in_frame       0x00004000U
#define SRT_NX90_lvds2mii_status_rx_in_frame       14
#define MSK_NX90_lvds2mii_status_rx_sync_frame     0x00008000U
#define SRT_NX90_lvds2mii_status_rx_sync_frame     15
#define MSK_NX90_lvds2mii_status_random_compare    0x00030000U
#define SRT_NX90_lvds2mii_status_random_compare    16

/* all used bits of 'NX90_lvds2mii_status': */
#define MSK_USED_BITS_NX90_lvds2mii_status 0x0003ffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_irq_raw           0x00000010U
#define Adr_NX90_lvds2mii0_com_lvds2mii_irq_raw 0xFF001710U
#define Adr_NX90_lvds2mii1_com_lvds2mii_irq_raw 0xFF001810U
#define DFLT_VAL_NX90_lvds2mii_irq_raw          0x00000000U

#define MSK_NX90_lvds2mii_irq_raw_rx_invalid_token                    0x00000001U
#define SRT_NX90_lvds2mii_irq_raw_rx_invalid_token                    0
#define DFLT_VAL_NX90_lvds2mii_irq_raw_rx_invalid_token               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_rx_invalid_token            0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_rx_invalid_idle                     0x00000002U
#define SRT_NX90_lvds2mii_irq_raw_rx_invalid_idle                     1
#define DFLT_VAL_NX90_lvds2mii_irq_raw_rx_invalid_idle                0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_rx_invalid_idle             0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_rx_long_frame_abort                 0x00000004U
#define SRT_NX90_lvds2mii_irq_raw_rx_long_frame_abort                 2
#define DFLT_VAL_NX90_lvds2mii_irq_raw_rx_long_frame_abort            0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_rx_long_frame_abort         0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_rx_fifo_overflow                    0x00000008U
#define SRT_NX90_lvds2mii_irq_raw_rx_fifo_overflow                    3
#define DFLT_VAL_NX90_lvds2mii_irq_raw_rx_fifo_overflow               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_rx_fifo_overflow            0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_rx_fifo_underrun                    0x00000010U
#define SRT_NX90_lvds2mii_irq_raw_rx_fifo_underrun                    4
#define DFLT_VAL_NX90_lvds2mii_irq_raw_rx_fifo_underrun               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_rx_fifo_underrun            0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_rx_fifo_short_ifg                   0x00000020U
#define SRT_NX90_lvds2mii_irq_raw_rx_fifo_short_ifg                   5
#define DFLT_VAL_NX90_lvds2mii_irq_raw_rx_fifo_short_ifg              0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_rx_fifo_short_ifg           0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_no_link                             0x00000040U
#define SRT_NX90_lvds2mii_irq_raw_no_link                             6
#define DFLT_VAL_NX90_lvds2mii_irq_raw_no_link                        0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_no_link                     0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_idle           0x00000080U
#define SRT_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_idle           7
#define DFLT_VAL_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_idle      0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_idle   0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_no_link_due_constant_level          0x00000100U
#define SRT_NX90_lvds2mii_irq_raw_no_link_due_constant_level          8
#define DFLT_VAL_NX90_lvds2mii_irq_raw_no_link_due_constant_level     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_no_link_due_constant_level  0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_no_link_from_remote_station         0x00000200U
#define SRT_NX90_lvds2mii_irq_raw_no_link_from_remote_station         9
#define DFLT_VAL_NX90_lvds2mii_irq_raw_no_link_from_remote_station    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_no_link_from_remote_station 0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_no_link_due_to_missing_idle         0x00000400U
#define SRT_NX90_lvds2mii_irq_raw_no_link_due_to_missing_idle         10
#define DFLT_VAL_NX90_lvds2mii_irq_raw_no_link_due_to_missing_idle    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_no_link_due_to_missing_idle 0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_dummy          0x00000800U
#define SRT_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_dummy          11
#define DFLT_VAL_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_dummy     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_no_link_due_to_wrong_dummy  0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_debug_clock_difference              0x00001000U
#define SRT_NX90_lvds2mii_irq_raw_debug_clock_difference              12
#define DFLT_VAL_NX90_lvds2mii_irq_raw_debug_clock_difference         0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_debug_clock_difference      0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_debug_negedge_sync                  0x00002000U
#define SRT_NX90_lvds2mii_irq_raw_debug_negedge_sync                  13
#define DFLT_VAL_NX90_lvds2mii_irq_raw_debug_negedge_sync             0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_debug_negedge_sync          0x00000000U
#define MSK_NX90_lvds2mii_irq_raw_debug_posedge_sync                  0x00004000U
#define SRT_NX90_lvds2mii_irq_raw_debug_posedge_sync                  14
#define DFLT_VAL_NX90_lvds2mii_irq_raw_debug_posedge_sync             0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_raw_debug_posedge_sync          0x00000000U

/* all used bits of 'NX90_lvds2mii_irq_raw': */
#define MSK_USED_BITS_NX90_lvds2mii_irq_raw 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to CPU). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_irq_masked           0x00000014U
#define Adr_NX90_lvds2mii0_com_lvds2mii_irq_masked 0xFF001714U
#define Adr_NX90_lvds2mii1_com_lvds2mii_irq_masked 0xFF001814U

#define MSK_NX90_lvds2mii_irq_masked_rx_invalid_token            0x00000001U
#define SRT_NX90_lvds2mii_irq_masked_rx_invalid_token            0
#define MSK_NX90_lvds2mii_irq_masked_rx_invalid_idle             0x00000002U
#define SRT_NX90_lvds2mii_irq_masked_rx_invalid_idle             1
#define MSK_NX90_lvds2mii_irq_masked_rx_long_frame_abort         0x00000004U
#define SRT_NX90_lvds2mii_irq_masked_rx_long_frame_abort         2
#define MSK_NX90_lvds2mii_irq_masked_rx_fifo_overflow            0x00000008U
#define SRT_NX90_lvds2mii_irq_masked_rx_fifo_overflow            3
#define MSK_NX90_lvds2mii_irq_masked_rx_fifo_underrun            0x00000010U
#define SRT_NX90_lvds2mii_irq_masked_rx_fifo_underrun            4
#define MSK_NX90_lvds2mii_irq_masked_rx_fifo_short_ifg           0x00000020U
#define SRT_NX90_lvds2mii_irq_masked_rx_fifo_short_ifg           5
#define MSK_NX90_lvds2mii_irq_masked_no_link                     0x00000040U
#define SRT_NX90_lvds2mii_irq_masked_no_link                     6
#define MSK_NX90_lvds2mii_irq_masked_no_link_due_to_wrong_idle   0x00000080U
#define SRT_NX90_lvds2mii_irq_masked_no_link_due_to_wrong_idle   7
#define MSK_NX90_lvds2mii_irq_masked_no_link_due_constant_level  0x00000100U
#define SRT_NX90_lvds2mii_irq_masked_no_link_due_constant_level  8
#define MSK_NX90_lvds2mii_irq_masked_no_link_from_remote_station 0x00000200U
#define SRT_NX90_lvds2mii_irq_masked_no_link_from_remote_station 9
#define MSK_NX90_lvds2mii_irq_masked_no_link_due_to_missing_idle 0x00000400U
#define SRT_NX90_lvds2mii_irq_masked_no_link_due_to_missing_idle 10
#define MSK_NX90_lvds2mii_irq_masked_no_link_due_to_wrong_dummy  0x00000800U
#define SRT_NX90_lvds2mii_irq_masked_no_link_due_to_wrong_dummy  11
#define MSK_NX90_lvds2mii_irq_masked_debug_clock_difference      0x00001000U
#define SRT_NX90_lvds2mii_irq_masked_debug_clock_difference      12
#define MSK_NX90_lvds2mii_irq_masked_debug_negedge_sync          0x00002000U
#define SRT_NX90_lvds2mii_irq_masked_debug_negedge_sync          13
#define MSK_NX90_lvds2mii_irq_masked_debug_posedge_sync          0x00004000U
#define SRT_NX90_lvds2mii_irq_masked_debug_posedge_sync          14

/* all used bits of 'NX90_lvds2mii_irq_masked': */
#define MSK_USED_BITS_NX90_lvds2mii_irq_masked 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_irq_msk_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_lvds2mii_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_irq_msk_set           0x00000018U
#define Adr_NX90_lvds2mii0_com_lvds2mii_irq_msk_set 0xFF001718U
#define Adr_NX90_lvds2mii1_com_lvds2mii_irq_msk_set 0xFF001818U
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set          0x00000000U

#define MSK_NX90_lvds2mii_irq_msk_set_rx_invalid_token                    0x00000001U
#define SRT_NX90_lvds2mii_irq_msk_set_rx_invalid_token                    0
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_rx_invalid_token               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_rx_invalid_token            0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_rx_invalid_idle                     0x00000002U
#define SRT_NX90_lvds2mii_irq_msk_set_rx_invalid_idle                     1
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_rx_invalid_idle                0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_rx_invalid_idle             0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_rx_long_frame_abort                 0x00000004U
#define SRT_NX90_lvds2mii_irq_msk_set_rx_long_frame_abort                 2
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_rx_long_frame_abort            0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_rx_long_frame_abort         0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_rx_fifo_overflow                    0x00000008U
#define SRT_NX90_lvds2mii_irq_msk_set_rx_fifo_overflow                    3
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_rx_fifo_overflow               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_rx_fifo_overflow            0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_rx_fifo_underrun                    0x00000010U
#define SRT_NX90_lvds2mii_irq_msk_set_rx_fifo_underrun                    4
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_rx_fifo_underrun               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_rx_fifo_underrun            0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_rx_fifo_short_ifg                   0x00000020U
#define SRT_NX90_lvds2mii_irq_msk_set_rx_fifo_short_ifg                   5
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_rx_fifo_short_ifg              0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_rx_fifo_short_ifg           0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_no_link                             0x00000040U
#define SRT_NX90_lvds2mii_irq_msk_set_no_link                             6
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_no_link                        0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_no_link                     0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_idle           0x00000080U
#define SRT_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_idle           7
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_idle      0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_idle   0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_no_link_due_constant_level          0x00000100U
#define SRT_NX90_lvds2mii_irq_msk_set_no_link_due_constant_level          8
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_constant_level     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_constant_level  0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_no_link_from_remote_station         0x00000200U
#define SRT_NX90_lvds2mii_irq_msk_set_no_link_from_remote_station         9
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_no_link_from_remote_station    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_no_link_from_remote_station 0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_no_link_due_to_missing_idle         0x00000400U
#define SRT_NX90_lvds2mii_irq_msk_set_no_link_due_to_missing_idle         10
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_to_missing_idle    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_to_missing_idle 0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_dummy          0x00000800U
#define SRT_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_dummy          11
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_dummy     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_no_link_due_to_wrong_dummy  0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_debug_clock_difference              0x00001000U
#define SRT_NX90_lvds2mii_irq_msk_set_debug_clock_difference              12
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_debug_clock_difference         0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_debug_clock_difference      0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_debug_negedge_sync                  0x00002000U
#define SRT_NX90_lvds2mii_irq_msk_set_debug_negedge_sync                  13
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_debug_negedge_sync             0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_debug_negedge_sync          0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_set_debug_posedge_sync                  0x00004000U
#define SRT_NX90_lvds2mii_irq_msk_set_debug_posedge_sync                  14
#define DFLT_VAL_NX90_lvds2mii_irq_msk_set_debug_posedge_sync             0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_set_debug_posedge_sync          0x00000000U

/* all used bits of 'NX90_lvds2mii_irq_msk_set': */
#define MSK_USED_BITS_NX90_lvds2mii_irq_msk_set 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_irq_msk_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_irq_msk_reset           0x0000001CU
#define Adr_NX90_lvds2mii0_com_lvds2mii_irq_msk_reset 0xFF00171CU
#define Adr_NX90_lvds2mii1_com_lvds2mii_irq_msk_reset 0xFF00181CU
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset          0x00000000U

#define MSK_NX90_lvds2mii_irq_msk_reset_rx_invalid_token                    0x00000001U
#define SRT_NX90_lvds2mii_irq_msk_reset_rx_invalid_token                    0
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_rx_invalid_token               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_rx_invalid_token            0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_rx_invalid_idle                     0x00000002U
#define SRT_NX90_lvds2mii_irq_msk_reset_rx_invalid_idle                     1
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_rx_invalid_idle                0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_rx_invalid_idle             0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_rx_long_frame_abort                 0x00000004U
#define SRT_NX90_lvds2mii_irq_msk_reset_rx_long_frame_abort                 2
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_rx_long_frame_abort            0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_rx_long_frame_abort         0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_rx_fifo_overflow                    0x00000008U
#define SRT_NX90_lvds2mii_irq_msk_reset_rx_fifo_overflow                    3
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_rx_fifo_overflow               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_rx_fifo_overflow            0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_rx_fifo_underrun                    0x00000010U
#define SRT_NX90_lvds2mii_irq_msk_reset_rx_fifo_underrun                    4
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_rx_fifo_underrun               0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_rx_fifo_underrun            0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_rx_fifo_short_ifg                   0x00000020U
#define SRT_NX90_lvds2mii_irq_msk_reset_rx_fifo_short_ifg                   5
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_rx_fifo_short_ifg              0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_rx_fifo_short_ifg           0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_no_link                             0x00000040U
#define SRT_NX90_lvds2mii_irq_msk_reset_no_link                             6
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_no_link                        0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_no_link                     0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_idle           0x00000080U
#define SRT_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_idle           7
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_idle      0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_idle   0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_no_link_due_constant_level          0x00000100U
#define SRT_NX90_lvds2mii_irq_msk_reset_no_link_due_constant_level          8
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_constant_level     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_constant_level  0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_no_link_from_remote_station         0x00000200U
#define SRT_NX90_lvds2mii_irq_msk_reset_no_link_from_remote_station         9
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_no_link_from_remote_station    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_no_link_from_remote_station 0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_no_link_due_to_missing_idle         0x00000400U
#define SRT_NX90_lvds2mii_irq_msk_reset_no_link_due_to_missing_idle         10
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_to_missing_idle    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_to_missing_idle 0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_dummy          0x00000800U
#define SRT_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_dummy          11
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_dummy     0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_no_link_due_to_wrong_dummy  0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_debug_clock_difference              0x00001000U
#define SRT_NX90_lvds2mii_irq_msk_reset_debug_clock_difference              12
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_debug_clock_difference         0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_debug_clock_difference      0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_debug_negedge_sync                  0x00002000U
#define SRT_NX90_lvds2mii_irq_msk_reset_debug_negedge_sync                  13
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_debug_negedge_sync             0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_debug_negedge_sync          0x00000000U
#define MSK_NX90_lvds2mii_irq_msk_reset_debug_posedge_sync                  0x00004000U
#define SRT_NX90_lvds2mii_irq_msk_reset_debug_posedge_sync                  14
#define DFLT_VAL_NX90_lvds2mii_irq_msk_reset_debug_posedge_sync             0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_irq_msk_reset_debug_posedge_sync          0x00000000U

/* all used bits of 'NX90_lvds2mii_irq_msk_reset': */
#define MSK_USED_BITS_NX90_lvds2mii_irq_msk_reset 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data0 */
/* => LVDS sampled rx data (31:0): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data0           0x00000020U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data0 0xFF001720U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data0 0xFF001820U

#define MSK_NX90_lvds2mii_debug_data0_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data0_val 0

/* all used bits of 'NX90_lvds2mii_debug_data0': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data1 */
/* => LVDS sampled rx data (63:32): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data1           0x00000024U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data1 0xFF001724U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data1 0xFF001824U

#define MSK_NX90_lvds2mii_debug_data1_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data1_val 0

/* all used bits of 'NX90_lvds2mii_debug_data1': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data2 */
/* => LVDS sampled rx data (95:64): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data2           0x00000028U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data2 0xFF001728U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data2 0xFF001828U

#define MSK_NX90_lvds2mii_debug_data2_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data2_val 0

/* all used bits of 'NX90_lvds2mii_debug_data2': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data3 */
/* => LVDS sampled rx data (127:96): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data3           0x0000002CU
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data3 0xFF00172CU
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data3 0xFF00182CU

#define MSK_NX90_lvds2mii_debug_data3_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data3_val 0

/* all used bits of 'NX90_lvds2mii_debug_data3': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data4 */
/* => LVDS sampled rx data (159:128): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data4           0x00000030U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data4 0xFF001730U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data4 0xFF001830U

#define MSK_NX90_lvds2mii_debug_data4_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data4_val 0

/* all used bits of 'NX90_lvds2mii_debug_data4': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data5 */
/* => LVDS sampled rx data (191:160): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data5           0x00000034U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data5 0xFF001734U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data5 0xFF001834U

#define MSK_NX90_lvds2mii_debug_data5_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data5_val 0

/* all used bits of 'NX90_lvds2mii_debug_data5': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data6 */
/* => LVDS sampled rx data (223:192): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data6           0x00000038U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data6 0xFF001738U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data6 0xFF001838U

#define MSK_NX90_lvds2mii_debug_data6_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data6_val 0

/* all used bits of 'NX90_lvds2mii_debug_data6': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_data7 */
/* => LVDS sampled rx data (255:224): */
/*    Raw input data sampled at both edges of clk400. */
/*    Data is sampled once, when lvds_config-debug_latch_once is set and the programmed debug event is reached. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_data7           0x0000003CU
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_data7 0xFF00173CU
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_data7 0xFF00183CU

#define MSK_NX90_lvds2mii_debug_data7_val 0xffffffffU
#define SRT_NX90_lvds2mii_debug_data7_val 0

/* all used bits of 'NX90_lvds2mii_debug_data7': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_data7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_clk_phase */
/* => LVDS sampled data clock phase: */
/*    clk_phase of sampled data, i.e. estimated position of first bit of clock recovery. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_clk_phase           0x00000040U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_clk_phase 0xFF001740U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_clk_phase 0xFF001840U

#define MSK_NX90_lvds2mii_debug_clk_phase_val 0x0000001fU
#define SRT_NX90_lvds2mii_debug_clk_phase_val 0

/* all used bits of 'NX90_lvds2mii_debug_clk_phase': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_clk_phase 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_edge_good_range */
/* => LVDS clock recovery range: */
/*    Used to count edges, that lie inside a range around estimated edges from clock recovery. */
/*    This gives an impression of quality of input signal and clock recovery. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_edge_good_range           0x00000044U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_edge_good_range 0xFF001744U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_edge_good_range 0xFF001844U
#define DFLT_VAL_NX90_lvds2mii_debug_edge_good_range          0x00000005U

#define MSK_NX90_lvds2mii_debug_edge_good_range_val         0x0000000fU
#define SRT_NX90_lvds2mii_debug_edge_good_range_val         0
#define DFLT_VAL_NX90_lvds2mii_debug_edge_good_range_val    0x00000005U
#define DFLT_BF_VAL_NX90_lvds2mii_debug_edge_good_range_val 0x00000005U

/* all used bits of 'NX90_lvds2mii_debug_edge_good_range': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_edge_good_range 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_edge_quality */
/* => LVDS edge quality for counting: */
/*    Defines the quality of edges to be considered in counting. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_edge_quality           0x00000048U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_edge_quality 0xFF001748U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_edge_quality 0xFF001848U
#define DFLT_VAL_NX90_lvds2mii_debug_edge_quality          0x00000000U

#define MSK_NX90_lvds2mii_debug_edge_quality_val         0x00000007U
#define SRT_NX90_lvds2mii_debug_edge_quality_val         0
#define DFLT_VAL_NX90_lvds2mii_debug_edge_quality_val    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_debug_edge_quality_val 0x00000000U

/* all used bits of 'NX90_lvds2mii_debug_edge_quality': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_edge_quality 0x00000007U

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_edge_count */
/* => LVDS clock recovery debug counter: */
/*    Used to count edges, that lie inside a range around estimated edges from clock recovery. */
/*    This gives an impression of quality of input signal and clock recovery. */
/*    Writing this register starts downcounting until zero and resets posedge_good_cnt.and negedge_good_cnt. */
/*    Reading this register shows the actual count value, which might be small negative 16-bit value. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_edge_count           0x0000004CU
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_edge_count 0xFF00174CU
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_edge_count 0xFF00184CU
#define DFLT_VAL_NX90_lvds2mii_debug_edge_count          0x00000000U

#define MSK_NX90_lvds2mii_debug_edge_count_val         0x0000ffffU
#define SRT_NX90_lvds2mii_debug_edge_count_val         0
#define DFLT_VAL_NX90_lvds2mii_debug_edge_count_val    0x00000000U
#define DFLT_BF_VAL_NX90_lvds2mii_debug_edge_count_val 0x00000000U

/* all used bits of 'NX90_lvds2mii_debug_edge_count': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_edge_count 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_posedge_good_cnt */
/* => LVDS clock recovery debug good posedges counter: */
/*    Used to count edges, that lie inside a range around estimated edges from clock recovery. */
/*    This gives an impression of quality of input signal and clock recovery. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_posedge_good_cnt           0x00000050U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_posedge_good_cnt 0xFF001750U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_posedge_good_cnt 0xFF001850U

#define MSK_NX90_lvds2mii_debug_posedge_good_cnt_val 0x00007fffU
#define SRT_NX90_lvds2mii_debug_posedge_good_cnt_val 0

/* all used bits of 'NX90_lvds2mii_debug_posedge_good_cnt': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_posedge_good_cnt 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_negedge_good_cnt */
/* => LVDS clock recovery debug good negedges counter: */
/*    Used to count edges, that lie inside a range around estimated edges from clock recovery. */
/*    This gives an impression of quality of input signal and clock recovery. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_negedge_good_cnt           0x00000054U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_negedge_good_cnt 0xFF001754U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_negedge_good_cnt 0xFF001854U

#define MSK_NX90_lvds2mii_debug_negedge_good_cnt_val 0x00007fffU
#define SRT_NX90_lvds2mii_debug_negedge_good_cnt_val 0

/* all used bits of 'NX90_lvds2mii_debug_negedge_good_cnt': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_negedge_good_cnt 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_clock_offset_check */
/* => LVDS clock offset check: */
/*    If clock offset is changing fast, the clock sync might be lost. */
/*    This register defines a period and max value for posedge and negedge based clock recovery. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_clock_offset_check           0x00000058U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_clock_offset_check 0xFF001758U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_clock_offset_check 0xFF001858U
#define DFLT_VAL_NX90_lvds2mii_debug_clock_offset_check          0x04b00058U

#define MSK_NX90_lvds2mii_debug_clock_offset_check_range         0x000003ffU
#define SRT_NX90_lvds2mii_debug_clock_offset_check_range         0
#define DFLT_VAL_NX90_lvds2mii_debug_clock_offset_check_range    0x00000058U
#define DFLT_BF_VAL_NX90_lvds2mii_debug_clock_offset_check_range 0x00000058U
#define MSK_NX90_lvds2mii_debug_clock_offset_check_time          0xffff0000U
#define SRT_NX90_lvds2mii_debug_clock_offset_check_time          16
#define DFLT_VAL_NX90_lvds2mii_debug_clock_offset_check_time     0x04b00000U
#define DFLT_BF_VAL_NX90_lvds2mii_debug_clock_offset_check_time  0x000004b0U

/* all used bits of 'NX90_lvds2mii_debug_clock_offset_check': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_clock_offset_check 0xffff03ffU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_check_one_clock_phase */
/* => LVDS check one clock phase: */
/*    Checks if sampled value equals received bit for one clock phase (0..23). */
/*    A counter is incremented with every unequal (first) bit within 655360ns. */
/*    Writing to this register starts counting and generation of debug_check_one_clock_phase_status. */
/*    Note: Due to internal trunc, the real clock_phase is 1/48 bit later than calculated here. */
/*          This leads to bigger error counts for clock_phase 0 compared to symmetrical clock_phase 23. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_check_one_clock_phase           0x0000005CU
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_check_one_clock_phase 0xFF00175CU
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_check_one_clock_phase 0xFF00185CU
#define DFLT_VAL_NX90_lvds2mii_debug_check_one_clock_phase          0x00000017U

#define MSK_NX90_lvds2mii_debug_check_one_clock_phase_clock_phase         0x0000001fU
#define SRT_NX90_lvds2mii_debug_check_one_clock_phase_clock_phase         0
#define DFLT_VAL_NX90_lvds2mii_debug_check_one_clock_phase_clock_phase    0x00000017U
#define DFLT_BF_VAL_NX90_lvds2mii_debug_check_one_clock_phase_clock_phase 0x00000017U

/* all used bits of 'NX90_lvds2mii_debug_check_one_clock_phase': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_check_one_clock_phase 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register lvds2mii_debug_check_one_clock_phase_result */
/* => LVDS check one clock phase result: */
/*    s. .debug_check_one_clock_phase. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_lvds2mii_debug_check_one_clock_phase_result           0x00000060U
#define Adr_NX90_lvds2mii0_com_lvds2mii_debug_check_one_clock_phase_result 0xFF001760U
#define Adr_NX90_lvds2mii1_com_lvds2mii_debug_check_one_clock_phase_result 0xFF001860U

#define MSK_NX90_lvds2mii_debug_check_one_clock_phase_result_error_bits 0x0000ffffU
#define SRT_NX90_lvds2mii_debug_check_one_clock_phase_result_error_bits 0

/* all used bits of 'NX90_lvds2mii_debug_check_one_clock_phase_result': */
#define MSK_USED_BITS_NX90_lvds2mii_debug_check_one_clock_phase_result 0x0000ffffU


/* ===================================================================== */

/* AREA dpm */
/* Area of dpm0_com, dpm1_com */

/* ===================================================================== */

#define Addr_NX90_dpm0_com 0xFF001900U
#define Addr_NX90_dpm1_com 0xFF001A00U

/* --------------------------------------------------------------------- */
/* Register dpm_cfg0x0 */
/* => DPM IO Control Register 0. */
/*    This register is accessible in any DPM-mode (8, 16 bit, SRAM, Intel, Motorola, little endian, big endian) by access to DPM address 0. */
/*    Basic DPM settings are configurable here to make higher addresses accessible. */
/*    To avoid instable system configurations, global changes of important configuration registers must be confirmed */
/*    (re)writing 'mode' bit field of this register. View 'mode' description for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_cfg0x0      0x00000000U
#define Adr_NX90_dpm0_com_dpm_cfg0x0 0xFF001900U
#define Adr_NX90_dpm1_com_dpm_cfg0x0 0xFF001A00U
#define DFLT_VAL_NX90_dpm_cfg0x0     0x00000000U

#define MSK_NX90_dpm_cfg0x0_mode           0x0000000fU
#define SRT_NX90_dpm_cfg0x0_mode           0
#define DFLT_VAL_NX90_dpm_cfg0x0_mode      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_cfg0x0_mode   0x00000000U
#define MSK_NX90_dpm_cfg0x0_endian         0x00000030U
#define SRT_NX90_dpm_cfg0x0_endian         4
#define DFLT_VAL_NX90_dpm_cfg0x0_endian    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_cfg0x0_endian 0x00000000U

/* all used bits of 'NX90_dpm_cfg0x0': */
#define MSK_USED_BITS_NX90_dpm_cfg0x0 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dpm_if_cfg */
/* => DPM interface configuration register. */
/*    DPM interface mode must be basically configured in 'dpm_cfg0x0' register. Interface configuration is */
/*    split up into two registers to support setup from external host CPU when DPM is in 8 bit non-multiplexed default mode after reset. */
/*    However this does not work for all interfaces. E.g. for modes where DPM_WRN is not write trigger this is not */
/*    possible. Interface setup must be done by netX internal CPU then. */
/*    To avoid instable system configurations, changes of this registers must be confirmed */
/*    (re)writing 'mode' bit field of dpm_cfg0x0 register. View 'mode' description there for details. */
/*    {                                      |         |         |         |         |         |           |       |        |        |          | */
/*      Host connection                       isa_a17_   cs_ctrl   addr_sh   aen_pol   aen_sel   be_wr       be_rd   be_pol   be_sel   dir_ctrl   cfg_0x0.mode */
/*                                            memcs16n                                           _dis        _dis */
/*      SRAM or Intel 8bit                          0         0         x         x        0       x           x       x         0         0         0x0 */
/*      SRAM, 16bit,byte-enable                     0         0         0         x        0       0           0       0         0         0         0x4 */
/*      SRAM, or Intel, 8bit multiplexed            0         0         x         1        2       x           x       x         0         0         0x2 */
/*      SRAM, 16bit mul. (netx50: Intel, no BEs)    0         0         0         1        2       1           1       x         0         0         0x6 */
/*      SRAM, 16bit mul. 2BEs, byte-addr            0         0         0         1        2       0           0       0         0         0         0x6 */
/*      SRAM, 16bit mul. 2BEs, word-addr            0         0         1         1        2       0           0       0         0         0         0x6 */
/*      Intel, 16bit,byte-write                     0         0         0         x        0       0           1       0         1         1         0x4 */
/*      Intel, 16bit mul. byte-write                0         0         1         1        2       0           1       0         1         1         0x6 */
/*      TI OMAP, 16bit non-multiplexed              0         0         0         x        0       0           0       0         0         0         0x4 */
/*      TI OMAP, 16bit multiplexed                  0         0         1         0        2       0           0       0         0         0         0x6 */
/*      Motorola, 8bit (6800)                       0         0         x         x        0       0           0       1         1         2         0x0 */
/*      Motorola, 16bit                             0         0         0         x        0       0           0       0         0         2         0x4 */
/*      Motorola, 16bit (68000)                     0         0         0         0        2       0           0       0         0         2         0x4 */
/*      Motorola, 8bit multiplexed                  0         0         x         x        0       0           0       1         1         2         0x2 */
/*      Motorola, 16bit mul.netx50: byte-addr       0         0         0         1        2       0           0       0         0         2         0x6 */
/*      Motorola, 16bit mul.word-addr               0         0         1         1        2       0           0       0         0         2         0x6 */
/*      ISA, 8bit                                   0         4         x         0        2       0           0       0         0         0         0x0 */
/*      ISA, 16bit                                  1         4         0         0        2       0           0       0         0         0         0x4} */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_if_cfg      0x00000004U
#define Adr_NX90_dpm0_com_dpm_if_cfg 0xFF001904U
#define Adr_NX90_dpm1_com_dpm_if_cfg 0xFF001A04U
#define DFLT_VAL_NX90_dpm_if_cfg     0x00000000U

#define MSK_NX90_dpm_if_cfg_dir_ctrl                    0x00000003U
#define SRT_NX90_dpm_if_cfg_dir_ctrl                    0
#define DFLT_VAL_NX90_dpm_if_cfg_dir_ctrl               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_dir_ctrl            0x00000000U
#define MSK_NX90_dpm_if_cfg_be_sel                      0x00000010U
#define SRT_NX90_dpm_if_cfg_be_sel                      4
#define DFLT_VAL_NX90_dpm_if_cfg_be_sel                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_be_sel              0x00000000U
#define MSK_NX90_dpm_if_cfg_be_rd_dis                   0x00000040U
#define SRT_NX90_dpm_if_cfg_be_rd_dis                   6
#define DFLT_VAL_NX90_dpm_if_cfg_be_rd_dis              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_be_rd_dis           0x00000000U
#define MSK_NX90_dpm_if_cfg_be_wr_dis                   0x00000080U
#define SRT_NX90_dpm_if_cfg_be_wr_dis                   7
#define DFLT_VAL_NX90_dpm_if_cfg_be_wr_dis              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_be_wr_dis           0x00000000U
#define MSK_NX90_dpm_if_cfg_be_pol                      0x00000300U
#define SRT_NX90_dpm_if_cfg_be_pol                      8
#define DFLT_VAL_NX90_dpm_if_cfg_be_pol                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_be_pol              0x00000000U
#define MSK_NX90_dpm_if_cfg_aen_sel                     0x00003000U
#define SRT_NX90_dpm_if_cfg_aen_sel                     12
#define DFLT_VAL_NX90_dpm_if_cfg_aen_sel                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_aen_sel             0x00000000U
#define MSK_NX90_dpm_if_cfg_aen_pol                     0x00004000U
#define SRT_NX90_dpm_if_cfg_aen_pol                     14
#define DFLT_VAL_NX90_dpm_if_cfg_aen_pol                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_aen_pol             0x00000000U
#define MSK_NX90_dpm_if_cfg_addr_sh                     0x00008000U
#define SRT_NX90_dpm_if_cfg_addr_sh                     15
#define DFLT_VAL_NX90_dpm_if_cfg_addr_sh                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_addr_sh             0x00000000U
#define MSK_NX90_dpm_if_cfg_cs_ctrl                     0x00070000U
#define SRT_NX90_dpm_if_cfg_cs_ctrl                     16
#define DFLT_VAL_NX90_dpm_if_cfg_cs_ctrl                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_cs_ctrl             0x00000000U
#define MSK_NX90_dpm_if_cfg_isa_a17_is_memcs16n         0x01000000U
#define SRT_NX90_dpm_if_cfg_isa_a17_is_memcs16n         24
#define DFLT_VAL_NX90_dpm_if_cfg_isa_a17_is_memcs16n    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_if_cfg_isa_a17_is_memcs16n 0x00000000U

/* all used bits of 'NX90_dpm_if_cfg': */
#define MSK_USED_BITS_NX90_dpm_if_cfg 0x0107f3d3U

/* --------------------------------------------------------------------- */
/* Register dpm_pio_cfg0 */
/* => DPM PIO Configuration Register0. */
/*    Signals to be used as PIOs when netX DPM is active must be selected here or in 'dpm_pio_cfg1' register. Since netx56 */
/*    PIO function will not be automatically activated depending on other settings. E.g. DPM_D15..8 can not be used */
/*    automatically when 8 bit data mode is selected. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_pio_cfg0      0x00000008U
#define Adr_NX90_dpm0_com_dpm_pio_cfg0 0xFF001908U
#define Adr_NX90_dpm1_com_dpm_pio_cfg0 0xFF001A08U
#define DFLT_VAL_NX90_dpm_pio_cfg0     0x00000000U

#define MSK_NX90_dpm_pio_cfg0_sel_d_pio         0x0000ffffU
#define SRT_NX90_dpm_pio_cfg0_sel_d_pio         0
#define DFLT_VAL_NX90_dpm_pio_cfg0_sel_d_pio    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg0_sel_d_pio 0x00000000U

/* all used bits of 'NX90_dpm_pio_cfg0': */
#define MSK_USED_BITS_NX90_dpm_pio_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dpm_pio_cfg1 */
/* => DPM PIO Configuration Register1. */
/*    PIO usage of DPM_SIRQ, DPM_DIRQ and DPM_RDY has moved from 'dpm_io_cfg_misc' to this register since netx56. */
/*    Signals to be used as PIOs when netX DPM is active must be selected here or in 'dpm_pio_cfg0' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_pio_cfg1      0x0000000CU
#define Adr_NX90_dpm0_com_dpm_pio_cfg1 0xFF00190CU
#define Adr_NX90_dpm1_com_dpm_pio_cfg1 0xFF001A0CU
#define DFLT_VAL_NX90_dpm_pio_cfg1     0xe0000000U

#define MSK_NX90_dpm_pio_cfg1_sel_a_pio            0x000fffffU
#define SRT_NX90_dpm_pio_cfg1_sel_a_pio            0
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_a_pio       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_a_pio    0x00000000U
#define MSK_NX90_dpm_pio_cfg1_sel_bhe1_pio         0x01000000U
#define SRT_NX90_dpm_pio_cfg1_sel_bhe1_pio         24
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_bhe1_pio    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_bhe1_pio 0x00000000U
#define MSK_NX90_dpm_pio_cfg1_sel_csn_pio          0x04000000U
#define SRT_NX90_dpm_pio_cfg1_sel_csn_pio          26
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_csn_pio     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_csn_pio  0x00000000U
#define MSK_NX90_dpm_pio_cfg1_sel_rdn_pio          0x08000000U
#define SRT_NX90_dpm_pio_cfg1_sel_rdn_pio          27
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_rdn_pio     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_rdn_pio  0x00000000U
#define MSK_NX90_dpm_pio_cfg1_sel_wrn_pio          0x10000000U
#define SRT_NX90_dpm_pio_cfg1_sel_wrn_pio          28
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_wrn_pio     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_wrn_pio  0x00000000U
#define MSK_NX90_dpm_pio_cfg1_sel_rdy_pio          0x20000000U
#define SRT_NX90_dpm_pio_cfg1_sel_rdy_pio          29
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_rdy_pio     0x20000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_rdy_pio  0x00000001U
#define MSK_NX90_dpm_pio_cfg1_sel_dirq_pio         0x40000000U
#define SRT_NX90_dpm_pio_cfg1_sel_dirq_pio         30
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_dirq_pio    0x40000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_dirq_pio 0x00000001U
#define MSK_NX90_dpm_pio_cfg1_sel_sirq_pio         0x80000000U
#define SRT_NX90_dpm_pio_cfg1_sel_sirq_pio         31
#define DFLT_VAL_NX90_dpm_pio_cfg1_sel_sirq_pio    0x80000000U
#define DFLT_BF_VAL_NX90_dpm_pio_cfg1_sel_sirq_pio 0x00000001U

/* all used bits of 'NX90_dpm_pio_cfg1': */
#define MSK_USED_BITS_NX90_dpm_pio_cfg1 0xfd0fffffU

/* --------------------------------------------------------------------- */
/* Register dpm_addr_cfg */
/* => DPM External Address Configuration Register. */
/*    Note: */
/*       Address compare logic as part of netX DPM Chip-Select decoding logic is a new netx56 feature. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_addr_cfg      0x00000010U
#define Adr_NX90_dpm0_com_dpm_addr_cfg 0xFF001910U
#define Adr_NX90_dpm1_com_dpm_addr_cfg 0xFF001A10U
#define DFLT_VAL_NX90_dpm_addr_cfg     0x00000002U

#define MSK_NX90_dpm_addr_cfg_addr_range               0x0000000fU
#define SRT_NX90_dpm_addr_cfg_addr_range               0
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_range          0x00000002U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_range       0x00000002U
#define MSK_NX90_dpm_addr_cfg_cfg_win_addr_cfg         0x00000030U
#define SRT_NX90_dpm_addr_cfg_cfg_win_addr_cfg         4
#define DFLT_VAL_NX90_dpm_addr_cfg_cfg_win_addr_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_cfg_win_addr_cfg 0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a11             0x0000c000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a11             14
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a11        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a11     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a12             0x00030000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a12             16
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a12        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a12     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a13             0x000c0000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a13             18
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a13        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a13     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a14             0x00300000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a14             20
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a14        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a14     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a15             0x00c00000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a15             22
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a15        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a15     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a16             0x03000000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a16             24
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a16        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a16     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a17             0x0c000000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a17             26
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a17        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a17     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a18             0x30000000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a18             28
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a18        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a18     0x00000000U
#define MSK_NX90_dpm_addr_cfg_addr_cmp_a19             0xc0000000U
#define SRT_NX90_dpm_addr_cfg_addr_cmp_a19             30
#define DFLT_VAL_NX90_dpm_addr_cfg_addr_cmp_a19        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_addr_cfg_addr_cmp_a19     0x00000000U

/* all used bits of 'NX90_dpm_addr_cfg': */
#define MSK_USED_BITS_NX90_dpm_addr_cfg 0xffffc03fU

/* --------------------------------------------------------------------- */
/* Register dpm_timing_cfg */
/* => DPM timing and access configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_timing_cfg      0x00000014U
#define Adr_NX90_dpm0_com_dpm_timing_cfg 0xFF001914U
#define Adr_NX90_dpm1_com_dpm_timing_cfg 0xFF001A14U
#define DFLT_VAL_NX90_dpm_timing_cfg     0x00000027U

#define MSK_NX90_dpm_timing_cfg_t_osa                     0x00000003U
#define SRT_NX90_dpm_timing_cfg_t_osa                     0
#define DFLT_VAL_NX90_dpm_timing_cfg_t_osa                0x00000003U
#define DFLT_BF_VAL_NX90_dpm_timing_cfg_t_osa             0x00000003U
#define MSK_NX90_dpm_timing_cfg_filter                    0x00000004U
#define SRT_NX90_dpm_timing_cfg_filter                    2
#define DFLT_VAL_NX90_dpm_timing_cfg_filter               0x00000004U
#define DFLT_BF_VAL_NX90_dpm_timing_cfg_filter            0x00000001U
#define MSK_NX90_dpm_timing_cfg_t_rds                     0x00000070U
#define SRT_NX90_dpm_timing_cfg_t_rds                     4
#define DFLT_VAL_NX90_dpm_timing_cfg_t_rds                0x00000020U
#define DFLT_BF_VAL_NX90_dpm_timing_cfg_t_rds             0x00000002U
#define MSK_NX90_dpm_timing_cfg_rd_burst_en               0x00000080U
#define SRT_NX90_dpm_timing_cfg_rd_burst_en               7
#define DFLT_VAL_NX90_dpm_timing_cfg_rd_burst_en          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_timing_cfg_rd_burst_en       0x00000000U
#define MSK_NX90_dpm_timing_cfg_en_dpm_serial_sqi         0x40000000U
#define SRT_NX90_dpm_timing_cfg_en_dpm_serial_sqi         30
#define DFLT_VAL_NX90_dpm_timing_cfg_en_dpm_serial_sqi    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_timing_cfg_en_dpm_serial_sqi 0x00000000U
#define MSK_NX90_dpm_timing_cfg_sdpm_miso_early           0x80000000U
#define SRT_NX90_dpm_timing_cfg_sdpm_miso_early           31
#define DFLT_VAL_NX90_dpm_timing_cfg_sdpm_miso_early      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_timing_cfg_sdpm_miso_early   0x00000000U

/* all used bits of 'NX90_dpm_timing_cfg': */
#define MSK_USED_BITS_NX90_dpm_timing_cfg 0xc00000f7U

/* --------------------------------------------------------------------- */
/* Register dpm_rdy_cfg */
/* => DPM Ready (DPM_RDY) Signal Configuration Register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_rdy_cfg      0x00000018U
#define Adr_NX90_dpm0_com_dpm_rdy_cfg 0xFF001918U
#define Adr_NX90_dpm1_com_dpm_rdy_cfg 0xFF001A18U
#define DFLT_VAL_NX90_dpm_rdy_cfg     0x00000001U

#define MSK_NX90_dpm_rdy_cfg_rdy_pol              0x00000001U
#define SRT_NX90_dpm_rdy_cfg_rdy_pol              0
#define DFLT_VAL_NX90_dpm_rdy_cfg_rdy_pol         0x00000001U
#define DFLT_BF_VAL_NX90_dpm_rdy_cfg_rdy_pol      0x00000001U
#define MSK_NX90_dpm_rdy_cfg_rdy_drv_mode         0x00000006U
#define SRT_NX90_dpm_rdy_cfg_rdy_drv_mode         1
#define DFLT_VAL_NX90_dpm_rdy_cfg_rdy_drv_mode    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_rdy_cfg_rdy_drv_mode 0x00000000U
#define MSK_NX90_dpm_rdy_cfg_rdy_sig_mode         0x00000008U
#define SRT_NX90_dpm_rdy_cfg_rdy_sig_mode         3
#define DFLT_VAL_NX90_dpm_rdy_cfg_rdy_sig_mode    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_rdy_cfg_rdy_sig_mode 0x00000000U
#define MSK_NX90_dpm_rdy_cfg_rdy_to_cfg           0x00000030U
#define SRT_NX90_dpm_rdy_cfg_rdy_to_cfg           4
#define DFLT_VAL_NX90_dpm_rdy_cfg_rdy_to_cfg      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_rdy_cfg_rdy_to_cfg   0x00000000U

/* all used bits of 'NX90_dpm_rdy_cfg': */
#define MSK_USED_BITS_NX90_dpm_rdy_cfg 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dpm_status */
/* => DPM Status Register. */
/*    DPM access errors can generate IRQ for host device (view DPM IRQ registers further down). For */
/*    error handling, the address an error occurred with is logged in dpm_status_err_addr register. Error bits can be cleared by */
/*    access to dpm_status_err_reset register. */
/*    Note for 'bus_conflict_rd_addr_err', 'bus_conflict_rd_err' and 'bus_conflict_wr_err': */
/*       Bus-conflict error detection is basically implemented as debug feature. Detected errors could be result of hazardous */
/*       signals, incorrect configured DPM mode or not supported host interfaces. However there could some be some applications */
/*       where error detection is too strict (see description of 'dis_bus_conflict_err_detect' of 'dpm_misc_cfg'). For that reason */
/*       bus-conflict error behaviour can be controlled by 'dis_bus_conflict_err_detect' of 'dpm_misc_cfg' */
/*       register. However, status bits inside this register (and inside 'dpm_status_err_reset') will always be set when an */
/*       error was detected. */
/*       When error detection is enabled ('dis_bus_conflict_err_detect' is not set), an error-access will be aborted (ready-signal will */
/*       be set to ready state when used) and DPM will wait for idle bus (dir_mode==0: deselected or read and write control signal */
/*       inactive, dir_mode!=0: deselected or all byte-enables inactive). The error IRQ ('dpm_err') will be asserted. Read data */
/*       of related access will be invalid and write data will be junked. */
/*       When error detection is disabled ('dis_bus_conflict_err_detect' is set) bus-conflict errors do not assert the 'dpm_err' */
/*       IRQ, erroneous access will not be aborted and DPM will not wait for bus idle state. I.e. the erroneous access will be */
/*       finished as read or write. However consequences of an error access are not predictable: Read or write data or address */
/*       could be invalid. */
/*       Error detection is disabled by default after power on and must be enabled before usage. */
/*    Note for 'rdy_to_err', 'wr_err' and 'rd_err': */
/*       These errors are basically set when an host access is too fast to be handled by netX internally. NetX internal access */
/*       times depend on target address area. However there are some address areas where other netX modules have higher access */
/*       priority than DPM (especially local memories of netX internal CPUs like xPEC or xPIC). Fore these address areas */
/*       access times could become unpredictable (depending on application running netX inside). Especially when using host */
/*       devices without ready-signal handshaking (i.e. also serial DPM) where netX access times could not be met under all */
/*       conditions error detection handling becomes mandatory. It is recommended to check for errors after each access. In */
/*       error-case the last access must be repeated. If an error occurs permanently the host must stretch external DPM access */
/*       by inserting wait states. For all other DPM connections this error detection should only be a debug feature. */
/*       Behaviour of 'wr_err' and 'rd_err' can be additionally controlled by 'dis_access_err_halt' of 'dpm_misc_cfg' register: */
/*       When error detection is enabled ('dis_access_err_halt' is not set), all read-access after occurrence of a read-error */
/*       and all write-access after occurrence of a write-error will be ignored. Error states must be reset first before new */
/*       accesses are performed internally. This is implemented to protect netX from unpredictable results of access errors. */
/*       However some applications always require access to netX internal address area (e.g. as DPM configuration window 0 */
/*       for error handling was disabled). For this purpose error-detection could be disabled. */
/*       DPM error IRQ ('dpm_err') and error-status flags will always be set in error case independent of 'dis_access_err_halt'. */
/*       Error detection is disabled by default after power on and must be enabled before usage. */
/*    Note: */
/*      Errors could be avoided by programming input filtering, burst support or timing. */
/*      That can be configured by dpm_timing_cfg register. */
/*    Note: */
/*      Serial DPM status send on the first byte of a serial access by netX is reordered and bus_conflict-errors */
/*      are omitted (as they are related to parallel DPM only). Serial DPM status byte is transferred MSB first */
/*      and contains following information (serial DPM protocol was completely revised for netx56 and this is a new netx56 feature): */
/*    {                          | */
/*      bit of first serial byte   status information */
/*                 7 (MSB)                          0 */
/*                 6                                0 */
/*                 5                                0 */
/*                 4                   sel_dpm_serial */
/*                 3                       rdy_to_err */
/*                 2                           wr_err */
/*                 1                           rd_err */
/*                 0 (LSB)                   unlocked} */
/*    Note: */
/*      The first serial transfer after reset is always ignored by the DPM module (due to initial synchronizations between the serial */
/*      and parallel part of the DPM module). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_status      0x0000001CU
#define Adr_NX90_dpm0_com_dpm_status 0xFF00191CU
#define Adr_NX90_dpm1_com_dpm_status 0xFF001A1CU

#define MSK_NX90_dpm_status_unlocked                 0x00000001U
#define SRT_NX90_dpm_status_unlocked                 0
#define MSK_NX90_dpm_status_rd_err                   0x00000002U
#define SRT_NX90_dpm_status_rd_err                   1
#define MSK_NX90_dpm_status_wr_err                   0x00000004U
#define SRT_NX90_dpm_status_wr_err                   2
#define MSK_NX90_dpm_status_rdy_to_err               0x00000008U
#define SRT_NX90_dpm_status_rdy_to_err               3
#define MSK_NX90_dpm_status_bus_conflict_wr_err      0x00000010U
#define SRT_NX90_dpm_status_bus_conflict_wr_err      4
#define MSK_NX90_dpm_status_bus_conflict_rd_err      0x00000020U
#define SRT_NX90_dpm_status_bus_conflict_rd_err      5
#define MSK_NX90_dpm_status_bus_conflict_rd_addr_err 0x00000040U
#define SRT_NX90_dpm_status_bus_conflict_rd_addr_err 6
#define MSK_NX90_dpm_status_sel_dpm_serial           0x00000080U
#define SRT_NX90_dpm_status_sel_dpm_serial           7

/* all used bits of 'NX90_dpm_status': */
#define MSK_USED_BITS_NX90_dpm_status 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register dpm_status_err_reset */
/* => DPM Error Status Reset Register. */
/*    Each flags can be reset by writing a '1' to it. For fast error detection for DPM interfaces without ready usage, */
/*    reset-on-read-function can be enabled for this register. */
/*    Note: */
/*       If reset-on-read-function is enabled, this register must be read with a single access as bits are cleared */
/*       immediately after the access. You should always use a byte access in this case. */
/*    Note: */
/*       View dpm_status register for detailed error description. */
/*    Note: */
/*       reset-on-read-function is controlled by enable_flag_reset_on_rd-bit in dpm_misc_cfg-register. */
/*    Note: */
/*       In cases where internal access time is not predictable and host provides no */
/*       ready function, it is recommended to enable reset-on-read-function. There is only one access */
/*       necessary for error detection and clearing this flag then. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_status_err_reset      0x00000020U
#define Adr_NX90_dpm0_com_dpm_status_err_reset 0xFF001920U
#define Adr_NX90_dpm1_com_dpm_status_err_reset 0xFF001A20U
#define DFLT_VAL_NX90_dpm_status_err_reset     0x00000000U

#define MSK_NX90_dpm_status_err_reset_rd_err_rst                           0x00000002U
#define SRT_NX90_dpm_status_err_reset_rd_err_rst                           1
#define DFLT_VAL_NX90_dpm_status_err_reset_rd_err_rst                      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_status_err_reset_rd_err_rst                   0x00000000U
#define MSK_NX90_dpm_status_err_reset_wr_err_rst                           0x00000004U
#define SRT_NX90_dpm_status_err_reset_wr_err_rst                           2
#define DFLT_VAL_NX90_dpm_status_err_reset_wr_err_rst                      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_status_err_reset_wr_err_rst                   0x00000000U
#define MSK_NX90_dpm_status_err_reset_rdy_to_err_rst                       0x00000008U
#define SRT_NX90_dpm_status_err_reset_rdy_to_err_rst                       3
#define DFLT_VAL_NX90_dpm_status_err_reset_rdy_to_err_rst                  0x00000000U
#define DFLT_BF_VAL_NX90_dpm_status_err_reset_rdy_to_err_rst               0x00000000U
#define MSK_NX90_dpm_status_err_reset_bus_conflict_wr_err_rst              0x00000010U
#define SRT_NX90_dpm_status_err_reset_bus_conflict_wr_err_rst              4
#define DFLT_VAL_NX90_dpm_status_err_reset_bus_conflict_wr_err_rst         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_status_err_reset_bus_conflict_wr_err_rst      0x00000000U
#define MSK_NX90_dpm_status_err_reset_bus_conflict_rd_err_rst              0x00000020U
#define SRT_NX90_dpm_status_err_reset_bus_conflict_rd_err_rst              5
#define DFLT_VAL_NX90_dpm_status_err_reset_bus_conflict_rd_err_rst         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_status_err_reset_bus_conflict_rd_err_rst      0x00000000U
#define MSK_NX90_dpm_status_err_reset_bus_conflict_rd_addr_err_rst         0x00000040U
#define SRT_NX90_dpm_status_err_reset_bus_conflict_rd_addr_err_rst         6
#define DFLT_VAL_NX90_dpm_status_err_reset_bus_conflict_rd_addr_err_rst    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_status_err_reset_bus_conflict_rd_addr_err_rst 0x00000000U

/* all used bits of 'NX90_dpm_status_err_reset': */
#define MSK_USED_BITS_NX90_dpm_status_err_reset 0x0000007eU

/* --------------------------------------------------------------------- */
/* Register dpm_status_err_addr */
/* => DPM Error Address Status Register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_status_err_addr      0x00000024U
#define Adr_NX90_dpm0_com_dpm_status_err_addr 0xFF001924U
#define Adr_NX90_dpm1_com_dpm_status_err_addr 0xFF001A24U

#define MSK_NX90_dpm_status_err_addr_err_addr 0x000fffffU
#define SRT_NX90_dpm_status_err_addr_err_addr 0

/* all used bits of 'NX90_dpm_status_err_addr': */
#define MSK_USED_BITS_NX90_dpm_status_err_addr 0x000fffffU

/* --------------------------------------------------------------------- */
/* Register dpm_misc_cfg */
/* => DPM Configuration Register for some Special Functions. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_misc_cfg      0x00000028U
#define Adr_NX90_dpm0_com_dpm_misc_cfg 0xFF001928U
#define Adr_NX90_dpm1_com_dpm_misc_cfg 0xFF001A28U
#define DFLT_VAL_NX90_dpm_misc_cfg     0x00000006U

#define MSK_NX90_dpm_misc_cfg_enable_flag_reset_on_rd             0x00000001U
#define SRT_NX90_dpm_misc_cfg_enable_flag_reset_on_rd             0
#define DFLT_VAL_NX90_dpm_misc_cfg_enable_flag_reset_on_rd        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_misc_cfg_enable_flag_reset_on_rd     0x00000000U
#define MSK_NX90_dpm_misc_cfg_dis_access_err_halt                 0x00000002U
#define SRT_NX90_dpm_misc_cfg_dis_access_err_halt                 1
#define DFLT_VAL_NX90_dpm_misc_cfg_dis_access_err_halt            0x00000002U
#define DFLT_BF_VAL_NX90_dpm_misc_cfg_dis_access_err_halt         0x00000001U
#define MSK_NX90_dpm_misc_cfg_dis_bus_conflict_err_detect         0x00000004U
#define SRT_NX90_dpm_misc_cfg_dis_bus_conflict_err_detect         2
#define DFLT_VAL_NX90_dpm_misc_cfg_dis_bus_conflict_err_detect    0x00000004U
#define DFLT_BF_VAL_NX90_dpm_misc_cfg_dis_bus_conflict_err_detect 0x00000001U

/* all used bits of 'NX90_dpm_misc_cfg': */
#define MSK_USED_BITS_NX90_dpm_misc_cfg 0x00000007U

/* --------------------------------------------------------------------- */
/* Register dpm_io_cfg_misc */
/* => DPM IO Configuration Register. */
/*    PIO usage of DPM_SIRQ, DPM_DIRQ and DPM_RDY has moved from this register to register'dpm_pio_cfg1' since netx56. */
/*    Signals which should be used as PIOs when netX DPM is active must be selected there. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_io_cfg_misc      0x0000002CU
#define Adr_NX90_dpm0_com_dpm_io_cfg_misc 0xFF00192CU
#define Adr_NX90_dpm1_com_dpm_io_cfg_misc 0xFF001A2CU
#define DFLT_VAL_NX90_dpm_io_cfg_misc     0x000000a0U

#define MSK_NX90_dpm_io_cfg_misc_irq_pol         0x00000010U
#define SRT_NX90_dpm_io_cfg_misc_irq_pol         4
#define DFLT_VAL_NX90_dpm_io_cfg_misc_irq_pol    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_io_cfg_misc_irq_pol 0x00000000U
#define MSK_NX90_dpm_io_cfg_misc_irq_oec         0x00000020U
#define SRT_NX90_dpm_io_cfg_misc_irq_oec         5
#define DFLT_VAL_NX90_dpm_io_cfg_misc_irq_oec    0x00000020U
#define DFLT_BF_VAL_NX90_dpm_io_cfg_misc_irq_oec 0x00000001U
#define MSK_NX90_dpm_io_cfg_misc_fiq_pol         0x00000040U
#define SRT_NX90_dpm_io_cfg_misc_fiq_pol         6
#define DFLT_VAL_NX90_dpm_io_cfg_misc_fiq_pol    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_io_cfg_misc_fiq_pol 0x00000000U
#define MSK_NX90_dpm_io_cfg_misc_fiq_oec         0x00000080U
#define SRT_NX90_dpm_io_cfg_misc_fiq_oec         7
#define DFLT_VAL_NX90_dpm_io_cfg_misc_fiq_oec    0x00000080U
#define DFLT_BF_VAL_NX90_dpm_io_cfg_misc_fiq_oec 0x00000001U

/* all used bits of 'NX90_dpm_io_cfg_misc': */
#define MSK_USED_BITS_NX90_dpm_io_cfg_misc 0x000000f0U

/* --------------------------------------------------------------------- */
/* Register dpm_tunnel_cfg */
/* => DPM Access Tunnel Configuration Register. */
/*    The DPM Access Tunnel (DATunnel) is a 64 byte (16DWord) address window which can be mapped on any 64 byte boundary of the external */
/*    visible address space. At the last DWord (offset 0x3C) of the DATunnel the Internal Target Base Address (ITBAddr) can be programmed. */
/*    This is the base address of the 64 byte tunnel target area inside the full 32-bit netX address range (however some address areas */
/*    could not be reachable as connections could be cut from the DPM inside the netX data-switch, refer to the data-switch documentation */
/*    of your netX). */
/*    By the DWords 0 to 14 of the tunnel the internal netX addresses starting at ITBAddr can be reached. The 'enable'-bit must be active */
/*    for this (read-only functionality can be configured by 'wp_data'-bit). */
/*    For access to netX data with ITBAddr DWord offset 15, the lower bits 5 to 2 of the programmed ITBAddr are interpreted as a mapping */
/*    value. This value will be added to the internal access address before tunnelling (wrapping around at the 64 byte boundary). Hence it */
/*    is possible to access always 15 of the 16 netX DWord while the one hidden by the ITBAddr can be selected by an appropriate mapping */
/*    value. */
/*    The ITBAddr can also be programmed by the 'dpm_itbaddr' register of the configuration window 0 (or the INTLOGIC area). The ITBAddr on */
/*    tunnel offset 0x3C can be write-protected by the 'wp_itbaddr'-bit. This could be useful to protect the NETX from reconfiguring the */
/*    tunnel from the host side but provides the host the internal NETX destination address anyhow. However this only makes sense when */
/*    the configuration window 0 is disabled ('dpm_addr_cfg' register). Otherwise the host could reconfigure the tunnel by the 'dpm_itbaddr' */
/*    register. */
/*    Additionally the 'tunnel_all'-bit provides the possibility of tunnelling all 16DWords to the NETX side. */
/*    To protect the NETX from reconfiguring the tunnel from the host side when the configuration window 0 is enabled, the 'wp_cfg_win' */
/*    can be activated. Then the tunnel configuration can only be changed from the NETX side (INTLOGIC area) but not from configuration */
/*    window 0 (in contrast to the 'wp_itbaddr'-bit which protects only offset 0x3C). */
/*     */
/*    Note: */
/*       To protect the netX completely from host-access to not permitted address areas it must be ensured that also the remapping */
/*       of the DPM data windows cannot be changed by the host (refer to registers 'dpm_winX_end' and 'dpm_winX_map'). */
/*    External to internal address mapping for DATunnel area can be calculated by following formula: */
/*       INAAdr = (ITBAddr & 0xffffffc0) + ((EDAAdr + ITBAddr) & 0x3C) */
/*    With: */
/*       INAAdr:  Internal netX Access Address */
/*       ITBAddr: Internal netX 32-bit Tunnel Target Base Address */
/*       EDAAdr:  External DPM Access Address */
/*    Condition for DATunnel access is: */
/*       EDAAdr>>6 equals value of bit field 'base' from this register. */
/*    To map netX internal DWord N to invisible last external DWord (15), use mapping value */
/*       map = (N - 15) & 0xf */
/*    on bits 5 to 2. */
/*    Internal to external address offset inside DATunnel area for internal DWord N can be calculated by following formula: */
/*       External offset = (N*4 - map*4) & 0x3C = (N*4 - ITBAddr) & 0x3C */
/*    Example 1: */
/*       Access to netX sys_time module by host via DATunnel on external DPM addresses are starting at 0x240. */
/*       - Set bit field 'base' of this register to 9 (0x240>>6), set 'enable'-bit (and write protection depending on application). */
/*         DATunnel now is enabled on external DPM addresses 0x240 to 0x27f. */
/*       - ITBAddr of netX10 sys_time module is 0x101c1000. */
/*         For direct DATunnel to this address, host must write 0x101c1000 to external DPM address 0x27c. This */
/*         can be done e.g. by four byte accesses to 0x27c, 0x27d, 0x27e and 0x27f or by two 16-bit accesses to 0x27c and 0x27e. */
/*         Now sys_time module registers 0 to 14 can be accessed on external DPM address 0x240 to 0x27b. */
/*    Example 2: */
/*       Register 15 of sys_time is hidden by ITBAddr configuration on 0x27c in example 1 but must also be accessed. However, sys_time */
/*       Register 6 is never kind of interest. */
/*       - Configure this register like described in example 1. */
/*       - To map Register 6 (Module offset 6*4) to external offset 0x3C (hidden data on DWord 15), */
/*         the following rule must be complied: */
/*            0x3C + map*4 = 6*4. */
/*         That leads to a mapping value of: */
/*            map*4 = (6*4 - 0x3C) & 0x3C = 1C */
/*         Hence, write 0x101c101C to DATunnel DWord 15 (external DPM address 0x27c) to map sys_time Register 6 to */
/*         hidden DWord 15. */
/*         INAAdr now will be derived from EDAAdr before tunnelling as follows: */
/*            INAAdr = 0x101c1000 + ((EDAAdr + 0x1C) & 0x3C) */
/*         External offset of Module DWord N results from: */
/*            External offset = (N*4 - 0x1C) & 0x3C */
/*         Register 15 of sys_time unit now can be accessed by external DPM address 0x240+((0xf*4-0x1C) & 0x3C) = 0x260 (i.e. Tunnel DWord 8). */
/*         Register 0  of sys_time unit now can be accessed by external DPM address 0x240+((0x0*4-0x1C) & 0x3C) = 0x264 (i.e. Tunnel DWord 9). */
/*         Register 1  of sys_time unit now can be accessed by external DPM address 0x240+((0x1*4-0x1C) & 0x3C) = 0x268 (i.e. Tunnel DWord 10). */
/*         and so on. */
/*         Register 6  of sys_time unit can not be accessed as it is hidden by ITBAddr configuration on 0x27c (i.e. Tunnel DWord 15). */
/*         Register 7  of sys_time unit now can be accessed by external DPM address 0x240+((0x7*4-0x1C) & 0x3C) = 0x240 (i.e. Tunnel DWord 0). */
/*    Note: */
/*      Access to netX ITBAddr data is done without read ahead and with byte collecting (view adr_dpm_win1_map for details). */
/*    Note: */
/*      Configuration Window 0 access detection has higher priority than normal DPM Window */
/*      detection but lower priority than Access Tunnel access detection. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_tunnel_cfg      0x00000038U
#define Adr_NX90_dpm0_com_dpm_tunnel_cfg 0xFF001938U
#define Adr_NX90_dpm1_com_dpm_tunnel_cfg 0xFF001A38U
#define DFLT_VAL_NX90_dpm_tunnel_cfg     0x00000101U

#define MSK_NX90_dpm_tunnel_cfg_wp_data              0x00000001U
#define SRT_NX90_dpm_tunnel_cfg_wp_data              0
#define DFLT_VAL_NX90_dpm_tunnel_cfg_wp_data         0x00000001U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_wp_data      0x00000001U
#define MSK_NX90_dpm_tunnel_cfg_wp_itbaddr           0x00000002U
#define SRT_NX90_dpm_tunnel_cfg_wp_itbaddr           1
#define DFLT_VAL_NX90_dpm_tunnel_cfg_wp_itbaddr      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_wp_itbaddr   0x00000000U
#define MSK_NX90_dpm_tunnel_cfg_enable               0x00000004U
#define SRT_NX90_dpm_tunnel_cfg_enable               2
#define DFLT_VAL_NX90_dpm_tunnel_cfg_enable          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_enable       0x00000000U
#define MSK_NX90_dpm_tunnel_cfg_tunnel_all           0x00000008U
#define SRT_NX90_dpm_tunnel_cfg_tunnel_all           3
#define DFLT_VAL_NX90_dpm_tunnel_cfg_tunnel_all      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_tunnel_all   0x00000000U
#define MSK_NX90_dpm_tunnel_cfg_byte_area            0x00000010U
#define SRT_NX90_dpm_tunnel_cfg_byte_area            4
#define DFLT_VAL_NX90_dpm_tunnel_cfg_byte_area       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_byte_area    0x00000000U
#define MSK_NX90_dpm_tunnel_cfg_dis_rd_latch         0x00000020U
#define SRT_NX90_dpm_tunnel_cfg_dis_rd_latch         5
#define DFLT_VAL_NX90_dpm_tunnel_cfg_dis_rd_latch    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_dis_rd_latch 0x00000000U
#define MSK_NX90_dpm_tunnel_cfg_base                 0x000fffc0U
#define SRT_NX90_dpm_tunnel_cfg_base                 6
#define DFLT_VAL_NX90_dpm_tunnel_cfg_base            0x00000100U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_base         0x00000004U
#define MSK_NX90_dpm_tunnel_cfg_wp_cfg_win           0x80000000U
#define SRT_NX90_dpm_tunnel_cfg_wp_cfg_win           31
#define DFLT_VAL_NX90_dpm_tunnel_cfg_wp_cfg_win      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_tunnel_cfg_wp_cfg_win   0x00000000U

/* all used bits of 'NX90_dpm_tunnel_cfg': */
#define MSK_USED_BITS_NX90_dpm_tunnel_cfg 0x800fffffU

/* --------------------------------------------------------------------- */
/* Register dpm_itbaddr */
/* => DPM Access Tunnel (DATunnel) netX Internal Target Base Address (ITBAddr) Configuration Register. */
/*    For DPM Access Tunnel (DATunnel) function view description of dpm_tunnel_cfg register. */
/*    This register contains ITBAddr value that can also be changed by host on last offset 0x3c (last DWord) of */
/*    external DATunnel area (defined by bit field 'base' in 'dpm_tunnel_cfg' register). However this register can */
/*    also be write-protected from host if bit 'wp_itbaddr' in 'dpm_tunnel_cfg' register is set. */
/*    Write protection bits of DATunnel configured in 'dpm_tunnel_cfg' register can also be read from this register. Host */
/*    can read access rights from these bits on last DWord of external DATunnel address area. */
/*     */
/*    Note: This register can be write-protected by the 'wp_cfg_win' and the 'wp_itbaddr'-bit of the 'dpm_tunnel_cfg' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_itbaddr      0x0000003CU
#define Adr_NX90_dpm0_com_dpm_itbaddr 0xFF00193CU
#define Adr_NX90_dpm1_com_dpm_itbaddr 0xFF001A3CU
#define DFLT_VAL_NX90_dpm_itbaddr     0x00000001U

#define MSK_NX90_dpm_itbaddr_wp_data_ro            0x00000001U
#define SRT_NX90_dpm_itbaddr_wp_data_ro            0
#define DFLT_VAL_NX90_dpm_itbaddr_wp_data_ro       0x00000001U
#define DFLT_BF_VAL_NX90_dpm_itbaddr_wp_data_ro    0x00000001U
#define MSK_NX90_dpm_itbaddr_wp_itbaddr_ro         0x00000002U
#define SRT_NX90_dpm_itbaddr_wp_itbaddr_ro         1
#define DFLT_VAL_NX90_dpm_itbaddr_wp_itbaddr_ro    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_itbaddr_wp_itbaddr_ro 0x00000000U
#define MSK_NX90_dpm_itbaddr_map                   0x0000003cU
#define SRT_NX90_dpm_itbaddr_map                   2
#define DFLT_VAL_NX90_dpm_itbaddr_map              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_itbaddr_map           0x00000000U
#define MSK_NX90_dpm_itbaddr_base                  0xffffffc0U
#define SRT_NX90_dpm_itbaddr_base                  6
#define DFLT_VAL_NX90_dpm_itbaddr_base             0x00000000U
#define DFLT_BF_VAL_NX90_dpm_itbaddr_base          0x00000000U

/* all used bits of 'NX90_dpm_itbaddr': */
#define MSK_USED_BITS_NX90_dpm_itbaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_win1_end */
/* => DPM Window 1 End Address Configuration Register. */
/*    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0). */
/*    At address 0x0 DPM configuration window is mapped after reset (length: 256 bytes, containing all DPM addresses defined here). Each window starts at */
/*    window end address of the preceding window. Hence external window 1 start address is 0x100, window 2 starts at value programmed in this register and so on. */
/*    Windows with programmed end addresses exceeding external address range (view dpm_addr_cfg) can not be accessed by host device. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/*    Note: */
/*      Configuration Window 0 access detection has higher priority than normal DPM Window */
/*      detection but lower priority than Access Tunnel access detection. */
/*    Note: */
/*      Since netX10 window configuration can be done in steps of 128 bytes. In netx5 only steps of 256 bytes are possible. */
/*    Note: */
/*      Since netX10 there are 4 programmable DPM windows provided. Only for netX5 there are 5 windows. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win1_end      0x00000040U
#define Adr_NX90_dpm0_com_dpm_win1_end 0xFF001940U
#define Adr_NX90_dpm1_com_dpm_win1_end 0xFF001A40U
#define DFLT_VAL_NX90_dpm_win1_end     0x00000000U

#define MSK_NX90_dpm_win1_end_win_end         0x001fff80U
#define SRT_NX90_dpm_win1_end_win_end         7
#define DFLT_VAL_NX90_dpm_win1_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_end_win_end 0x00000000U

/* all used bits of 'NX90_dpm_win1_end': */
#define MSK_USED_BITS_NX90_dpm_win1_end 0x001fff80U

/* --------------------------------------------------------------------- */
/* Register dpm_win1_map */
/* => DPM Window 1 Address Map Configuration Register. */
/*    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0). */
/*    For further information view description of 'dpm_win1_end' register. */
/*    Note: */
/*      Since netX10 window pages of 1MB is supported. For netX5 this was not necessary as all netX5 addresses are in bound of 1MB.. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win1_map      0x00000044U
#define Adr_NX90_dpm0_com_dpm_win1_map 0xFF001944U
#define Adr_NX90_dpm1_com_dpm_win1_map 0xFF001A44U
#define DFLT_VAL_NX90_dpm_win1_map     0x01800000U

#define MSK_NX90_dpm_win1_map_byte_area            0x00000001U
#define SRT_NX90_dpm_win1_map_byte_area            0
#define DFLT_VAL_NX90_dpm_win1_map_byte_area       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_byte_area    0x00000000U
#define MSK_NX90_dpm_win1_map_read_ahead           0x00000002U
#define SRT_NX90_dpm_win1_map_read_ahead           1
#define DFLT_VAL_NX90_dpm_win1_map_read_ahead      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_read_ahead   0x00000000U
#define MSK_NX90_dpm_win1_map_win_map_alt          0x0000000cU
#define SRT_NX90_dpm_win1_map_win_map_alt          2
#define DFLT_VAL_NX90_dpm_win1_map_win_map_alt     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_win_map_alt  0x00000000U
#define MSK_NX90_dpm_win1_map_dis_rd_latch         0x00000010U
#define SRT_NX90_dpm_win1_map_dis_rd_latch         4
#define DFLT_VAL_NX90_dpm_win1_map_dis_rd_latch    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_dis_rd_latch 0x00000000U
#define MSK_NX90_dpm_win1_map_wp_cfg_win           0x00000020U
#define SRT_NX90_dpm_win1_map_wp_cfg_win           5
#define DFLT_VAL_NX90_dpm_win1_map_wp_cfg_win      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_wp_cfg_win   0x00000000U
#define MSK_NX90_dpm_win1_map_win_map              0x000fff80U
#define SRT_NX90_dpm_win1_map_win_map              7
#define DFLT_VAL_NX90_dpm_win1_map_win_map         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_win_map      0x00000000U
#define MSK_NX90_dpm_win1_map_win_page             0xfff00000U
#define SRT_NX90_dpm_win1_map_win_page             20
#define DFLT_VAL_NX90_dpm_win1_map_win_page        0x01800000U
#define DFLT_BF_VAL_NX90_dpm_win1_map_win_page     0x00000018U

/* all used bits of 'NX90_dpm_win1_map': */
#define MSK_USED_BITS_NX90_dpm_win1_map 0xffffffbfU

/* --------------------------------------------------------------------- */
/* Register dpm_win2_end */
/* => DPM Window 2 End Address Configuration Register. */
/*    For detailed information refer to 'dpm_win1_end' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win2_end      0x00000048U
#define Adr_NX90_dpm0_com_dpm_win2_end 0xFF001948U
#define Adr_NX90_dpm1_com_dpm_win2_end 0xFF001A48U
#define DFLT_VAL_NX90_dpm_win2_end     0x00000000U

#define MSK_NX90_dpm_win2_end_win_end         0x001fff80U
#define SRT_NX90_dpm_win2_end_win_end         7
#define DFLT_VAL_NX90_dpm_win2_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win2_end_win_end 0x00000000U

/* all used bits of 'NX90_dpm_win2_end': */
#define MSK_USED_BITS_NX90_dpm_win2_end 0x001fff80U

/* --------------------------------------------------------------------- */
/* Register dpm_win2_map */
/* => DPM Window 2 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win2_map      0x0000004CU
#define Adr_NX90_dpm0_com_dpm_win2_map 0xFF00194CU
#define Adr_NX90_dpm1_com_dpm_win2_map 0xFF001A4CU
#define DFLT_VAL_NX90_dpm_win2_map     0x01800000U

#define MSK_NX90_dpm_win2_map_byte_area            0x00000001U
#define SRT_NX90_dpm_win2_map_byte_area            0
#define DFLT_VAL_NX90_dpm_win2_map_byte_area       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win2_map_byte_area    0x00000000U
#define MSK_NX90_dpm_win2_map_read_ahead           0x00000002U
#define SRT_NX90_dpm_win2_map_read_ahead           1
#define DFLT_VAL_NX90_dpm_win2_map_read_ahead      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win2_map_read_ahead   0x00000000U
#define MSK_NX90_dpm_win2_map_win_map_alt          0x0000000cU
#define SRT_NX90_dpm_win2_map_win_map_alt          2
#define DFLT_VAL_NX90_dpm_win2_map_win_map_alt     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win2_map_win_map_alt  0x00000000U
#define MSK_NX90_dpm_win2_map_dis_rd_latch         0x00000010U
#define SRT_NX90_dpm_win2_map_dis_rd_latch         4
#define DFLT_VAL_NX90_dpm_win2_map_dis_rd_latch    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win2_map_dis_rd_latch 0x00000000U
#define MSK_NX90_dpm_win2_map_win_map              0x000fff80U
#define SRT_NX90_dpm_win2_map_win_map              7
#define DFLT_VAL_NX90_dpm_win2_map_win_map         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win2_map_win_map      0x00000000U
#define MSK_NX90_dpm_win2_map_win_page             0xfff00000U
#define SRT_NX90_dpm_win2_map_win_page             20
#define DFLT_VAL_NX90_dpm_win2_map_win_page        0x01800000U
#define DFLT_BF_VAL_NX90_dpm_win2_map_win_page     0x00000018U

/* all used bits of 'NX90_dpm_win2_map': */
#define MSK_USED_BITS_NX90_dpm_win2_map 0xffffff9fU

/* --------------------------------------------------------------------- */
/* Register dpm_win3_end */
/* => DPM Window 3 End Address Configuration Register. */
/*    For detailed information refer to 'dpm_win1_end' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win3_end      0x00000050U
#define Adr_NX90_dpm0_com_dpm_win3_end 0xFF001950U
#define Adr_NX90_dpm1_com_dpm_win3_end 0xFF001A50U
#define DFLT_VAL_NX90_dpm_win3_end     0x00000000U

#define MSK_NX90_dpm_win3_end_win_end         0x001fff80U
#define SRT_NX90_dpm_win3_end_win_end         7
#define DFLT_VAL_NX90_dpm_win3_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win3_end_win_end 0x00000000U

/* all used bits of 'NX90_dpm_win3_end': */
#define MSK_USED_BITS_NX90_dpm_win3_end 0x001fff80U

/* --------------------------------------------------------------------- */
/* Register dpm_win3_map */
/* => DPM Window 3 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win3_map      0x00000054U
#define Adr_NX90_dpm0_com_dpm_win3_map 0xFF001954U
#define Adr_NX90_dpm1_com_dpm_win3_map 0xFF001A54U
#define DFLT_VAL_NX90_dpm_win3_map     0x01800000U

#define MSK_NX90_dpm_win3_map_byte_area            0x00000001U
#define SRT_NX90_dpm_win3_map_byte_area            0
#define DFLT_VAL_NX90_dpm_win3_map_byte_area       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win3_map_byte_area    0x00000000U
#define MSK_NX90_dpm_win3_map_read_ahead           0x00000002U
#define SRT_NX90_dpm_win3_map_read_ahead           1
#define DFLT_VAL_NX90_dpm_win3_map_read_ahead      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win3_map_read_ahead   0x00000000U
#define MSK_NX90_dpm_win3_map_win_map_alt          0x0000000cU
#define SRT_NX90_dpm_win3_map_win_map_alt          2
#define DFLT_VAL_NX90_dpm_win3_map_win_map_alt     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win3_map_win_map_alt  0x00000000U
#define MSK_NX90_dpm_win3_map_dis_rd_latch         0x00000010U
#define SRT_NX90_dpm_win3_map_dis_rd_latch         4
#define DFLT_VAL_NX90_dpm_win3_map_dis_rd_latch    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win3_map_dis_rd_latch 0x00000000U
#define MSK_NX90_dpm_win3_map_win_map              0x000fff80U
#define SRT_NX90_dpm_win3_map_win_map              7
#define DFLT_VAL_NX90_dpm_win3_map_win_map         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win3_map_win_map      0x00000000U
#define MSK_NX90_dpm_win3_map_win_page             0xfff00000U
#define SRT_NX90_dpm_win3_map_win_page             20
#define DFLT_VAL_NX90_dpm_win3_map_win_page        0x01800000U
#define DFLT_BF_VAL_NX90_dpm_win3_map_win_page     0x00000018U

/* all used bits of 'NX90_dpm_win3_map': */
#define MSK_USED_BITS_NX90_dpm_win3_map 0xffffff9fU

/* --------------------------------------------------------------------- */
/* Register dpm_win4_end */
/* => DPM Window 4 End Address Configuration Register. */
/*    For detailed information refer to 'dpm_win1_end' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win4_end      0x00000058U
#define Adr_NX90_dpm0_com_dpm_win4_end 0xFF001958U
#define Adr_NX90_dpm1_com_dpm_win4_end 0xFF001A58U
#define DFLT_VAL_NX90_dpm_win4_end     0x00000000U

#define MSK_NX90_dpm_win4_end_win_end         0x001fff80U
#define SRT_NX90_dpm_win4_end_win_end         7
#define DFLT_VAL_NX90_dpm_win4_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win4_end_win_end 0x00000000U

/* all used bits of 'NX90_dpm_win4_end': */
#define MSK_USED_BITS_NX90_dpm_win4_end 0x001fff80U

/* --------------------------------------------------------------------- */
/* Register dpm_win4_map */
/* => DPM Window 4 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'dpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_win4_map      0x0000005CU
#define Adr_NX90_dpm0_com_dpm_win4_map 0xFF00195CU
#define Adr_NX90_dpm1_com_dpm_win4_map 0xFF001A5CU
#define DFLT_VAL_NX90_dpm_win4_map     0x01800000U

#define MSK_NX90_dpm_win4_map_byte_area            0x00000001U
#define SRT_NX90_dpm_win4_map_byte_area            0
#define DFLT_VAL_NX90_dpm_win4_map_byte_area       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win4_map_byte_area    0x00000000U
#define MSK_NX90_dpm_win4_map_read_ahead           0x00000002U
#define SRT_NX90_dpm_win4_map_read_ahead           1
#define DFLT_VAL_NX90_dpm_win4_map_read_ahead      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win4_map_read_ahead   0x00000000U
#define MSK_NX90_dpm_win4_map_win_map_alt          0x0000000cU
#define SRT_NX90_dpm_win4_map_win_map_alt          2
#define DFLT_VAL_NX90_dpm_win4_map_win_map_alt     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win4_map_win_map_alt  0x00000000U
#define MSK_NX90_dpm_win4_map_dis_rd_latch         0x00000010U
#define SRT_NX90_dpm_win4_map_dis_rd_latch         4
#define DFLT_VAL_NX90_dpm_win4_map_dis_rd_latch    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win4_map_dis_rd_latch 0x00000000U
#define MSK_NX90_dpm_win4_map_win_map              0x000fff80U
#define SRT_NX90_dpm_win4_map_win_map              7
#define DFLT_VAL_NX90_dpm_win4_map_win_map         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_win4_map_win_map      0x00000000U
#define MSK_NX90_dpm_win4_map_win_page             0xfff00000U
#define SRT_NX90_dpm_win4_map_win_page             20
#define DFLT_VAL_NX90_dpm_win4_map_win_page        0x01800000U
#define DFLT_BF_VAL_NX90_dpm_win4_map_win_page     0x00000018U

/* all used bits of 'NX90_dpm_win4_map': */
#define MSK_USED_BITS_NX90_dpm_win4_map 0xffffff9fU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_raw0 */
/* => DPM Raw (before masking) IRQ Status Register. */
/*    If a bit is set, the related interrupt is asserted. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    Important: There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_host_dirq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*    Note: */
/*       The 'dpm_sw' IRQ can be controlled by the 'dpm_sw_irq' register for each */
/*       IRQ target differently, i.e. there are 4 different 'dpm_sw' IRQs internally, one */
/*       for each IRQ target. However, 'dpm_sw' will be set inside the 'dpm_irq_raw' register here */
/*       when the 'dpm_sw' is activated for at least one IRQ target. But each IRQ target */
/*       obtains only the 'dpm_sw' IRQ state programmed for this target inside the 'dpm_sw_irq' */
/*       register. For an example view description of 'dpm_sw_irq' register. */
/*    Note: */
/*        The 'test' function is obsolete since netX56, the 'dpm_sw' bit can be used instead of this. */
/*    Note: */
/*        The 'firmware' IRQ can be used to flag handshake and netX firmware system status events to the */
/*        host. Firmware IRQ generation can be controlled by dpm_firmware_irq_mask register. Detailed */
/*        firmware IRQ status can be read from dpm_firmware_irq_raw register. */
/*    Note: */
/*        For all netX modules which are capable generating IRQs for ARM and xPIC, ARM-IRQ is taken here. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_raw0      0x00000080U
#define Adr_NX90_dpm0_com_dpm_irq_raw0 0xFF001980U
#define Adr_NX90_dpm1_com_dpm_irq_raw0 0xFF001A80U

#define MSK_NX90_dpm_irq_raw0_dpm_sw        0x00000001U
#define SRT_NX90_dpm_irq_raw0_dpm_sw        0
#define MSK_NX90_dpm_irq_raw0_dpm_err       0x00000002U
#define SRT_NX90_dpm_irq_raw0_dpm_err       1
#define MSK_NX90_dpm_irq_raw0_firmware      0x00000004U
#define SRT_NX90_dpm_irq_raw0_firmware      2
#define MSK_NX90_dpm_irq_raw0_host_hsc0     0x00000100U
#define SRT_NX90_dpm_irq_raw0_host_hsc0     8
#define MSK_NX90_dpm_irq_raw0_host_hsc1     0x00000200U
#define SRT_NX90_dpm_irq_raw0_host_hsc1     9
#define MSK_NX90_dpm_irq_raw0_host_hsc2     0x00000400U
#define SRT_NX90_dpm_irq_raw0_host_hsc2     10
#define MSK_NX90_dpm_irq_raw0_host_hsc3     0x00000800U
#define SRT_NX90_dpm_irq_raw0_host_hsc3     11
#define MSK_NX90_dpm_irq_raw0_host_hsc4     0x00001000U
#define SRT_NX90_dpm_irq_raw0_host_hsc4     12
#define MSK_NX90_dpm_irq_raw0_host_hsc5     0x00002000U
#define SRT_NX90_dpm_irq_raw0_host_hsc5     13
#define MSK_NX90_dpm_irq_raw0_host_hsc6     0x00004000U
#define SRT_NX90_dpm_irq_raw0_host_hsc6     14
#define MSK_NX90_dpm_irq_raw0_host_hsc7     0x00008000U
#define SRT_NX90_dpm_irq_raw0_host_hsc7     15
#define MSK_NX90_dpm_irq_raw0_host_hsc8to15 0x00010000U
#define SRT_NX90_dpm_irq_raw0_host_hsc8to15 16

/* all used bits of 'NX90_dpm_irq_raw0': */
#define MSK_USED_BITS_NX90_dpm_irq_raw0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_raw1 */
/* => DPM Raw (before masking) IRQ Status Register. */
/*    If a bit is set, the related interrupt is asserted. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    Important: There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_host_dirq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*    Note: */
/*       The 'dpm_sw' IRQ can be controlled by the 'dpm_sw_irq' register for each */
/*       IRQ target differently, i.e. there are 4 different 'dpm_sw' IRQs internally, one */
/*       for each IRQ target. However, 'dpm_sw' will be set inside the 'dpm_irq_raw' register here */
/*       when the 'dpm_sw' is activated for at least one IRQ target. But each IRQ target */
/*       obtains only the 'dpm_sw' IRQ state programmed for this target inside the 'dpm_sw_irq' */
/*       register. For an example view description of 'dpm_sw_irq' register. */
/*    Note: */
/*        The 'test' function is obsolete since netX56, the 'dpm_sw' bit can be used instead of this. */
/*    Note: */
/*        The 'firmware' IRQ can be used to flag handshake and netX firmware system status events to the */
/*        host. Firmware IRQ generation can be controlled by dpm_firmware_irq_mask register. Detailed */
/*        firmware IRQ status can be read from dpm_firmware_irq_raw register. */
/*    Note: */
/*        For all netX modules which are capable generating IRQs for ARM and xPIC, ARM-IRQ is taken here. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_raw1      0x00000084U
#define Adr_NX90_dpm0_com_dpm_irq_raw1 0xFF001984U
#define Adr_NX90_dpm1_com_dpm_irq_raw1 0xFF001A84U

#define MSK_NX90_dpm_irq_raw1_ARM_TIMER           0x00000001U
#define SRT_NX90_dpm_irq_raw1_ARM_TIMER           0
#define MSK_NX90_dpm_irq_raw1_timer_com_systime_s 0x00000002U
#define SRT_NX90_dpm_irq_raw1_timer_com_systime_s 1
#define MSK_NX90_dpm_irq_raw1_wdg_com             0x00000004U
#define SRT_NX90_dpm_irq_raw1_wdg_com             2
#define MSK_NX90_dpm_irq_raw1_dmac_com            0x00000008U
#define SRT_NX90_dpm_irq_raw1_dmac_com            3
#define MSK_NX90_dpm_irq_raw1_mcp_com             0x00000010U
#define SRT_NX90_dpm_irq_raw1_mcp_com             4
#define MSK_NX90_dpm_irq_raw1_uart_com            0x00000020U
#define SRT_NX90_dpm_irq_raw1_uart_com            5
#define MSK_NX90_dpm_irq_raw1_i2c0_com            0x00000040U
#define SRT_NX90_dpm_irq_raw1_i2c0_com            6
#define MSK_NX90_dpm_irq_raw1_i2c1_com            0x00000080U
#define SRT_NX90_dpm_irq_raw1_i2c1_com            7
#define MSK_NX90_dpm_irq_raw1_ecc_com_1bit_error  0x00000100U
#define SRT_NX90_dpm_irq_raw1_ecc_com_1bit_error  8
#define MSK_NX90_dpm_irq_raw1_ecc_com_2bit_error  0x00000200U
#define SRT_NX90_dpm_irq_raw1_ecc_com_2bit_error  9
#define MSK_NX90_dpm_irq_raw1_xpic_debug_com      0x00000400U
#define SRT_NX90_dpm_irq_raw1_xpic_debug_com      10
#define MSK_NX90_dpm_irq_raw1_wdg_xpic_com_arm    0x00000800U
#define SRT_NX90_dpm_irq_raw1_wdg_xpic_com_arm    11
#define MSK_NX90_dpm_irq_raw1_nfifo_arm_com       0x00001000U
#define SRT_NX90_dpm_irq_raw1_nfifo_arm_com       12
#define MSK_NX90_dpm_irq_raw1_com0                0x00002000U
#define SRT_NX90_dpm_irq_raw1_com0                13
#define MSK_NX90_dpm_irq_raw1_com1                0x00004000U
#define SRT_NX90_dpm_irq_raw1_com1                14
#define MSK_NX90_dpm_irq_raw1_msync0              0x00008000U
#define SRT_NX90_dpm_irq_raw1_msync0              15
#define MSK_NX90_dpm_irq_raw1_msync1              0x00010000U
#define SRT_NX90_dpm_irq_raw1_msync1              16
#define MSK_NX90_dpm_irq_raw1_trigger_lt          0x00020000U
#define SRT_NX90_dpm_irq_raw1_trigger_lt          17
#define MSK_NX90_dpm_irq_raw1_lvds2mii0_com       0x00040000U
#define SRT_NX90_dpm_irq_raw1_lvds2mii0_com       18
#define MSK_NX90_dpm_irq_raw1_lvds2mii1_com       0x00080000U
#define SRT_NX90_dpm_irq_raw1_lvds2mii1_com       19
#define MSK_NX90_dpm_irq_raw1_sqi                 0x00100000U
#define SRT_NX90_dpm_irq_raw1_sqi                 20
#define MSK_NX90_dpm_irq_raw1_hif_pio_arm         0x00200000U
#define SRT_NX90_dpm_irq_raw1_hif_pio_arm         21
#define MSK_NX90_dpm_irq_raw1_eth                 0x00400000U
#define SRT_NX90_dpm_irq_raw1_eth                 22
#define MSK_NX90_dpm_irq_raw1_adc0_arm            0x00800000U
#define SRT_NX90_dpm_irq_raw1_adc0_arm            23
#define MSK_NX90_dpm_irq_raw1_adc1_arm            0x01000000U
#define SRT_NX90_dpm_irq_raw1_adc1_arm            24
#define MSK_NX90_dpm_irq_raw1_GPIO_COM            0x02000000U
#define SRT_NX90_dpm_irq_raw1_GPIO_COM            25
#define MSK_NX90_dpm_irq_raw1_CRYPT               0x04000000U
#define SRT_NX90_dpm_irq_raw1_CRYPT               26
#define MSK_NX90_dpm_irq_raw1_bod                 0x08000000U
#define SRT_NX90_dpm_irq_raw1_bod                 27
#define MSK_NX90_dpm_irq_raw1_phy                 0x10000000U
#define SRT_NX90_dpm_irq_raw1_phy                 28

/* all used bits of 'NX90_dpm_irq_raw1': */
#define MSK_USED_BITS_NX90_dpm_irq_raw1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_sirq_mask_set0 */
/* => DPM Interrupt Mask Register for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_sirq_mask_set0      0x00000088U
#define Adr_NX90_dpm0_com_dpm_irq_host_sirq_mask_set0 0xFF001988U
#define Adr_NX90_dpm1_com_dpm_irq_host_sirq_mask_set0 0xFF001A88U
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0     0x00000000U

#define MSK_NX90_dpm_irq_host_sirq_mask_set0_dpm_sw                0x00000001U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_dpm_sw                0
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_dpm_sw           0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_dpm_sw        0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_dpm_err               0x00000002U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_dpm_err               1
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_dpm_err          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_dpm_err       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_firmware              0x00000004U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_firmware              2
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_firmware         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_firmware      0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc0             0x00000100U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc0             8
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc0        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc0     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc1             0x00000200U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc1             9
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc1        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc1     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc2             0x00000400U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc2             10
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc2        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc2     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc3             0x00000800U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc3             11
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc3        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc3     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc4             0x00001000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc4             12
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc4        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc4     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc5             0x00002000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc5             13
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc5        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc5     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc6             0x00004000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc6             14
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc6        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc6     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc7             0x00008000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc7             15
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc7        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc7     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set0_host_hsc8to15         0x00010000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set0_host_hsc8to15         16
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc8to15    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set0_host_hsc8to15 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_sirq_mask_set0': */
#define MSK_USED_BITS_NX90_dpm_irq_host_sirq_mask_set0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_sirq_mask_set1 */
/* => DPM Interrupt Mask Register for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_sirq_mask_set1      0x0000008CU
#define Adr_NX90_dpm0_com_dpm_irq_host_sirq_mask_set1 0xFF00198CU
#define Adr_NX90_dpm1_com_dpm_irq_host_sirq_mask_set1 0xFF001A8CU
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1     0x00000000U

#define MSK_NX90_dpm_irq_host_sirq_mask_set1_ARM_TIMER                   0x00000001U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_ARM_TIMER                   0
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_ARM_TIMER              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_ARM_TIMER           0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_timer_com_systime_s         0x00000002U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_timer_com_systime_s         1
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_timer_com_systime_s    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_timer_com_systime_s 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_wdg_com                     0x00000004U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_wdg_com                     2
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_wdg_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_wdg_com             0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_dmac_com                    0x00000008U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_dmac_com                    3
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_dmac_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_dmac_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_mcp_com                     0x00000010U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_mcp_com                     4
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_mcp_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_mcp_com             0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_uart_com                    0x00000020U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_uart_com                    5
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_uart_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_uart_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_i2c0_com                    0x00000040U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_i2c0_com                    6
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_i2c0_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_i2c0_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_i2c1_com                    0x00000080U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_i2c1_com                    7
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_i2c1_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_i2c1_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_1bit_error          0x00000100U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_1bit_error          8
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_1bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_1bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_2bit_error          0x00000200U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_2bit_error          9
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_2bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_ecc_com_2bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_xpic_debug_com              0x00000400U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_xpic_debug_com              10
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_xpic_debug_com         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_xpic_debug_com      0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_wdg_xpic_com_arm            0x00000800U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_wdg_xpic_com_arm            11
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_wdg_xpic_com_arm       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_wdg_xpic_com_arm    0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_nfifo_arm_com               0x00001000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_nfifo_arm_com               12
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_nfifo_arm_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_nfifo_arm_com       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_com0                        0x00002000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_com0                        13
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_com0                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_com0                0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_com1                        0x00004000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_com1                        14
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_com1                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_com1                0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_msync0                      0x00008000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_msync0                      15
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_msync0                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_msync0              0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_msync1                      0x00010000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_msync1                      16
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_msync1                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_msync1              0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_trigger_lt                  0x00020000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_trigger_lt                  17
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_trigger_lt             0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_trigger_lt          0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii0_com               0x00040000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii0_com               18
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii0_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii0_com       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii1_com               0x00080000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii1_com               19
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii1_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_lvds2mii1_com       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_sqi                         0x00100000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_sqi                         20
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_sqi                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_sqi                 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_hif_pio_arm                 0x00200000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_hif_pio_arm                 21
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_hif_pio_arm            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_hif_pio_arm         0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_eth                         0x00400000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_eth                         22
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_eth                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_eth                 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_adc0_arm                    0x00800000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_adc0_arm                    23
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_adc0_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_adc0_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_adc1_arm                    0x01000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_adc1_arm                    24
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_adc1_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_adc1_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_GPIO_COM                    0x02000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_GPIO_COM                    25
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_GPIO_COM               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_GPIO_COM            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_CRYPT                       0x04000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_CRYPT                       26
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_CRYPT                  0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_CRYPT               0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_bod                         0x08000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_bod                         27
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_bod                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_bod                 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_set1_phy                         0x10000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_set1_phy                         28
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_set1_phy                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_set1_phy                 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_sirq_mask_set1': */
#define MSK_USED_BITS_NX90_dpm_irq_host_sirq_mask_set1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_sirq_mask_reset0 */
/* => DPM Interrupt Mask Reset Register for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_sirq_mask_reset0      0x00000090U
#define Adr_NX90_dpm0_com_dpm_irq_host_sirq_mask_reset0 0xFF001990U
#define Adr_NX90_dpm1_com_dpm_irq_host_sirq_mask_reset0 0xFF001A90U
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0     0x00000000U

#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_dpm_sw                0x00000001U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_dpm_sw                0
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_dpm_sw           0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_dpm_sw        0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_dpm_err               0x00000002U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_dpm_err               1
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_dpm_err          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_dpm_err       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_firmware              0x00000004U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_firmware              2
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_firmware         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_firmware      0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc0             0x00000100U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc0             8
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc0        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc0     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc1             0x00000200U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc1             9
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc1        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc1     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc2             0x00000400U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc2             10
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc2        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc2     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc3             0x00000800U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc3             11
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc3        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc3     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc4             0x00001000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc4             12
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc4        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc4     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc5             0x00002000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc5             13
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc5        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc5     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc6             0x00004000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc6             14
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc6        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc6     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc7             0x00008000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc7             15
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc7        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc7     0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc8to15         0x00010000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc8to15         16
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc8to15    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset0_host_hsc8to15 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_sirq_mask_reset0': */
#define MSK_USED_BITS_NX90_dpm_irq_host_sirq_mask_reset0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_sirq_mask_reset1 */
/* => DPM Interrupt Mask Reset Register for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_sirq_mask_reset1      0x00000094U
#define Adr_NX90_dpm0_com_dpm_irq_host_sirq_mask_reset1 0xFF001994U
#define Adr_NX90_dpm1_com_dpm_irq_host_sirq_mask_reset1 0xFF001A94U
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1     0x00000000U

#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_ARM_TIMER                   0x00000001U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_ARM_TIMER                   0
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_ARM_TIMER              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_ARM_TIMER           0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_timer_com_systime_s         0x00000002U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_timer_com_systime_s         1
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_timer_com_systime_s    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_timer_com_systime_s 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_wdg_com                     0x00000004U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_wdg_com                     2
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_wdg_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_wdg_com             0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_dmac_com                    0x00000008U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_dmac_com                    3
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_dmac_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_dmac_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_mcp_com                     0x00000010U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_mcp_com                     4
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_mcp_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_mcp_com             0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_uart_com                    0x00000020U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_uart_com                    5
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_uart_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_uart_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_i2c0_com                    0x00000040U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_i2c0_com                    6
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_i2c0_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_i2c0_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_i2c1_com                    0x00000080U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_i2c1_com                    7
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_i2c1_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_i2c1_com            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_1bit_error          0x00000100U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_1bit_error          8
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_1bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_1bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_2bit_error          0x00000200U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_2bit_error          9
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_2bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_ecc_com_2bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_xpic_debug_com              0x00000400U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_xpic_debug_com              10
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_xpic_debug_com         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_xpic_debug_com      0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_wdg_xpic_com_arm            0x00000800U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_wdg_xpic_com_arm            11
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_wdg_xpic_com_arm       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_wdg_xpic_com_arm    0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_nfifo_arm_com               0x00001000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_nfifo_arm_com               12
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_nfifo_arm_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_nfifo_arm_com       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_com0                        0x00002000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_com0                        13
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_com0                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_com0                0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_com1                        0x00004000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_com1                        14
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_com1                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_com1                0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_msync0                      0x00008000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_msync0                      15
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_msync0                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_msync0              0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_msync1                      0x00010000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_msync1                      16
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_msync1                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_msync1              0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_trigger_lt                  0x00020000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_trigger_lt                  17
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_trigger_lt             0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_trigger_lt          0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii0_com               0x00040000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii0_com               18
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii0_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii0_com       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii1_com               0x00080000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii1_com               19
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii1_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_lvds2mii1_com       0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_sqi                         0x00100000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_sqi                         20
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_sqi                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_sqi                 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_hif_pio_arm                 0x00200000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_hif_pio_arm                 21
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_hif_pio_arm            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_hif_pio_arm         0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_eth                         0x00400000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_eth                         22
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_eth                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_eth                 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_adc0_arm                    0x00800000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_adc0_arm                    23
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_adc0_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_adc0_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_adc1_arm                    0x01000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_adc1_arm                    24
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_adc1_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_adc1_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_GPIO_COM                    0x02000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_GPIO_COM                    25
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_GPIO_COM               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_GPIO_COM            0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_CRYPT                       0x04000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_CRYPT                       26
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_CRYPT                  0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_CRYPT               0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_bod                         0x08000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_bod                         27
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_bod                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_bod                 0x00000000U
#define MSK_NX90_dpm_irq_host_sirq_mask_reset1_phy                         0x10000000U
#define SRT_NX90_dpm_irq_host_sirq_mask_reset1_phy                         28
#define DFLT_VAL_NX90_dpm_irq_host_sirq_mask_reset1_phy                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_sirq_mask_reset1_phy                 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_sirq_mask_reset1': */
#define MSK_USED_BITS_NX90_dpm_irq_host_sirq_mask_reset1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_sirq_masked0 */
/* => DPM Masked Interrupt Status Register for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    A bit is set, when the related mask bit is set in 'dpm_irq_host_sirq_mask'-register and the related interrupt is asserted. */
/*    IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) is asserted if at least one bit is set here. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_sirq_masked0      0x00000098U
#define Adr_NX90_dpm0_com_dpm_irq_host_sirq_masked0 0xFF001998U
#define Adr_NX90_dpm1_com_dpm_irq_host_sirq_masked0 0xFF001A98U

#define MSK_NX90_dpm_irq_host_sirq_masked0_dpm_sw        0x00000001U
#define SRT_NX90_dpm_irq_host_sirq_masked0_dpm_sw        0
#define MSK_NX90_dpm_irq_host_sirq_masked0_dpm_err       0x00000002U
#define SRT_NX90_dpm_irq_host_sirq_masked0_dpm_err       1
#define MSK_NX90_dpm_irq_host_sirq_masked0_firmware      0x00000004U
#define SRT_NX90_dpm_irq_host_sirq_masked0_firmware      2
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc0     0x00000100U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc0     8
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc1     0x00000200U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc1     9
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc2     0x00000400U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc2     10
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc3     0x00000800U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc3     11
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc4     0x00001000U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc4     12
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc5     0x00002000U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc5     13
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc6     0x00004000U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc6     14
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc7     0x00008000U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc7     15
#define MSK_NX90_dpm_irq_host_sirq_masked0_host_hsc8to15 0x00010000U
#define SRT_NX90_dpm_irq_host_sirq_masked0_host_hsc8to15 16

/* all used bits of 'NX90_dpm_irq_host_sirq_masked0': */
#define MSK_USED_BITS_NX90_dpm_irq_host_sirq_masked0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_sirq_masked1 */
/* => DPM Masked Interrupt Status Register for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ). */
/*    A bit is set, when the related mask bit is set in 'dpm_irq_host_sirq_mask'-register and the related interrupt is asserted. */
/*    IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) is asserted if at least one bit is set here. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for high-priority netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_sirq_masked1      0x0000009CU
#define Adr_NX90_dpm0_com_dpm_irq_host_sirq_masked1 0xFF00199CU
#define Adr_NX90_dpm1_com_dpm_irq_host_sirq_masked1 0xFF001A9CU

#define MSK_NX90_dpm_irq_host_sirq_masked1_ARM_TIMER           0x00000001U
#define SRT_NX90_dpm_irq_host_sirq_masked1_ARM_TIMER           0
#define MSK_NX90_dpm_irq_host_sirq_masked1_timer_com_systime_s 0x00000002U
#define SRT_NX90_dpm_irq_host_sirq_masked1_timer_com_systime_s 1
#define MSK_NX90_dpm_irq_host_sirq_masked1_wdg_com             0x00000004U
#define SRT_NX90_dpm_irq_host_sirq_masked1_wdg_com             2
#define MSK_NX90_dpm_irq_host_sirq_masked1_dmac_com            0x00000008U
#define SRT_NX90_dpm_irq_host_sirq_masked1_dmac_com            3
#define MSK_NX90_dpm_irq_host_sirq_masked1_mcp_com             0x00000010U
#define SRT_NX90_dpm_irq_host_sirq_masked1_mcp_com             4
#define MSK_NX90_dpm_irq_host_sirq_masked1_uart_com            0x00000020U
#define SRT_NX90_dpm_irq_host_sirq_masked1_uart_com            5
#define MSK_NX90_dpm_irq_host_sirq_masked1_i2c0_com            0x00000040U
#define SRT_NX90_dpm_irq_host_sirq_masked1_i2c0_com            6
#define MSK_NX90_dpm_irq_host_sirq_masked1_i2c1_com            0x00000080U
#define SRT_NX90_dpm_irq_host_sirq_masked1_i2c1_com            7
#define MSK_NX90_dpm_irq_host_sirq_masked1_ecc_com_1bit_error  0x00000100U
#define SRT_NX90_dpm_irq_host_sirq_masked1_ecc_com_1bit_error  8
#define MSK_NX90_dpm_irq_host_sirq_masked1_ecc_com_2bit_error  0x00000200U
#define SRT_NX90_dpm_irq_host_sirq_masked1_ecc_com_2bit_error  9
#define MSK_NX90_dpm_irq_host_sirq_masked1_xpic_debug_com      0x00000400U
#define SRT_NX90_dpm_irq_host_sirq_masked1_xpic_debug_com      10
#define MSK_NX90_dpm_irq_host_sirq_masked1_wdg_xpic_com_arm    0x00000800U
#define SRT_NX90_dpm_irq_host_sirq_masked1_wdg_xpic_com_arm    11
#define MSK_NX90_dpm_irq_host_sirq_masked1_nfifo_arm_com       0x00001000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_nfifo_arm_com       12
#define MSK_NX90_dpm_irq_host_sirq_masked1_com0                0x00002000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_com0                13
#define MSK_NX90_dpm_irq_host_sirq_masked1_com1                0x00004000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_com1                14
#define MSK_NX90_dpm_irq_host_sirq_masked1_msync0              0x00008000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_msync0              15
#define MSK_NX90_dpm_irq_host_sirq_masked1_msync1              0x00010000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_msync1              16
#define MSK_NX90_dpm_irq_host_sirq_masked1_trigger_lt          0x00020000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_trigger_lt          17
#define MSK_NX90_dpm_irq_host_sirq_masked1_lvds2mii0_com       0x00040000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_lvds2mii0_com       18
#define MSK_NX90_dpm_irq_host_sirq_masked1_lvds2mii1_com       0x00080000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_lvds2mii1_com       19
#define MSK_NX90_dpm_irq_host_sirq_masked1_sqi                 0x00100000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_sqi                 20
#define MSK_NX90_dpm_irq_host_sirq_masked1_hif_pio_arm         0x00200000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_hif_pio_arm         21
#define MSK_NX90_dpm_irq_host_sirq_masked1_eth                 0x00400000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_eth                 22
#define MSK_NX90_dpm_irq_host_sirq_masked1_adc0_arm            0x00800000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_adc0_arm            23
#define MSK_NX90_dpm_irq_host_sirq_masked1_adc1_arm            0x01000000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_adc1_arm            24
#define MSK_NX90_dpm_irq_host_sirq_masked1_GPIO_COM            0x02000000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_GPIO_COM            25
#define MSK_NX90_dpm_irq_host_sirq_masked1_CRYPT               0x04000000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_CRYPT               26
#define MSK_NX90_dpm_irq_host_sirq_masked1_bod                 0x08000000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_bod                 27
#define MSK_NX90_dpm_irq_host_sirq_masked1_phy                 0x10000000U
#define SRT_NX90_dpm_irq_host_sirq_masked1_phy                 28

/* all used bits of 'NX90_dpm_irq_host_sirq_masked1': */
#define MSK_USED_BITS_NX90_dpm_irq_host_sirq_masked1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_dirq_mask_set0 */
/* => DPM Interrupt Mask Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_dirq_mask_set0      0x000000A0U
#define Adr_NX90_dpm0_com_dpm_irq_host_dirq_mask_set0 0xFF0019A0U
#define Adr_NX90_dpm1_com_dpm_irq_host_dirq_mask_set0 0xFF001AA0U
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0     0x00000000U

#define MSK_NX90_dpm_irq_host_dirq_mask_set0_dpm_sw                0x00000001U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_dpm_sw                0
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_dpm_sw           0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_dpm_sw        0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_dpm_err               0x00000002U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_dpm_err               1
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_dpm_err          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_dpm_err       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_firmware              0x00000004U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_firmware              2
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_firmware         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_firmware      0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc0             0x00000100U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc0             8
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc0        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc0     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc1             0x00000200U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc1             9
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc1        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc1     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc2             0x00000400U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc2             10
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc2        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc2     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc3             0x00000800U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc3             11
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc3        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc3     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc4             0x00001000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc4             12
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc4        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc4     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc5             0x00002000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc5             13
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc5        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc5     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc6             0x00004000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc6             14
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc6        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc6     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc7             0x00008000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc7             15
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc7        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc7     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set0_host_hsc8to15         0x00010000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set0_host_hsc8to15         16
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc8to15    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set0_host_hsc8to15 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_dirq_mask_set0': */
#define MSK_USED_BITS_NX90_dpm_irq_host_dirq_mask_set0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_dirq_mask_set1 */
/* => DPM Interrupt Mask Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_dirq_mask_set1      0x000000A4U
#define Adr_NX90_dpm0_com_dpm_irq_host_dirq_mask_set1 0xFF0019A4U
#define Adr_NX90_dpm1_com_dpm_irq_host_dirq_mask_set1 0xFF001AA4U
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1     0x00000000U

#define MSK_NX90_dpm_irq_host_dirq_mask_set1_ARM_TIMER                   0x00000001U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_ARM_TIMER                   0
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_ARM_TIMER              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_ARM_TIMER           0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_timer_com_systime_s         0x00000002U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_timer_com_systime_s         1
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_timer_com_systime_s    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_timer_com_systime_s 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_wdg_com                     0x00000004U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_wdg_com                     2
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_wdg_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_wdg_com             0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_dmac_com                    0x00000008U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_dmac_com                    3
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_dmac_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_dmac_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_mcp_com                     0x00000010U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_mcp_com                     4
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_mcp_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_mcp_com             0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_uart_com                    0x00000020U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_uart_com                    5
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_uart_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_uart_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_i2c0_com                    0x00000040U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_i2c0_com                    6
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_i2c0_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_i2c0_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_i2c1_com                    0x00000080U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_i2c1_com                    7
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_i2c1_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_i2c1_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_1bit_error          0x00000100U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_1bit_error          8
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_1bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_1bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_2bit_error          0x00000200U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_2bit_error          9
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_2bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_ecc_com_2bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_xpic_debug_com              0x00000400U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_xpic_debug_com              10
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_xpic_debug_com         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_xpic_debug_com      0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_wdg_xpic_com_arm            0x00000800U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_wdg_xpic_com_arm            11
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_wdg_xpic_com_arm       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_wdg_xpic_com_arm    0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_nfifo_arm_com               0x00001000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_nfifo_arm_com               12
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_nfifo_arm_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_nfifo_arm_com       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_com0                        0x00002000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_com0                        13
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_com0                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_com0                0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_com1                        0x00004000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_com1                        14
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_com1                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_com1                0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_msync0                      0x00008000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_msync0                      15
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_msync0                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_msync0              0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_msync1                      0x00010000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_msync1                      16
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_msync1                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_msync1              0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_trigger_lt                  0x00020000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_trigger_lt                  17
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_trigger_lt             0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_trigger_lt          0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii0_com               0x00040000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii0_com               18
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii0_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii0_com       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii1_com               0x00080000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii1_com               19
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii1_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_lvds2mii1_com       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_sqi                         0x00100000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_sqi                         20
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_sqi                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_sqi                 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_hif_pio_arm                 0x00200000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_hif_pio_arm                 21
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_hif_pio_arm            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_hif_pio_arm         0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_eth                         0x00400000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_eth                         22
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_eth                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_eth                 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_adc0_arm                    0x00800000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_adc0_arm                    23
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_adc0_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_adc0_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_adc1_arm                    0x01000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_adc1_arm                    24
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_adc1_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_adc1_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_GPIO_COM                    0x02000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_GPIO_COM                    25
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_GPIO_COM               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_GPIO_COM            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_CRYPT                       0x04000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_CRYPT                       26
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_CRYPT                  0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_CRYPT               0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_bod                         0x08000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_bod                         27
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_bod                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_bod                 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_set1_phy                         0x10000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_set1_phy                         28
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_set1_phy                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_set1_phy                 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_dirq_mask_set1': */
#define MSK_USED_BITS_NX90_dpm_irq_host_dirq_mask_set1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_dirq_mask_reset0 */
/* => DPM Interrupt Mask Reset Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_dirq_mask_reset0      0x000000A8U
#define Adr_NX90_dpm0_com_dpm_irq_host_dirq_mask_reset0 0xFF0019A8U
#define Adr_NX90_dpm1_com_dpm_irq_host_dirq_mask_reset0 0xFF001AA8U
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0     0x00000000U

#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_dpm_sw                0x00000001U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_dpm_sw                0
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_dpm_sw           0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_dpm_sw        0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_dpm_err               0x00000002U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_dpm_err               1
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_dpm_err          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_dpm_err       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_firmware              0x00000004U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_firmware              2
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_firmware         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_firmware      0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc0             0x00000100U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc0             8
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc0        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc0     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc1             0x00000200U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc1             9
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc1        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc1     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc2             0x00000400U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc2             10
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc2        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc2     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc3             0x00000800U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc3             11
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc3        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc3     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc4             0x00001000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc4             12
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc4        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc4     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc5             0x00002000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc5             13
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc5        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc5     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc6             0x00004000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc6             14
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc6        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc6     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc7             0x00008000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc7             15
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc7        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc7     0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc8to15         0x00010000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc8to15         16
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc8to15    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset0_host_hsc8to15 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_dirq_mask_reset0': */
#define MSK_USED_BITS_NX90_dpm_irq_host_dirq_mask_reset0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_dirq_mask_reset1 */
/* => DPM Interrupt Mask Reset Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_dirq_mask_reset1      0x000000ACU
#define Adr_NX90_dpm0_com_dpm_irq_host_dirq_mask_reset1 0xFF0019ACU
#define Adr_NX90_dpm1_com_dpm_irq_host_dirq_mask_reset1 0xFF001AACU
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1     0x00000000U

#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_ARM_TIMER                   0x00000001U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_ARM_TIMER                   0
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_ARM_TIMER              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_ARM_TIMER           0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_timer_com_systime_s         0x00000002U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_timer_com_systime_s         1
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_timer_com_systime_s    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_timer_com_systime_s 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_wdg_com                     0x00000004U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_wdg_com                     2
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_wdg_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_wdg_com             0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_dmac_com                    0x00000008U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_dmac_com                    3
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_dmac_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_dmac_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_mcp_com                     0x00000010U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_mcp_com                     4
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_mcp_com                0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_mcp_com             0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_uart_com                    0x00000020U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_uart_com                    5
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_uart_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_uart_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_i2c0_com                    0x00000040U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_i2c0_com                    6
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_i2c0_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_i2c0_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_i2c1_com                    0x00000080U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_i2c1_com                    7
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_i2c1_com               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_i2c1_com            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_1bit_error          0x00000100U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_1bit_error          8
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_1bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_1bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_2bit_error          0x00000200U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_2bit_error          9
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_2bit_error     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_ecc_com_2bit_error  0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_xpic_debug_com              0x00000400U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_xpic_debug_com              10
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_xpic_debug_com         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_xpic_debug_com      0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_wdg_xpic_com_arm            0x00000800U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_wdg_xpic_com_arm            11
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_wdg_xpic_com_arm       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_wdg_xpic_com_arm    0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_nfifo_arm_com               0x00001000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_nfifo_arm_com               12
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_nfifo_arm_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_nfifo_arm_com       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_com0                        0x00002000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_com0                        13
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_com0                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_com0                0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_com1                        0x00004000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_com1                        14
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_com1                   0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_com1                0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_msync0                      0x00008000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_msync0                      15
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_msync0                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_msync0              0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_msync1                      0x00010000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_msync1                      16
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_msync1                 0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_msync1              0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_trigger_lt                  0x00020000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_trigger_lt                  17
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_trigger_lt             0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_trigger_lt          0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii0_com               0x00040000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii0_com               18
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii0_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii0_com       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii1_com               0x00080000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii1_com               19
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii1_com          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_lvds2mii1_com       0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_sqi                         0x00100000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_sqi                         20
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_sqi                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_sqi                 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_hif_pio_arm                 0x00200000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_hif_pio_arm                 21
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_hif_pio_arm            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_hif_pio_arm         0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_eth                         0x00400000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_eth                         22
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_eth                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_eth                 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_adc0_arm                    0x00800000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_adc0_arm                    23
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_adc0_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_adc0_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_adc1_arm                    0x01000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_adc1_arm                    24
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_adc1_arm               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_adc1_arm            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_GPIO_COM                    0x02000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_GPIO_COM                    25
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_GPIO_COM               0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_GPIO_COM            0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_CRYPT                       0x04000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_CRYPT                       26
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_CRYPT                  0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_CRYPT               0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_bod                         0x08000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_bod                         27
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_bod                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_bod                 0x00000000U
#define MSK_NX90_dpm_irq_host_dirq_mask_reset1_phy                         0x10000000U
#define SRT_NX90_dpm_irq_host_dirq_mask_reset1_phy                         28
#define DFLT_VAL_NX90_dpm_irq_host_dirq_mask_reset1_phy                    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_irq_host_dirq_mask_reset1_phy                 0x00000000U

/* all used bits of 'NX90_dpm_irq_host_dirq_mask_reset1': */
#define MSK_USED_BITS_NX90_dpm_irq_host_dirq_mask_reset1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_dirq_masked0 */
/* => DPM Masked Interrupt Status Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    A bit is set, when the related mask bit is set in 'dpm_irq_host_dirq_mask'-register and the related interrupt is asserted. */
/*    IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) is asserted if at least one bit is set here. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_dirq_masked0      0x000000B0U
#define Adr_NX90_dpm0_com_dpm_irq_host_dirq_masked0 0xFF0019B0U
#define Adr_NX90_dpm1_com_dpm_irq_host_dirq_masked0 0xFF001AB0U

#define MSK_NX90_dpm_irq_host_dirq_masked0_dpm_sw        0x00000001U
#define SRT_NX90_dpm_irq_host_dirq_masked0_dpm_sw        0
#define MSK_NX90_dpm_irq_host_dirq_masked0_dpm_err       0x00000002U
#define SRT_NX90_dpm_irq_host_dirq_masked0_dpm_err       1
#define MSK_NX90_dpm_irq_host_dirq_masked0_firmware      0x00000004U
#define SRT_NX90_dpm_irq_host_dirq_masked0_firmware      2
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc0     0x00000100U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc0     8
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc1     0x00000200U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc1     9
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc2     0x00000400U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc2     10
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc3     0x00000800U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc3     11
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc4     0x00001000U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc4     12
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc5     0x00002000U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc5     13
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc6     0x00004000U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc6     14
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc7     0x00008000U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc7     15
#define MSK_NX90_dpm_irq_host_dirq_masked0_host_hsc8to15 0x00010000U
#define SRT_NX90_dpm_irq_host_dirq_masked0_host_hsc8to15 16

/* all used bits of 'NX90_dpm_irq_host_dirq_masked0': */
#define MSK_USED_BITS_NX90_dpm_irq_host_dirq_masked0 0x0001ff07U

/* --------------------------------------------------------------------- */
/* Register dpm_irq_host_dirq_masked1 */
/* => DPM Masked Interrupt Status Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ). */
/*    A bit is set, when the related mask bit is set in 'dpm_irq_host_dirq_mask'-register and the related interrupt is asserted. */
/*    IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) is asserted if at least one bit is set here. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_irq_host_dirq_masked1      0x000000B4U
#define Adr_NX90_dpm0_com_dpm_irq_host_dirq_masked1 0xFF0019B4U
#define Adr_NX90_dpm1_com_dpm_irq_host_dirq_masked1 0xFF001AB4U

#define MSK_NX90_dpm_irq_host_dirq_masked1_ARM_TIMER           0x00000001U
#define SRT_NX90_dpm_irq_host_dirq_masked1_ARM_TIMER           0
#define MSK_NX90_dpm_irq_host_dirq_masked1_timer_com_systime_s 0x00000002U
#define SRT_NX90_dpm_irq_host_dirq_masked1_timer_com_systime_s 1
#define MSK_NX90_dpm_irq_host_dirq_masked1_wdg_com             0x00000004U
#define SRT_NX90_dpm_irq_host_dirq_masked1_wdg_com             2
#define MSK_NX90_dpm_irq_host_dirq_masked1_dmac_com            0x00000008U
#define SRT_NX90_dpm_irq_host_dirq_masked1_dmac_com            3
#define MSK_NX90_dpm_irq_host_dirq_masked1_mcp_com             0x00000010U
#define SRT_NX90_dpm_irq_host_dirq_masked1_mcp_com             4
#define MSK_NX90_dpm_irq_host_dirq_masked1_uart_com            0x00000020U
#define SRT_NX90_dpm_irq_host_dirq_masked1_uart_com            5
#define MSK_NX90_dpm_irq_host_dirq_masked1_i2c0_com            0x00000040U
#define SRT_NX90_dpm_irq_host_dirq_masked1_i2c0_com            6
#define MSK_NX90_dpm_irq_host_dirq_masked1_i2c1_com            0x00000080U
#define SRT_NX90_dpm_irq_host_dirq_masked1_i2c1_com            7
#define MSK_NX90_dpm_irq_host_dirq_masked1_ecc_com_1bit_error  0x00000100U
#define SRT_NX90_dpm_irq_host_dirq_masked1_ecc_com_1bit_error  8
#define MSK_NX90_dpm_irq_host_dirq_masked1_ecc_com_2bit_error  0x00000200U
#define SRT_NX90_dpm_irq_host_dirq_masked1_ecc_com_2bit_error  9
#define MSK_NX90_dpm_irq_host_dirq_masked1_xpic_debug_com      0x00000400U
#define SRT_NX90_dpm_irq_host_dirq_masked1_xpic_debug_com      10
#define MSK_NX90_dpm_irq_host_dirq_masked1_wdg_xpic_com_arm    0x00000800U
#define SRT_NX90_dpm_irq_host_dirq_masked1_wdg_xpic_com_arm    11
#define MSK_NX90_dpm_irq_host_dirq_masked1_nfifo_arm_com       0x00001000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_nfifo_arm_com       12
#define MSK_NX90_dpm_irq_host_dirq_masked1_com0                0x00002000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_com0                13
#define MSK_NX90_dpm_irq_host_dirq_masked1_com1                0x00004000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_com1                14
#define MSK_NX90_dpm_irq_host_dirq_masked1_msync0              0x00008000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_msync0              15
#define MSK_NX90_dpm_irq_host_dirq_masked1_msync1              0x00010000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_msync1              16
#define MSK_NX90_dpm_irq_host_dirq_masked1_trigger_lt          0x00020000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_trigger_lt          17
#define MSK_NX90_dpm_irq_host_dirq_masked1_lvds2mii0_com       0x00040000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_lvds2mii0_com       18
#define MSK_NX90_dpm_irq_host_dirq_masked1_lvds2mii1_com       0x00080000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_lvds2mii1_com       19
#define MSK_NX90_dpm_irq_host_dirq_masked1_sqi                 0x00100000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_sqi                 20
#define MSK_NX90_dpm_irq_host_dirq_masked1_hif_pio_arm         0x00200000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_hif_pio_arm         21
#define MSK_NX90_dpm_irq_host_dirq_masked1_eth                 0x00400000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_eth                 22
#define MSK_NX90_dpm_irq_host_dirq_masked1_adc0_arm            0x00800000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_adc0_arm            23
#define MSK_NX90_dpm_irq_host_dirq_masked1_adc1_arm            0x01000000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_adc1_arm            24
#define MSK_NX90_dpm_irq_host_dirq_masked1_GPIO_COM            0x02000000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_GPIO_COM            25
#define MSK_NX90_dpm_irq_host_dirq_masked1_CRYPT               0x04000000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_CRYPT               26
#define MSK_NX90_dpm_irq_host_dirq_masked1_bod                 0x08000000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_bod                 27
#define MSK_NX90_dpm_irq_host_dirq_masked1_phy                 0x10000000U
#define SRT_NX90_dpm_irq_host_dirq_masked1_phy                 28

/* all used bits of 'NX90_dpm_irq_host_dirq_masked1': */
#define MSK_USED_BITS_NX90_dpm_irq_host_dirq_masked1 0x1fffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_sw_irq */
/* => DPM Register for Software Interrupt Generation. */
/*    To propagate interrupt states from this register to the interrupt target the 'dpm_sw' bit must */
/*    be set inside the appropriate interrupt mask (e.g. 'dpm_irq_arm_mask_set' register). */
/*    Example - TBD: dpm_err_irq: */
/*       The 'dpm_sw' IRQs can be used by the host to flag one IRQ to the ARM by */
/*       setting the arm-dpm_sw and another IRQ to the xPIC by setting the xpic-dpm_sw. The */
/*       ARM can use at the same time the irq-dpm_sw to flag an IRQ to the host while the */
/*       xPIC could use the fiq-dpm_sw to flag another IRQ to the host. */
/*    Note: */
/*       For each netX interrupt target  there is a set and a reset bit provided to avoid read-modify-write sequences. */
/*       When both (set and reset) bits are set for the same target, the related interrupt will be set (set will win). */
/*       Reset bits are always 0 on read. Set-bits show current interrupt status when read. */
/*    Note: */
/*       This register is a new netx56 feature.. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_sw_irq      0x000000B8U
#define Adr_NX90_dpm0_com_dpm_sw_irq 0xFF0019B8U
#define Adr_NX90_dpm1_com_dpm_sw_irq 0xFF001AB8U
#define DFLT_VAL_NX90_dpm_sw_irq     0x00000000U

#define MSK_NX90_dpm_sw_irq_set_host_sirq           0x00000001U
#define SRT_NX90_dpm_sw_irq_set_host_sirq           0
#define DFLT_VAL_NX90_dpm_sw_irq_set_host_sirq      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sw_irq_set_host_sirq   0x00000000U
#define MSK_NX90_dpm_sw_irq_set_host_dirq           0x00000002U
#define SRT_NX90_dpm_sw_irq_set_host_dirq           1
#define DFLT_VAL_NX90_dpm_sw_irq_set_host_dirq      0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sw_irq_set_host_dirq   0x00000000U
#define MSK_NX90_dpm_sw_irq_reset_host_sirq         0x00000100U
#define SRT_NX90_dpm_sw_irq_reset_host_sirq         8
#define DFLT_VAL_NX90_dpm_sw_irq_reset_host_sirq    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sw_irq_reset_host_sirq 0x00000000U
#define MSK_NX90_dpm_sw_irq_reset_host_dirq         0x00000200U
#define SRT_NX90_dpm_sw_irq_reset_host_dirq         9
#define DFLT_VAL_NX90_dpm_sw_irq_reset_host_dirq    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sw_irq_reset_host_dirq 0x00000000U

/* all used bits of 'NX90_dpm_sw_irq': */
#define MSK_USED_BITS_NX90_dpm_sw_irq 0x00000303U

/* --------------------------------------------------------------------- */
/* Register dpm_crc */
/* => DPM CRC for access to NETX data (window1-4) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_crc      0x000000BCU
#define Adr_NX90_dpm0_com_dpm_crc 0xFF0019BCU
#define Adr_NX90_dpm1_com_dpm_crc 0xFF001ABCU
#define DFLT_VAL_NX90_dpm_crc     0xffffffffU

#define MSK_NX90_dpm_crc_crc_rdata         0x0000ffffU
#define SRT_NX90_dpm_crc_crc_rdata         0
#define DFLT_VAL_NX90_dpm_crc_crc_rdata    0x0000ffffU
#define DFLT_BF_VAL_NX90_dpm_crc_crc_rdata 0x0000ffffU
#define MSK_NX90_dpm_crc_crc_wdata         0xffff0000U
#define SRT_NX90_dpm_crc_crc_wdata         16
#define DFLT_VAL_NX90_dpm_crc_crc_wdata    0xffff0000U
#define DFLT_BF_VAL_NX90_dpm_crc_crc_wdata 0x0000ffffU

/* all used bits of 'NX90_dpm_crc': */
#define MSK_USED_BITS_NX90_dpm_crc 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_reserved_netx50_wgd_host_timeout */
/* => Address reserved for netx50 DPM_HOST_WDG_HOST_TIMEOUT. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_reserved_netx50_wgd_host_timeout      0x000000C0U
#define Adr_NX90_dpm0_com_dpm_reserved_netx50_wgd_host_timeout 0xFF0019C0U
#define Adr_NX90_dpm1_com_dpm_reserved_netx50_wgd_host_timeout 0xFF001AC0U

#define MSK_NX90_dpm_reserved_netx50_wgd_host_timeout_zero_ro 0xffffffffU
#define SRT_NX90_dpm_reserved_netx50_wgd_host_timeout_zero_ro 0

/* all used bits of 'NX90_dpm_reserved_netx50_wgd_host_timeout': */
#define MSK_USED_BITS_NX90_dpm_reserved_netx50_wgd_host_timeout 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_reserved_netx50_wgd_host_trigger */
/* => Address reserved for netx50 DPM_HOST_WDG_HOST_TRIG. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_reserved_netx50_wgd_host_trigger      0x000000C4U
#define Adr_NX90_dpm0_com_dpm_reserved_netx50_wgd_host_trigger 0xFF0019C4U
#define Adr_NX90_dpm1_com_dpm_reserved_netx50_wgd_host_trigger 0xFF001AC4U

#define MSK_NX90_dpm_reserved_netx50_wgd_host_trigger_zero_ro 0xffffffffU
#define SRT_NX90_dpm_reserved_netx50_wgd_host_trigger_zero_ro 0

/* all used bits of 'NX90_dpm_reserved_netx50_wgd_host_trigger': */
#define MSK_USED_BITS_NX90_dpm_reserved_netx50_wgd_host_trigger 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_reserved_netx50_wgd_netx_timeout */
/* => Address reserved for netx50 DPM_HOST_WDG_ARM_TIMEOUT. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_reserved_netx50_wgd_netx_timeout      0x000000C8U
#define Adr_NX90_dpm0_com_dpm_reserved_netx50_wgd_netx_timeout 0xFF0019C8U
#define Adr_NX90_dpm1_com_dpm_reserved_netx50_wgd_netx_timeout 0xFF001AC8U

#define MSK_NX90_dpm_reserved_netx50_wgd_netx_timeout_zero_ro 0xffffffffU
#define SRT_NX90_dpm_reserved_netx50_wgd_netx_timeout_zero_ro 0

/* all used bits of 'NX90_dpm_reserved_netx50_wgd_netx_timeout': */
#define MSK_USED_BITS_NX90_dpm_reserved_netx50_wgd_netx_timeout 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_sys_sta_bigend16 */
/* => DPM System Status Information Register in big endianess 16 data mapping. */
/*    Read-only, use dpm_sys_sta for programming. */
/*    This register can be used for firmware status information. */
/*    Reading this register data can be done from uninitialized DPM interface in the same way */
/*    as reading netx version (adr_dpm_netx_version_bigend16, adr_dpm_netx_version) by using dpm_sys_sta_bigend16 register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_sys_sta_bigend16      0x000000CCU
#define Adr_NX90_dpm0_com_dpm_sys_sta_bigend16 0xFF0019CCU
#define Adr_NX90_dpm1_com_dpm_sys_sta_bigend16 0xFF001ACCU

#define MSK_NX90_dpm_sys_sta_bigend16_NETX_STA_CODE_swap_ro 0x000000ffU
#define SRT_NX90_dpm_sys_sta_bigend16_NETX_STA_CODE_swap_ro 0
#define MSK_NX90_dpm_sys_sta_bigend16_RDY_ro                0x00000100U
#define SRT_NX90_dpm_sys_sta_bigend16_RDY_ro                8
#define MSK_NX90_dpm_sys_sta_bigend16_RUN_ro                0x00000200U
#define SRT_NX90_dpm_sys_sta_bigend16_RUN_ro                9
#define MSK_NX90_dpm_sys_sta_bigend16_NETX_STATE_swap_ro    0x00000c00U
#define SRT_NX90_dpm_sys_sta_bigend16_NETX_STATE_swap_ro    10
#define MSK_NX90_dpm_sys_sta_bigend16_HOST_STATE_swap_ro    0x0000f000U
#define SRT_NX90_dpm_sys_sta_bigend16_HOST_STATE_swap_ro    12

/* all used bits of 'NX90_dpm_sys_sta_bigend16': */
#define MSK_USED_BITS_NX90_dpm_sys_sta_bigend16 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dpm_reserved_netx50_timer_ctrl */
/* => Address reserved for netx50 DPM_HOST_TMR_CTRL. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_reserved_netx50_timer_ctrl      0x000000D0U
#define Adr_NX90_dpm0_com_dpm_reserved_netx50_timer_ctrl 0xFF0019D0U
#define Adr_NX90_dpm1_com_dpm_reserved_netx50_timer_ctrl 0xFF001AD0U

#define MSK_NX90_dpm_reserved_netx50_timer_ctrl_zero_ro 0xffffffffU
#define SRT_NX90_dpm_reserved_netx50_timer_ctrl_zero_ro 0

/* all used bits of 'NX90_dpm_reserved_netx50_timer_ctrl': */
#define MSK_USED_BITS_NX90_dpm_reserved_netx50_timer_ctrl 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_reserved_netx50_timer_start_val */
/* => Address reserved for netx50 DPM_HOST_TMR_START_VAL. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_reserved_netx50_timer_start_val      0x000000D4U
#define Adr_NX90_dpm0_com_dpm_reserved_netx50_timer_start_val 0xFF0019D4U
#define Adr_NX90_dpm1_com_dpm_reserved_netx50_timer_start_val 0xFF001AD4U

#define MSK_NX90_dpm_reserved_netx50_timer_start_val_zero_ro 0xffffffffU
#define SRT_NX90_dpm_reserved_netx50_timer_start_val_zero_ro 0

/* all used bits of 'NX90_dpm_reserved_netx50_timer_start_val': */
#define MSK_USED_BITS_NX90_dpm_reserved_netx50_timer_start_val 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_sys_sta */
/* => DPM System Status Information Register. */
/*    This register can be used for firmware status information. */
/*    Reading this register data can be done from uninitialized DPM interface in the same way */
/*    as reading netx version (adr_dpm_netx_version_bigend16, adr_dpm_netx_version) by using dpm_sys_sta_bigend16 register. */
/*    Note: */
/*       For DPM0 This register is compatible to netx50 DPM_HOST_SYS_STAT register */
/*       Only the HOST_STATE-bits of DPM0 can be read from the 'netx_status'-register inside ASIC_CTRL address area. */
/*       The HOST_STATE-bits of DPM1 and IDPM can not be read from the 'netx_status'-register inside */
/*       ASIC_CTRL address area. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_sys_sta      0x000000D8U
#define Adr_NX90_dpm0_com_dpm_sys_sta 0xFF0019D8U
#define Adr_NX90_dpm1_com_dpm_sys_sta 0xFF001AD8U
#define DFLT_VAL_NX90_dpm_sys_sta     0x00000000U

#define MSK_NX90_dpm_sys_sta_RDY_ro                   0x00000001U
#define SRT_NX90_dpm_sys_sta_RDY_ro                   0
#define DFLT_VAL_NX90_dpm_sys_sta_RDY_ro              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sys_sta_RDY_ro           0x00000000U
#define MSK_NX90_dpm_sys_sta_RUN_ro                   0x00000002U
#define SRT_NX90_dpm_sys_sta_RUN_ro                   1
#define DFLT_VAL_NX90_dpm_sys_sta_RUN_ro              0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sys_sta_RUN_ro           0x00000000U
#define MSK_NX90_dpm_sys_sta_NETX_STATE_ro            0x0000000cU
#define SRT_NX90_dpm_sys_sta_NETX_STATE_ro            2
#define DFLT_VAL_NX90_dpm_sys_sta_NETX_STATE_ro       0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sys_sta_NETX_STATE_ro    0x00000000U
#define MSK_NX90_dpm_sys_sta_HOST_STATE               0x000000f0U
#define SRT_NX90_dpm_sys_sta_HOST_STATE               4
#define DFLT_VAL_NX90_dpm_sys_sta_HOST_STATE          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sys_sta_HOST_STATE       0x00000000U
#define MSK_NX90_dpm_sys_sta_NETX_STA_CODE_ro         0x0000ff00U
#define SRT_NX90_dpm_sys_sta_NETX_STA_CODE_ro         8
#define DFLT_VAL_NX90_dpm_sys_sta_NETX_STA_CODE_ro    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_sys_sta_NETX_STA_CODE_ro 0x00000000U

/* all used bits of 'NX90_dpm_sys_sta': */
#define MSK_USED_BITS_NX90_dpm_sys_sta 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register dpm_reset_request */
/* => DPM Reset Request Register. */
/*    Note: This register is compatible to netx50 DPM_HOST_RESET_REQ register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_reset_request      0x000000DCU
#define Adr_NX90_dpm0_com_dpm_reset_request 0xFF0019DCU
#define Adr_NX90_dpm1_com_dpm_reset_request 0xFF001ADCU
#define DFLT_VAL_NX90_dpm_reset_request     0x00000000U

#define MSK_NX90_dpm_reset_request_reset_key         0x000000ffU
#define SRT_NX90_dpm_reset_request_reset_key         0
#define DFLT_VAL_NX90_dpm_reset_request_reset_key    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_reset_request_reset_key 0x00000000U

/* all used bits of 'NX90_dpm_reset_request': */
#define MSK_USED_BITS_NX90_dpm_reset_request 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register dpm_firmware_irq_raw */
/* => 1st netx50 compatible DPM Interrupt Status Register (related to 'dpm_firmware_irq_mask'-register). */
/*    Writing a '1' to an IRQ flag will clear the Interrupt. This is always done even if related bit inside */
/*    'dpm_firmware_irq_mask'-register is not set (this is compatible to netx50). */
/*    Important: There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_host_dirq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*    Note: This register is compatible to netx50 DPM_HOST_INT_STAT0 register, however some unused */
/*       IRQs have been removed. */
/*    Note: The 2nd firmware IRQ register set (dpm_firmware_irq_mask2, DPM_HOST_INT_EN2, dpm_firmware_irq_raw2, DPM_HOST_INT_STAT2) */
/*       are obsolete since netx4000. Some functions moved to the main DPM IRQ register set (view dpm_irq_raw). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_firmware_irq_raw      0x000000E0U
#define Adr_NX90_dpm0_com_dpm_firmware_irq_raw 0xFF0019E0U
#define Adr_NX90_dpm1_com_dpm_firmware_irq_raw 0xFF001AE0U
#define DFLT_VAL_NX90_dpm_firmware_irq_raw     0x00000000U

#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT0               0x00000001U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT0               0
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT0          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT0       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT1               0x00000002U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT1               1
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT1          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT1       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT2               0x00000004U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT2               2
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT2          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT2       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT3               0x00000008U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT3               3
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT3          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT3       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT4               0x00000010U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT4               4
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT4          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT4       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT5               0x00000020U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT5               5
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT5          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT5       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT6               0x00000040U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT6               6
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT6          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT6       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT7               0x00000080U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT7               7
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT7          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT7       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT8               0x00000100U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT8               8
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT8          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT8       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT9               0x00000200U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT9               9
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT9          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT9       0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT10              0x00000400U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT10              10
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT10         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT10      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT11              0x00000800U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT11              11
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT11         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT11      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT12              0x00001000U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT12              12
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT12         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT12      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT13              0x00002000U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT13              13
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT13         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT13      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT14              0x00004000U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT14              14
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT14         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT14      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_HS_EVENT15              0x00008000U
#define SRT_NX90_dpm_firmware_irq_raw_HS_EVENT15              15
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT15         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_HS_EVENT15      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_IRQ_VECTOR              0x00ff0000U
#define SRT_NX90_dpm_firmware_irq_raw_IRQ_VECTOR              16
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_IRQ_VECTOR         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_IRQ_VECTOR      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_res_TMR_ro              0x02000000U
#define SRT_NX90_dpm_firmware_irq_raw_res_TMR_ro              25
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_res_TMR_ro         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_res_TMR_ro      0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_SYS_STA                 0x04000000U
#define SRT_NX90_dpm_firmware_irq_raw_SYS_STA                 26
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_SYS_STA            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_SYS_STA         0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_RDY_TIMEOUT             0x10000000U
#define SRT_NX90_dpm_firmware_irq_raw_RDY_TIMEOUT             28
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_RDY_TIMEOUT        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_RDY_TIMEOUT     0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_res_WDG_NETX_ro         0x20000000U
#define SRT_NX90_dpm_firmware_irq_raw_res_WDG_NETX_ro         29
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_res_WDG_NETX_ro    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_res_WDG_NETX_ro 0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_res_MEM_LCK_ro          0x40000000U
#define SRT_NX90_dpm_firmware_irq_raw_res_MEM_LCK_ro          30
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_res_MEM_LCK_ro     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_res_MEM_LCK_ro  0x00000000U
#define MSK_NX90_dpm_firmware_irq_raw_INT_REQ                 0x80000000U
#define SRT_NX90_dpm_firmware_irq_raw_INT_REQ                 31
#define DFLT_VAL_NX90_dpm_firmware_irq_raw_INT_REQ            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_raw_INT_REQ         0x00000000U

/* all used bits of 'NX90_dpm_firmware_irq_raw': */
#define MSK_USED_BITS_NX90_dpm_firmware_irq_raw 0xf6ffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_firmware_irq_mask */
/* => DPM Handshake Interrupt Enable Register. */
/*    Only netx50 compatible 'dpm_firmware_irq' registers are related to settings of this register. */
/*    Note: This register is compatible to netx50 DPM_HOST_INT_EN0 register, however some unused */
/*       IRQs have been removed. */
/*    Note: HS_EVENT-bits are not read-only. This is netX50 compliant. */
/*       Recent netX50 Documentation marks HS_EVENT-bits as read-only. This is an documentation error. */
/*       For netX50 compatibility, these bits can also be controlled from netX-side in HANDSHAKE_CTRL address area. */
/*    Note: The 2nd firmware IRQ register set (dpm_firmware_irq_mask2, DPM_HOST_INT_EN2, dpm_firmware_irq_raw2, DPM_HOST_INT_STAT2) */
/*       are obsolete since netx4000. Some functions moved to the main DPM IRQ register set (view dpm_irq_raw). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_firmware_irq_mask      0x000000F0U
#define Adr_NX90_dpm0_com_dpm_firmware_irq_mask 0xFF0019F0U
#define Adr_NX90_dpm1_com_dpm_firmware_irq_mask 0xFF001AF0U
#define DFLT_VAL_NX90_dpm_firmware_irq_mask     0x00000000U

#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT0               0x00000001U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT0               0
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT0          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT0       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT1               0x00000002U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT1               1
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT1          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT1       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT2               0x00000004U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT2               2
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT2          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT2       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT3               0x00000008U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT3               3
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT3          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT3       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT4               0x00000010U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT4               4
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT4          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT4       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT5               0x00000020U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT5               5
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT5          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT5       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT6               0x00000040U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT6               6
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT6          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT6       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT7               0x00000080U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT7               7
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT7          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT7       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT8               0x00000100U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT8               8
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT8          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT8       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT9               0x00000200U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT9               9
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT9          0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT9       0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT10              0x00000400U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT10              10
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT10         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT10      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT11              0x00000800U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT11              11
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT11         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT11      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT12              0x00001000U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT12              12
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT12         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT12      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT13              0x00002000U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT13              13
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT13         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT13      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT14              0x00004000U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT14              14
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT14         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT14      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_HS_EVENT15              0x00008000U
#define SRT_NX90_dpm_firmware_irq_mask_HS_EVENT15              15
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT15         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_HS_EVENT15      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_res_TMR_ro              0x02000000U
#define SRT_NX90_dpm_firmware_irq_mask_res_TMR_ro              25
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_res_TMR_ro         0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_res_TMR_ro      0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_SYS_STA                 0x04000000U
#define SRT_NX90_dpm_firmware_irq_mask_SYS_STA                 26
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_SYS_STA            0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_SYS_STA         0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_RDY_TIMEOUT             0x10000000U
#define SRT_NX90_dpm_firmware_irq_mask_RDY_TIMEOUT             28
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_RDY_TIMEOUT        0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_RDY_TIMEOUT     0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_res_WDG_NETX_ro         0x20000000U
#define SRT_NX90_dpm_firmware_irq_mask_res_WDG_NETX_ro         29
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_res_WDG_NETX_ro    0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_res_WDG_NETX_ro 0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_res_MEM_LCK_ro          0x40000000U
#define SRT_NX90_dpm_firmware_irq_mask_res_MEM_LCK_ro          30
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_res_MEM_LCK_ro     0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_res_MEM_LCK_ro  0x00000000U
#define MSK_NX90_dpm_firmware_irq_mask_INT_EN                  0x80000000U
#define SRT_NX90_dpm_firmware_irq_mask_INT_EN                  31
#define DFLT_VAL_NX90_dpm_firmware_irq_mask_INT_EN             0x00000000U
#define DFLT_BF_VAL_NX90_dpm_firmware_irq_mask_INT_EN          0x00000000U

/* all used bits of 'NX90_dpm_firmware_irq_mask': */
#define MSK_USED_BITS_NX90_dpm_firmware_irq_mask 0xf600ffffU

/* --------------------------------------------------------------------- */
/* Register dpm_netx_version_bigend16 */
/* => DPM netX Version Register in big endianess 16 data mapping. */
/*    This registers content is mirrored form asic_ctrl register area and can be set during netX booting phase by netX firmware. */
/*    This register is not valid if unlocked bit is not set in dpm_status register. */
/*    Together with dpm_netx_version register, full 32 bit version can be read by any host device, even if DPM interface is not initialized yet. */
/*    Bytes byte1 and byte3 can be always read here even if DPM is uninitialized (8 bit default from dpm_cfg0x0 after power on) and */
/*    host device has 8, 16 or 32 bit data width. */
/*    {                 |                           |                           | */
/*                        8 bit DPM                   16 bit DPM                  32 bit DPM */
/*      byte 0 (D7:0)     byte read this address +1   adr_dpm_netx_version        adr_dpm_netx_version */
/*      byte 1 (D15:8)    byte read this address +0   byte read this address      DWord read this address */
/*      byte 2 (D23:16)   byte read this address +3   adr_dpm_netx_version        adr_dpm_netx_version */
/*      byte 3 (D31:24)   byte read this address +2   byte read this address +2   byte read this address +0 } */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_netx_version_bigend16      0x000000F4U
#define Adr_NX90_dpm0_com_dpm_netx_version_bigend16 0xFF0019F4U
#define Adr_NX90_dpm1_com_dpm_netx_version_bigend16 0xFF001AF4U

#define MSK_NX90_dpm_netx_version_bigend16_netx_version_byte1_swap 0x000000ffU
#define SRT_NX90_dpm_netx_version_bigend16_netx_version_byte1_swap 0
#define MSK_NX90_dpm_netx_version_bigend16_netx_version_byte0_swap 0x0000ff00U
#define SRT_NX90_dpm_netx_version_bigend16_netx_version_byte0_swap 8
#define MSK_NX90_dpm_netx_version_bigend16_netx_version_byte3_swap 0x00ff0000U
#define SRT_NX90_dpm_netx_version_bigend16_netx_version_byte3_swap 16
#define MSK_NX90_dpm_netx_version_bigend16_netx_version_byte2_swap 0xff000000U
#define SRT_NX90_dpm_netx_version_bigend16_netx_version_byte2_swap 24

/* all used bits of 'NX90_dpm_netx_version_bigend16': */
#define MSK_USED_BITS_NX90_dpm_netx_version_bigend16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register dpm_netx_version */
/* => DPM netX Version Register. */
/*    This register is mirrored form asic_ctrl register area and can be set during netX booting phase by netX firmware. */
/*    This register is not valid if unlocked bit is not set in dpm_status register. */
/*    Together with dpm_netx_version register, full 32 bit version can be read by any host device, even if DPM interface is not initialized yet. */
/*    Bytes byte0 and byte2 can be always read here even if DPM is uninitialized (8 bit default from dpm_cfg0x0 after power on) and */
/*    host device has 8, 16 or 32 bit data width. */
/*    {                 |                           |                               | */
/*                        8 bit DPM                   16 bit DPM                     32 bit DPM */
/*      byte 0 (D7:0)     byte read this address +0   byte read this address          DWord read this address */
/*      byte 1 (D15:8)    byte read this address +1   adr_dpm_netx_version_bigend16   adr_dpm_netx_version_bigend16 */
/*      byte 2 (D23:16)   byte read this address +2   byte read this address +2       byte read this address +0 */
/*      byte 3 (D31:24)   byte read this address +3   adr_dpm_netx_version_bigend16   adr_dpm_netx_version_bigend16 } */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dpm_netx_version      0x000000FCU
#define Adr_NX90_dpm0_com_dpm_netx_version 0xFF0019FCU
#define Adr_NX90_dpm1_com_dpm_netx_version 0xFF001AFCU

#define MSK_NX90_dpm_netx_version_netx_version_byte0 0x000000ffU
#define SRT_NX90_dpm_netx_version_netx_version_byte0 0
#define MSK_NX90_dpm_netx_version_netx_version_byte1 0x0000ff00U
#define SRT_NX90_dpm_netx_version_netx_version_byte1 8
#define MSK_NX90_dpm_netx_version_netx_version_byte2 0x00ff0000U
#define SRT_NX90_dpm_netx_version_netx_version_byte2 16
#define MSK_NX90_dpm_netx_version_netx_version_byte3 0xff000000U
#define SRT_NX90_dpm_netx_version_netx_version_byte3 24

/* all used bits of 'NX90_dpm_netx_version': */
#define MSK_USED_BITS_NX90_dpm_netx_version 0xffffffffU


/* ===================================================================== */

/* AREA idpm */
/* Area of idpm_com */

/* ===================================================================== */

#define Addr_NX90_idpm_com 0xFF001B00U

/* --------------------------------------------------------------------- */
/* Register idpm_cfg0x0 */
/* => DPM IO Control Register 0. */
/*    This register is accessible in any DPM-mode (8, 16, 32 bit, SRAM, Intel, Motorola, little endian, big endian) by access to DPM address 0. */
/*    Basic DPM settings are configurable here to make higher addresses accessible. */
/*    To avoid instable system configurations, global changes of important configuration registers must be confirmed */
/*    (re)writing 'mode' bit field of this register. View 'mode' description for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_cfg0x0      0x00000000U
#define Adr_NX90_idpm_com_idpm_cfg0x0 0xFF001B00U
#define Adr_NX90_idpm_cfg0x0          0xFF001B00U
#define DFLT_VAL_NX90_idpm_cfg0x0     0x00000000U

#define MSK_NX90_idpm_cfg0x0_enable         0x00000001U
#define SRT_NX90_idpm_cfg0x0_enable         0
#define DFLT_VAL_NX90_idpm_cfg0x0_enable    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_cfg0x0_enable 0x00000000U
#define MSK_NX90_idpm_cfg0x0_endian         0x00000030U
#define SRT_NX90_idpm_cfg0x0_endian         4
#define DFLT_VAL_NX90_idpm_cfg0x0_endian    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_cfg0x0_endian 0x00000000U

/* all used bits of 'NX90_idpm_cfg0x0': */
#define MSK_USED_BITS_NX90_idpm_cfg0x0 0x00000031U

/* --------------------------------------------------------------------- */
/* Register idpm_addr_cfg */
/* => DPM External Address Configuration Register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_addr_cfg      0x00000010U
#define Adr_NX90_idpm_com_idpm_addr_cfg 0xFF001B10U
#define Adr_NX90_idpm_addr_cfg          0xFF001B10U
#define DFLT_VAL_NX90_idpm_addr_cfg     0x00000000U

#define MSK_NX90_idpm_addr_cfg_cfg_win_addr_cfg         0x00000030U
#define SRT_NX90_idpm_addr_cfg_cfg_win_addr_cfg         4
#define DFLT_VAL_NX90_idpm_addr_cfg_cfg_win_addr_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_addr_cfg_cfg_win_addr_cfg 0x00000000U

/* all used bits of 'NX90_idpm_addr_cfg': */
#define MSK_USED_BITS_NX90_idpm_addr_cfg 0x00000030U

/* --------------------------------------------------------------------- */
/* Register idpm_status */
/* => DPM Status Register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_status      0x0000001CU
#define Adr_NX90_idpm_com_idpm_status 0xFF001B1CU
#define Adr_NX90_idpm_status          0xFF001B1CU

#define MSK_NX90_idpm_status_unlocked 0x00000001U
#define SRT_NX90_idpm_status_unlocked 0

/* all used bits of 'NX90_idpm_status': */
#define MSK_USED_BITS_NX90_idpm_status 0x00000001U

/* --------------------------------------------------------------------- */
/* Register idpm_tunnel_cfg */
/* => DPM Access Tunnel Configuration Register. */
/*    The DPM Access Tunnel (DATunnel) is a 64 byte (16DWord) address window which can be mapped on any 64 byte boundary of the external */
/*    visible address space. At the last DWord (offset 0x3C) of the DATunnel the Internal Target Base Address (ITBAddr) can be programmed. */
/*    This is the base address of the 64 byte tunnel target area inside the full 32-bit netX address range (however some address areas */
/*    could not be reachable as connections could be cut from the DPM inside the netX dataswitch, refer to the dataswitch documentation */
/*    of your netX). */
/*    By the DWords 0 to 14 of the tunnel the internal netX addresses starting at ITBAddr can be reached. The 'enable'-bit must be active */
/*    for this (read-only functionality can be configured by 'wp_data'-bit). */
/*    For access to netX data with ITBAddr DWord offset 15, the lower bits 5 to 2 of the programmed ITBAddr are interpreted as a mapping */
/*    value. This value will be added to the internal access address before tunneling (wrapping around at the 64 byte boundary). Hence it */
/*    is possible to access always 15 of the 16 netX DWord while the one hidden by the ITBAddr can be selected by an appropriate mapping */
/*    value. */
/*    The ITBAddr can also be programmed by the 'idpm_itbaddr' register of the configuration window 0 (or the INTLOGIC area). The ITBAddr on */
/*    tunnel offset 0x3C can be write-protected by the 'wp_itbaddr'-bit. This could be useful to protect the NETX from reconfiguring the */
/*    tunnel from the host side but provides the host the internal NETX destination address anyhow. However this only makes sense when */
/*    the configuration window 0 is disabled ('idpm_addr_cfg' register). Otherwise the host could reconfigure the tunnel by the 'idpm_itbaddr' */
/*    register. */
/*    Additionally the 'tunnel_all'-bit provides the possibility of tunneling all 16DWords to the NETX side. */
/*    To protect the NETX from reconfiguring the tunnel from the host side when the configuration window 0 is enabled, the 'wp_cfg_win' */
/*    can be activated. Then the tunnel configuration can only be changed from the NETX side (INTLOGIC area) but not from configuration */
/*    window 0 (in contrast to the 'wp_itbaddr'-bit which protects only offset 0x3C). */
/*    External to internal address mapping for DATunnel area can be calculated by following formula: */
/*       INAAdr = (ITBAddr & 0xffffffc0) + ((EDAAdr + ITBAddr) & 0x3C) */
/*    With: */
/*       INAAdr:  Internal netX Access Address */
/*       ITBAddr: Internal netX 32-bit Tunnel Target Base Address */
/*       EDAAdr:  External DPM Access Address */
/*    Condition for DATunnel access is: */
/*       EDAAdr>>6 equals value of bit field 'base' from this register. */
/*    To map netX internal DWord N to invisible last external DWord (15), use mapping value */
/*       map = (N - 15) & 0xf */
/*    on bits 5 to 2. */
/*    Internal to external address offset inside DATunnel area for internal DWord N can be calculated by following formula: */
/*       External offset = (N*4 - map*4) & 0x3C = (N*4 - ITBAddr) & 0x3C */
/*    Example 1: */
/*       Access to netX sys_time module by host via DATunnel on external DPM addresses are starting at 0x240. */
/*       - Set bit field 'base' of this register to 9 (0x240>>6), set 'enable'-bit (and write protection depending on application). */
/*         DATunnel now is enabled on external DPM addresses 0x240 to 0x27f. */
/*       - ITBAddr of netX4000 sys_time module is 0xf409c180. */
/*         For direct DATunnel to this address, host must write 0xf409c180 to external DPM address 0x27c. This */
/*         can be done e.g. by four byte accesses to 0x27c, 0x27d, 0x27e and 0x27f or by two 16-bit accesses to 0x27c and 0x27e. */
/*         Now sys_time module registers 0 to 14 can be accessed on external DPM address 0x240 to 0x27b. */
/*    Example 2: */
/*       Register 15 of sys_time is hidden by ITBAddr configuration on 0x27c in example 1 but must also be accessed. However, sys_time */
/*       Register 6 is never kind of interest. */
/*       - Configure this register like described in example 1. */
/*       - To map Register 6 (Module offset 6*4) to external offset 0x3C (hidden data on DWord 15), */
/*         the following rule must be complied: */
/*            0x3C + map*4 = 6*4. */
/*         That leads to a mapping value of: */
/*            map*4 = (6*4 - 0x3C) & 0x3C = 1C */
/*         Hence, write 0x101c101C to DATunnel DWord 15 (external DPM address 0x27c) to map sys_time Register 6 to */
/*         hidden DWord 15. */
/*         INAAdr now will be derived from EDAAdr before tunneling as follows: */
/*            INAAdr = 0xf409c180 + ((EDAAdr + 0x1C) & 0x3C) */
/*         External offset of Module DWord N results from: */
/*            External offset = (N*4 - 0x1C) & 0x3C */
/*         Register 15 of sys_time unit now can be accessed by external DPM address 0x240+((0xf*4-0x1C) & 0x3C) = 0x260 (i.e. Tunnel DWord 8). */
/*         Register 0  of sys_time unit now can be accessed by external DPM address 0x240+((0x0*4-0x1C) & 0x3C) = 0x264 (i.e. Tunnel DWord 9). */
/*         Register 1  of sys_time unit now can be accessed by external DPM address 0x240+((0x1*4-0x1C) & 0x3C) = 0x268 (i.e. Tunnel DWord 10). */
/*         and so on. */
/*         Register 6  of sys_time unit can not be accessed as it is hidden by ITBAddr configuration on 0x27c (i.e. Tunnel DWord 15). */
/*         Register 7  of sys_time unit now can be accessed by external DPM address 0x240+((0x7*4-0x1C) & 0x3C) = 0x240 (i.e. Tunnel DWord 0). */
/*    Note: */
/*      The IDPM tunnel is capable to target the INTRAMHS-memory associated to the IDPM and additionally the INTLOGIC_SYS */
/*      area (addresses 0xf4080000 to 0xf80fffff, e.g. for SYSTIME). Other address areas can not be reached even when ITBAddr */
/*      is configured for it. Write access to non-reachable addresses will be ignored, read access will deliver invalid data. */
/*    Attention: */
/*      The IDPM tunnel could bypass the AHB firewalls. Example: */
/*      The INTLOGIC_SYS firewall is configured to deny CA9 accesses while the CA9 is permitted for the INTRAMHS0 firewall. However, when */
/*      the tunnel is programmed to target the INTLOGIC_SYS area the CA9 can reach it as the initial access (before tunnel remapping) is */
/*      handled by the INTRAMHS0 firewall and not by the INTLOGIC_SYS firewall. To avoid abuse the 'tunnel_all' or the 'wp_itbaddr' bit */
/*      and the 'wp_cfg_win' must be enabled. Then the tunnel e.g. can be used to access the SYSTIME registers but it cannot be reconfigured */
/*      by the CA9 for abuse to other addresses. */
/*    Note: */
/*      Configuration Window 0 access detection has higher priority than normal DPM Window */
/*      detection but lower priority than Access Tunnel access detection. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_tunnel_cfg      0x00000038U
#define Adr_NX90_idpm_com_idpm_tunnel_cfg 0xFF001B38U
#define Adr_NX90_idpm_tunnel_cfg          0xFF001B38U
#define DFLT_VAL_NX90_idpm_tunnel_cfg     0x00000101U

#define MSK_NX90_idpm_tunnel_cfg_wp_data            0x00000001U
#define SRT_NX90_idpm_tunnel_cfg_wp_data            0
#define DFLT_VAL_NX90_idpm_tunnel_cfg_wp_data       0x00000001U
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_wp_data    0x00000001U
#define MSK_NX90_idpm_tunnel_cfg_wp_itbaddr         0x00000002U
#define SRT_NX90_idpm_tunnel_cfg_wp_itbaddr         1
#define DFLT_VAL_NX90_idpm_tunnel_cfg_wp_itbaddr    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_wp_itbaddr 0x00000000U
#define MSK_NX90_idpm_tunnel_cfg_enable             0x00000004U
#define SRT_NX90_idpm_tunnel_cfg_enable             2
#define DFLT_VAL_NX90_idpm_tunnel_cfg_enable        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_enable     0x00000000U
#define MSK_NX90_idpm_tunnel_cfg_tunnel_all         0x00000008U
#define SRT_NX90_idpm_tunnel_cfg_tunnel_all         3
#define DFLT_VAL_NX90_idpm_tunnel_cfg_tunnel_all    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_tunnel_all 0x00000000U
#define MSK_NX90_idpm_tunnel_cfg_base               0x00007fc0U
#define SRT_NX90_idpm_tunnel_cfg_base               6
#define DFLT_VAL_NX90_idpm_tunnel_cfg_base          0x00000100U
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_base       0x00000004U
#define MSK_NX90_idpm_tunnel_cfg_wp_cfg_win         0x80000000U
#define SRT_NX90_idpm_tunnel_cfg_wp_cfg_win         31
#define DFLT_VAL_NX90_idpm_tunnel_cfg_wp_cfg_win    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_wp_cfg_win 0x00000000U

/* all used bits of 'NX90_idpm_tunnel_cfg': */
#define MSK_USED_BITS_NX90_idpm_tunnel_cfg 0x80007fcfU

/* --------------------------------------------------------------------- */
/* Register idpm_itbaddr */
/* => DPM Access Tunnel (DATunnel) netX Internal Target Base Address (ITBAddr) Configuration Register. */
/*    For DPM Access Tunnel (DATunnel) function view description of dpm_tunnel_cfg register. */
/*    This register contains ITBAddr value that can also be changed by host on last offset 0x3c (last DWord) of */
/*    external DATunnel area (defined by bit field 'base' in 'dpm_tunnel_cfg' register). However this register can */
/*    also be write-protected from host if bit 'wp_itbaddr' in 'dpm_tunnel_cfg' register is set. */
/*    Write protection bits of DATunnel configured in 'dpm_tunnel_cfg' register can also be read from this register. Host */
/*    can read access rights from these bits on last DWord of external DATunnel address area. */
/*     */
/*    Note: This register can be write-protected by the 'wp_cfg_win' and the 'wp_itbaddr'-bit of the 'idpm_tunnel_cfg' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_itbaddr      0x0000003CU
#define Adr_NX90_idpm_com_idpm_itbaddr 0xFF001B3CU
#define Adr_NX90_idpm_itbaddr          0xFF001B3CU
#define DFLT_VAL_NX90_idpm_itbaddr     0x00000001U

#define MSK_NX90_idpm_itbaddr_wp_data_ro            0x00000001U
#define SRT_NX90_idpm_itbaddr_wp_data_ro            0
#define DFLT_VAL_NX90_idpm_itbaddr_wp_data_ro       0x00000001U
#define DFLT_BF_VAL_NX90_idpm_itbaddr_wp_data_ro    0x00000001U
#define MSK_NX90_idpm_itbaddr_wp_itbaddr_ro         0x00000002U
#define SRT_NX90_idpm_itbaddr_wp_itbaddr_ro         1
#define DFLT_VAL_NX90_idpm_itbaddr_wp_itbaddr_ro    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_itbaddr_wp_itbaddr_ro 0x00000000U
#define MSK_NX90_idpm_itbaddr_map                   0x0000003cU
#define SRT_NX90_idpm_itbaddr_map                   2
#define DFLT_VAL_NX90_idpm_itbaddr_map              0x00000000U
#define DFLT_BF_VAL_NX90_idpm_itbaddr_map           0x00000000U
#define MSK_NX90_idpm_itbaddr_base                  0xffffffc0U
#define SRT_NX90_idpm_itbaddr_base                  6
#define DFLT_VAL_NX90_idpm_itbaddr_base             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_itbaddr_base          0x00000000U

/* all used bits of 'NX90_idpm_itbaddr': */
#define MSK_USED_BITS_NX90_idpm_itbaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register idpm_win1_end */
/* => DPM Window 1 End Address Configuration Register. */
/*    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0). */
/*    At address 0x0 DPM configuration window is mapped after reset (length: 256 bytes, containing all DPM addresses defined here). Each window starts at */
/*    window end address of the preceding window. Hence external window 1 start address is 0x100, window 2 starts at value programmed in this register and so on. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*    Note: */
/*      Configuration Window 0 access detection has higher priority than normal DPM Window */
/*      detection but lower priority than Access Tunnel access detection. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win1_end      0x00000040U
#define Adr_NX90_idpm_com_idpm_win1_end 0xFF001B40U
#define Adr_NX90_idpm_win1_end          0xFF001B40U
#define DFLT_VAL_NX90_idpm_win1_end     0x00000000U

#define MSK_NX90_idpm_win1_end_win_end         0x0000ff80U
#define SRT_NX90_idpm_win1_end_win_end         7
#define DFLT_VAL_NX90_idpm_win1_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win1_end_win_end 0x00000000U

/* all used bits of 'NX90_idpm_win1_end': */
#define MSK_USED_BITS_NX90_idpm_win1_end 0x0000ff80U

/* --------------------------------------------------------------------- */
/* Register idpm_win1_map */
/* => DPM Window 1 Address Map Configuration Register. */
/*    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0). */
/*    For further information view description of 'dpm_win1_end' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win1_map      0x00000044U
#define Adr_NX90_idpm_com_idpm_win1_map 0xFF001B44U
#define Adr_NX90_idpm_win1_map          0xFF001B44U
#define DFLT_VAL_NX90_idpm_win1_map     0x00000000U

#define MSK_NX90_idpm_win1_map_win_map_alt         0x0000000cU
#define SRT_NX90_idpm_win1_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win1_map_win_map_alt    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win1_map_win_map_alt 0x00000000U
#define MSK_NX90_idpm_win1_map_wp_cfg_win          0x00000020U
#define SRT_NX90_idpm_win1_map_wp_cfg_win          5
#define DFLT_VAL_NX90_idpm_win1_map_wp_cfg_win     0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win1_map_wp_cfg_win  0x00000000U
#define MSK_NX90_idpm_win1_map_win_map             0x00007f80U
#define SRT_NX90_idpm_win1_map_win_map             7
#define DFLT_VAL_NX90_idpm_win1_map_win_map        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win1_map_win_map     0x00000000U

/* all used bits of 'NX90_idpm_win1_map': */
#define MSK_USED_BITS_NX90_idpm_win1_map 0x00007facU

/* --------------------------------------------------------------------- */
/* Register idpm_win2_end */
/* => DPM Window 2 End Address Configuration Register. */
/*    For detailed information refer to 'idpm_win1_end' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win2_end      0x00000048U
#define Adr_NX90_idpm_com_idpm_win2_end 0xFF001B48U
#define Adr_NX90_idpm_win2_end          0xFF001B48U
#define DFLT_VAL_NX90_idpm_win2_end     0x00000000U

#define MSK_NX90_idpm_win2_end_win_end         0x0000ff80U
#define SRT_NX90_idpm_win2_end_win_end         7
#define DFLT_VAL_NX90_idpm_win2_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win2_end_win_end 0x00000000U

/* all used bits of 'NX90_idpm_win2_end': */
#define MSK_USED_BITS_NX90_idpm_win2_end 0x0000ff80U

/* --------------------------------------------------------------------- */
/* Register idpm_win2_map */
/* => DPM Window 2 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win2_map      0x0000004CU
#define Adr_NX90_idpm_com_idpm_win2_map 0xFF001B4CU
#define Adr_NX90_idpm_win2_map          0xFF001B4CU
#define DFLT_VAL_NX90_idpm_win2_map     0x00000000U

#define MSK_NX90_idpm_win2_map_win_map_alt         0x0000000cU
#define SRT_NX90_idpm_win2_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win2_map_win_map_alt    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win2_map_win_map_alt 0x00000000U
#define MSK_NX90_idpm_win2_map_win_map             0x00007f80U
#define SRT_NX90_idpm_win2_map_win_map             7
#define DFLT_VAL_NX90_idpm_win2_map_win_map        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win2_map_win_map     0x00000000U

/* all used bits of 'NX90_idpm_win2_map': */
#define MSK_USED_BITS_NX90_idpm_win2_map 0x00007f8cU

/* --------------------------------------------------------------------- */
/* Register idpm_win3_end */
/* => DPM Window 3 End Address Configuration Register. */
/*    For detailed information refer to 'idpm_win1_end' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win3_end      0x00000050U
#define Adr_NX90_idpm_com_idpm_win3_end 0xFF001B50U
#define Adr_NX90_idpm_win3_end          0xFF001B50U
#define DFLT_VAL_NX90_idpm_win3_end     0x00000000U

#define MSK_NX90_idpm_win3_end_win_end         0x0000ff80U
#define SRT_NX90_idpm_win3_end_win_end         7
#define DFLT_VAL_NX90_idpm_win3_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win3_end_win_end 0x00000000U

/* all used bits of 'NX90_idpm_win3_end': */
#define MSK_USED_BITS_NX90_idpm_win3_end 0x0000ff80U

/* --------------------------------------------------------------------- */
/* Register idpm_win3_map */
/* => DPM Window 3 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win3_map      0x00000054U
#define Adr_NX90_idpm_com_idpm_win3_map 0xFF001B54U
#define Adr_NX90_idpm_win3_map          0xFF001B54U
#define DFLT_VAL_NX90_idpm_win3_map     0x00000000U

#define MSK_NX90_idpm_win3_map_win_map_alt         0x0000000cU
#define SRT_NX90_idpm_win3_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win3_map_win_map_alt    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win3_map_win_map_alt 0x00000000U
#define MSK_NX90_idpm_win3_map_win_map             0x00007f80U
#define SRT_NX90_idpm_win3_map_win_map             7
#define DFLT_VAL_NX90_idpm_win3_map_win_map        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win3_map_win_map     0x00000000U

/* all used bits of 'NX90_idpm_win3_map': */
#define MSK_USED_BITS_NX90_idpm_win3_map 0x00007f8cU

/* --------------------------------------------------------------------- */
/* Register idpm_win4_end */
/* => DPM Window 4 End Address Configuration Register. */
/*    For detailed information refer to 'idpm_win1_end' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win4_end      0x00000058U
#define Adr_NX90_idpm_com_idpm_win4_end 0xFF001B58U
#define Adr_NX90_idpm_win4_end          0xFF001B58U
#define DFLT_VAL_NX90_idpm_win4_end     0x00000000U

#define MSK_NX90_idpm_win4_end_win_end         0x0000ff80U
#define SRT_NX90_idpm_win4_end_win_end         7
#define DFLT_VAL_NX90_idpm_win4_end_win_end    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win4_end_win_end 0x00000000U

/* all used bits of 'NX90_idpm_win4_end': */
#define MSK_USED_BITS_NX90_idpm_win4_end 0x0000ff80U

/* --------------------------------------------------------------------- */
/* Register idpm_win4_map */
/* => DPM Window 4 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win4_map      0x0000005CU
#define Adr_NX90_idpm_com_idpm_win4_map 0xFF001B5CU
#define Adr_NX90_idpm_win4_map          0xFF001B5CU
#define DFLT_VAL_NX90_idpm_win4_map     0x00000000U

#define MSK_NX90_idpm_win4_map_win_map_alt         0x0000000cU
#define SRT_NX90_idpm_win4_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win4_map_win_map_alt    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win4_map_win_map_alt 0x00000000U
#define MSK_NX90_idpm_win4_map_win_map             0x00007f80U
#define SRT_NX90_idpm_win4_map_win_map             7
#define DFLT_VAL_NX90_idpm_win4_map_win_map        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_win4_map_win_map     0x00000000U

/* all used bits of 'NX90_idpm_win4_map': */
#define MSK_USED_BITS_NX90_idpm_win4_map 0x00007f8cU

/* --------------------------------------------------------------------- */
/* Register idpm_irq_raw */
/* => DPM Raw (before masking) IRQ Status Register. */
/*    If a bit is set, the related interrupt is asserted. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    Important: There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*    Note: */
/*       The 'dpm_sw' IRQ can be controlled by the 'dpm_sw_irq' register. */
/*       for each IRQ target. The 'dpm_sw' will be set inside the 'dpm_irq_raw' register */
/*       when the 'dpm_sw' is activated for at least one IRQ target. But each IRQ target */
/*       obtains only the 'dpm_sw' IRQ state programmed for this target inside the 'dpm_sw_irq' */
/*       register. For an example view description of 'dpm_sw_irq' register. */
/*    Note: */
/*        The 'firmware' IRQ can be used to flag handshake and netX firmware system status events to the */
/*        host. Firmware IRQ generation can be controlled by dpm_firmware_irq_mask register. Detailed */
/*        firmware IRQ status can be read from dpm_firmware_irq_raw register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_raw      0x00000080U
#define Adr_NX90_idpm_com_idpm_irq_raw 0xFF001B80U
#define Adr_NX90_idpm_irq_raw          0xFF001B80U

#define MSK_NX90_idpm_irq_raw_dpm_sw   0x00000001U
#define SRT_NX90_idpm_irq_raw_dpm_sw   0
#define MSK_NX90_idpm_irq_raw_firmware 0x00000004U
#define SRT_NX90_idpm_irq_raw_firmware 2

/* all used bits of 'NX90_idpm_irq_raw': */
#define MSK_USED_BITS_NX90_idpm_irq_raw 0x00000005U

/* --------------------------------------------------------------------- */
/* Register idpm_irq_host_mask_set */
/* => DPM Interrupt Mask Register for IDPM host interrupt. */
/*    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for IDPM host interrupt. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for IDPM host interrupt without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_host_mask_set      0x00000084U
#define Adr_NX90_idpm_com_idpm_irq_host_mask_set 0xFF001B84U
#define Adr_NX90_idpm_irq_host_mask_set          0xFF001B84U
#define DFLT_VAL_NX90_idpm_irq_host_mask_set     0x00000000U

#define MSK_NX90_idpm_irq_host_mask_set_dpm_sw           0x00000001U
#define SRT_NX90_idpm_irq_host_mask_set_dpm_sw           0
#define DFLT_VAL_NX90_idpm_irq_host_mask_set_dpm_sw      0x00000000U
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_set_dpm_sw   0x00000000U
#define MSK_NX90_idpm_irq_host_mask_set_firmware         0x00000004U
#define SRT_NX90_idpm_irq_host_mask_set_firmware         2
#define DFLT_VAL_NX90_idpm_irq_host_mask_set_firmware    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_set_firmware 0x00000000U

/* all used bits of 'NX90_idpm_irq_host_mask_set': */
#define MSK_USED_BITS_NX90_idpm_irq_host_mask_set 0x00000005U

/* --------------------------------------------------------------------- */
/* Register idpm_irq_host_mask_reset */
/* => DPM Interrupt Mask Reset Register for IDPM host interrupt. */
/*    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for IDPM host interrupt. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for IDPM host interrupt without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_host_mask_reset      0x00000088U
#define Adr_NX90_idpm_com_idpm_irq_host_mask_reset 0xFF001B88U
#define Adr_NX90_idpm_irq_host_mask_reset          0xFF001B88U
#define DFLT_VAL_NX90_idpm_irq_host_mask_reset     0x00000000U

#define MSK_NX90_idpm_irq_host_mask_reset_dpm_sw           0x00000001U
#define SRT_NX90_idpm_irq_host_mask_reset_dpm_sw           0
#define DFLT_VAL_NX90_idpm_irq_host_mask_reset_dpm_sw      0x00000000U
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_reset_dpm_sw   0x00000000U
#define MSK_NX90_idpm_irq_host_mask_reset_firmware         0x00000004U
#define SRT_NX90_idpm_irq_host_mask_reset_firmware         2
#define DFLT_VAL_NX90_idpm_irq_host_mask_reset_firmware    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_reset_firmware 0x00000000U

/* all used bits of 'NX90_idpm_irq_host_mask_reset': */
#define MSK_USED_BITS_NX90_idpm_irq_host_mask_reset 0x00000005U

/* --------------------------------------------------------------------- */
/* Register idpm_irq_host_masked */
/* => DPM Masked Interrupt Status Register for IDPM host interrupt. */
/*    A bit is set, when the related mask bit is set in 'dpm_irq_host_mask'-register and the related interrupt is asserted. */
/*    IRQ for IDPM host interrupt is asserted if at least one bit is set here. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for IDPM host interrupt without clearing interrupt in module, reset related mask bit to 0. */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_host_masked      0x0000008CU
#define Adr_NX90_idpm_com_idpm_irq_host_masked 0xFF001B8CU
#define Adr_NX90_idpm_irq_host_masked          0xFF001B8CU

#define MSK_NX90_idpm_irq_host_masked_dpm_sw   0x00000001U
#define SRT_NX90_idpm_irq_host_masked_dpm_sw   0
#define MSK_NX90_idpm_irq_host_masked_firmware 0x00000004U
#define SRT_NX90_idpm_irq_host_masked_firmware 2

/* all used bits of 'NX90_idpm_irq_host_masked': */
#define MSK_USED_BITS_NX90_idpm_irq_host_masked 0x00000005U

/* --------------------------------------------------------------------- */
/* Register idpm_sw_irq */
/* => DPM Register for Software Interrupt Generation to Host and netX Interrupt Targets. */
/*    Host and netX masters can generate an interrupt to netX interrupt targets (e.g. ARM-VIC, xPIC-VIC) */
/*    or DPM IRQ signals by this register. */
/*    To propagate interrupt states from this register to the interrupt target the 'dpm_sw' bit must */
/*    be set inside the appropriate interrupt mask (e.g. 'dpm_irq_hsot_mask_set' register). */
/*    Example: */
/*       The 'dpm_sw' IRQs can be used by the host to flag one IRQ to the ARM by */
/*       setting the arm-dpm_sw and another IRQ to the xPIC by setting the xpic-dpm_sw. The */
/*       ARM can use at the same time the irq-dpm_sw to flag an IRQ to the host while the */
/*       xPIC could use the fiq-dpm_sw to flag another IRQ to the host. */
/*    Note: */
/*       For each netX interrupt target  there is a set and a reset bit provided to avoid read-modify-write sequences. */
/*       When both (set and reset) bits are set for the same target, the related interrupt will be set (set will win). */
/*       Reset bits are always 0 on read. Set-bits show current interrupt status when read. */
/*    Note: */
/*       This register is a new netx56 feature.. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_sw_irq      0x000000C0U
#define Adr_NX90_idpm_com_idpm_sw_irq 0xFF001BC0U
#define Adr_NX90_idpm_sw_irq          0xFF001BC0U
#define DFLT_VAL_NX90_idpm_sw_irq     0x00000000U

#define MSK_NX90_idpm_sw_irq_set_host           0x00000001U
#define SRT_NX90_idpm_sw_irq_set_host           0
#define DFLT_VAL_NX90_idpm_sw_irq_set_host      0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sw_irq_set_host   0x00000000U
#define MSK_NX90_idpm_sw_irq_reset_host         0x00000100U
#define SRT_NX90_idpm_sw_irq_reset_host         8
#define DFLT_VAL_NX90_idpm_sw_irq_reset_host    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sw_irq_reset_host 0x00000000U

/* all used bits of 'NX90_idpm_sw_irq': */
#define MSK_USED_BITS_NX90_idpm_sw_irq 0x00000101U

/* --------------------------------------------------------------------- */
/* Register idpm_sys_sta */
/* => DPM System Status Information Register. */
/*    This register can be used for firmware status information. */
/*    Note: */
/*       This register is NOT fully compatible to netx50 DPM_HOST_SYS_STAT register: */
/*       Only the HOST_STATE-bits of DPM0 can be read from the 'netx_status'-register inside ASIC_CTRL address area. */
/*       The HOST_STATE-bits of DPM1 and IDPM can not be read from the 'netx_status'-register inside */
/*       ASIC_CTRL address area. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_sys_sta      0x000000D8U
#define Adr_NX90_idpm_com_idpm_sys_sta 0xFF001BD8U
#define Adr_NX90_idpm_sys_sta          0xFF001BD8U
#define DFLT_VAL_NX90_idpm_sys_sta     0x00000000U

#define MSK_NX90_idpm_sys_sta_RDY_ro                   0x00000001U
#define SRT_NX90_idpm_sys_sta_RDY_ro                   0
#define DFLT_VAL_NX90_idpm_sys_sta_RDY_ro              0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sys_sta_RDY_ro           0x00000000U
#define MSK_NX90_idpm_sys_sta_RUN_ro                   0x00000002U
#define SRT_NX90_idpm_sys_sta_RUN_ro                   1
#define DFLT_VAL_NX90_idpm_sys_sta_RUN_ro              0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sys_sta_RUN_ro           0x00000000U
#define MSK_NX90_idpm_sys_sta_NETX_STATE_ro            0x0000000cU
#define SRT_NX90_idpm_sys_sta_NETX_STATE_ro            2
#define DFLT_VAL_NX90_idpm_sys_sta_NETX_STATE_ro       0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sys_sta_NETX_STATE_ro    0x00000000U
#define MSK_NX90_idpm_sys_sta_HOST_STATE               0x000000f0U
#define SRT_NX90_idpm_sys_sta_HOST_STATE               4
#define DFLT_VAL_NX90_idpm_sys_sta_HOST_STATE          0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sys_sta_HOST_STATE       0x00000000U
#define MSK_NX90_idpm_sys_sta_NETX_STA_CODE_ro         0x0000ff00U
#define SRT_NX90_idpm_sys_sta_NETX_STA_CODE_ro         8
#define DFLT_VAL_NX90_idpm_sys_sta_NETX_STA_CODE_ro    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_sys_sta_NETX_STA_CODE_ro 0x00000000U

/* all used bits of 'NX90_idpm_sys_sta': */
#define MSK_USED_BITS_NX90_idpm_sys_sta 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register idpm_reset_request */
/* => DPM Reset Request Register. */
/*    Note: This register is compatible to netx50 DPM_HOST_RESET_REQ register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_reset_request      0x000000DCU
#define Adr_NX90_idpm_com_idpm_reset_request 0xFF001BDCU
#define Adr_NX90_idpm_reset_request          0xFF001BDCU
#define DFLT_VAL_NX90_idpm_reset_request     0x00000000U

#define MSK_NX90_idpm_reset_request_reset_key         0x000000ffU
#define SRT_NX90_idpm_reset_request_reset_key         0
#define DFLT_VAL_NX90_idpm_reset_request_reset_key    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_reset_request_reset_key 0x00000000U

/* all used bits of 'NX90_idpm_reset_request': */
#define MSK_USED_BITS_NX90_idpm_reset_request 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register idpm_firmware_irq_raw */
/* => 1st netx50 compatible DPM Interrupt Status Register (related to 'dpm_firmware_irq_mask'-register). */
/*    Writing a '1' to an IRQ flag will clear the Interrupt. This is always done even if related bit inside */
/*    'dpm_firmware_irq_mask'-register is not set (this is compatible to netx50). */
/*    Important: */
/*       There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*    Note: */
/*       This register is compatible to netx50 DPM_HOST_INT_STAT0 register, however some unused */
/*       IRQs have been removed. */
/*    Note: */
/*       For netX4000 there are 2 IDPM and 2 HANDSHAKE_CTRL units. IDPM0 is always associated with HANDSHAKE_CTRL0 */
/*       while IDPM1 is always associated with HANDSHAKE_CTRL1. */
/*    Note: */
/*       The 2nd firmware IRQ register set (dpm_firmware_irq_mask2, DPM_HOST_INT_EN2, dpm_firmware_irq_raw2, DPM_HOST_INT_STAT2) */
/*       are obsolete since netx4000. Some functions moved to the main DPM IRQ register set (view dpm_irq_raw). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_firmware_irq_raw      0x000000E0U
#define Adr_NX90_idpm_com_idpm_firmware_irq_raw 0xFF001BE0U
#define Adr_NX90_idpm_firmware_irq_raw          0xFF001BE0U
#define DFLT_VAL_NX90_idpm_firmware_irq_raw     0x00000000U

#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT0                  0x00000001U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT0                  0
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT0             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT0          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT1                  0x00000002U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT1                  1
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT1             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT1          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT2                  0x00000004U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT2                  2
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT2             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT2          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT3                  0x00000008U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT3                  3
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT3             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT3          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT4                  0x00000010U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT4                  4
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT4             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT4          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT5                  0x00000020U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT5                  5
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT5             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT5          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT6                  0x00000040U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT6                  6
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT6             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT6          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT7                  0x00000080U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT7                  7
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT7             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT7          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT8                  0x00000100U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT8                  8
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT8             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT8          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT9                  0x00000200U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT9                  9
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT9             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT9          0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT10                 0x00000400U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT10                 10
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT10            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT10         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT11                 0x00000800U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT11                 11
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT11            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT11         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT12                 0x00001000U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT12                 12
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT12            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT12         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT13                 0x00002000U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT13                 13
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT13            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT13         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT14                 0x00004000U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT14                 14
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT14            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT14         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT15                 0x00008000U
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT15                 15
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT15            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT15         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_IRQ_VECTOR                 0x00ff0000U
#define SRT_NX90_idpm_firmware_irq_raw_IRQ_VECTOR                 16
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_IRQ_VECTOR            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_IRQ_VECTOR         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_res_TMR_ro                 0x02000000U
#define SRT_NX90_idpm_firmware_irq_raw_res_TMR_ro                 25
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_TMR_ro            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_TMR_ro         0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_SYS_STA                    0x04000000U
#define SRT_NX90_idpm_firmware_irq_raw_SYS_STA                    26
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_SYS_STA               0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_SYS_STA            0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro         0x10000000U
#define SRT_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro         28
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro 0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro            0x20000000U
#define SRT_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro            29
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro       0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro    0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro             0x40000000U
#define SRT_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro             30
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro     0x00000000U
#define MSK_NX90_idpm_firmware_irq_raw_INT_REQ                    0x80000000U
#define SRT_NX90_idpm_firmware_irq_raw_INT_REQ                    31
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_INT_REQ               0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_INT_REQ            0x00000000U

/* all used bits of 'NX90_idpm_firmware_irq_raw': */
#define MSK_USED_BITS_NX90_idpm_firmware_irq_raw 0xf6ffffffU

/* --------------------------------------------------------------------- */
/* Register idpm_firmware_irq_mask */
/* => DPM Handshake Interrupt Enable Register. */
/*    Only netx50 compatible 'dpm_firmware_irq' registers are related to settings of this register. */
/*    Note: This register is compatible to netx50 DPM_HOST_INT_EN0 register, however some unused */
/*       IRQs have been removed. */
/*    Note: HS_EVENT-bits are not read-only. This is netX50 compliant. */
/*       Recent netX50 Documentation marks HS_EVENT-bits as read-only. This is an dokumentation error. */
/*       For netX50 compatibility, these bits can also be controlled from netX-side in HANDSHAKE_CTRL address area. */
/*    Note: The 2nd firmware IRQ register set (dpm_firmware_irq_mask2, DPM_HOST_INT_EN2, dpm_firmware_irq_raw2, DPM_HOST_INT_STAT2) */
/*       are obsolete since netx4000. Some functions moved to the main DPM IRQ register set (view dpm_irq_raw). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_firmware_irq_mask      0x000000F0U
#define Adr_NX90_idpm_com_idpm_firmware_irq_mask 0xFF001BF0U
#define Adr_NX90_idpm_firmware_irq_mask          0xFF001BF0U
#define DFLT_VAL_NX90_idpm_firmware_irq_mask     0x00000000U

#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT0                  0x00000001U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT0                  0
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT0             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT0          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT1                  0x00000002U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT1                  1
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT1             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT1          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT2                  0x00000004U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT2                  2
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT2             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT2          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT3                  0x00000008U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT3                  3
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT3             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT3          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT4                  0x00000010U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT4                  4
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT4             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT4          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT5                  0x00000020U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT5                  5
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT5             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT5          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT6                  0x00000040U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT6                  6
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT6             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT6          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT7                  0x00000080U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT7                  7
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT7             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT7          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT8                  0x00000100U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT8                  8
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT8             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT8          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT9                  0x00000200U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT9                  9
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT9             0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT9          0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT10                 0x00000400U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT10                 10
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT10            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT10         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT11                 0x00000800U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT11                 11
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT11            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT11         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT12                 0x00001000U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT12                 12
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT12            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT12         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT13                 0x00002000U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT13                 13
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT13            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT13         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT14                 0x00004000U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT14                 14
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT14            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT14         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT15                 0x00008000U
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT15                 15
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT15            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT15         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_res_TMR_ro                 0x02000000U
#define SRT_NX90_idpm_firmware_irq_mask_res_TMR_ro                 25
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_TMR_ro            0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_TMR_ro         0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_SYS_STA                    0x04000000U
#define SRT_NX90_idpm_firmware_irq_mask_SYS_STA                    26
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_SYS_STA               0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_SYS_STA            0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro         0x10000000U
#define SRT_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro         28
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro    0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro 0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro            0x20000000U
#define SRT_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro            29
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro       0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro    0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro             0x40000000U
#define SRT_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro             30
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro        0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro     0x00000000U
#define MSK_NX90_idpm_firmware_irq_mask_INT_EN                     0x80000000U
#define SRT_NX90_idpm_firmware_irq_mask_INT_EN                     31
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_INT_EN                0x00000000U
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_INT_EN             0x00000000U

/* all used bits of 'NX90_idpm_firmware_irq_mask': */
#define MSK_USED_BITS_NX90_idpm_firmware_irq_mask 0xf600ffffU

/* --------------------------------------------------------------------- */
/* Register idpm_netx_version */
/* => DPM netX Version Register. */
/*    This register is mirrored form asic_ctrl register area and can be set during netX booting phase by netX firmware. */
/*    This register is not valid if unlocked bit is not set in dpm_status register. */
/*    Together with dpm_netx_version register, full 32 bit version can be read by any host device, even if DPM interface is not initialized yet. */
/*    Bytes byte0 and byte2 can be always read here even if DPM is uninitialized (8 bit default from dpm_cfg0x0 after power on) and */
/*    host device has 8, 16 or 32 bit data width. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_netx_version      0x000000FCU
#define Adr_NX90_idpm_com_idpm_netx_version 0xFF001BFCU
#define Adr_NX90_idpm_netx_version          0xFF001BFCU

#define MSK_NX90_idpm_netx_version_netx_version 0xffffffffU
#define SRT_NX90_idpm_netx_version_netx_version 0

/* all used bits of 'NX90_idpm_netx_version': */
#define MSK_USED_BITS_NX90_idpm_netx_version 0xffffffffU


/* ===================================================================== */

/* AREA iflash_cfg */
/* Area of iflash_cfg0_com, iflash_cfg1_com, iflash_cfg2 */

/* ===================================================================== */

#define Addr_NX90_iflash_cfg0_com 0xFF001C00U
#define Addr_NX90_iflash_cfg1_com 0xFF001C80U
#define Addr_NX90_iflash_cfg2     0xFF401400U

/* --------------------------------------------------------------------- */
/* Register buffer_read_ahead_instructions */
/* => read ahead on instruction channel of flash controller */
/*    max read ahead = buffer lines - 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buffer_read_ahead_instructions             0x00000000U
#define Adr_NX90_iflash_cfg0_com_buffer_read_ahead_instructions 0xFF001C00U
#define Adr_NX90_iflash_cfg1_com_buffer_read_ahead_instructions 0xFF001C80U
#define Adr_NX90_iflash_cfg2_buffer_read_ahead_instructions     0xFF401400U
#define DFLT_VAL_NX90_buffer_read_ahead_instructions            0x00000000U

#define MSK_NX90_buffer_read_ahead_instructions_val         0xffffffffU
#define SRT_NX90_buffer_read_ahead_instructions_val         0
#define DFLT_VAL_NX90_buffer_read_ahead_instructions_val    0x00000000U
#define DFLT_BF_VAL_NX90_buffer_read_ahead_instructions_val 0x00000000U

/* all used bits of 'NX90_buffer_read_ahead_instructions': */
#define MSK_USED_BITS_NX90_buffer_read_ahead_instructions 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register buffer_read_ahead_data */
/* => read ahead on data channel of flash controller */
/*    max read ahead = buffer lines - 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buffer_read_ahead_data             0x00000004U
#define Adr_NX90_iflash_cfg0_com_buffer_read_ahead_data 0xFF001C04U
#define Adr_NX90_iflash_cfg1_com_buffer_read_ahead_data 0xFF001C84U
#define Adr_NX90_iflash_cfg2_buffer_read_ahead_data     0xFF401404U
#define DFLT_VAL_NX90_buffer_read_ahead_data            0x00000000U

#define MSK_NX90_buffer_read_ahead_data_val         0xffffffffU
#define SRT_NX90_buffer_read_ahead_data_val         0
#define DFLT_VAL_NX90_buffer_read_ahead_data_val    0x00000000U
#define DFLT_BF_VAL_NX90_buffer_read_ahead_data_val 0x00000000U

/* all used bits of 'NX90_buffer_read_ahead_data': */
#define MSK_USED_BITS_NX90_buffer_read_ahead_data 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register iflash_signals_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_signals_cfg             0x00000008U
#define Adr_NX90_iflash_cfg0_com_iflash_signals_cfg 0xFF001C08U
#define Adr_NX90_iflash_cfg1_com_iflash_signals_cfg 0xFF001C88U
#define Adr_NX90_iflash_cfg2_iflash_signals_cfg     0xFF401408U
#define DFLT_VAL_NX90_iflash_signals_cfg            0x00000000U

#define MSK_NX90_iflash_signals_cfg_xe            0x00000001U
#define SRT_NX90_iflash_signals_cfg_xe            0
#define DFLT_VAL_NX90_iflash_signals_cfg_xe       0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_xe    0x00000000U
#define MSK_NX90_iflash_signals_cfg_ye            0x00000002U
#define SRT_NX90_iflash_signals_cfg_ye            1
#define DFLT_VAL_NX90_iflash_signals_cfg_ye       0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_ye    0x00000000U
#define MSK_NX90_iflash_signals_cfg_erase         0x00000004U
#define SRT_NX90_iflash_signals_cfg_erase         2
#define DFLT_VAL_NX90_iflash_signals_cfg_erase    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_erase 0x00000000U
#define MSK_NX90_iflash_signals_cfg_mas1          0x00000008U
#define SRT_NX90_iflash_signals_cfg_mas1          3
#define DFLT_VAL_NX90_iflash_signals_cfg_mas1     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_mas1  0x00000000U
#define MSK_NX90_iflash_signals_cfg_nvstr         0x00000010U
#define SRT_NX90_iflash_signals_cfg_nvstr         4
#define DFLT_VAL_NX90_iflash_signals_cfg_nvstr    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_nvstr 0x00000000U
#define MSK_NX90_iflash_signals_cfg_prog          0x00000020U
#define SRT_NX90_iflash_signals_cfg_prog          5
#define DFLT_VAL_NX90_iflash_signals_cfg_prog     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_prog  0x00000000U
#define MSK_NX90_iflash_signals_cfg_se            0x00000040U
#define SRT_NX90_iflash_signals_cfg_se            6
#define DFLT_VAL_NX90_iflash_signals_cfg_se       0x00000000U
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_se    0x00000000U

/* all used bits of 'NX90_iflash_signals_cfg': */
#define MSK_USED_BITS_NX90_iflash_signals_cfg 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register iflash_mode_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_mode_cfg             0x0000000CU
#define Adr_NX90_iflash_cfg0_com_iflash_mode_cfg 0xFF001C0CU
#define Adr_NX90_iflash_cfg1_com_iflash_mode_cfg 0xFF001C8CU
#define Adr_NX90_iflash_cfg2_iflash_mode_cfg     0xFF40140CU
#define DFLT_VAL_NX90_iflash_mode_cfg            0x00000000U

#define MSK_NX90_iflash_mode_cfg_iflash_mode         0x00000007U
#define SRT_NX90_iflash_mode_cfg_iflash_mode         0
#define DFLT_VAL_NX90_iflash_mode_cfg_iflash_mode    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_mode_cfg_iflash_mode 0x00000000U

/* all used bits of 'NX90_iflash_mode_cfg': */
#define MSK_USED_BITS_NX90_iflash_mode_cfg 0x00000007U

/* --------------------------------------------------------------------- */
/* Register iflash_access */
/* => read only for the ready bit, write 1 to start access */
/*    flash action depends on iflash_mode_cfg */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_access             0x00000010U
#define Adr_NX90_iflash_cfg0_com_iflash_access 0xFF001C10U
#define Adr_NX90_iflash_cfg1_com_iflash_access 0xFF001C90U
#define Adr_NX90_iflash_cfg2_iflash_access     0xFF401410U

#define MSK_NX90_iflash_access_run 0x00000001U
#define SRT_NX90_iflash_access_run 0

/* all used bits of 'NX90_iflash_access': */
#define MSK_USED_BITS_NX90_iflash_access 0x00000001U

/* --------------------------------------------------------------------- */
/* Register iflash_yadr */
/* => Y address of flash controller */
/*    not all bits are used see: implementation size of flash */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_yadr             0x00000014U
#define Adr_NX90_iflash_cfg0_com_iflash_yadr 0xFF001C14U
#define Adr_NX90_iflash_cfg1_com_iflash_yadr 0xFF001C94U
#define Adr_NX90_iflash_cfg2_iflash_yadr     0xFF401414U
#define DFLT_VAL_NX90_iflash_yadr            0x00000000U

#define MSK_NX90_iflash_yadr_val         0x0000001fU
#define SRT_NX90_iflash_yadr_val         0
#define DFLT_VAL_NX90_iflash_yadr_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_yadr_val 0x00000000U

/* all used bits of 'NX90_iflash_yadr': */
#define MSK_USED_BITS_NX90_iflash_yadr 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register iflash_xadr */
/* => X address of flash controller */
/*    not all bits are used see: implementation size of flash */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_xadr             0x00000018U
#define Adr_NX90_iflash_cfg0_com_iflash_xadr 0xFF001C18U
#define Adr_NX90_iflash_cfg1_com_iflash_xadr 0xFF001C98U
#define Adr_NX90_iflash_cfg2_iflash_xadr     0xFF401418U
#define DFLT_VAL_NX90_iflash_xadr            0x00000000U

#define MSK_NX90_iflash_xadr_val         0x000003ffU
#define SRT_NX90_iflash_xadr_val         0
#define DFLT_VAL_NX90_iflash_xadr_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_xadr_val 0x00000000U

/* all used bits of 'NX90_iflash_xadr': */
#define MSK_USED_BITS_NX90_iflash_xadr 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register iflash_din0 */
/* => data[31:0] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din0             0x0000001CU
#define Adr_NX90_iflash_cfg0_com_iflash_din0 0xFF001C1CU
#define Adr_NX90_iflash_cfg1_com_iflash_din0 0xFF001C9CU
#define Adr_NX90_iflash_cfg2_iflash_din0     0xFF40141CU
#define DFLT_VAL_NX90_iflash_din0            0x00000000U

#define MSK_NX90_iflash_din0_val         0xffffffffU
#define SRT_NX90_iflash_din0_val         0
#define DFLT_VAL_NX90_iflash_din0_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_din0_val 0x00000000U

/* all used bits of 'NX90_iflash_din0': */
#define MSK_USED_BITS_NX90_iflash_din0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register iflash_din1 */
/* => data[63:32] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din1             0x00000020U
#define Adr_NX90_iflash_cfg0_com_iflash_din1 0xFF001C20U
#define Adr_NX90_iflash_cfg1_com_iflash_din1 0xFF001CA0U
#define Adr_NX90_iflash_cfg2_iflash_din1     0xFF401420U
#define DFLT_VAL_NX90_iflash_din1            0x00000000U

#define MSK_NX90_iflash_din1_val         0xffffffffU
#define SRT_NX90_iflash_din1_val         0
#define DFLT_VAL_NX90_iflash_din1_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_din1_val 0x00000000U

/* all used bits of 'NX90_iflash_din1': */
#define MSK_USED_BITS_NX90_iflash_din1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register iflash_din2 */
/* => data[95:64] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din2             0x00000024U
#define Adr_NX90_iflash_cfg0_com_iflash_din2 0xFF001C24U
#define Adr_NX90_iflash_cfg1_com_iflash_din2 0xFF001CA4U
#define Adr_NX90_iflash_cfg2_iflash_din2     0xFF401424U
#define DFLT_VAL_NX90_iflash_din2            0x00000000U

#define MSK_NX90_iflash_din2_val         0xffffffffU
#define SRT_NX90_iflash_din2_val         0
#define DFLT_VAL_NX90_iflash_din2_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_din2_val 0x00000000U

/* all used bits of 'NX90_iflash_din2': */
#define MSK_USED_BITS_NX90_iflash_din2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register iflash_din3 */
/* => data[127:96] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din3             0x00000028U
#define Adr_NX90_iflash_cfg0_com_iflash_din3 0xFF001C28U
#define Adr_NX90_iflash_cfg1_com_iflash_din3 0xFF001CA8U
#define Adr_NX90_iflash_cfg2_iflash_din3     0xFF401428U
#define DFLT_VAL_NX90_iflash_din3            0x00000000U

#define MSK_NX90_iflash_din3_val         0xffffffffU
#define SRT_NX90_iflash_din3_val         0
#define DFLT_VAL_NX90_iflash_din3_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_din3_val 0x00000000U

/* all used bits of 'NX90_iflash_din3': */
#define MSK_USED_BITS_NX90_iflash_din3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register iflash_din4 */
/* => in manual mode for din */
/*    data[143:128] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din4             0x0000002CU
#define Adr_NX90_iflash_cfg0_com_iflash_din4 0xFF001C2CU
#define Adr_NX90_iflash_cfg1_com_iflash_din4 0xFF001CACU
#define Adr_NX90_iflash_cfg2_iflash_din4     0xFF40142CU
#define DFLT_VAL_NX90_iflash_din4            0x00000000U

#define MSK_NX90_iflash_din4_val         0x0000ffffU
#define SRT_NX90_iflash_din4_val         0
#define DFLT_VAL_NX90_iflash_din4_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_din4_val 0x00000000U

/* all used bits of 'NX90_iflash_din4': */
#define MSK_USED_BITS_NX90_iflash_din4 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register iflash_reset */
/* => reset flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_reset             0x00000030U
#define Adr_NX90_iflash_cfg0_com_iflash_reset 0xFF001C30U
#define Adr_NX90_iflash_cfg1_com_iflash_reset 0xFF001CB0U
#define Adr_NX90_iflash_cfg2_iflash_reset     0xFF401430U
#define DFLT_VAL_NX90_iflash_reset            0x00000000U

#define MSK_NX90_iflash_reset_reset         0x00000001U
#define SRT_NX90_iflash_reset_reset         0
#define DFLT_VAL_NX90_iflash_reset_reset    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_reset_reset 0x00000000U

/* all used bits of 'NX90_iflash_reset': */
#define MSK_USED_BITS_NX90_iflash_reset 0x00000001U

/* --------------------------------------------------------------------- */
/* Register iflash_red_cfg0 */
/* => enable redundancy page XADR[9:3] */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_red_cfg0             0x00000034U
#define Adr_NX90_iflash_cfg0_com_iflash_red_cfg0 0xFF001C34U
#define Adr_NX90_iflash_cfg1_com_iflash_red_cfg0 0xFF001CB4U
#define Adr_NX90_iflash_cfg2_iflash_red_cfg0     0xFF401434U
#define DFLT_VAL_NX90_iflash_red_cfg0            0x00000001U

#define MSK_NX90_iflash_red_cfg0_n_enb         0x00000001U
#define SRT_NX90_iflash_red_cfg0_n_enb         0
#define DFLT_VAL_NX90_iflash_red_cfg0_n_enb    0x00000001U
#define DFLT_BF_VAL_NX90_iflash_red_cfg0_n_enb 0x00000001U
#define MSK_NX90_iflash_red_cfg0_adr0          0x000000feU
#define SRT_NX90_iflash_red_cfg0_adr0          1
#define DFLT_VAL_NX90_iflash_red_cfg0_adr0     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_red_cfg0_adr0  0x00000000U

/* all used bits of 'NX90_iflash_red_cfg0': */
#define MSK_USED_BITS_NX90_iflash_red_cfg0 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register iflash_red_cfg1 */
/* => enable redundancy page XADR[9:3] */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_red_cfg1             0x00000038U
#define Adr_NX90_iflash_cfg0_com_iflash_red_cfg1 0xFF001C38U
#define Adr_NX90_iflash_cfg1_com_iflash_red_cfg1 0xFF001CB8U
#define Adr_NX90_iflash_cfg2_iflash_red_cfg1     0xFF401438U
#define DFLT_VAL_NX90_iflash_red_cfg1            0x00000001U

#define MSK_NX90_iflash_red_cfg1_n_enb         0x00000001U
#define SRT_NX90_iflash_red_cfg1_n_enb         0
#define DFLT_VAL_NX90_iflash_red_cfg1_n_enb    0x00000001U
#define DFLT_BF_VAL_NX90_iflash_red_cfg1_n_enb 0x00000001U
#define MSK_NX90_iflash_red_cfg1_adr1          0x000000feU
#define SRT_NX90_iflash_red_cfg1_adr1          1
#define DFLT_VAL_NX90_iflash_red_cfg1_adr1     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_red_cfg1_adr1  0x00000000U

/* all used bits of 'NX90_iflash_red_cfg1': */
#define MSK_USED_BITS_NX90_iflash_red_cfg1 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register iflash_ifren_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_ifren_cfg             0x0000003CU
#define Adr_NX90_iflash_cfg0_com_iflash_ifren_cfg 0xFF001C3CU
#define Adr_NX90_iflash_cfg1_com_iflash_ifren_cfg 0xFF001CBCU
#define Adr_NX90_iflash_cfg2_iflash_ifren_cfg     0xFF40143CU
#define DFLT_VAL_NX90_iflash_ifren_cfg            0x00000000U

#define MSK_NX90_iflash_ifren_cfg_ifren          0x00000001U
#define SRT_NX90_iflash_ifren_cfg_ifren          0
#define DFLT_VAL_NX90_iflash_ifren_cfg_ifren     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_ifren_cfg_ifren  0x00000000U
#define MSK_NX90_iflash_ifren_cfg_ifren1         0x00000002U
#define SRT_NX90_iflash_ifren_cfg_ifren1         1
#define DFLT_VAL_NX90_iflash_ifren_cfg_ifren1    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_ifren_cfg_ifren1 0x00000000U

/* all used bits of 'NX90_iflash_ifren_cfg': */
#define MSK_USED_BITS_NX90_iflash_ifren_cfg 0x00000003U

/* --------------------------------------------------------------------- */
/* Register iflash_din4_ecc */
/* => in manual mode for ecc calculation of din3..0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din4_ecc             0x00000040U
#define Adr_NX90_iflash_cfg0_com_iflash_din4_ecc 0xFF001C40U
#define Adr_NX90_iflash_cfg1_com_iflash_din4_ecc 0xFF001CC0U
#define Adr_NX90_iflash_cfg2_iflash_din4_ecc     0xFF401440U

#define MSK_NX90_iflash_din4_ecc_val 0x0000ffffU
#define SRT_NX90_iflash_din4_ecc_val 0

/* all used bits of 'NX90_iflash_din4_ecc': */
#define MSK_USED_BITS_NX90_iflash_din4_ecc 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register iflash_special_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_special_cfg             0x00000044U
#define Adr_NX90_iflash_cfg0_com_iflash_special_cfg 0xFF001C44U
#define Adr_NX90_iflash_cfg1_com_iflash_special_cfg 0xFF001CC4U
#define Adr_NX90_iflash_cfg2_iflash_special_cfg     0xFF401444U
#define DFLT_VAL_NX90_iflash_special_cfg            0x00000001U

#define MSK_NX90_iflash_special_cfg_tmr         0x00000001U
#define SRT_NX90_iflash_special_cfg_tmr         0
#define DFLT_VAL_NX90_iflash_special_cfg_tmr    0x00000001U
#define DFLT_BF_VAL_NX90_iflash_special_cfg_tmr 0x00000001U
#define MSK_NX90_iflash_special_cfg_slm         0x00000002U
#define SRT_NX90_iflash_special_cfg_slm         1
#define DFLT_VAL_NX90_iflash_special_cfg_slm    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_special_cfg_slm 0x00000000U

/* all used bits of 'NX90_iflash_special_cfg': */
#define MSK_USED_BITS_NX90_iflash_special_cfg 0x00000003U

/* --------------------------------------------------------------------- */
/* Register iflash_protection_info */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_protection_info             0x00000048U
#define Adr_NX90_iflash_cfg0_com_iflash_protection_info 0xFF001C48U
#define Adr_NX90_iflash_cfg1_com_iflash_protection_info 0xFF001CC8U
#define Adr_NX90_iflash_cfg2_iflash_protection_info     0xFF401448U
#define DFLT_VAL_NX90_iflash_protection_info            0x00000000U

#define MSK_NX90_iflash_protection_info_write_dw         0x00000001U
#define SRT_NX90_iflash_protection_info_write_dw         0
#define DFLT_VAL_NX90_iflash_protection_info_write_dw    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_protection_info_write_dw 0x00000000U
#define MSK_NX90_iflash_protection_info_write_up         0x00000002U
#define SRT_NX90_iflash_protection_info_write_up         1
#define DFLT_VAL_NX90_iflash_protection_info_write_up    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_protection_info_write_up 0x00000000U
#define MSK_NX90_iflash_protection_info_read_dw          0x00000004U
#define SRT_NX90_iflash_protection_info_read_dw          2
#define DFLT_VAL_NX90_iflash_protection_info_read_dw     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_protection_info_read_dw  0x00000000U
#define MSK_NX90_iflash_protection_info_read_up          0x00000008U
#define SRT_NX90_iflash_protection_info_read_up          3
#define DFLT_VAL_NX90_iflash_protection_info_read_up     0x00000000U
#define DFLT_BF_VAL_NX90_iflash_protection_info_read_up  0x00000000U

/* all used bits of 'NX90_iflash_protection_info': */
#define MSK_USED_BITS_NX90_iflash_protection_info 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register iflash_write_protection_main */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_write_protection_main             0x0000004CU
#define Adr_NX90_iflash_cfg0_com_iflash_write_protection_main 0xFF001C4CU
#define Adr_NX90_iflash_cfg1_com_iflash_write_protection_main 0xFF001CCCU
#define Adr_NX90_iflash_cfg2_iflash_write_protection_main     0xFF40144CU
#define DFLT_VAL_NX90_iflash_write_protection_main            0x00000000U

#define MSK_NX90_iflash_write_protection_main_val         0xffffffffU
#define SRT_NX90_iflash_write_protection_main_val         0
#define DFLT_VAL_NX90_iflash_write_protection_main_val    0x00000000U
#define DFLT_BF_VAL_NX90_iflash_write_protection_main_val 0x00000000U

/* all used bits of 'NX90_iflash_write_protection_main': */
#define MSK_USED_BITS_NX90_iflash_write_protection_main 0xffffffffU


/* ===================================================================== */

/* AREA handshake_ctrl */
/* Area of handshake_ctrl_com */

/* ===================================================================== */

#define Addr_NX90_handshake_ctrl_com 0xFF001D00U

/* --------------------------------------------------------------------- */
/* Register handshake_base_addr */
/* => Handshake Cell address base configuration register. */
/*    Handshake Cells are located in INTRAMHS and can be mapped to any 256 byte border. */
/*    Related master of an access to Handshake Cells is detected by the access to one of three INTRAMHS Mirrors: */
/*    Access via INTRAMHS dpm_mirror is interpreted by Handshake Cells as DPM access. This is regardless whether */
/*    the access was really initiated by DPM master or not. E.g. if xPIC uses dpm_mirror of INTRAMHS for Handshake Cell */
/*    access, this will be interpreted as DPM access and not as xPIC access. */
/*    INTRAMHS can be accessed by 4 different mirrors which are sub address areas of area HANDSHAKE. Furthermore */
/*    HANDSHAKE address area is mirrored multiple inside whole netX address area. Each HANDSHAKE address area */
/*    provides all 4 INTRAMHS mirrors. */
/*    There is one INTRAMHS mirror for each IRQ capable system master (DPM, xPIC, ARM) and one to access whole */
/*    INTRAMHS area without any influence to HANDSHAKE_CTRL unit. However, each system master is able to address */
/*    each INTRAMHS mirror. IRQs are always generated in dependency of mirror addressed by a master on access. IRQ */
/*    generation does not depend on the master running an access. */
/*    Handshake Cell Setup example: */
/*      1. Configure Handshake Cell area offset (e.g. offset 0x200, set base256 to 0x2). */
/*      2. Configure used Handshake Cell width (8bit or 16 bit) in 'handshake_hscX_ctrl' registers. */
/*      3. Configure used Handshake Cells master association (e.g. ARM<->DPM) in 'handshake_hscX_ctrl' registers. */
/*    Example: typical ARM<-> DPM Handshake interaction: */
/*      1. ARM writes request to Handshake Cell N (address: intramhs_arm_mirror+base256*256+N*4). */
/*         -> DPM receives IRQ */
/*      2. DPM reads Handshake Cell N (address: intramhs_dpm_mirror+base256*256+N*4). */
/*         -> DPM IRQ clear. */
/*      3. DPM writes acknowledge to Handshake Cell N (address: intramhs_dpm_mirror+base256*256+N*4). */
/*         -> ARM receives IRQ */
/*      4. ARM reads Handshake Cell N (address: intramhs_dpm_mirror+base256*256+N*4). */
/*         -> ARM IRQ clear. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_base_addr                0x00000000U
#define Adr_NX90_handshake_ctrl_com_handshake_base_addr 0xFF001D00U
#define Adr_NX90_handshake_base_addr                    0xFF001D00U
#define DFLT_VAL_NX90_handshake_base_addr               0x40000000U

#define MSK_NX90_handshake_base_addr_zero_ro             0x000000ffU
#define SRT_NX90_handshake_base_addr_zero_ro             0
#define DFLT_VAL_NX90_handshake_base_addr_zero_ro        0x00000000U
#define DFLT_BF_VAL_NX90_handshake_base_addr_zero_ro     0x00000000U
#define MSK_NX90_handshake_base_addr_base256             0x00007f00U
#define SRT_NX90_handshake_base_addr_base256             8
#define DFLT_VAL_NX90_handshake_base_addr_base256        0x00000000U
#define DFLT_BF_VAL_NX90_handshake_base_addr_base256     0x00000000U
#define MSK_NX90_handshake_base_addr_netx50_comp         0x40000000U
#define SRT_NX90_handshake_base_addr_netx50_comp         30
#define DFLT_VAL_NX90_handshake_base_addr_netx50_comp    0x40000000U
#define DFLT_BF_VAL_NX90_handshake_base_addr_netx50_comp 0x00000001U
#define MSK_NX90_handshake_base_addr_enable              0x80000000U
#define SRT_NX90_handshake_base_addr_enable              31
#define DFLT_VAL_NX90_handshake_base_addr_enable         0x00000000U
#define DFLT_BF_VAL_NX90_handshake_base_addr_enable      0x00000000U

/* all used bits of 'NX90_handshake_base_addr': */
#define MSK_USED_BITS_NX90_handshake_base_addr 0xc0007fffU

/* --------------------------------------------------------------------- */
/* Register handshake_cfg */
/* => Global handshake configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_cfg                0x00000004U
#define Adr_NX90_handshake_ctrl_com_handshake_cfg 0xFF001D04U
#define Adr_NX90_handshake_cfg                    0xFF001D04U
#define DFLT_VAL_NX90_handshake_cfg               0x00000000U

#define MSK_NX90_handshake_cfg_dis_irq_rst_rd_xpic         0x00000001U
#define SRT_NX90_handshake_cfg_dis_irq_rst_rd_xpic         0
#define DFLT_VAL_NX90_handshake_cfg_dis_irq_rst_rd_xpic    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_cfg_dis_irq_rst_rd_xpic 0x00000000U
#define MSK_NX90_handshake_cfg_dis_irq_rst_rd_arm          0x00000002U
#define SRT_NX90_handshake_cfg_dis_irq_rst_rd_arm          1
#define DFLT_VAL_NX90_handshake_cfg_dis_irq_rst_rd_arm     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_cfg_dis_irq_rst_rd_arm  0x00000000U
#define MSK_NX90_handshake_cfg_dis_irq_rst_rd_dpm          0x00000004U
#define SRT_NX90_handshake_cfg_dis_irq_rst_rd_dpm          2
#define DFLT_VAL_NX90_handshake_cfg_dis_irq_rst_rd_dpm     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_cfg_dis_irq_rst_rd_dpm  0x00000000U

/* all used bits of 'NX90_handshake_cfg': */
#define MSK_USED_BITS_NX90_handshake_cfg 0x00000007U

/* --------------------------------------------------------------------- */
/* Register handshake_dpm_irq_raw_clear */
/* => Handshake Cell Raw Interrupt for DPM register. */
/*    Read access shows status of unmasked IRQs. */
/*    Write access with '1' clears the appropriate IRQ. */
/*    Note: */
/*       The DPM IRQ registers are typically not used here. Their function is also available */
/*       by the DPM_HOST_INT_STAT and DPM_HOST_INT_EN registers of the DPM module (area DPM). */
/*       DPM related IRQ status can also be read from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQs can also be cleared from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQ masks can also be programmed by the pm_firmware_irq_mask/DPM_HOST_INT_EN register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_dpm_irq_raw_clear                0x00000010U
#define Adr_NX90_handshake_ctrl_com_handshake_dpm_irq_raw_clear 0xFF001D10U
#define Adr_NX90_handshake_dpm_irq_raw_clear                    0xFF001D10U
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear               0x00000000U

#define MSK_NX90_handshake_dpm_irq_raw_clear_vector         0x000000ffU
#define SRT_NX90_handshake_dpm_irq_raw_clear_vector         0
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_vector    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_vector 0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc0           0x00000100U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc0           8
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc0      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc0   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc1           0x00000200U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc1           9
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc1      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc1   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc2           0x00000400U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc2           10
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc2      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc2   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc3           0x00000800U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc3           11
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc3      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc3   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc4           0x00001000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc4           12
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc4      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc4   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc5           0x00002000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc5           13
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc5      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc5   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc6           0x00004000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc6           14
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc6      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc6   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc7           0x00008000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc7           15
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc7      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc7   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc8           0x00010000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc8           16
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc8      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc8   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc9           0x00020000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc9           17
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc9      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc9   0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc10          0x00040000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc10          18
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc10     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc10  0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc11          0x00080000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc11          19
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc11     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc11  0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc12          0x00100000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc12          20
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc12     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc12  0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc13          0x00200000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc13          21
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc13     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc13  0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc14          0x00400000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc14          22
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc14     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc14  0x00000000U
#define MSK_NX90_handshake_dpm_irq_raw_clear_hsc15          0x00800000U
#define SRT_NX90_handshake_dpm_irq_raw_clear_hsc15          23
#define DFLT_VAL_NX90_handshake_dpm_irq_raw_clear_hsc15     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_raw_clear_hsc15  0x00000000U

/* all used bits of 'NX90_handshake_dpm_irq_raw_clear': */
#define MSK_USED_BITS_NX90_handshake_dpm_irq_raw_clear 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register handshake_dpm_irq_masked */
/* => Handshake Cell Masked Interrupt for DPM register. */
/*    Shows status of masked IRQs (as connected to DPM/host). */
/*    Note: */
/*       The DPM IRQ registers are typically not used here. Their function is also available */
/*       by the DPM_HOST_INT_STAT and DPM_HOST_INT_EN registers of the DPM module (area DPM). */
/*       DPM related IRQ status can also be read from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQs can also be cleared from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQ masks can also be programmed by the pm_firmware_irq_mask/DPM_HOST_INT_EN register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_dpm_irq_masked                0x00000014U
#define Adr_NX90_handshake_ctrl_com_handshake_dpm_irq_masked 0xFF001D14U
#define Adr_NX90_handshake_dpm_irq_masked                    0xFF001D14U

#define MSK_NX90_handshake_dpm_irq_masked_vector 0x000000ffU
#define SRT_NX90_handshake_dpm_irq_masked_vector 0
#define MSK_NX90_handshake_dpm_irq_masked_hsc0   0x00000100U
#define SRT_NX90_handshake_dpm_irq_masked_hsc0   8
#define MSK_NX90_handshake_dpm_irq_masked_hsc1   0x00000200U
#define SRT_NX90_handshake_dpm_irq_masked_hsc1   9
#define MSK_NX90_handshake_dpm_irq_masked_hsc2   0x00000400U
#define SRT_NX90_handshake_dpm_irq_masked_hsc2   10
#define MSK_NX90_handshake_dpm_irq_masked_hsc3   0x00000800U
#define SRT_NX90_handshake_dpm_irq_masked_hsc3   11
#define MSK_NX90_handshake_dpm_irq_masked_hsc4   0x00001000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc4   12
#define MSK_NX90_handshake_dpm_irq_masked_hsc5   0x00002000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc5   13
#define MSK_NX90_handshake_dpm_irq_masked_hsc6   0x00004000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc6   14
#define MSK_NX90_handshake_dpm_irq_masked_hsc7   0x00008000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc7   15
#define MSK_NX90_handshake_dpm_irq_masked_hsc8   0x00010000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc8   16
#define MSK_NX90_handshake_dpm_irq_masked_hsc9   0x00020000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc9   17
#define MSK_NX90_handshake_dpm_irq_masked_hsc10  0x00040000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc10  18
#define MSK_NX90_handshake_dpm_irq_masked_hsc11  0x00080000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc11  19
#define MSK_NX90_handshake_dpm_irq_masked_hsc12  0x00100000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc12  20
#define MSK_NX90_handshake_dpm_irq_masked_hsc13  0x00200000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc13  21
#define MSK_NX90_handshake_dpm_irq_masked_hsc14  0x00400000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc14  22
#define MSK_NX90_handshake_dpm_irq_masked_hsc15  0x00800000U
#define SRT_NX90_handshake_dpm_irq_masked_hsc15  23

/* all used bits of 'NX90_handshake_dpm_irq_masked': */
#define MSK_USED_BITS_NX90_handshake_dpm_irq_masked 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register handshake_dpm_irq_msk_set */
/* => Handshake Cell Interrupt Mask Enable for DPM register. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Note: */
/*       The DPM IRQ registers are typically not used here. Their function is also available */
/*       by the DPM_HOST_INT_STAT and DPM_HOST_INT_EN registers of the DPM module (area DPM). */
/*       DPM related IRQ status can also be read from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQs can also be cleared from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQ masks can also be programmed by the pm_firmware_irq_mask/DPM_HOST_INT_EN register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_dpm_irq_msk_set                0x00000018U
#define Adr_NX90_handshake_ctrl_com_handshake_dpm_irq_msk_set 0xFF001D18U
#define Adr_NX90_handshake_dpm_irq_msk_set                    0xFF001D18U
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set               0x00000000U

#define MSK_NX90_handshake_dpm_irq_msk_set_hsc0          0x00000100U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc0          8
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc0     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc0  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc1          0x00000200U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc1          9
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc1     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc1  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc2          0x00000400U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc2          10
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc2     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc2  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc3          0x00000800U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc3          11
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc3     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc3  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc4          0x00001000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc4          12
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc4     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc4  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc5          0x00002000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc5          13
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc5     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc5  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc6          0x00004000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc6          14
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc6     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc6  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc7          0x00008000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc7          15
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc7     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc7  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc8          0x00010000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc8          16
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc8     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc8  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc9          0x00020000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc9          17
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc9     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc9  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc10         0x00040000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc10         18
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc10    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc10 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc11         0x00080000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc11         19
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc11    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc11 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc12         0x00100000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc12         20
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc12    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc12 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc13         0x00200000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc13         21
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc13    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc13 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc14         0x00400000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc14         22
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc14    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc14 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_set_hsc15         0x00800000U
#define SRT_NX90_handshake_dpm_irq_msk_set_hsc15         23
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_set_hsc15    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_set_hsc15 0x00000000U

/* all used bits of 'NX90_handshake_dpm_irq_msk_set': */
#define MSK_USED_BITS_NX90_handshake_dpm_irq_msk_set 0x00ffff00U

/* --------------------------------------------------------------------- */
/* Register handshake_dpm_irq_msk_reset */
/* => Handshake Cell Interrupt Mask Disable for DPM register. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Note: */
/*       The DPM IRQ registers are typically not used here. Their function is also available */
/*       by the DPM_HOST_INT_STAT and DPM_HOST_INT_EN registers of the DPM module (area DPM). */
/*       DPM related IRQ status can also be read from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQs can also be cleared from dpm_firmware_irq_raw/DPM_HOST_INT_STAT register. */
/*       DPM related IRQ masks can also be programmed by the pm_firmware_irq_mask/DPM_HOST_INT_EN register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_dpm_irq_msk_reset                0x0000001CU
#define Adr_NX90_handshake_ctrl_com_handshake_dpm_irq_msk_reset 0xFF001D1CU
#define Adr_NX90_handshake_dpm_irq_msk_reset                    0xFF001D1CU
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset               0x00000000U

#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc0          0x00000100U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc0          8
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc0     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc0  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc1          0x00000200U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc1          9
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc1     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc1  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc2          0x00000400U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc2          10
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc2     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc2  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc3          0x00000800U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc3          11
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc3     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc3  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc4          0x00001000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc4          12
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc4     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc4  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc5          0x00002000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc5          13
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc5     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc5  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc6          0x00004000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc6          14
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc6     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc6  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc7          0x00008000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc7          15
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc7     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc7  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc8          0x00010000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc8          16
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc8     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc8  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc9          0x00020000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc9          17
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc9     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc9  0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc10         0x00040000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc10         18
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc10    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc10 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc11         0x00080000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc11         19
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc11    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc11 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc12         0x00100000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc12         20
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc12    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc12 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc13         0x00200000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc13         21
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc13    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc13 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc14         0x00400000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc14         22
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc14    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc14 0x00000000U
#define MSK_NX90_handshake_dpm_irq_msk_reset_hsc15         0x00800000U
#define SRT_NX90_handshake_dpm_irq_msk_reset_hsc15         23
#define DFLT_VAL_NX90_handshake_dpm_irq_msk_reset_hsc15    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_dpm_irq_msk_reset_hsc15 0x00000000U

/* all used bits of 'NX90_handshake_dpm_irq_msk_reset': */
#define MSK_USED_BITS_NX90_handshake_dpm_irq_msk_reset 0x00ffff00U

/* --------------------------------------------------------------------- */
/* Register handshake_arm_irq_raw_clear */
/* => Handshake Cell Raw Interrupt for ARM register. */
/*    Read access shows status of unmasked IRQs. */
/*    Write access with '1' clears the appropriate IRQ. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_arm_irq_raw_clear                0x00000020U
#define Adr_NX90_handshake_ctrl_com_handshake_arm_irq_raw_clear 0xFF001D20U
#define Adr_NX90_handshake_arm_irq_raw_clear                    0xFF001D20U
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear               0x00000000U

#define MSK_NX90_handshake_arm_irq_raw_clear_vector         0x000000ffU
#define SRT_NX90_handshake_arm_irq_raw_clear_vector         0
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_vector    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_vector 0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc0           0x00000100U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc0           8
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc0      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc0   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc1           0x00000200U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc1           9
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc1      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc1   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc2           0x00000400U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc2           10
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc2      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc2   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc3           0x00000800U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc3           11
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc3      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc3   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc4           0x00001000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc4           12
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc4      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc4   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc5           0x00002000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc5           13
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc5      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc5   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc6           0x00004000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc6           14
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc6      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc6   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc7           0x00008000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc7           15
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc7      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc7   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc8           0x00010000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc8           16
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc8      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc8   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc9           0x00020000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc9           17
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc9      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc9   0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc10          0x00040000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc10          18
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc10     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc10  0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc11          0x00080000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc11          19
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc11     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc11  0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc12          0x00100000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc12          20
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc12     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc12  0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc13          0x00200000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc13          21
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc13     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc13  0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc14          0x00400000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc14          22
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc14     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc14  0x00000000U
#define MSK_NX90_handshake_arm_irq_raw_clear_hsc15          0x00800000U
#define SRT_NX90_handshake_arm_irq_raw_clear_hsc15          23
#define DFLT_VAL_NX90_handshake_arm_irq_raw_clear_hsc15     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_raw_clear_hsc15  0x00000000U

/* all used bits of 'NX90_handshake_arm_irq_raw_clear': */
#define MSK_USED_BITS_NX90_handshake_arm_irq_raw_clear 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register handshake_arm_irq_masked */
/* => Handshake Cell Masked Interrupt for ARM register. */
/*    Shows status of masked IRQs (as connected to ARM). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_arm_irq_masked                0x00000024U
#define Adr_NX90_handshake_ctrl_com_handshake_arm_irq_masked 0xFF001D24U
#define Adr_NX90_handshake_arm_irq_masked                    0xFF001D24U

#define MSK_NX90_handshake_arm_irq_masked_vector 0x000000ffU
#define SRT_NX90_handshake_arm_irq_masked_vector 0
#define MSK_NX90_handshake_arm_irq_masked_hsc0   0x00000100U
#define SRT_NX90_handshake_arm_irq_masked_hsc0   8
#define MSK_NX90_handshake_arm_irq_masked_hsc1   0x00000200U
#define SRT_NX90_handshake_arm_irq_masked_hsc1   9
#define MSK_NX90_handshake_arm_irq_masked_hsc2   0x00000400U
#define SRT_NX90_handshake_arm_irq_masked_hsc2   10
#define MSK_NX90_handshake_arm_irq_masked_hsc3   0x00000800U
#define SRT_NX90_handshake_arm_irq_masked_hsc3   11
#define MSK_NX90_handshake_arm_irq_masked_hsc4   0x00001000U
#define SRT_NX90_handshake_arm_irq_masked_hsc4   12
#define MSK_NX90_handshake_arm_irq_masked_hsc5   0x00002000U
#define SRT_NX90_handshake_arm_irq_masked_hsc5   13
#define MSK_NX90_handshake_arm_irq_masked_hsc6   0x00004000U
#define SRT_NX90_handshake_arm_irq_masked_hsc6   14
#define MSK_NX90_handshake_arm_irq_masked_hsc7   0x00008000U
#define SRT_NX90_handshake_arm_irq_masked_hsc7   15
#define MSK_NX90_handshake_arm_irq_masked_hsc8   0x00010000U
#define SRT_NX90_handshake_arm_irq_masked_hsc8   16
#define MSK_NX90_handshake_arm_irq_masked_hsc9   0x00020000U
#define SRT_NX90_handshake_arm_irq_masked_hsc9   17
#define MSK_NX90_handshake_arm_irq_masked_hsc10  0x00040000U
#define SRT_NX90_handshake_arm_irq_masked_hsc10  18
#define MSK_NX90_handshake_arm_irq_masked_hsc11  0x00080000U
#define SRT_NX90_handshake_arm_irq_masked_hsc11  19
#define MSK_NX90_handshake_arm_irq_masked_hsc12  0x00100000U
#define SRT_NX90_handshake_arm_irq_masked_hsc12  20
#define MSK_NX90_handshake_arm_irq_masked_hsc13  0x00200000U
#define SRT_NX90_handshake_arm_irq_masked_hsc13  21
#define MSK_NX90_handshake_arm_irq_masked_hsc14  0x00400000U
#define SRT_NX90_handshake_arm_irq_masked_hsc14  22
#define MSK_NX90_handshake_arm_irq_masked_hsc15  0x00800000U
#define SRT_NX90_handshake_arm_irq_masked_hsc15  23

/* all used bits of 'NX90_handshake_arm_irq_masked': */
#define MSK_USED_BITS_NX90_handshake_arm_irq_masked 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register handshake_arm_irq_msk_set */
/* => Handshake Cell Interrupt Mask Enable for ARM register. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_arm_irq_msk_set                0x00000028U
#define Adr_NX90_handshake_ctrl_com_handshake_arm_irq_msk_set 0xFF001D28U
#define Adr_NX90_handshake_arm_irq_msk_set                    0xFF001D28U
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set               0x00000000U

#define MSK_NX90_handshake_arm_irq_msk_set_hsc0          0x00000100U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc0          8
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc0     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc0  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc1          0x00000200U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc1          9
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc1     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc1  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc2          0x00000400U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc2          10
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc2     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc2  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc3          0x00000800U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc3          11
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc3     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc3  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc4          0x00001000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc4          12
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc4     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc4  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc5          0x00002000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc5          13
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc5     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc5  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc6          0x00004000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc6          14
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc6     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc6  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc7          0x00008000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc7          15
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc7     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc7  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc8          0x00010000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc8          16
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc8     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc8  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc9          0x00020000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc9          17
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc9     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc9  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc10         0x00040000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc10         18
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc10    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc10 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc11         0x00080000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc11         19
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc11    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc11 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc12         0x00100000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc12         20
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc12    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc12 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc13         0x00200000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc13         21
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc13    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc13 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc14         0x00400000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc14         22
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc14    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc14 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_set_hsc15         0x00800000U
#define SRT_NX90_handshake_arm_irq_msk_set_hsc15         23
#define DFLT_VAL_NX90_handshake_arm_irq_msk_set_hsc15    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_set_hsc15 0x00000000U

/* all used bits of 'NX90_handshake_arm_irq_msk_set': */
#define MSK_USED_BITS_NX90_handshake_arm_irq_msk_set 0x00ffff00U

/* --------------------------------------------------------------------- */
/* Register handshake_arm_irq_msk_reset */
/* => Handshake Cell Interrupt Mask Disable for ARM register. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_arm_irq_msk_reset                0x0000002CU
#define Adr_NX90_handshake_ctrl_com_handshake_arm_irq_msk_reset 0xFF001D2CU
#define Adr_NX90_handshake_arm_irq_msk_reset                    0xFF001D2CU
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset               0x00000000U

#define MSK_NX90_handshake_arm_irq_msk_reset_hsc0          0x00000100U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc0          8
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc0     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc0  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc1          0x00000200U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc1          9
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc1     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc1  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc2          0x00000400U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc2          10
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc2     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc2  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc3          0x00000800U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc3          11
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc3     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc3  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc4          0x00001000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc4          12
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc4     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc4  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc5          0x00002000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc5          13
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc5     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc5  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc6          0x00004000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc6          14
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc6     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc6  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc7          0x00008000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc7          15
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc7     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc7  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc8          0x00010000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc8          16
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc8     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc8  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc9          0x00020000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc9          17
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc9     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc9  0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc10         0x00040000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc10         18
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc10    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc10 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc11         0x00080000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc11         19
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc11    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc11 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc12         0x00100000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc12         20
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc12    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc12 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc13         0x00200000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc13         21
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc13    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc13 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc14         0x00400000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc14         22
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc14    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc14 0x00000000U
#define MSK_NX90_handshake_arm_irq_msk_reset_hsc15         0x00800000U
#define SRT_NX90_handshake_arm_irq_msk_reset_hsc15         23
#define DFLT_VAL_NX90_handshake_arm_irq_msk_reset_hsc15    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_arm_irq_msk_reset_hsc15 0x00000000U

/* all used bits of 'NX90_handshake_arm_irq_msk_reset': */
#define MSK_USED_BITS_NX90_handshake_arm_irq_msk_reset 0x00ffff00U

/* --------------------------------------------------------------------- */
/* Register handshake_xpic_irq_raw_clear */
/* => Handshake Cell Raw Interrupt for xPIC register. */
/*    Read access shows status of unmasked IRQs. */
/*    Write access with '1' clears the appropriate IRQ. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_xpic_irq_raw_clear                0x00000030U
#define Adr_NX90_handshake_ctrl_com_handshake_xpic_irq_raw_clear 0xFF001D30U
#define Adr_NX90_handshake_xpic_irq_raw_clear                    0xFF001D30U
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear               0x00000000U

#define MSK_NX90_handshake_xpic_irq_raw_clear_vector         0x000000ffU
#define SRT_NX90_handshake_xpic_irq_raw_clear_vector         0
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_vector    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_vector 0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc0           0x00000100U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc0           8
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc0      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc0   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc1           0x00000200U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc1           9
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc1      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc1   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc2           0x00000400U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc2           10
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc2      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc2   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc3           0x00000800U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc3           11
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc3      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc3   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc4           0x00001000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc4           12
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc4      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc4   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc5           0x00002000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc5           13
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc5      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc5   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc6           0x00004000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc6           14
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc6      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc6   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc7           0x00008000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc7           15
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc7      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc7   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc8           0x00010000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc8           16
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc8      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc8   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc9           0x00020000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc9           17
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc9      0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc9   0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc10          0x00040000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc10          18
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc10     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc10  0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc11          0x00080000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc11          19
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc11     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc11  0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc12          0x00100000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc12          20
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc12     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc12  0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc13          0x00200000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc13          21
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc13     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc13  0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc14          0x00400000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc14          22
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc14     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc14  0x00000000U
#define MSK_NX90_handshake_xpic_irq_raw_clear_hsc15          0x00800000U
#define SRT_NX90_handshake_xpic_irq_raw_clear_hsc15          23
#define DFLT_VAL_NX90_handshake_xpic_irq_raw_clear_hsc15     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_raw_clear_hsc15  0x00000000U

/* all used bits of 'NX90_handshake_xpic_irq_raw_clear': */
#define MSK_USED_BITS_NX90_handshake_xpic_irq_raw_clear 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register handshake_xpic_irq_masked */
/* => Handshake Cell Masked Interrupt for xPIC register. */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_xpic_irq_masked                0x00000034U
#define Adr_NX90_handshake_ctrl_com_handshake_xpic_irq_masked 0xFF001D34U
#define Adr_NX90_handshake_xpic_irq_masked                    0xFF001D34U

#define MSK_NX90_handshake_xpic_irq_masked_vector 0x000000ffU
#define SRT_NX90_handshake_xpic_irq_masked_vector 0
#define MSK_NX90_handshake_xpic_irq_masked_hsc0   0x00000100U
#define SRT_NX90_handshake_xpic_irq_masked_hsc0   8
#define MSK_NX90_handshake_xpic_irq_masked_hsc1   0x00000200U
#define SRT_NX90_handshake_xpic_irq_masked_hsc1   9
#define MSK_NX90_handshake_xpic_irq_masked_hsc2   0x00000400U
#define SRT_NX90_handshake_xpic_irq_masked_hsc2   10
#define MSK_NX90_handshake_xpic_irq_masked_hsc3   0x00000800U
#define SRT_NX90_handshake_xpic_irq_masked_hsc3   11
#define MSK_NX90_handshake_xpic_irq_masked_hsc4   0x00001000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc4   12
#define MSK_NX90_handshake_xpic_irq_masked_hsc5   0x00002000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc5   13
#define MSK_NX90_handshake_xpic_irq_masked_hsc6   0x00004000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc6   14
#define MSK_NX90_handshake_xpic_irq_masked_hsc7   0x00008000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc7   15
#define MSK_NX90_handshake_xpic_irq_masked_hsc8   0x00010000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc8   16
#define MSK_NX90_handshake_xpic_irq_masked_hsc9   0x00020000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc9   17
#define MSK_NX90_handshake_xpic_irq_masked_hsc10  0x00040000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc10  18
#define MSK_NX90_handshake_xpic_irq_masked_hsc11  0x00080000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc11  19
#define MSK_NX90_handshake_xpic_irq_masked_hsc12  0x00100000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc12  20
#define MSK_NX90_handshake_xpic_irq_masked_hsc13  0x00200000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc13  21
#define MSK_NX90_handshake_xpic_irq_masked_hsc14  0x00400000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc14  22
#define MSK_NX90_handshake_xpic_irq_masked_hsc15  0x00800000U
#define SRT_NX90_handshake_xpic_irq_masked_hsc15  23

/* all used bits of 'NX90_handshake_xpic_irq_masked': */
#define MSK_USED_BITS_NX90_handshake_xpic_irq_masked 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register handshake_xpic_irq_msk_set */
/* => Handshake Cell Interrupt Mask Enable for xPIC register. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_xpic_irq_msk_set                0x00000038U
#define Adr_NX90_handshake_ctrl_com_handshake_xpic_irq_msk_set 0xFF001D38U
#define Adr_NX90_handshake_xpic_irq_msk_set                    0xFF001D38U
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set               0x00000000U

#define MSK_NX90_handshake_xpic_irq_msk_set_hsc0          0x00000100U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc0          8
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc0     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc0  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc1          0x00000200U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc1          9
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc1     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc1  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc2          0x00000400U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc2          10
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc2     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc2  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc3          0x00000800U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc3          11
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc3     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc3  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc4          0x00001000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc4          12
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc4     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc4  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc5          0x00002000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc5          13
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc5     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc5  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc6          0x00004000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc6          14
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc6     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc6  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc7          0x00008000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc7          15
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc7     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc7  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc8          0x00010000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc8          16
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc8     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc8  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc9          0x00020000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc9          17
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc9     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc9  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc10         0x00040000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc10         18
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc10    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc10 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc11         0x00080000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc11         19
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc11    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc11 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc12         0x00100000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc12         20
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc12    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc12 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc13         0x00200000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc13         21
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc13    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc13 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc14         0x00400000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc14         22
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc14    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc14 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_set_hsc15         0x00800000U
#define SRT_NX90_handshake_xpic_irq_msk_set_hsc15         23
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_set_hsc15    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_set_hsc15 0x00000000U

/* all used bits of 'NX90_handshake_xpic_irq_msk_set': */
#define MSK_USED_BITS_NX90_handshake_xpic_irq_msk_set 0x00ffff00U

/* --------------------------------------------------------------------- */
/* Register handshake_xpic_irq_msk_reset */
/* => Handshake Cell Interrupt Mask Disable for xPIC register. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_xpic_irq_msk_reset                0x0000003CU
#define Adr_NX90_handshake_ctrl_com_handshake_xpic_irq_msk_reset 0xFF001D3CU
#define Adr_NX90_handshake_xpic_irq_msk_reset                    0xFF001D3CU
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset               0x00000000U

#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc0          0x00000100U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc0          8
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc0     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc0  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc1          0x00000200U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc1          9
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc1     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc1  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc2          0x00000400U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc2          10
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc2     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc2  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc3          0x00000800U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc3          11
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc3     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc3  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc4          0x00001000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc4          12
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc4     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc4  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc5          0x00002000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc5          13
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc5     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc5  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc6          0x00004000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc6          14
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc6     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc6  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc7          0x00008000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc7          15
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc7     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc7  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc8          0x00010000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc8          16
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc8     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc8  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc9          0x00020000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc9          17
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc9     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc9  0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc10         0x00040000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc10         18
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc10    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc10 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc11         0x00080000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc11         19
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc11    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc11 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc12         0x00100000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc12         20
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc12    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc12 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc13         0x00200000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc13         21
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc13    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc13 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc14         0x00400000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc14         22
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc14    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc14 0x00000000U
#define MSK_NX90_handshake_xpic_irq_msk_reset_hsc15         0x00800000U
#define SRT_NX90_handshake_xpic_irq_msk_reset_hsc15         23
#define DFLT_VAL_NX90_handshake_xpic_irq_msk_reset_hsc15    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_xpic_irq_msk_reset_hsc15 0x00000000U

/* all used bits of 'NX90_handshake_xpic_irq_msk_reset': */
#define MSK_USED_BITS_NX90_handshake_xpic_irq_msk_reset 0x00ffff00U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc0_ctrl */
/* => Handshake Cell 0 Control Register. */
/*    Handshake data width can be configured individually for each Handshake Cell. */
/*    In the 'mode' bit field each Handshake Cell can be enabled or disabled and a handshake */
/*    path (i.e. participating masters) can be configured individually. */
/*    When a Handshake Cell is enabled there are certain bytes writable only by certain related masters (view 'mode' description). */
/*    Handshake Cell data mapping and read-only behaviour is netx50 compatible. Handshake Cell IRQ generation can */
/*    be done netx50 or netx10 compatible by programming the 'netx50_comp' bit inside the 'handshake_base_addr' register. */
/*    Default is netx50 behaviour. */
/*    Handshake Cell IRQ behaviour of netx10: */
/*       A Handshake Cell IRQ will always be generated when data is written */
/*       to any part (byte, 16bit or 32bit word) of the 32bit area the related Handshake Cell is */
/*       located (inside INTRAMHS). I.e. an IRQ is also generated when data is written to read-only */
/*       or data-memory parts of the 32bit Handshake Cell area. */
/*       A Handshake Cell IRQ will always be cleared when data is read from any part of the 32bit */
/*       Handshake Cell area (reset-on-read). */
/*    Handshake Cell IRQ behaviour of netx50: */
/*       A Handshake Cell IRQ will only be generated when data is written to the participating */
/*       part (8bit Handshake Cell: byte, 16bit Handshake Cell: 16bit word) of the 32bit area */
/*       the related Handshake Cell is located (inside INTRAMHS) which is not read-only. I.e. an IRQ */
/*       is not generated when data is written to read-only or data-memory parts of the 32bit */
/*       Handshake Cell area. */
/*       A Handshake Cell IRQ will only be cleared when data is read from any participating */
/*       read-only part of the 32bit Handshake Cell area. I.e. also a byte-read from a 16bit */
/*       Handshake Cell read-only part will clear the related IRQ (reset-on-read). */
/*    Note: */
/*       The reset-on-read function can be disabled (since netX4000). Refer to the 'dis_irq_rst_rd' bits of the 'handshake_cfg' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc0_ctrl                0x00000080U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc0_ctrl 0xFF001D80U
#define Adr_NX90_handshake_hsc0_ctrl                    0xFF001D80U
#define DFLT_VAL_NX90_handshake_hsc0_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc0_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc0_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc0_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc0_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc0_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc0_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc0_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc0_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc0_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc0_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc1_ctrl */
/* => Handshake Cell 1 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc1_ctrl                0x00000084U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc1_ctrl 0xFF001D84U
#define Adr_NX90_handshake_hsc1_ctrl                    0xFF001D84U
#define DFLT_VAL_NX90_handshake_hsc1_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc1_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc1_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc1_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc1_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc1_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc1_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc1_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc1_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc1_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc1_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc2_ctrl */
/* => Handshake Cell 2 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc2_ctrl                0x00000088U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc2_ctrl 0xFF001D88U
#define Adr_NX90_handshake_hsc2_ctrl                    0xFF001D88U
#define DFLT_VAL_NX90_handshake_hsc2_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc2_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc2_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc2_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc2_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc2_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc2_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc2_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc2_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc2_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc2_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc3_ctrl */
/* => Handshake Cell 3 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc3_ctrl                0x0000008CU
#define Adr_NX90_handshake_ctrl_com_handshake_hsc3_ctrl 0xFF001D8CU
#define Adr_NX90_handshake_hsc3_ctrl                    0xFF001D8CU
#define DFLT_VAL_NX90_handshake_hsc3_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc3_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc3_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc3_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc3_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc3_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc3_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc3_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc3_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc3_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc3_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc4_ctrl */
/* => Handshake Cell 4 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc4_ctrl                0x00000090U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc4_ctrl 0xFF001D90U
#define Adr_NX90_handshake_hsc4_ctrl                    0xFF001D90U
#define DFLT_VAL_NX90_handshake_hsc4_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc4_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc4_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc4_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc4_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc4_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc4_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc4_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc4_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc4_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc4_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc5_ctrl */
/* => Handshake Cell 5 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc5_ctrl                0x00000094U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc5_ctrl 0xFF001D94U
#define Adr_NX90_handshake_hsc5_ctrl                    0xFF001D94U
#define DFLT_VAL_NX90_handshake_hsc5_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc5_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc5_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc5_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc5_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc5_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc5_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc5_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc5_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc5_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc5_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc6_ctrl */
/* => Handshake Cell 6 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc6_ctrl                0x00000098U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc6_ctrl 0xFF001D98U
#define Adr_NX90_handshake_hsc6_ctrl                    0xFF001D98U
#define DFLT_VAL_NX90_handshake_hsc6_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc6_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc6_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc6_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc6_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc6_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc6_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc6_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc6_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc6_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc6_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc7_ctrl */
/* => Handshake Cell 7 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc7_ctrl                0x0000009CU
#define Adr_NX90_handshake_ctrl_com_handshake_hsc7_ctrl 0xFF001D9CU
#define Adr_NX90_handshake_hsc7_ctrl                    0xFF001D9CU
#define DFLT_VAL_NX90_handshake_hsc7_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc7_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc7_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc7_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc7_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc7_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc7_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc7_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc7_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc7_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc7_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc8_ctrl */
/* => Handshake Cell 8 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc8_ctrl                0x000000A0U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc8_ctrl 0xFF001DA0U
#define Adr_NX90_handshake_hsc8_ctrl                    0xFF001DA0U
#define DFLT_VAL_NX90_handshake_hsc8_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc8_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc8_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc8_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc8_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc8_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc8_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc8_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc8_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc8_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc8_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc9_ctrl */
/* => Handshake Cell 9 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc9_ctrl                0x000000A4U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc9_ctrl 0xFF001DA4U
#define Adr_NX90_handshake_hsc9_ctrl                    0xFF001DA4U
#define DFLT_VAL_NX90_handshake_hsc9_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc9_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc9_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc9_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc9_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc9_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc9_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc9_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc9_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc9_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc9_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc10_ctrl */
/* => Handshake Cell 10 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc10_ctrl                0x000000A8U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc10_ctrl 0xFF001DA8U
#define Adr_NX90_handshake_hsc10_ctrl                    0xFF001DA8U
#define DFLT_VAL_NX90_handshake_hsc10_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc10_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc10_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc10_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc10_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc10_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc10_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc10_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc10_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc10_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc10_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc11_ctrl */
/* => Handshake Cell 11 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc11_ctrl                0x000000ACU
#define Adr_NX90_handshake_ctrl_com_handshake_hsc11_ctrl 0xFF001DACU
#define Adr_NX90_handshake_hsc11_ctrl                    0xFF001DACU
#define DFLT_VAL_NX90_handshake_hsc11_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc11_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc11_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc11_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc11_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc11_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc11_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc11_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc11_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc11_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc11_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc12_ctrl */
/* => Handshake Cell 12 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc12_ctrl                0x000000B0U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc12_ctrl 0xFF001DB0U
#define Adr_NX90_handshake_hsc12_ctrl                    0xFF001DB0U
#define DFLT_VAL_NX90_handshake_hsc12_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc12_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc12_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc12_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc12_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc12_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc12_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc12_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc12_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc12_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc12_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc13_ctrl */
/* => Handshake Cell 13 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc13_ctrl                0x000000B4U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc13_ctrl 0xFF001DB4U
#define Adr_NX90_handshake_hsc13_ctrl                    0xFF001DB4U
#define DFLT_VAL_NX90_handshake_hsc13_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc13_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc13_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc13_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc13_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc13_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc13_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc13_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc13_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc13_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc13_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc14_ctrl */
/* => Handshake Cell 14 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc14_ctrl                0x000000B8U
#define Adr_NX90_handshake_ctrl_com_handshake_hsc14_ctrl 0xFF001DB8U
#define Adr_NX90_handshake_hsc14_ctrl                    0xFF001DB8U
#define DFLT_VAL_NX90_handshake_hsc14_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc14_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc14_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc14_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc14_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc14_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc14_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc14_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc14_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc14_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc14_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_hsc15_ctrl */
/* => Handshake Cell 15 Control Register. */
/*    For detailed information view handshake_hsc0_ctrl documentation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_hsc15_ctrl                0x000000BCU
#define Adr_NX90_handshake_ctrl_com_handshake_hsc15_ctrl 0xFF001DBCU
#define Adr_NX90_handshake_hsc15_ctrl                    0xFF001DBCU
#define DFLT_VAL_NX90_handshake_hsc15_ctrl               0x00000000U

#define MSK_NX90_handshake_hsc15_ctrl_mode          0x00000003U
#define SRT_NX90_handshake_hsc15_ctrl_mode          0
#define DFLT_VAL_NX90_handshake_hsc15_ctrl_mode     0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc15_ctrl_mode  0x00000000U
#define MSK_NX90_handshake_hsc15_ctrl_width         0x00000010U
#define SRT_NX90_handshake_hsc15_ctrl_width         4
#define DFLT_VAL_NX90_handshake_hsc15_ctrl_width    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_hsc15_ctrl_width 0x00000000U

/* all used bits of 'NX90_handshake_hsc15_ctrl': */
#define MSK_USED_BITS_NX90_handshake_hsc15_ctrl 0x00000013U

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man0_ctrl */
/* => Handshake Triple Buffer Manager 0 Control register. */
/*    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 HCF_PD_OUT_CMD/NCF_PD_OUT_ACK-bits */
/*    for Host controlled DPM output data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man0_ctrl                0x000000C0U
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man0_ctrl 0xFF001DC0U
#define Adr_NX90_handshake_buf_man0_ctrl                    0xFF001DC0U
#define DFLT_VAL_NX90_handshake_buf_man0_ctrl               0x00000000U

#define MSK_NX90_handshake_buf_man0_ctrl_hsc2_auto_PD_OUT         0x00000001U
#define SRT_NX90_handshake_buf_man0_ctrl_hsc2_auto_PD_OUT         0
#define DFLT_VAL_NX90_handshake_buf_man0_ctrl_hsc2_auto_PD_OUT    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_ctrl_hsc2_auto_PD_OUT 0x00000000U
#define MSK_NX90_handshake_buf_man0_ctrl_reset                    0x00000002U
#define SRT_NX90_handshake_buf_man0_ctrl_reset                    1
#define DFLT_VAL_NX90_handshake_buf_man0_ctrl_reset               0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_ctrl_reset            0x00000000U
#define MSK_NX90_handshake_buf_man0_ctrl_buf_dam_cfg              0x0000000cU
#define SRT_NX90_handshake_buf_man0_ctrl_buf_dam_cfg              2
#define DFLT_VAL_NX90_handshake_buf_man0_ctrl_buf_dam_cfg         0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_ctrl_buf_dam_cfg      0x00000000U

/* all used bits of 'NX90_handshake_buf_man0_ctrl': */
#define MSK_USED_BITS_NX90_handshake_buf_man0_ctrl 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man0_status_ctrl_netx */
/* => Handshake Triple Buffer Manager 0 netX Status and Control Register. */
/*    On read this register provides current status of netX side of Handshake Triple Buffer Manager 0. Buffer */
/*    requests can be done by writing this register. */
/*    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6) */
/*    for Host controlled DPM output data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man0_status_ctrl_netx                0x000000C4U
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man0_status_ctrl_netx 0xFF001DC4U
#define Adr_NX90_handshake_buf_man0_status_ctrl_netx                    0xFF001DC4U
#define DFLT_VAL_NX90_handshake_buf_man0_status_ctrl_netx               0x00000003U

#define MSK_NX90_handshake_buf_man0_status_ctrl_netx_buf_ro         0x00000003U
#define SRT_NX90_handshake_buf_man0_status_ctrl_netx_buf_ro         0
#define DFLT_VAL_NX90_handshake_buf_man0_status_ctrl_netx_buf_ro    0x00000003U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_status_ctrl_netx_buf_ro 0x00000003U
#define MSK_NX90_handshake_buf_man0_status_ctrl_netx_cmd            0x00000030U
#define SRT_NX90_handshake_buf_man0_status_ctrl_netx_cmd            4
#define DFLT_VAL_NX90_handshake_buf_man0_status_ctrl_netx_cmd       0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_status_ctrl_netx_cmd    0x00000000U

/* all used bits of 'NX90_handshake_buf_man0_status_ctrl_netx': */
#define MSK_USED_BITS_NX90_handshake_buf_man0_status_ctrl_netx 0x00000033U

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man0_status_ctrl_host */
/* => Handshake Triple Buffer Manager 0 Host Status register. */
/*    On read this register provides current status of host side of Handshake Triple Buffer Manager 0. Buffer */
/*    requests can be done by writing this register. */
/*    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6) */
/*    for Host controlled DPM output data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man0_status_ctrl_host                0x000000C8U
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man0_status_ctrl_host 0xFF001DC8U
#define Adr_NX90_handshake_buf_man0_status_ctrl_host                    0xFF001DC8U

#define MSK_NX90_handshake_buf_man0_status_ctrl_host_buf_ro 0x00000003U
#define SRT_NX90_handshake_buf_man0_status_ctrl_host_buf_ro 0
#define MSK_NX90_handshake_buf_man0_status_ctrl_host_cmd    0x00000030U
#define SRT_NX90_handshake_buf_man0_status_ctrl_host_cmd    4

/* all used bits of 'NX90_handshake_buf_man0_status_ctrl_host': */
#define MSK_USED_BITS_NX90_handshake_buf_man0_status_ctrl_host 0x00000033U

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man0_win_map */
/* => DPM Window Address Map Alternative Configuration Register for Handshake Triple Buffer Manager 0. */
/*    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6) */
/*    for Host controlled DPM output data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/*      If DPM auto buffer window change is enabled, buffer 0 related DPM window mapping is window mapping programmed */
/*      for related window in DPM address are. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man0_win_map                0x000000CCU
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man0_win_map 0xFF001DCCU
#define Adr_NX90_handshake_buf_man0_win_map                    0xFF001DCCU
#define DFLT_VAL_NX90_handshake_buf_man0_win_map               0x00000000U

#define MSK_NX90_handshake_buf_man0_win_map_win_map_buf1         0x00001fffU
#define SRT_NX90_handshake_buf_man0_win_map_win_map_buf1         0
#define DFLT_VAL_NX90_handshake_buf_man0_win_map_win_map_buf1    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_win_map_win_map_buf1 0x00000000U
#define MSK_NX90_handshake_buf_man0_win_map_win_map_buf2         0x1fff0000U
#define SRT_NX90_handshake_buf_man0_win_map_win_map_buf2         16
#define DFLT_VAL_NX90_handshake_buf_man0_win_map_win_map_buf2    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man0_win_map_win_map_buf2 0x00000000U

/* all used bits of 'NX90_handshake_buf_man0_win_map': */
#define MSK_USED_BITS_NX90_handshake_buf_man0_win_map 0x1fff1fffU

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man1_ctrl */
/* => Handshake Triple Buffer Manager 1 Control register. */
/*    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 HCF_PD_IN_CMD/NCF_PD_IN_ACK-bits */
/*    for Host controlled DPM input data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man1_ctrl                0x000000D0U
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man1_ctrl 0xFF001DD0U
#define Adr_NX90_handshake_buf_man1_ctrl                    0xFF001DD0U
#define DFLT_VAL_NX90_handshake_buf_man1_ctrl               0x00000000U

#define MSK_NX90_handshake_buf_man1_ctrl_hsc2_auto_PD_IN         0x00000001U
#define SRT_NX90_handshake_buf_man1_ctrl_hsc2_auto_PD_IN         0
#define DFLT_VAL_NX90_handshake_buf_man1_ctrl_hsc2_auto_PD_IN    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_ctrl_hsc2_auto_PD_IN 0x00000000U
#define MSK_NX90_handshake_buf_man1_ctrl_reset                   0x00000002U
#define SRT_NX90_handshake_buf_man1_ctrl_reset                   1
#define DFLT_VAL_NX90_handshake_buf_man1_ctrl_reset              0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_ctrl_reset           0x00000000U
#define MSK_NX90_handshake_buf_man1_ctrl_buf_dam_cfg             0x0000000cU
#define SRT_NX90_handshake_buf_man1_ctrl_buf_dam_cfg             2
#define DFLT_VAL_NX90_handshake_buf_man1_ctrl_buf_dam_cfg        0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_ctrl_buf_dam_cfg     0x00000000U

/* all used bits of 'NX90_handshake_buf_man1_ctrl': */
#define MSK_USED_BITS_NX90_handshake_buf_man1_ctrl 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man1_status_ctrl_netx */
/* => Handshake Triple Buffer Manager 1 netX Status and Control Register. */
/*    On read this register provides current status of netX side of Handshake Triple Buffer Manager 1. Buffer */
/*    requests can be done by writing this register. */
/*    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6) */
/*    for Host controlled DPM input data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man1_status_ctrl_netx                0x000000D4U
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man1_status_ctrl_netx 0xFF001DD4U
#define Adr_NX90_handshake_buf_man1_status_ctrl_netx                    0xFF001DD4U
#define DFLT_VAL_NX90_handshake_buf_man1_status_ctrl_netx               0x00000003U

#define MSK_NX90_handshake_buf_man1_status_ctrl_netx_buf_ro         0x00000003U
#define SRT_NX90_handshake_buf_man1_status_ctrl_netx_buf_ro         0
#define DFLT_VAL_NX90_handshake_buf_man1_status_ctrl_netx_buf_ro    0x00000003U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_status_ctrl_netx_buf_ro 0x00000003U
#define MSK_NX90_handshake_buf_man1_status_ctrl_netx_cmd            0x00000030U
#define SRT_NX90_handshake_buf_man1_status_ctrl_netx_cmd            4
#define DFLT_VAL_NX90_handshake_buf_man1_status_ctrl_netx_cmd       0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_status_ctrl_netx_cmd    0x00000000U

/* all used bits of 'NX90_handshake_buf_man1_status_ctrl_netx': */
#define MSK_USED_BITS_NX90_handshake_buf_man1_status_ctrl_netx 0x00000033U

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man1_status_ctrl_host */
/* => Handshake Triple Buffer Manager 1 Host Status register. */
/*    On read this register provides current status of host side of Handshake Triple Buffer Manager 1. Buffer */
/*    requests can be done by writing this register. */
/*    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6) */
/*    for host controlled DPM input data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man1_status_ctrl_host                0x000000D8U
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man1_status_ctrl_host 0xFF001DD8U
#define Adr_NX90_handshake_buf_man1_status_ctrl_host                    0xFF001DD8U

#define MSK_NX90_handshake_buf_man1_status_ctrl_host_buf_ro 0x00000003U
#define SRT_NX90_handshake_buf_man1_status_ctrl_host_buf_ro 0
#define MSK_NX90_handshake_buf_man1_status_ctrl_host_cmd    0x00000030U
#define SRT_NX90_handshake_buf_man1_status_ctrl_host_cmd    4

/* all used bits of 'NX90_handshake_buf_man1_status_ctrl_host': */
#define MSK_USED_BITS_NX90_handshake_buf_man1_status_ctrl_host 0x00000033U

/* --------------------------------------------------------------------- */
/* Register handshake_buf_man1_win_map */
/* => DPM Window Address Map Alternative Configuration Register for Handshake Triple Buffer Manager 1. */
/*    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 Bits 7 and 23 (16+7) */
/*    for Host controlled DPM input data handling and DPM auto buffer window change. */
/*    Note: */
/*      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers. */
/*      If DPM auto buffer window change is enabled, buffer 1 related DPM window mapping is window mapping programmed */
/*      for related window in DPM address are. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_handshake_buf_man1_win_map                0x000000DCU
#define Adr_NX90_handshake_ctrl_com_handshake_buf_man1_win_map 0xFF001DDCU
#define Adr_NX90_handshake_buf_man1_win_map                    0xFF001DDCU
#define DFLT_VAL_NX90_handshake_buf_man1_win_map               0x00000000U

#define MSK_NX90_handshake_buf_man1_win_map_win_map_buf1         0x00001fffU
#define SRT_NX90_handshake_buf_man1_win_map_win_map_buf1         0
#define DFLT_VAL_NX90_handshake_buf_man1_win_map_win_map_buf1    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_win_map_win_map_buf1 0x00000000U
#define MSK_NX90_handshake_buf_man1_win_map_win_map_buf2         0x1fff0000U
#define SRT_NX90_handshake_buf_man1_win_map_win_map_buf2         16
#define DFLT_VAL_NX90_handshake_buf_man1_win_map_win_map_buf2    0x00000000U
#define DFLT_BF_VAL_NX90_handshake_buf_man1_win_map_win_map_buf2 0x00000000U

/* all used bits of 'NX90_handshake_buf_man1_win_map': */
#define MSK_USED_BITS_NX90_handshake_buf_man1_win_map 0x1fff1fffU


/* ===================================================================== */

/* AREA bist_ctrl */
/* Area of bist_ctrl_com */

/* ===================================================================== */

#define Addr_NX90_bist_ctrl_com 0xFF001E00U

/* --------------------------------------------------------------------- */
/* Register bist_ctrl_ctrl0 */
/* => RAM BIST control register nr0: */
/*    2 bits bistmode per RAM to start BIST or RAM initialization: */
/*    00: disabled */
/*    01: init RAM */
/*    10: run BIST */
/*    Reset Value to 00 if status register shows that process is finished. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_bist_ctrl_ctrl0           0x00000000U
#define Adr_NX90_bist_ctrl_com_bist_ctrl_ctrl0 0xFF001E00U
#define Adr_NX90_bist_ctrl_ctrl0               0xFF001E00U
#define DFLT_VAL_NX90_bist_ctrl_ctrl0          0x00000000U

#define MSK_NX90_bist_ctrl_ctrl0_intram0_0_bist_mode         0x00000003U
#define SRT_NX90_bist_ctrl_ctrl0_intram0_0_bist_mode         0
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram0_0_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram0_0_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram0_1_bist_mode         0x0000000cU
#define SRT_NX90_bist_ctrl_ctrl0_intram0_1_bist_mode         2
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram0_1_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram0_1_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram0_2_bist_mode         0x00000030U
#define SRT_NX90_bist_ctrl_ctrl0_intram0_2_bist_mode         4
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram0_2_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram0_2_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram0_3_bist_mode         0x000000c0U
#define SRT_NX90_bist_ctrl_ctrl0_intram0_3_bist_mode         6
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram0_3_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram0_3_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram1_0_bist_mode         0x00000300U
#define SRT_NX90_bist_ctrl_ctrl0_intram1_0_bist_mode         8
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram1_0_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram1_0_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram1_1_bist_mode         0x00000c00U
#define SRT_NX90_bist_ctrl_ctrl0_intram1_1_bist_mode         10
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram1_1_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram1_1_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram1_2_bist_mode         0x00003000U
#define SRT_NX90_bist_ctrl_ctrl0_intram1_2_bist_mode         12
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram1_2_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram1_2_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram1_3_bist_mode         0x0000c000U
#define SRT_NX90_bist_ctrl_ctrl0_intram1_3_bist_mode         14
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram1_3_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram1_3_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram2_0_bist_mode         0x00030000U
#define SRT_NX90_bist_ctrl_ctrl0_intram2_0_bist_mode         16
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram2_0_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram2_0_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram2_1_bist_mode         0x000c0000U
#define SRT_NX90_bist_ctrl_ctrl0_intram2_1_bist_mode         18
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram2_1_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram2_1_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram2_2_bist_mode         0x00300000U
#define SRT_NX90_bist_ctrl_ctrl0_intram2_2_bist_mode         20
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram2_2_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram2_2_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram2_3_bist_mode         0x00c00000U
#define SRT_NX90_bist_ctrl_ctrl0_intram2_3_bist_mode         22
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram2_3_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram2_3_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram3_0_bist_mode         0x03000000U
#define SRT_NX90_bist_ctrl_ctrl0_intram3_0_bist_mode         24
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram3_0_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram3_0_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram3_1_bist_mode         0x0c000000U
#define SRT_NX90_bist_ctrl_ctrl0_intram3_1_bist_mode         26
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram3_1_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram3_1_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram4_0_bist_mode         0x30000000U
#define SRT_NX90_bist_ctrl_ctrl0_intram4_0_bist_mode         28
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram4_0_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram4_0_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl0_intram4_1_bist_mode         0xc0000000U
#define SRT_NX90_bist_ctrl_ctrl0_intram4_1_bist_mode         30
#define DFLT_VAL_NX90_bist_ctrl_ctrl0_intram4_1_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl0_intram4_1_bist_mode 0x00000000U

/* all used bits of 'NX90_bist_ctrl_ctrl0': */
#define MSK_USED_BITS_NX90_bist_ctrl_ctrl0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register bist_ctrl_ctrl1 */
/* => RAM BIST control register nr1: */
/*    2 bits bistmode per RAM to start BIST or RAM initialization: */
/*    00: disabled */
/*    01: init RAM */
/*    10: run BIST */
/*    Reset Value to 00 if status register shows that process is finished. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_bist_ctrl_ctrl1           0x00000004U
#define Adr_NX90_bist_ctrl_com_bist_ctrl_ctrl1 0xFF001E04U
#define Adr_NX90_bist_ctrl_ctrl1               0xFF001E04U
#define DFLT_VAL_NX90_bist_ctrl_ctrl1          0x00000000U

#define MSK_NX90_bist_ctrl_ctrl1_intram5_bist_mode                0x00000003U
#define SRT_NX90_bist_ctrl_ctrl1_intram5_bist_mode                0
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_intram5_bist_mode           0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_intram5_bist_mode        0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_intram6_bist_mode                0x0000000cU
#define SRT_NX90_bist_ctrl_ctrl1_intram6_bist_mode                2
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_intram6_bist_mode           0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_intram6_bist_mode        0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_intram7_bist_mode                0x00000030U
#define SRT_NX90_bist_ctrl_ctrl1_intram7_bist_mode                4
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_intram7_bist_mode           0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_intram7_bist_mode        0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_intramhs_bist_mode               0x000000c0U
#define SRT_NX90_bist_ctrl_ctrl1_intramhs_bist_mode               6
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_intramhs_bist_mode          0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_intramhs_bist_mode       0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_rpec0_pram_bist_mode         0x00000300U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_rpec0_pram_bist_mode         8
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_rpec0_pram_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_rpec0_pram_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_rpec1_pram_bist_mode         0x00000c00U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_rpec1_pram_bist_mode         10
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_rpec1_pram_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_rpec1_pram_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_tpec0_pram_bist_mode         0x00003000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_tpec0_pram_bist_mode         12
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_tpec0_pram_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_tpec0_pram_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_tpec1_pram_bist_mode         0x0000c000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_tpec1_pram_bist_mode         14
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_tpec1_pram_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_tpec1_pram_bist_mode 0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_dpram0_bist_mode             0x00030000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_dpram0_bist_mode             16
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_dpram0_bist_mode        0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_dpram0_bist_mode     0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_dpram1_bist_mode             0x000c0000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_dpram1_bist_mode             18
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_dpram1_bist_mode        0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_dpram1_bist_mode     0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_rpu0_bist_mode               0x00300000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_rpu0_bist_mode               20
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_rpu0_bist_mode          0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_rpu0_bist_mode       0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_rpu1_bist_mode               0x00c00000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_rpu1_bist_mode               22
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_rpu1_bist_mode          0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_rpu1_bist_mode       0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_tpu0_bist_mode               0x03000000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_tpu0_bist_mode               24
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_tpu0_bist_mode          0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_tpu0_bist_mode       0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_tpu1_bist_mode               0x0c000000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_tpu1_bist_mode               26
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_tpu1_bist_mode          0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_tpu1_bist_mode       0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xc0_pfifo_bist_mode              0x30000000U
#define SRT_NX90_bist_ctrl_ctrl1_xc0_pfifo_bist_mode              28
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xc0_pfifo_bist_mode         0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xc0_pfifo_bist_mode      0x00000000U
#define MSK_NX90_bist_ctrl_ctrl1_xpic0_pram_bist_mode             0xc0000000U
#define SRT_NX90_bist_ctrl_ctrl1_xpic0_pram_bist_mode             30
#define DFLT_VAL_NX90_bist_ctrl_ctrl1_xpic0_pram_bist_mode        0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl1_xpic0_pram_bist_mode     0x00000000U

/* all used bits of 'NX90_bist_ctrl_ctrl1': */
#define MSK_USED_BITS_NX90_bist_ctrl_ctrl1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register bist_ctrl_ctrl2 */
/* => RAM BIST control register nr2: */
/*    2 bits bistmode per RAM to start BIST or RAM initialization: */
/*    00: disabled */
/*    01: init RAM */
/*    10: run BIST */
/*    Reset Value to 00 if status register shows that process is finished. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_bist_ctrl_ctrl2           0x00000008U
#define Adr_NX90_bist_ctrl_com_bist_ctrl_ctrl2 0xFF001E08U
#define Adr_NX90_bist_ctrl_ctrl2               0xFF001E08U
#define DFLT_VAL_NX90_bist_ctrl_ctrl2          0x00000000U

#define MSK_NX90_bist_ctrl_ctrl2_xpic1_pram_bist_mode           0x00000003U
#define SRT_NX90_bist_ctrl_ctrl2_xpic1_pram_bist_mode           0
#define DFLT_VAL_NX90_bist_ctrl_ctrl2_xpic1_pram_bist_mode      0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl2_xpic1_pram_bist_mode   0x00000000U
#define MSK_NX90_bist_ctrl_ctrl2_xpic0_dram_bist_mode           0x0000000cU
#define SRT_NX90_bist_ctrl_ctrl2_xpic0_dram_bist_mode           2
#define DFLT_VAL_NX90_bist_ctrl_ctrl2_xpic0_dram_bist_mode      0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl2_xpic0_dram_bist_mode   0x00000000U
#define MSK_NX90_bist_ctrl_ctrl2_xpic1_dram_bist_mode           0x00000030U
#define SRT_NX90_bist_ctrl_ctrl2_xpic1_dram_bist_mode           4
#define DFLT_VAL_NX90_bist_ctrl_ctrl2_xpic1_dram_bist_mode      0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl2_xpic1_dram_bist_mode   0x00000000U
#define MSK_NX90_bist_ctrl_ctrl2_mwmm_regfile_bist_mode         0x000000c0U
#define SRT_NX90_bist_ctrl_ctrl2_mwmm_regfile_bist_mode         6
#define DFLT_VAL_NX90_bist_ctrl_ctrl2_mwmm_regfile_bist_mode    0x00000000U
#define DFLT_BF_VAL_NX90_bist_ctrl_ctrl2_mwmm_regfile_bist_mode 0x00000000U

/* all used bits of 'NX90_bist_ctrl_ctrl2': */
#define MSK_USED_BITS_NX90_bist_ctrl_ctrl2 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register bist_ctrl_stat0 */
/* => RAM BIST status register nr 0: */
/*    2 bits bist_status per RAM: */
/*    00: ok */
/*    01: running */
/*    11: failure */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_bist_ctrl_stat0           0x0000000CU
#define Adr_NX90_bist_ctrl_com_bist_ctrl_stat0 0xFF001E0CU
#define Adr_NX90_bist_ctrl_stat0               0xFF001E0CU

#define MSK_NX90_bist_ctrl_stat0_intram0_0_bist_status 0x00000003U
#define SRT_NX90_bist_ctrl_stat0_intram0_0_bist_status 0
#define MSK_NX90_bist_ctrl_stat0_intram0_1_bist_status 0x0000000cU
#define SRT_NX90_bist_ctrl_stat0_intram0_1_bist_status 2
#define MSK_NX90_bist_ctrl_stat0_intram0_2_bist_status 0x00000030U
#define SRT_NX90_bist_ctrl_stat0_intram0_2_bist_status 4
#define MSK_NX90_bist_ctrl_stat0_intram0_3_bist_status 0x000000c0U
#define SRT_NX90_bist_ctrl_stat0_intram0_3_bist_status 6
#define MSK_NX90_bist_ctrl_stat0_intram1_0_bist_status 0x00000300U
#define SRT_NX90_bist_ctrl_stat0_intram1_0_bist_status 8
#define MSK_NX90_bist_ctrl_stat0_intram1_1_bist_status 0x00000c00U
#define SRT_NX90_bist_ctrl_stat0_intram1_1_bist_status 10
#define MSK_NX90_bist_ctrl_stat0_intram1_2_bist_status 0x00003000U
#define SRT_NX90_bist_ctrl_stat0_intram1_2_bist_status 12
#define MSK_NX90_bist_ctrl_stat0_intram1_3_bist_status 0x0000c000U
#define SRT_NX90_bist_ctrl_stat0_intram1_3_bist_status 14
#define MSK_NX90_bist_ctrl_stat0_intram2_0_bist_status 0x00030000U
#define SRT_NX90_bist_ctrl_stat0_intram2_0_bist_status 16
#define MSK_NX90_bist_ctrl_stat0_intram2_1_bist_status 0x000c0000U
#define SRT_NX90_bist_ctrl_stat0_intram2_1_bist_status 18
#define MSK_NX90_bist_ctrl_stat0_intram2_2_bist_status 0x00300000U
#define SRT_NX90_bist_ctrl_stat0_intram2_2_bist_status 20
#define MSK_NX90_bist_ctrl_stat0_intram2_3_bist_status 0x00c00000U
#define SRT_NX90_bist_ctrl_stat0_intram2_3_bist_status 22
#define MSK_NX90_bist_ctrl_stat0_intram3_0_bist_status 0x03000000U
#define SRT_NX90_bist_ctrl_stat0_intram3_0_bist_status 24
#define MSK_NX90_bist_ctrl_stat0_intram3_1_bist_status 0x0c000000U
#define SRT_NX90_bist_ctrl_stat0_intram3_1_bist_status 26
#define MSK_NX90_bist_ctrl_stat0_intram4_0_bist_status 0x30000000U
#define SRT_NX90_bist_ctrl_stat0_intram4_0_bist_status 28
#define MSK_NX90_bist_ctrl_stat0_intram4_1_bist_status 0xc0000000U
#define SRT_NX90_bist_ctrl_stat0_intram4_1_bist_status 30

/* all used bits of 'NX90_bist_ctrl_stat0': */
#define MSK_USED_BITS_NX90_bist_ctrl_stat0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register bist_ctrl_stat1 */
/* => RAM BIST status register nr 1: */
/*    2 bits bist_status per RAM: */
/*    00: ok */
/*    01: running */
/*    11: failure */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_bist_ctrl_stat1           0x00000010U
#define Adr_NX90_bist_ctrl_com_bist_ctrl_stat1 0xFF001E10U
#define Adr_NX90_bist_ctrl_stat1               0xFF001E10U

#define MSK_NX90_bist_ctrl_stat1_intram5_bist_status        0x00000003U
#define SRT_NX90_bist_ctrl_stat1_intram5_bist_status        0
#define MSK_NX90_bist_ctrl_stat1_intram6_bist_status        0x0000000cU
#define SRT_NX90_bist_ctrl_stat1_intram6_bist_status        2
#define MSK_NX90_bist_ctrl_stat1_intram7_bist_status        0x00000030U
#define SRT_NX90_bist_ctrl_stat1_intram7_bist_status        4
#define MSK_NX90_bist_ctrl_stat1_intramhs_bist_status       0x000000c0U
#define SRT_NX90_bist_ctrl_stat1_intramhs_bist_status       6
#define MSK_NX90_bist_ctrl_stat1_xc0_rpec0_pram_bist_status 0x00000300U
#define SRT_NX90_bist_ctrl_stat1_xc0_rpec0_pram_bist_status 8
#define MSK_NX90_bist_ctrl_stat1_xc0_rpec1_pram_bist_status 0x00000c00U
#define SRT_NX90_bist_ctrl_stat1_xc0_rpec1_pram_bist_status 10
#define MSK_NX90_bist_ctrl_stat1_xc0_tpec0_pram_bist_status 0x00003000U
#define SRT_NX90_bist_ctrl_stat1_xc0_tpec0_pram_bist_status 12
#define MSK_NX90_bist_ctrl_stat1_xc0_tpec1_pram_bist_status 0x0000c000U
#define SRT_NX90_bist_ctrl_stat1_xc0_tpec1_pram_bist_status 14
#define MSK_NX90_bist_ctrl_stat1_xc0_dpram0_bist_status     0x00030000U
#define SRT_NX90_bist_ctrl_stat1_xc0_dpram0_bist_status     16
#define MSK_NX90_bist_ctrl_stat1_xc0_dpram1_bist_status     0x000c0000U
#define SRT_NX90_bist_ctrl_stat1_xc0_dpram1_bist_status     18
#define MSK_NX90_bist_ctrl_stat1_xc0_rpu0_bist_status       0x00300000U
#define SRT_NX90_bist_ctrl_stat1_xc0_rpu0_bist_status       20
#define MSK_NX90_bist_ctrl_stat1_xc0_rpu1_bist_status       0x00c00000U
#define SRT_NX90_bist_ctrl_stat1_xc0_rpu1_bist_status       22
#define MSK_NX90_bist_ctrl_stat1_xc0_tpu0_bist_status       0x03000000U
#define SRT_NX90_bist_ctrl_stat1_xc0_tpu0_bist_status       24
#define MSK_NX90_bist_ctrl_stat1_xc0_tpu1_bist_status       0x0c000000U
#define SRT_NX90_bist_ctrl_stat1_xc0_tpu1_bist_status       26
#define MSK_NX90_bist_ctrl_stat1_xc0_pfifo_bist_status      0x30000000U
#define SRT_NX90_bist_ctrl_stat1_xc0_pfifo_bist_status      28
#define MSK_NX90_bist_ctrl_stat1_xpic0_pram_bist_status     0xc0000000U
#define SRT_NX90_bist_ctrl_stat1_xpic0_pram_bist_status     30

/* all used bits of 'NX90_bist_ctrl_stat1': */
#define MSK_USED_BITS_NX90_bist_ctrl_stat1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register bist_ctrl_stat2 */
/* => RAM BIST status register nr 2: */
/*    2 bits bist_status per RAM: */
/*    00: ok */
/*    01: running */
/*    11: failure */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_bist_ctrl_stat2           0x00000014U
#define Adr_NX90_bist_ctrl_com_bist_ctrl_stat2 0xFF001E14U
#define Adr_NX90_bist_ctrl_stat2               0xFF001E14U

#define MSK_NX90_bist_ctrl_stat2_xpic1_pram_bist_status   0x00000003U
#define SRT_NX90_bist_ctrl_stat2_xpic1_pram_bist_status   0
#define MSK_NX90_bist_ctrl_stat2_xpic0_dram_bist_status   0x0000000cU
#define SRT_NX90_bist_ctrl_stat2_xpic0_dram_bist_status   2
#define MSK_NX90_bist_ctrl_stat2_xpic1_dram_bist_status   0x00000030U
#define SRT_NX90_bist_ctrl_stat2_xpic1_dram_bist_status   4
#define MSK_NX90_bist_ctrl_stat2_mwmm_regfile_bist_status 0x000000c0U
#define SRT_NX90_bist_ctrl_stat2_mwmm_regfile_bist_status 6

/* all used bits of 'NX90_bist_ctrl_stat2': */
#define MSK_USED_BITS_NX90_bist_ctrl_stat2 0x000000ffU


/* ===================================================================== */

/* AREA crc */
/* Area of crc_com */

/* ===================================================================== */

#define Addr_NX90_crc_com 0xFF001F00U

/* --------------------------------------------------------------------- */
/* Register crc_crc */
/* => CRC Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_crc_crc     0x00000000U
#define Adr_NX90_crc_com_crc_crc 0xFF001F00U
#define Adr_NX90_crc_crc         0xFF001F00U
#define DFLT_VAL_NX90_crc_crc    0x00000000U

#define MSK_NX90_crc_crc_crc_val         0xffffffffU
#define SRT_NX90_crc_crc_crc_val         0
#define DFLT_VAL_NX90_crc_crc_crc_val    0x00000000U
#define DFLT_BF_VAL_NX90_crc_crc_crc_val 0x00000000U

/* all used bits of 'NX90_crc_crc': */
#define MSK_USED_BITS_NX90_crc_crc 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register crc_data_in */
/* => CRC data in Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_crc_data_in     0x00000004U
#define Adr_NX90_crc_com_crc_data_in 0xFF001F04U
#define Adr_NX90_crc_data_in         0xFF001F04U
#define DFLT_VAL_NX90_crc_data_in    0x00000000U

#define MSK_NX90_crc_data_in_crc_data_in         0x000000ffU
#define SRT_NX90_crc_data_in_crc_data_in         0
#define DFLT_VAL_NX90_crc_data_in_crc_data_in    0x00000000U
#define DFLT_BF_VAL_NX90_crc_data_in_crc_data_in 0x00000000U

/* all used bits of 'NX90_crc_data_in': */
#define MSK_USED_BITS_NX90_crc_data_in 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register crc_polynomial */
/* => CRC Polynomial Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_crc_polynomial     0x00000008U
#define Adr_NX90_crc_com_crc_polynomial 0xFF001F08U
#define Adr_NX90_crc_polynomial         0xFF001F08U
#define DFLT_VAL_NX90_crc_polynomial    0x04c11db7U

#define MSK_NX90_crc_polynomial_crc_polynomial         0xffffffffU
#define SRT_NX90_crc_polynomial_crc_polynomial         0
#define DFLT_VAL_NX90_crc_polynomial_crc_polynomial    0x04c11db7U
#define DFLT_BF_VAL_NX90_crc_polynomial_crc_polynomial 0x04c11db7U

/* all used bits of 'NX90_crc_polynomial': */
#define MSK_USED_BITS_NX90_crc_polynomial 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register crc_config */
/* => CRC config Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_crc_config     0x0000000CU
#define Adr_NX90_crc_com_crc_config 0xFF001F0CU
#define Adr_NX90_crc_config         0xFF001F0CU
#define DFLT_VAL_NX90_crc_config    0x00000000U

#define MSK_NX90_crc_config_crc_len                 0x0000003fU
#define SRT_NX90_crc_config_crc_len                 0
#define DFLT_VAL_NX90_crc_config_crc_len            0x00000000U
#define DFLT_BF_VAL_NX90_crc_config_crc_len         0x00000000U
#define MSK_NX90_crc_config_crc_shift_right         0x00000040U
#define SRT_NX90_crc_config_crc_shift_right         6
#define DFLT_VAL_NX90_crc_config_crc_shift_right    0x00000000U
#define DFLT_BF_VAL_NX90_crc_config_crc_shift_right 0x00000000U
#define MSK_NX90_crc_config_crc_direct_div          0x00000080U
#define SRT_NX90_crc_config_crc_direct_div          7
#define DFLT_VAL_NX90_crc_config_crc_direct_div     0x00000000U
#define DFLT_BF_VAL_NX90_crc_config_crc_direct_div  0x00000000U
#define MSK_NX90_crc_config_crc_nof_bits            0x00000300U
#define SRT_NX90_crc_config_crc_nof_bits            8
#define DFLT_VAL_NX90_crc_config_crc_nof_bits       0x00000000U
#define DFLT_BF_VAL_NX90_crc_config_crc_nof_bits    0x00000000U
#define MSK_NX90_crc_config_crc_in_msb_low          0x00000400U
#define SRT_NX90_crc_config_crc_in_msb_low          10
#define DFLT_VAL_NX90_crc_config_crc_in_msb_low     0x00000000U
#define DFLT_BF_VAL_NX90_crc_config_crc_in_msb_low  0x00000000U

/* all used bits of 'NX90_crc_config': */
#define MSK_USED_BITS_NX90_crc_config 0x000007ffU


/* ===================================================================== */

/* AREA iflash_global_timings */
/* Area of flash_global_timings_com */

/* ===================================================================== */

#define Addr_NX90_flash_global_timings_com 0xFF001F40U

/* --------------------------------------------------------------------- */
/* Register wait_5us */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_wait_5us                      0x00000000U
#define Adr_NX90_flash_global_timings_com_wait_5us 0xFF001F40U
#define Adr_NX90_wait_5us                          0xFF001F40U
#define DFLT_VAL_NX90_wait_5us                     0x000001fdU

#define MSK_NX90_wait_5us_val         0x00ffffffU
#define SRT_NX90_wait_5us_val         0
#define DFLT_VAL_NX90_wait_5us_val    0x000001fdU
#define DFLT_BF_VAL_NX90_wait_5us_val 0x000001fdU

/* all used bits of 'NX90_wait_5us': */
#define MSK_USED_BITS_NX90_wait_5us 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register wait_10us */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_wait_10us                      0x00000004U
#define Adr_NX90_flash_global_timings_com_wait_10us 0xFF001F44U
#define Adr_NX90_wait_10us                          0xFF001F44U
#define DFLT_VAL_NX90_wait_10us                     0x000003f1U

#define MSK_NX90_wait_10us_val         0x00ffffffU
#define SRT_NX90_wait_10us_val         0
#define DFLT_VAL_NX90_wait_10us_val    0x000003f1U
#define DFLT_BF_VAL_NX90_wait_10us_val 0x000003f1U

/* all used bits of 'NX90_wait_10us': */
#define MSK_USED_BITS_NX90_wait_10us 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register wait_20us */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_wait_20us                      0x00000008U
#define Adr_NX90_flash_global_timings_com_wait_20us 0xFF001F48U
#define Adr_NX90_wait_20us                          0xFF001F48U
#define DFLT_VAL_NX90_wait_20us                     0x000007d9U

#define MSK_NX90_wait_20us_val         0x00ffffffU
#define SRT_NX90_wait_20us_val         0
#define DFLT_VAL_NX90_wait_20us_val    0x000007d9U
#define DFLT_BF_VAL_NX90_wait_20us_val 0x000007d9U

/* all used bits of 'NX90_wait_20us': */
#define MSK_USED_BITS_NX90_wait_20us 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register wait_100us */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_wait_100us                      0x0000000CU
#define Adr_NX90_flash_global_timings_com_wait_100us 0xFF001F4CU
#define Adr_NX90_wait_100us                          0xFF001F4CU
#define DFLT_VAL_NX90_wait_100us                     0x00002719U

#define MSK_NX90_wait_100us_val         0x00ffffffU
#define SRT_NX90_wait_100us_val         0
#define DFLT_VAL_NX90_wait_100us_val    0x00002719U
#define DFLT_BF_VAL_NX90_wait_100us_val 0x00002719U

/* all used bits of 'NX90_wait_100us': */
#define MSK_USED_BITS_NX90_wait_100us 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register wait_20ms */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_wait_20ms                      0x00000010U
#define Adr_NX90_flash_global_timings_com_wait_20ms 0xFF001F50U
#define Adr_NX90_wait_20ms                          0xFF001F50U
#define DFLT_VAL_NX90_wait_20ms                     0x001e8489U

#define MSK_NX90_wait_20ms_val         0x00ffffffU
#define SRT_NX90_wait_20ms_val         0
#define DFLT_VAL_NX90_wait_20ms_val    0x001e8489U
#define DFLT_BF_VAL_NX90_wait_20ms_val 0x001e8489U

/* all used bits of 'NX90_wait_20ms': */
#define MSK_USED_BITS_NX90_wait_20ms 0x00ffffffU


/* ===================================================================== */

/* Area of crypt */

/* ===================================================================== */

#define Addr_NX90_crypt 0xFF080000U

/* ===================================================================== */

/* Area of hash */

/* ===================================================================== */

#define Addr_NX90_hash 0xFF080000U

/* --------------------------------------------------------------------- */
/* Register hash_din */
/* => Hash FIFO input: */
/*    Unlike all other registers, this address can be written with DWord(32 Bit), Word(16 Bit) or Byte acccss. */
/*    The FIFO controller will automatically collect data and start HASH-calculation, */
/*    if enough data (complete DWords) are collected. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_din  0x00000000U
#define Adr_NX90_hash_hash_din 0xFF080000U
#define Adr_NX90_hash_din      0xFF080000U
#define DFLT_VAL_NX90_hash_din 0x00000000U

#define MSK_NX90_hash_din_val         0xffffffffU
#define SRT_NX90_hash_din_val         0
#define DFLT_VAL_NX90_hash_din_val    0x00000000U
#define DFLT_BF_VAL_NX90_hash_din_val 0x00000000U

/* all used bits of 'NX90_hash_din': */
#define MSK_USED_BITS_NX90_hash_din 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_cfg */
/* => Hash config register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_cfg  0x00000004U
#define Adr_NX90_hash_hash_cfg 0xFF080004U
#define Adr_NX90_hash_cfg      0xFF080004U
#define DFLT_VAL_NX90_hash_cfg 0x00000020U

#define MSK_NX90_hash_cfg_mode                   0x00000007U
#define SRT_NX90_hash_cfg_mode                   0
#define DFLT_VAL_NX90_hash_cfg_mode              0x00000000U
#define DFLT_BF_VAL_NX90_hash_cfg_mode           0x00000000U
#define MSK_NX90_hash_cfg_reset                  0x00000008U
#define SRT_NX90_hash_cfg_reset                  3
#define DFLT_VAL_NX90_hash_cfg_reset             0x00000000U
#define DFLT_BF_VAL_NX90_hash_cfg_reset          0x00000000U
#define MSK_NX90_hash_cfg_dma_en                 0x00000010U
#define SRT_NX90_hash_cfg_dma_en                 4
#define DFLT_VAL_NX90_hash_cfg_dma_en            0x00000000U
#define DFLT_BF_VAL_NX90_hash_cfg_dma_en         0x00000000U
#define MSK_NX90_hash_cfg_dma_burst_only         0x00000020U
#define SRT_NX90_hash_cfg_dma_burst_only         5
#define DFLT_VAL_NX90_hash_cfg_dma_burst_only    0x00000020U
#define DFLT_BF_VAL_NX90_hash_cfg_dma_burst_only 0x00000001U

/* all used bits of 'NX90_hash_cfg': */
#define MSK_USED_BITS_NX90_hash_cfg 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register hash_stat */
/* => Hash status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_stat  0x00000008U
#define Adr_NX90_hash_hash_stat 0xFF080008U
#define Adr_NX90_hash_stat      0xFF080008U

#define MSK_NX90_hash_stat_fifo_fill 0x000001ffU
#define SRT_NX90_hash_stat_fifo_fill 0

/* all used bits of 'NX90_hash_stat': */
#define MSK_USED_BITS_NX90_hash_stat 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register hash_debug_info */
/* => Hash info register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_debug_info  0x0000000CU
#define Adr_NX90_hash_hash_debug_info 0xFF08000CU
#define Adr_NX90_hash_debug_info      0xFF08000CU

#define MSK_NX90_hash_debug_info_sha_round 0x0000007fU
#define SRT_NX90_hash_debug_info_sha_round 0

/* all used bits of 'NX90_hash_debug_info': */
#define MSK_USED_BITS_NX90_hash_debug_info 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register hash_irq_raw */
/* => Hash raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_raw  0x00000010U
#define Adr_NX90_hash_hash_irq_raw 0xFF080010U
#define Adr_NX90_hash_irq_raw      0xFF080010U
#define DFLT_VAL_NX90_hash_irq_raw 0x00000000U

#define MSK_NX90_hash_irq_raw_hash_ready            0x00000001U
#define SRT_NX90_hash_irq_raw_hash_ready            0
#define DFLT_VAL_NX90_hash_irq_raw_hash_ready       0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_raw_hash_ready    0x00000000U
#define MSK_NX90_hash_irq_raw_fifo_underrun         0x00000002U
#define SRT_NX90_hash_irq_raw_fifo_underrun         1
#define DFLT_VAL_NX90_hash_irq_raw_fifo_underrun    0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_raw_fifo_underrun 0x00000000U
#define MSK_NX90_hash_irq_raw_fifo_overflow         0x00000004U
#define SRT_NX90_hash_irq_raw_fifo_overflow         2
#define DFLT_VAL_NX90_hash_irq_raw_fifo_overflow    0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_raw_fifo_overflow 0x00000000U

/* all used bits of 'NX90_hash_irq_raw': */
#define MSK_USED_BITS_NX90_hash_irq_raw 0x00000007U

/* --------------------------------------------------------------------- */
/* Register hash_irq_masked */
/* => Hash masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_masked  0x00000014U
#define Adr_NX90_hash_hash_irq_masked 0xFF080014U
#define Adr_NX90_hash_irq_masked      0xFF080014U

#define MSK_NX90_hash_irq_masked_hash_ready    0x00000001U
#define SRT_NX90_hash_irq_masked_hash_ready    0
#define MSK_NX90_hash_irq_masked_fifo_underrun 0x00000002U
#define SRT_NX90_hash_irq_masked_fifo_underrun 1
#define MSK_NX90_hash_irq_masked_fifo_overflow 0x00000004U
#define SRT_NX90_hash_irq_masked_fifo_overflow 2

/* all used bits of 'NX90_hash_irq_masked': */
#define MSK_USED_BITS_NX90_hash_irq_masked 0x00000007U

/* --------------------------------------------------------------------- */
/* Register hash_irq_msk_set */
/* => Hash IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to crypt_hash_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_msk_set  0x00000018U
#define Adr_NX90_hash_hash_irq_msk_set 0xFF080018U
#define Adr_NX90_hash_irq_msk_set      0xFF080018U
#define DFLT_VAL_NX90_hash_irq_msk_set 0x00000000U

#define MSK_NX90_hash_irq_msk_set_hash_ready            0x00000001U
#define SRT_NX90_hash_irq_msk_set_hash_ready            0
#define DFLT_VAL_NX90_hash_irq_msk_set_hash_ready       0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_msk_set_hash_ready    0x00000000U
#define MSK_NX90_hash_irq_msk_set_fifo_underrun         0x00000002U
#define SRT_NX90_hash_irq_msk_set_fifo_underrun         1
#define DFLT_VAL_NX90_hash_irq_msk_set_fifo_underrun    0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_msk_set_fifo_underrun 0x00000000U
#define MSK_NX90_hash_irq_msk_set_fifo_overflow         0x00000004U
#define SRT_NX90_hash_irq_msk_set_fifo_overflow         2
#define DFLT_VAL_NX90_hash_irq_msk_set_fifo_overflow    0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_msk_set_fifo_overflow 0x00000000U

/* all used bits of 'NX90_hash_irq_msk_set': */
#define MSK_USED_BITS_NX90_hash_irq_msk_set 0x00000007U

/* --------------------------------------------------------------------- */
/* Register hash_irq_msk_reset */
/* => Hash IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_msk_reset  0x0000001CU
#define Adr_NX90_hash_hash_irq_msk_reset 0xFF08001CU
#define Adr_NX90_hash_irq_msk_reset      0xFF08001CU
#define DFLT_VAL_NX90_hash_irq_msk_reset 0x00000000U

#define MSK_NX90_hash_irq_msk_reset_hash_ready            0x00000001U
#define SRT_NX90_hash_irq_msk_reset_hash_ready            0
#define DFLT_VAL_NX90_hash_irq_msk_reset_hash_ready       0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_msk_reset_hash_ready    0x00000000U
#define MSK_NX90_hash_irq_msk_reset_fifo_underrun         0x00000002U
#define SRT_NX90_hash_irq_msk_reset_fifo_underrun         1
#define DFLT_VAL_NX90_hash_irq_msk_reset_fifo_underrun    0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_msk_reset_fifo_underrun 0x00000000U
#define MSK_NX90_hash_irq_msk_reset_fifo_overflow         0x00000004U
#define SRT_NX90_hash_irq_msk_reset_fifo_overflow         2
#define DFLT_VAL_NX90_hash_irq_msk_reset_fifo_overflow    0x00000000U
#define DFLT_BF_VAL_NX90_hash_irq_msk_reset_fifo_overflow 0x00000000U

/* all used bits of 'NX90_hash_irq_msk_reset': */
#define MSK_USED_BITS_NX90_hash_irq_msk_reset 0x00000007U

/* --------------------------------------------------------------------- */
/* Register hash_dout0 */
/* => Hash value0 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout0  0x00000020U
#define Adr_NX90_hash_hash_dout0 0xFF080020U
#define Adr_NX90_hash_dout0      0xFF080020U

#define MSK_NX90_hash_dout0_val 0xffffffffU
#define SRT_NX90_hash_dout0_val 0

/* all used bits of 'NX90_hash_dout0': */
#define MSK_USED_BITS_NX90_hash_dout0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout1 */
/* => Hash value1 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout1  0x00000024U
#define Adr_NX90_hash_hash_dout1 0xFF080024U
#define Adr_NX90_hash_dout1      0xFF080024U

#define MSK_NX90_hash_dout1_val 0xffffffffU
#define SRT_NX90_hash_dout1_val 0

/* all used bits of 'NX90_hash_dout1': */
#define MSK_USED_BITS_NX90_hash_dout1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout2 */
/* => Hash value2 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout2  0x00000028U
#define Adr_NX90_hash_hash_dout2 0xFF080028U
#define Adr_NX90_hash_dout2      0xFF080028U

#define MSK_NX90_hash_dout2_val 0xffffffffU
#define SRT_NX90_hash_dout2_val 0

/* all used bits of 'NX90_hash_dout2': */
#define MSK_USED_BITS_NX90_hash_dout2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout3 */
/* => Hash value3 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout3  0x0000002CU
#define Adr_NX90_hash_hash_dout3 0xFF08002CU
#define Adr_NX90_hash_dout3      0xFF08002CU

#define MSK_NX90_hash_dout3_val 0xffffffffU
#define SRT_NX90_hash_dout3_val 0

/* all used bits of 'NX90_hash_dout3': */
#define MSK_USED_BITS_NX90_hash_dout3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout4 */
/* => Hash value4 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout4  0x00000030U
#define Adr_NX90_hash_hash_dout4 0xFF080030U
#define Adr_NX90_hash_dout4      0xFF080030U

#define MSK_NX90_hash_dout4_val 0xffffffffU
#define SRT_NX90_hash_dout4_val 0

/* all used bits of 'NX90_hash_dout4': */
#define MSK_USED_BITS_NX90_hash_dout4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout5 */
/* => Hash value5 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout5  0x00000034U
#define Adr_NX90_hash_hash_dout5 0xFF080034U
#define Adr_NX90_hash_dout5      0xFF080034U

#define MSK_NX90_hash_dout5_val 0xffffffffU
#define SRT_NX90_hash_dout5_val 0

/* all used bits of 'NX90_hash_dout5': */
#define MSK_USED_BITS_NX90_hash_dout5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout6 */
/* => Hash value6 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout6  0x00000038U
#define Adr_NX90_hash_hash_dout6 0xFF080038U
#define Adr_NX90_hash_dout6      0xFF080038U

#define MSK_NX90_hash_dout6_val 0xffffffffU
#define SRT_NX90_hash_dout6_val 0

/* all used bits of 'NX90_hash_dout6': */
#define MSK_USED_BITS_NX90_hash_dout6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout7 */
/* => Hash value7 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout7  0x0000003CU
#define Adr_NX90_hash_hash_dout7 0xFF08003CU
#define Adr_NX90_hash_dout7      0xFF08003CU

#define MSK_NX90_hash_dout7_val 0xffffffffU
#define SRT_NX90_hash_dout7_val 0

/* all used bits of 'NX90_hash_dout7': */
#define MSK_USED_BITS_NX90_hash_dout7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout8 */
/* => Hash value8 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout8  0x00000040U
#define Adr_NX90_hash_hash_dout8 0xFF080040U
#define Adr_NX90_hash_dout8      0xFF080040U

#define MSK_NX90_hash_dout8_val 0xffffffffU
#define SRT_NX90_hash_dout8_val 0

/* all used bits of 'NX90_hash_dout8': */
#define MSK_USED_BITS_NX90_hash_dout8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout9 */
/* => Hash value9 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout9  0x00000044U
#define Adr_NX90_hash_hash_dout9 0xFF080044U
#define Adr_NX90_hash_dout9      0xFF080044U

#define MSK_NX90_hash_dout9_val 0xffffffffU
#define SRT_NX90_hash_dout9_val 0

/* all used bits of 'NX90_hash_dout9': */
#define MSK_USED_BITS_NX90_hash_dout9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout10 */
/* => Hash value10 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout10  0x00000048U
#define Adr_NX90_hash_hash_dout10 0xFF080048U
#define Adr_NX90_hash_dout10      0xFF080048U

#define MSK_NX90_hash_dout10_val 0xffffffffU
#define SRT_NX90_hash_dout10_val 0

/* all used bits of 'NX90_hash_dout10': */
#define MSK_USED_BITS_NX90_hash_dout10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout11 */
/* => Hash value11 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout11  0x0000004CU
#define Adr_NX90_hash_hash_dout11 0xFF08004CU
#define Adr_NX90_hash_dout11      0xFF08004CU

#define MSK_NX90_hash_dout11_val 0xffffffffU
#define SRT_NX90_hash_dout11_val 0

/* all used bits of 'NX90_hash_dout11': */
#define MSK_USED_BITS_NX90_hash_dout11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout12 */
/* => Hash value12 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout12  0x00000050U
#define Adr_NX90_hash_hash_dout12 0xFF080050U
#define Adr_NX90_hash_dout12      0xFF080050U

#define MSK_NX90_hash_dout12_val 0xffffffffU
#define SRT_NX90_hash_dout12_val 0

/* all used bits of 'NX90_hash_dout12': */
#define MSK_USED_BITS_NX90_hash_dout12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout13 */
/* => Hash value13 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout13  0x00000054U
#define Adr_NX90_hash_hash_dout13 0xFF080054U
#define Adr_NX90_hash_dout13      0xFF080054U

#define MSK_NX90_hash_dout13_val 0xffffffffU
#define SRT_NX90_hash_dout13_val 0

/* all used bits of 'NX90_hash_dout13': */
#define MSK_USED_BITS_NX90_hash_dout13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout14 */
/* => Hash value14 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout14  0x00000058U
#define Adr_NX90_hash_hash_dout14 0xFF080058U
#define Adr_NX90_hash_dout14      0xFF080058U

#define MSK_NX90_hash_dout14_val 0xffffffffU
#define SRT_NX90_hash_dout14_val 0

/* all used bits of 'NX90_hash_dout14': */
#define MSK_USED_BITS_NX90_hash_dout14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register hash_dout15 */
/* => Hash value15 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout15  0x0000005CU
#define Adr_NX90_hash_hash_dout15 0xFF08005CU
#define Adr_NX90_hash_dout15      0xFF08005CU

#define MSK_NX90_hash_dout15_val 0xffffffffU
#define SRT_NX90_hash_dout15_val 0

/* all used bits of 'NX90_hash_dout15': */
#define MSK_USED_BITS_NX90_hash_dout15 0xffffffffU


/* ===================================================================== */

/* Area of aes */

/* ===================================================================== */

#define Addr_NX90_aes 0xFF080080U

/* --------------------------------------------------------------------- */
/* Register aes_cfg */
/* => AES config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_cfg  0x00000000U
#define Adr_NX90_aes_aes_cfg  0xFF080080U
#define Adr_NX90_aes_cfg      0xFF080080U
#define DFLT_VAL_NX90_aes_cfg 0x00148200U

#define MSK_NX90_aes_cfg_enable                          0x00000001U
#define SRT_NX90_aes_cfg_enable                          0
#define DFLT_VAL_NX90_aes_cfg_enable                     0x00000000U
#define DFLT_BF_VAL_NX90_aes_cfg_enable                  0x00000000U
#define MSK_NX90_aes_cfg_mode                            0x00000002U
#define SRT_NX90_aes_cfg_mode                            1
#define DFLT_VAL_NX90_aes_cfg_mode                       0x00000000U
#define DFLT_BF_VAL_NX90_aes_cfg_mode                    0x00000000U
#define MSK_NX90_aes_cfg_key_len                         0x0000000cU
#define SRT_NX90_aes_cfg_key_len                         2
#define DFLT_VAL_NX90_aes_cfg_key_len                    0x00000000U
#define DFLT_BF_VAL_NX90_aes_cfg_key_len                 0x00000000U
#define MSK_NX90_aes_cfg_key_exp_start                   0x00000010U
#define SRT_NX90_aes_cfg_key_exp_start                   4
#define DFLT_VAL_NX90_aes_cfg_key_exp_start              0x00000000U
#define DFLT_BF_VAL_NX90_aes_cfg_key_exp_start           0x00000000U
#define MSK_NX90_aes_cfg_in_fifo_wm                      0x000007e0U
#define SRT_NX90_aes_cfg_in_fifo_wm                      5
#define DFLT_VAL_NX90_aes_cfg_in_fifo_wm                 0x00000200U
#define DFLT_BF_VAL_NX90_aes_cfg_in_fifo_wm              0x00000010U
#define MSK_NX90_aes_cfg_out_fifo_wm                     0x0001f800U
#define SRT_NX90_aes_cfg_out_fifo_wm                     11
#define DFLT_VAL_NX90_aes_cfg_out_fifo_wm                0x00008000U
#define DFLT_BF_VAL_NX90_aes_cfg_out_fifo_wm             0x00000010U
#define MSK_NX90_aes_cfg_in_fifo_dma_en                  0x00020000U
#define SRT_NX90_aes_cfg_in_fifo_dma_en                  17
#define DFLT_VAL_NX90_aes_cfg_in_fifo_dma_en             0x00000000U
#define DFLT_BF_VAL_NX90_aes_cfg_in_fifo_dma_en          0x00000000U
#define MSK_NX90_aes_cfg_in_fifo_dma_burst_only          0x00040000U
#define SRT_NX90_aes_cfg_in_fifo_dma_burst_only          18
#define DFLT_VAL_NX90_aes_cfg_in_fifo_dma_burst_only     0x00040000U
#define DFLT_BF_VAL_NX90_aes_cfg_in_fifo_dma_burst_only  0x00000001U
#define MSK_NX90_aes_cfg_out_fifo_dma_en                 0x00080000U
#define SRT_NX90_aes_cfg_out_fifo_dma_en                 19
#define DFLT_VAL_NX90_aes_cfg_out_fifo_dma_en            0x00000000U
#define DFLT_BF_VAL_NX90_aes_cfg_out_fifo_dma_en         0x00000000U
#define MSK_NX90_aes_cfg_out_fifo_dma_burst_only         0x00100000U
#define SRT_NX90_aes_cfg_out_fifo_dma_burst_only         20
#define DFLT_VAL_NX90_aes_cfg_out_fifo_dma_burst_only    0x00100000U
#define DFLT_BF_VAL_NX90_aes_cfg_out_fifo_dma_burst_only 0x00000001U

/* all used bits of 'NX90_aes_cfg': */
#define MSK_USED_BITS_NX90_aes_cfg 0x001fffffU

/* --------------------------------------------------------------------- */
/* Register aes_stat */
/* => AES status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_stat 0x00000004U
#define Adr_NX90_aes_aes_stat 0xFF080084U
#define Adr_NX90_aes_stat     0xFF080084U

#define MSK_NX90_aes_stat_key_exp_ready      0x00000001U
#define SRT_NX90_aes_stat_key_exp_ready      0
#define MSK_NX90_aes_stat_op_ready           0x00000002U
#define SRT_NX90_aes_stat_op_ready           1
#define MSK_NX90_aes_stat_in_fifo_fill       0x000001fcU
#define SRT_NX90_aes_stat_in_fifo_fill       2
#define MSK_NX90_aes_stat_in_fifo_empty      0x00000200U
#define SRT_NX90_aes_stat_in_fifo_empty      9
#define MSK_NX90_aes_stat_in_fifo_not_empty  0x00000400U
#define SRT_NX90_aes_stat_in_fifo_not_empty  10
#define MSK_NX90_aes_stat_in_fifo_full       0x00000800U
#define SRT_NX90_aes_stat_in_fifo_full       11
#define MSK_NX90_aes_stat_in_fifo_not_full   0x00001000U
#define SRT_NX90_aes_stat_in_fifo_not_full   12
#define MSK_NX90_aes_stat_in_fifo_underrun   0x00002000U
#define SRT_NX90_aes_stat_in_fifo_underrun   13
#define MSK_NX90_aes_stat_in_fifo_overflow   0x00004000U
#define SRT_NX90_aes_stat_in_fifo_overflow   14
#define MSK_NX90_aes_stat_out_fifo_fill      0x003f8000U
#define SRT_NX90_aes_stat_out_fifo_fill      15
#define MSK_NX90_aes_stat_out_fifo_empty     0x00400000U
#define SRT_NX90_aes_stat_out_fifo_empty     22
#define MSK_NX90_aes_stat_out_fifo_not_empty 0x00800000U
#define SRT_NX90_aes_stat_out_fifo_not_empty 23
#define MSK_NX90_aes_stat_out_fifo_full      0x01000000U
#define SRT_NX90_aes_stat_out_fifo_full      24
#define MSK_NX90_aes_stat_out_fifo_not_full  0x02000000U
#define SRT_NX90_aes_stat_out_fifo_not_full  25
#define MSK_NX90_aes_stat_out_fifo_underrun  0x04000000U
#define SRT_NX90_aes_stat_out_fifo_underrun  26
#define MSK_NX90_aes_stat_out_fifo_overflow  0x08000000U
#define SRT_NX90_aes_stat_out_fifo_overflow  27

/* all used bits of 'NX90_aes_stat': */
#define MSK_USED_BITS_NX90_aes_stat 0x0fffffffU

/* --------------------------------------------------------------------- */
/* Register aes_irq_raw */
/* => AES raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_raw  0x00000008U
#define Adr_NX90_aes_aes_irq_raw  0xFF080088U
#define Adr_NX90_aes_irq_raw      0xFF080088U
#define DFLT_VAL_NX90_aes_irq_raw 0x00000000U

#define MSK_NX90_aes_irq_raw_key_exp_ready              0x00000001U
#define SRT_NX90_aes_irq_raw_key_exp_ready              0
#define DFLT_VAL_NX90_aes_irq_raw_key_exp_ready         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_key_exp_ready      0x00000000U
#define MSK_NX90_aes_irq_raw_op_ready                   0x00000002U
#define SRT_NX90_aes_irq_raw_op_ready                   1
#define DFLT_VAL_NX90_aes_irq_raw_op_ready              0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_op_ready           0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_wm                 0x00000004U
#define SRT_NX90_aes_irq_raw_in_fifo_wm                 2
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_wm            0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_wm         0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_empty              0x00000008U
#define SRT_NX90_aes_irq_raw_in_fifo_empty              3
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_empty         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_empty      0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_not_empty          0x00000010U
#define SRT_NX90_aes_irq_raw_in_fifo_not_empty          4
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_not_empty     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_not_empty  0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_full               0x00000020U
#define SRT_NX90_aes_irq_raw_in_fifo_full               5
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_full          0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_full       0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_not_full           0x00000040U
#define SRT_NX90_aes_irq_raw_in_fifo_not_full           6
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_not_full      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_not_full   0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_underrun           0x00000080U
#define SRT_NX90_aes_irq_raw_in_fifo_underrun           7
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_underrun      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_underrun   0x00000000U
#define MSK_NX90_aes_irq_raw_in_fifo_overflow           0x00000100U
#define SRT_NX90_aes_irq_raw_in_fifo_overflow           8
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_overflow      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_overflow   0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_wm                0x00000200U
#define SRT_NX90_aes_irq_raw_out_fifo_wm                9
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_wm           0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_wm        0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_empty             0x00000400U
#define SRT_NX90_aes_irq_raw_out_fifo_empty             10
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_empty        0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_empty     0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_not_empty         0x00000800U
#define SRT_NX90_aes_irq_raw_out_fifo_not_empty         11
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_not_empty    0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_not_empty 0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_full              0x00001000U
#define SRT_NX90_aes_irq_raw_out_fifo_full              12
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_full         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_full      0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_not_full          0x00002000U
#define SRT_NX90_aes_irq_raw_out_fifo_not_full          13
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_not_full     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_not_full  0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_underrun          0x00004000U
#define SRT_NX90_aes_irq_raw_out_fifo_underrun          14
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_underrun     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_underrun  0x00000000U
#define MSK_NX90_aes_irq_raw_out_fifo_overflow          0x00008000U
#define SRT_NX90_aes_irq_raw_out_fifo_overflow          15
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_overflow     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_overflow  0x00000000U

/* all used bits of 'NX90_aes_irq_raw': */
#define MSK_USED_BITS_NX90_aes_irq_raw 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register aes_irq_masked */
/* => AES masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_masked 0x0000000CU
#define Adr_NX90_aes_aes_irq_masked 0xFF08008CU
#define Adr_NX90_aes_irq_masked     0xFF08008CU

#define MSK_NX90_aes_irq_masked_key_exp_ready      0x00000001U
#define SRT_NX90_aes_irq_masked_key_exp_ready      0
#define MSK_NX90_aes_irq_masked_op_ready           0x00000002U
#define SRT_NX90_aes_irq_masked_op_ready           1
#define MSK_NX90_aes_irq_masked_in_fifo_wm         0x00000004U
#define SRT_NX90_aes_irq_masked_in_fifo_wm         2
#define MSK_NX90_aes_irq_masked_in_fifo_empty      0x00000008U
#define SRT_NX90_aes_irq_masked_in_fifo_empty      3
#define MSK_NX90_aes_irq_masked_in_fifo_not_empty  0x00000010U
#define SRT_NX90_aes_irq_masked_in_fifo_not_empty  4
#define MSK_NX90_aes_irq_masked_in_fifo_full       0x00000020U
#define SRT_NX90_aes_irq_masked_in_fifo_full       5
#define MSK_NX90_aes_irq_masked_in_fifo_not_full   0x00000040U
#define SRT_NX90_aes_irq_masked_in_fifo_not_full   6
#define MSK_NX90_aes_irq_masked_in_fifo_underrun   0x00000080U
#define SRT_NX90_aes_irq_masked_in_fifo_underrun   7
#define MSK_NX90_aes_irq_masked_in_fifo_overflow   0x00000100U
#define SRT_NX90_aes_irq_masked_in_fifo_overflow   8
#define MSK_NX90_aes_irq_masked_out_fifo_wm        0x00000200U
#define SRT_NX90_aes_irq_masked_out_fifo_wm        9
#define MSK_NX90_aes_irq_masked_out_fifo_empty     0x00000400U
#define SRT_NX90_aes_irq_masked_out_fifo_empty     10
#define MSK_NX90_aes_irq_masked_out_fifo_not_empty 0x00000800U
#define SRT_NX90_aes_irq_masked_out_fifo_not_empty 11
#define MSK_NX90_aes_irq_masked_out_fifo_full      0x00001000U
#define SRT_NX90_aes_irq_masked_out_fifo_full      12
#define MSK_NX90_aes_irq_masked_out_fifo_not_full  0x00002000U
#define SRT_NX90_aes_irq_masked_out_fifo_not_full  13
#define MSK_NX90_aes_irq_masked_out_fifo_underrun  0x00004000U
#define SRT_NX90_aes_irq_masked_out_fifo_underrun  14
#define MSK_NX90_aes_irq_masked_out_fifo_overflow  0x00008000U
#define SRT_NX90_aes_irq_masked_out_fifo_overflow  15

/* all used bits of 'NX90_aes_irq_masked': */
#define MSK_USED_BITS_NX90_aes_irq_masked 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register aes_irq_msk_set */
/* => AES IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to crypt_aes_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_msk_set  0x00000010U
#define Adr_NX90_aes_aes_irq_msk_set  0xFF080090U
#define Adr_NX90_aes_irq_msk_set      0xFF080090U
#define DFLT_VAL_NX90_aes_irq_msk_set 0x00000000U

#define MSK_NX90_aes_irq_msk_set_key_exp_ready              0x00000001U
#define SRT_NX90_aes_irq_msk_set_key_exp_ready              0
#define DFLT_VAL_NX90_aes_irq_msk_set_key_exp_ready         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_key_exp_ready      0x00000000U
#define MSK_NX90_aes_irq_msk_set_op_ready                   0x00000002U
#define SRT_NX90_aes_irq_msk_set_op_ready                   1
#define DFLT_VAL_NX90_aes_irq_msk_set_op_ready              0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_op_ready           0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_wm                 0x00000004U
#define SRT_NX90_aes_irq_msk_set_in_fifo_wm                 2
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_wm            0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_wm         0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_empty              0x00000008U
#define SRT_NX90_aes_irq_msk_set_in_fifo_empty              3
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_empty         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_empty      0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_not_empty          0x00000010U
#define SRT_NX90_aes_irq_msk_set_in_fifo_not_empty          4
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_not_empty     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_not_empty  0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_full               0x00000020U
#define SRT_NX90_aes_irq_msk_set_in_fifo_full               5
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_full          0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_full       0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_not_full           0x00000040U
#define SRT_NX90_aes_irq_msk_set_in_fifo_not_full           6
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_not_full      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_not_full   0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_underrun           0x00000080U
#define SRT_NX90_aes_irq_msk_set_in_fifo_underrun           7
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_underrun      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_underrun   0x00000000U
#define MSK_NX90_aes_irq_msk_set_in_fifo_overflow           0x00000100U
#define SRT_NX90_aes_irq_msk_set_in_fifo_overflow           8
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_overflow      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_overflow   0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_wm                0x00000200U
#define SRT_NX90_aes_irq_msk_set_out_fifo_wm                9
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_wm           0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_wm        0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_empty             0x00000400U
#define SRT_NX90_aes_irq_msk_set_out_fifo_empty             10
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_empty        0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_empty     0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_not_empty         0x00000800U
#define SRT_NX90_aes_irq_msk_set_out_fifo_not_empty         11
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_not_empty    0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_not_empty 0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_full              0x00001000U
#define SRT_NX90_aes_irq_msk_set_out_fifo_full              12
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_full         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_full      0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_not_full          0x00002000U
#define SRT_NX90_aes_irq_msk_set_out_fifo_not_full          13
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_not_full     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_not_full  0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_underrun          0x00004000U
#define SRT_NX90_aes_irq_msk_set_out_fifo_underrun          14
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_underrun     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_underrun  0x00000000U
#define MSK_NX90_aes_irq_msk_set_out_fifo_overflow          0x00008000U
#define SRT_NX90_aes_irq_msk_set_out_fifo_overflow          15
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_overflow     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_overflow  0x00000000U

/* all used bits of 'NX90_aes_irq_msk_set': */
#define MSK_USED_BITS_NX90_aes_irq_msk_set 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register aes_irq_msk_reset */
/* => AES IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_msk_reset  0x00000014U
#define Adr_NX90_aes_aes_irq_msk_reset  0xFF080094U
#define Adr_NX90_aes_irq_msk_reset      0xFF080094U
#define DFLT_VAL_NX90_aes_irq_msk_reset 0x00000000U

#define MSK_NX90_aes_irq_msk_reset_key_exp_ready              0x00000001U
#define SRT_NX90_aes_irq_msk_reset_key_exp_ready              0
#define DFLT_VAL_NX90_aes_irq_msk_reset_key_exp_ready         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_key_exp_ready      0x00000000U
#define MSK_NX90_aes_irq_msk_reset_op_ready                   0x00000002U
#define SRT_NX90_aes_irq_msk_reset_op_ready                   1
#define DFLT_VAL_NX90_aes_irq_msk_reset_op_ready              0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_op_ready           0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_wm                 0x00000004U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_wm                 2
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_wm            0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_wm         0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_empty              0x00000008U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_empty              3
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_empty         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_empty      0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_not_empty          0x00000010U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_not_empty          4
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_not_empty     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_not_empty  0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_full               0x00000020U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_full               5
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_full          0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_full       0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_not_full           0x00000040U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_not_full           6
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_not_full      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_not_full   0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_underrun           0x00000080U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_underrun           7
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_underrun      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_underrun   0x00000000U
#define MSK_NX90_aes_irq_msk_reset_in_fifo_overflow           0x00000100U
#define SRT_NX90_aes_irq_msk_reset_in_fifo_overflow           8
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_overflow      0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_overflow   0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_wm                0x00000200U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_wm                9
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_wm           0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_wm        0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_empty             0x00000400U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_empty             10
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_empty        0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_empty     0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_not_empty         0x00000800U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_not_empty         11
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_not_empty    0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_not_empty 0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_full              0x00001000U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_full              12
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_full         0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_full      0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_not_full          0x00002000U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_not_full          13
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_not_full     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_not_full  0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_underrun          0x00004000U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_underrun          14
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_underrun     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_underrun  0x00000000U
#define MSK_NX90_aes_irq_msk_reset_out_fifo_overflow          0x00008000U
#define SRT_NX90_aes_irq_msk_reset_out_fifo_overflow          15
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_overflow     0x00000000U
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_overflow  0x00000000U

/* all used bits of 'NX90_aes_irq_msk_reset': */
#define MSK_USED_BITS_NX90_aes_irq_msk_reset 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register aes_key0 */
/* => AES key register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key0  0x00000018U
#define Adr_NX90_aes_aes_key0  0xFF080098U
#define Adr_NX90_aes_key0      0xFF080098U
#define DFLT_VAL_NX90_aes_key0 0x00000000U

#define MSK_NX90_aes_key0_val         0xffffffffU
#define SRT_NX90_aes_key0_val         0
#define DFLT_VAL_NX90_aes_key0_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key0_val 0x00000000U

/* all used bits of 'NX90_aes_key0': */
#define MSK_USED_BITS_NX90_aes_key0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key1 */
/* => AES key register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key1  0x0000001CU
#define Adr_NX90_aes_aes_key1  0xFF08009CU
#define Adr_NX90_aes_key1      0xFF08009CU
#define DFLT_VAL_NX90_aes_key1 0x00000000U

#define MSK_NX90_aes_key1_val         0xffffffffU
#define SRT_NX90_aes_key1_val         0
#define DFLT_VAL_NX90_aes_key1_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key1_val 0x00000000U

/* all used bits of 'NX90_aes_key1': */
#define MSK_USED_BITS_NX90_aes_key1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key2 */
/* => AES key register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key2  0x00000020U
#define Adr_NX90_aes_aes_key2  0xFF0800A0U
#define Adr_NX90_aes_key2      0xFF0800A0U
#define DFLT_VAL_NX90_aes_key2 0x00000000U

#define MSK_NX90_aes_key2_val         0xffffffffU
#define SRT_NX90_aes_key2_val         0
#define DFLT_VAL_NX90_aes_key2_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key2_val 0x00000000U

/* all used bits of 'NX90_aes_key2': */
#define MSK_USED_BITS_NX90_aes_key2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key3 */
/* => AES key register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key3  0x00000024U
#define Adr_NX90_aes_aes_key3  0xFF0800A4U
#define Adr_NX90_aes_key3      0xFF0800A4U
#define DFLT_VAL_NX90_aes_key3 0x00000000U

#define MSK_NX90_aes_key3_val         0xffffffffU
#define SRT_NX90_aes_key3_val         0
#define DFLT_VAL_NX90_aes_key3_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key3_val 0x00000000U

/* all used bits of 'NX90_aes_key3': */
#define MSK_USED_BITS_NX90_aes_key3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key4 */
/* => AES key register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key4  0x00000028U
#define Adr_NX90_aes_aes_key4  0xFF0800A8U
#define Adr_NX90_aes_key4      0xFF0800A8U
#define DFLT_VAL_NX90_aes_key4 0x00000000U

#define MSK_NX90_aes_key4_val         0xffffffffU
#define SRT_NX90_aes_key4_val         0
#define DFLT_VAL_NX90_aes_key4_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key4_val 0x00000000U

/* all used bits of 'NX90_aes_key4': */
#define MSK_USED_BITS_NX90_aes_key4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key5 */
/* => AES key register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key5  0x0000002CU
#define Adr_NX90_aes_aes_key5  0xFF0800ACU
#define Adr_NX90_aes_key5      0xFF0800ACU
#define DFLT_VAL_NX90_aes_key5 0x00000000U

#define MSK_NX90_aes_key5_val         0xffffffffU
#define SRT_NX90_aes_key5_val         0
#define DFLT_VAL_NX90_aes_key5_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key5_val 0x00000000U

/* all used bits of 'NX90_aes_key5': */
#define MSK_USED_BITS_NX90_aes_key5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key6 */
/* => AES key register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key6  0x00000030U
#define Adr_NX90_aes_aes_key6  0xFF0800B0U
#define Adr_NX90_aes_key6      0xFF0800B0U
#define DFLT_VAL_NX90_aes_key6 0x00000000U

#define MSK_NX90_aes_key6_val         0xffffffffU
#define SRT_NX90_aes_key6_val         0
#define DFLT_VAL_NX90_aes_key6_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key6_val 0x00000000U

/* all used bits of 'NX90_aes_key6': */
#define MSK_USED_BITS_NX90_aes_key6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_key7 */
/* => AES key register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key7  0x00000034U
#define Adr_NX90_aes_aes_key7  0xFF0800B4U
#define Adr_NX90_aes_key7      0xFF0800B4U
#define DFLT_VAL_NX90_aes_key7 0x00000000U

#define MSK_NX90_aes_key7_val         0xffffffffU
#define SRT_NX90_aes_key7_val         0
#define DFLT_VAL_NX90_aes_key7_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_key7_val 0x00000000U

/* all used bits of 'NX90_aes_key7': */
#define MSK_USED_BITS_NX90_aes_key7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_din */
/* => AES FIFO input */
/*    Unlike all other registers, this address can be written with DWord(32 Bit), Word(16 Bit) or Byte acccss. */
/*    The FIFO controller will automatically collect data and start AES-calculation, */
/*    if enough data (4 DWords) are collected. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_din  0x00000038U
#define Adr_NX90_aes_aes_din  0xFF0800B8U
#define Adr_NX90_aes_din      0xFF0800B8U
#define DFLT_VAL_NX90_aes_din 0x00000000U

#define MSK_NX90_aes_din_val         0xffffffffU
#define SRT_NX90_aes_din_val         0
#define DFLT_VAL_NX90_aes_din_val    0x00000000U
#define DFLT_BF_VAL_NX90_aes_din_val 0x00000000U

/* all used bits of 'NX90_aes_din': */
#define MSK_USED_BITS_NX90_aes_din 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register aes_dout */
/* => AES FIFO output */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_dout 0x0000003CU
#define Adr_NX90_aes_aes_dout 0xFF0800BCU
#define Adr_NX90_aes_dout     0xFF0800BCU

#define MSK_NX90_aes_dout_val 0xffffffffU
#define SRT_NX90_aes_dout_val 0

/* all used bits of 'NX90_aes_dout': */
#define MSK_USED_BITS_NX90_aes_dout 0xffffffffU


/* ===================================================================== */

/* Area of random */

/* ===================================================================== */

#define Addr_NX90_random 0xFF0800C0U

/* --------------------------------------------------------------------- */
/* Register random_init */
/* => Random initialization value: */
/*    Write a value depending on Chip ID to this register to generate a random sequence different for each netX. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_random_init    0x00000000U
#define Adr_NX90_random_random_init 0xFF0800C0U
#define Adr_NX90_random_init        0xFF0800C0U
#define DFLT_VAL_NX90_random_init   0x55555555U

#define MSK_NX90_random_init_val         0xffffffffU
#define SRT_NX90_random_init_val         0
#define DFLT_VAL_NX90_random_init_val    0x55555555U
#define DFLT_BF_VAL_NX90_random_init_val 0x55555555U

/* all used bits of 'NX90_random_init': */
#define MSK_USED_BITS_NX90_random_init 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register random_random */
/* => Random value: */
/*    This random value sequence is derived from many random events inside netX chip. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_random_random    0x00000004U
#define Adr_NX90_random_random_random 0xFF0800C4U
#define Adr_NX90_random_random        0xFF0800C4U

#define MSK_NX90_random_random_val 0xffffffffU
#define SRT_NX90_random_random_val 0

/* all used bits of 'NX90_random_random': */
#define MSK_USED_BITS_NX90_random_random 0xffffffffU


/* ===================================================================== */

/* Area of mtgy */

/* ===================================================================== */

#define Addr_NX90_mtgy 0xFF082000U

/* --------------------------------------------------------------------- */
/* Register mtgy_cmd */
/* => MWMM command register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_cmd  0x00000000U
#define Adr_NX90_mtgy_mtgy_cmd 0xFF082000U
#define Adr_NX90_mtgy_cmd      0xFF082000U
#define DFLT_VAL_NX90_mtgy_cmd 0x00000094U

#define MSK_NX90_mtgy_cmd_start              0x00000001U
#define SRT_NX90_mtgy_cmd_start              0
#define DFLT_VAL_NX90_mtgy_cmd_start         0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_start      0x00000000U
#define MSK_NX90_mtgy_cmd_abort              0x00000002U
#define SRT_NX90_mtgy_cmd_abort              1
#define DFLT_VAL_NX90_mtgy_cmd_abort         0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_abort      0x00000000U
#define MSK_NX90_mtgy_cmd_f_sel              0x00000004U
#define SRT_NX90_mtgy_cmd_f_sel              2
#define DFLT_VAL_NX90_mtgy_cmd_f_sel         0x00000004U
#define DFLT_BF_VAL_NX90_mtgy_cmd_f_sel      0x00000001U
#define MSK_NX90_mtgy_cmd_precision          0x000000f0U
#define SRT_NX90_mtgy_cmd_precision          4
#define DFLT_VAL_NX90_mtgy_cmd_precision     0x00000090U
#define DFLT_BF_VAL_NX90_mtgy_cmd_precision  0x00000009U
#define MSK_NX90_mtgy_cmd_op                 0x00000f00U
#define SRT_NX90_mtgy_cmd_op                 8
#define DFLT_VAL_NX90_mtgy_cmd_op            0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_op         0x00000000U
#define MSK_NX90_mtgy_cmd_src_addr           0x0001f000U
#define SRT_NX90_mtgy_cmd_src_addr           12
#define DFLT_VAL_NX90_mtgy_cmd_src_addr      0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_src_addr   0x00000000U
#define MSK_NX90_mtgy_cmd_dest_addr          0x003e0000U
#define SRT_NX90_mtgy_cmd_dest_addr          17
#define DFLT_VAL_NX90_mtgy_cmd_dest_addr     0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_dest_addr  0x00000000U
#define MSK_NX90_mtgy_cmd_src_addr_e         0x07c00000U
#define SRT_NX90_mtgy_cmd_src_addr_e         22
#define DFLT_VAL_NX90_mtgy_cmd_src_addr_e    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_src_addr_e 0x00000000U
#define MSK_NX90_mtgy_cmd_src_addr_x         0xf8000000U
#define SRT_NX90_mtgy_cmd_src_addr_x         27
#define DFLT_VAL_NX90_mtgy_cmd_src_addr_x    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_cmd_src_addr_x 0x00000000U

/* all used bits of 'NX90_mtgy_cmd': */
#define MSK_USED_BITS_NX90_mtgy_cmd 0xfffffff7U

/* --------------------------------------------------------------------- */
/* Register mtgy_stat */
/* => MWMM status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_stat  0x00000004U
#define Adr_NX90_mtgy_mtgy_stat 0xFF082004U
#define Adr_NX90_mtgy_stat      0xFF082004U

#define MSK_NX90_mtgy_stat_done 0x00000001U
#define SRT_NX90_mtgy_stat_done 0

/* all used bits of 'NX90_mtgy_stat': */
#define MSK_USED_BITS_NX90_mtgy_stat 0x00000001U

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_raw */
/* => MWMM raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_raw  0x00000008U
#define Adr_NX90_mtgy_mtgy_irq_raw 0xFF082008U
#define Adr_NX90_mtgy_irq_raw      0xFF082008U
#define DFLT_VAL_NX90_mtgy_irq_raw 0x00000000U

#define MSK_NX90_mtgy_irq_raw_done         0x00000001U
#define SRT_NX90_mtgy_irq_raw_done         0
#define DFLT_VAL_NX90_mtgy_irq_raw_done    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_irq_raw_done 0x00000000U

/* all used bits of 'NX90_mtgy_irq_raw': */
#define MSK_USED_BITS_NX90_mtgy_irq_raw 0x00000001U

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_masked */
/* => MWMM masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_masked  0x0000000CU
#define Adr_NX90_mtgy_mtgy_irq_masked 0xFF08200CU
#define Adr_NX90_mtgy_irq_masked      0xFF08200CU

#define MSK_NX90_mtgy_irq_masked_done 0x00000001U
#define SRT_NX90_mtgy_irq_masked_done 0

/* all used bits of 'NX90_mtgy_irq_masked': */
#define MSK_USED_BITS_NX90_mtgy_irq_masked 0x00000001U

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_msk_set */
/* => MWMM IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to mtgy_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_msk_set  0x00000010U
#define Adr_NX90_mtgy_mtgy_irq_msk_set 0xFF082010U
#define Adr_NX90_mtgy_irq_msk_set      0xFF082010U
#define DFLT_VAL_NX90_mtgy_irq_msk_set 0x00000000U

#define MSK_NX90_mtgy_irq_msk_set_done         0x00000001U
#define SRT_NX90_mtgy_irq_msk_set_done         0
#define DFLT_VAL_NX90_mtgy_irq_msk_set_done    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_irq_msk_set_done 0x00000000U

/* all used bits of 'NX90_mtgy_irq_msk_set': */
#define MSK_USED_BITS_NX90_mtgy_irq_msk_set 0x00000001U

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_msk_reset */
/* => MWMM IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_msk_reset  0x00000014U
#define Adr_NX90_mtgy_mtgy_irq_msk_reset 0xFF082014U
#define Adr_NX90_mtgy_irq_msk_reset      0xFF082014U
#define DFLT_VAL_NX90_mtgy_irq_msk_reset 0x00000000U

#define MSK_NX90_mtgy_irq_msk_reset_done         0x00000001U
#define SRT_NX90_mtgy_irq_msk_reset_done         0
#define DFLT_VAL_NX90_mtgy_irq_msk_reset_done    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_irq_msk_reset_done 0x00000000U

/* all used bits of 'NX90_mtgy_irq_msk_reset': */
#define MSK_USED_BITS_NX90_mtgy_irq_msk_reset 0x00000001U

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc0 */
/* => MWMM TC register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc0  0x00001000U
#define Adr_NX90_mtgy_mtgy_op_tc0 0xFF083000U
#define Adr_NX90_mtgy_op_tc0      0xFF083000U
#define DFLT_VAL_NX90_mtgy_op_tc0 0x00000000U

#define MSK_NX90_mtgy_op_tc0_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc0_val         0
#define DFLT_VAL_NX90_mtgy_op_tc0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc0': */
#define MSK_USED_BITS_NX90_mtgy_op_tc0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc1 */
/* => MWMM TC register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc1  0x00001004U
#define Adr_NX90_mtgy_mtgy_op_tc1 0xFF083004U
#define Adr_NX90_mtgy_op_tc1      0xFF083004U
#define DFLT_VAL_NX90_mtgy_op_tc1 0x00000000U

#define MSK_NX90_mtgy_op_tc1_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc1_val         0
#define DFLT_VAL_NX90_mtgy_op_tc1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc1': */
#define MSK_USED_BITS_NX90_mtgy_op_tc1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc2 */
/* => MWMM TC register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc2  0x00001008U
#define Adr_NX90_mtgy_mtgy_op_tc2 0xFF083008U
#define Adr_NX90_mtgy_op_tc2      0xFF083008U
#define DFLT_VAL_NX90_mtgy_op_tc2 0x00000000U

#define MSK_NX90_mtgy_op_tc2_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc2_val         0
#define DFLT_VAL_NX90_mtgy_op_tc2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc2': */
#define MSK_USED_BITS_NX90_mtgy_op_tc2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc3 */
/* => MWMM TC register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc3  0x0000100CU
#define Adr_NX90_mtgy_mtgy_op_tc3 0xFF08300CU
#define Adr_NX90_mtgy_op_tc3      0xFF08300CU
#define DFLT_VAL_NX90_mtgy_op_tc3 0x00000000U

#define MSK_NX90_mtgy_op_tc3_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc3_val         0
#define DFLT_VAL_NX90_mtgy_op_tc3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc3': */
#define MSK_USED_BITS_NX90_mtgy_op_tc3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc4 */
/* => MWMM TC register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc4  0x00001010U
#define Adr_NX90_mtgy_mtgy_op_tc4 0xFF083010U
#define Adr_NX90_mtgy_op_tc4      0xFF083010U
#define DFLT_VAL_NX90_mtgy_op_tc4 0x00000000U

#define MSK_NX90_mtgy_op_tc4_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc4_val         0
#define DFLT_VAL_NX90_mtgy_op_tc4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc4': */
#define MSK_USED_BITS_NX90_mtgy_op_tc4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc5 */
/* => MWMM TC register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc5  0x00001014U
#define Adr_NX90_mtgy_mtgy_op_tc5 0xFF083014U
#define Adr_NX90_mtgy_op_tc5      0xFF083014U
#define DFLT_VAL_NX90_mtgy_op_tc5 0x00000000U

#define MSK_NX90_mtgy_op_tc5_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc5_val         0
#define DFLT_VAL_NX90_mtgy_op_tc5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc5': */
#define MSK_USED_BITS_NX90_mtgy_op_tc5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc6 */
/* => MWMM TC register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc6  0x00001018U
#define Adr_NX90_mtgy_mtgy_op_tc6 0xFF083018U
#define Adr_NX90_mtgy_op_tc6      0xFF083018U
#define DFLT_VAL_NX90_mtgy_op_tc6 0x00000000U

#define MSK_NX90_mtgy_op_tc6_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc6_val         0
#define DFLT_VAL_NX90_mtgy_op_tc6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc6': */
#define MSK_USED_BITS_NX90_mtgy_op_tc6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc7 */
/* => MWMM TC register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc7  0x0000101CU
#define Adr_NX90_mtgy_mtgy_op_tc7 0xFF08301CU
#define Adr_NX90_mtgy_op_tc7      0xFF08301CU
#define DFLT_VAL_NX90_mtgy_op_tc7 0x00000000U

#define MSK_NX90_mtgy_op_tc7_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc7_val         0
#define DFLT_VAL_NX90_mtgy_op_tc7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc7': */
#define MSK_USED_BITS_NX90_mtgy_op_tc7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc8 */
/* => MWMM TC register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc8  0x00001020U
#define Adr_NX90_mtgy_mtgy_op_tc8 0xFF083020U
#define Adr_NX90_mtgy_op_tc8      0xFF083020U
#define DFLT_VAL_NX90_mtgy_op_tc8 0x00000000U

#define MSK_NX90_mtgy_op_tc8_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc8_val         0
#define DFLT_VAL_NX90_mtgy_op_tc8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc8': */
#define MSK_USED_BITS_NX90_mtgy_op_tc8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc9 */
/* => MWMM TC register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc9  0x00001024U
#define Adr_NX90_mtgy_mtgy_op_tc9 0xFF083024U
#define Adr_NX90_mtgy_op_tc9      0xFF083024U
#define DFLT_VAL_NX90_mtgy_op_tc9 0x00000000U

#define MSK_NX90_mtgy_op_tc9_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc9_val         0
#define DFLT_VAL_NX90_mtgy_op_tc9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc9': */
#define MSK_USED_BITS_NX90_mtgy_op_tc9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc10 */
/* => MWMM TC register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc10  0x00001028U
#define Adr_NX90_mtgy_mtgy_op_tc10 0xFF083028U
#define Adr_NX90_mtgy_op_tc10      0xFF083028U
#define DFLT_VAL_NX90_mtgy_op_tc10 0x00000000U

#define MSK_NX90_mtgy_op_tc10_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc10_val         0
#define DFLT_VAL_NX90_mtgy_op_tc10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc10': */
#define MSK_USED_BITS_NX90_mtgy_op_tc10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc11 */
/* => MWMM TC register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc11  0x0000102CU
#define Adr_NX90_mtgy_mtgy_op_tc11 0xFF08302CU
#define Adr_NX90_mtgy_op_tc11      0xFF08302CU
#define DFLT_VAL_NX90_mtgy_op_tc11 0x00000000U

#define MSK_NX90_mtgy_op_tc11_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc11_val         0
#define DFLT_VAL_NX90_mtgy_op_tc11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc11': */
#define MSK_USED_BITS_NX90_mtgy_op_tc11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc12 */
/* => MWMM TC register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc12  0x00001030U
#define Adr_NX90_mtgy_mtgy_op_tc12 0xFF083030U
#define Adr_NX90_mtgy_op_tc12      0xFF083030U
#define DFLT_VAL_NX90_mtgy_op_tc12 0x00000000U

#define MSK_NX90_mtgy_op_tc12_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc12_val         0
#define DFLT_VAL_NX90_mtgy_op_tc12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc12': */
#define MSK_USED_BITS_NX90_mtgy_op_tc12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc13 */
/* => MWMM TC register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc13  0x00001034U
#define Adr_NX90_mtgy_mtgy_op_tc13 0xFF083034U
#define Adr_NX90_mtgy_op_tc13      0xFF083034U
#define DFLT_VAL_NX90_mtgy_op_tc13 0x00000000U

#define MSK_NX90_mtgy_op_tc13_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc13_val         0
#define DFLT_VAL_NX90_mtgy_op_tc13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc13': */
#define MSK_USED_BITS_NX90_mtgy_op_tc13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc14 */
/* => MWMM TC register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc14  0x00001038U
#define Adr_NX90_mtgy_mtgy_op_tc14 0xFF083038U
#define Adr_NX90_mtgy_op_tc14      0xFF083038U
#define DFLT_VAL_NX90_mtgy_op_tc14 0x00000000U

#define MSK_NX90_mtgy_op_tc14_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc14_val         0
#define DFLT_VAL_NX90_mtgy_op_tc14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc14': */
#define MSK_USED_BITS_NX90_mtgy_op_tc14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc15 */
/* => MWMM TC register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc15  0x0000103CU
#define Adr_NX90_mtgy_mtgy_op_tc15 0xFF08303CU
#define Adr_NX90_mtgy_op_tc15      0xFF08303CU
#define DFLT_VAL_NX90_mtgy_op_tc15 0x00000000U

#define MSK_NX90_mtgy_op_tc15_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc15_val         0
#define DFLT_VAL_NX90_mtgy_op_tc15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc15': */
#define MSK_USED_BITS_NX90_mtgy_op_tc15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc16 */
/* => MWMM TC register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc16  0x00001040U
#define Adr_NX90_mtgy_mtgy_op_tc16 0xFF083040U
#define Adr_NX90_mtgy_op_tc16      0xFF083040U
#define DFLT_VAL_NX90_mtgy_op_tc16 0x00000000U

#define MSK_NX90_mtgy_op_tc16_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc16_val         0
#define DFLT_VAL_NX90_mtgy_op_tc16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc16': */
#define MSK_USED_BITS_NX90_mtgy_op_tc16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc17 */
/* => MWMM TC register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc17  0x00001044U
#define Adr_NX90_mtgy_mtgy_op_tc17 0xFF083044U
#define Adr_NX90_mtgy_op_tc17      0xFF083044U
#define DFLT_VAL_NX90_mtgy_op_tc17 0x00000000U

#define MSK_NX90_mtgy_op_tc17_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc17_val         0
#define DFLT_VAL_NX90_mtgy_op_tc17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc17': */
#define MSK_USED_BITS_NX90_mtgy_op_tc17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc18 */
/* => MWMM TC register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc18  0x00001048U
#define Adr_NX90_mtgy_mtgy_op_tc18 0xFF083048U
#define Adr_NX90_mtgy_op_tc18      0xFF083048U
#define DFLT_VAL_NX90_mtgy_op_tc18 0x00000000U

#define MSK_NX90_mtgy_op_tc18_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc18_val         0
#define DFLT_VAL_NX90_mtgy_op_tc18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc18': */
#define MSK_USED_BITS_NX90_mtgy_op_tc18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc19 */
/* => MWMM TC register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc19  0x0000104CU
#define Adr_NX90_mtgy_mtgy_op_tc19 0xFF08304CU
#define Adr_NX90_mtgy_op_tc19      0xFF08304CU
#define DFLT_VAL_NX90_mtgy_op_tc19 0x00000000U

#define MSK_NX90_mtgy_op_tc19_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc19_val         0
#define DFLT_VAL_NX90_mtgy_op_tc19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc19': */
#define MSK_USED_BITS_NX90_mtgy_op_tc19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc20 */
/* => MWMM TC register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc20  0x00001050U
#define Adr_NX90_mtgy_mtgy_op_tc20 0xFF083050U
#define Adr_NX90_mtgy_op_tc20      0xFF083050U
#define DFLT_VAL_NX90_mtgy_op_tc20 0x00000000U

#define MSK_NX90_mtgy_op_tc20_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc20_val         0
#define DFLT_VAL_NX90_mtgy_op_tc20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc20': */
#define MSK_USED_BITS_NX90_mtgy_op_tc20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc21 */
/* => MWMM TC register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc21  0x00001054U
#define Adr_NX90_mtgy_mtgy_op_tc21 0xFF083054U
#define Adr_NX90_mtgy_op_tc21      0xFF083054U
#define DFLT_VAL_NX90_mtgy_op_tc21 0x00000000U

#define MSK_NX90_mtgy_op_tc21_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc21_val         0
#define DFLT_VAL_NX90_mtgy_op_tc21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc21': */
#define MSK_USED_BITS_NX90_mtgy_op_tc21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc22 */
/* => MWMM TC register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc22  0x00001058U
#define Adr_NX90_mtgy_mtgy_op_tc22 0xFF083058U
#define Adr_NX90_mtgy_op_tc22      0xFF083058U
#define DFLT_VAL_NX90_mtgy_op_tc22 0x00000000U

#define MSK_NX90_mtgy_op_tc22_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc22_val         0
#define DFLT_VAL_NX90_mtgy_op_tc22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc22': */
#define MSK_USED_BITS_NX90_mtgy_op_tc22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc23 */
/* => MWMM TC register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc23  0x0000105CU
#define Adr_NX90_mtgy_mtgy_op_tc23 0xFF08305CU
#define Adr_NX90_mtgy_op_tc23      0xFF08305CU
#define DFLT_VAL_NX90_mtgy_op_tc23 0x00000000U

#define MSK_NX90_mtgy_op_tc23_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc23_val         0
#define DFLT_VAL_NX90_mtgy_op_tc23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc23': */
#define MSK_USED_BITS_NX90_mtgy_op_tc23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc24 */
/* => MWMM TC register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc24  0x00001060U
#define Adr_NX90_mtgy_mtgy_op_tc24 0xFF083060U
#define Adr_NX90_mtgy_op_tc24      0xFF083060U
#define DFLT_VAL_NX90_mtgy_op_tc24 0x00000000U

#define MSK_NX90_mtgy_op_tc24_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc24_val         0
#define DFLT_VAL_NX90_mtgy_op_tc24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc24': */
#define MSK_USED_BITS_NX90_mtgy_op_tc24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc25 */
/* => MWMM TC register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc25  0x00001064U
#define Adr_NX90_mtgy_mtgy_op_tc25 0xFF083064U
#define Adr_NX90_mtgy_op_tc25      0xFF083064U
#define DFLT_VAL_NX90_mtgy_op_tc25 0x00000000U

#define MSK_NX90_mtgy_op_tc25_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc25_val         0
#define DFLT_VAL_NX90_mtgy_op_tc25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc25': */
#define MSK_USED_BITS_NX90_mtgy_op_tc25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc26 */
/* => MWMM TC register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc26  0x00001068U
#define Adr_NX90_mtgy_mtgy_op_tc26 0xFF083068U
#define Adr_NX90_mtgy_op_tc26      0xFF083068U
#define DFLT_VAL_NX90_mtgy_op_tc26 0x00000000U

#define MSK_NX90_mtgy_op_tc26_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc26_val         0
#define DFLT_VAL_NX90_mtgy_op_tc26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc26': */
#define MSK_USED_BITS_NX90_mtgy_op_tc26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc27 */
/* => MWMM TC register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc27  0x0000106CU
#define Adr_NX90_mtgy_mtgy_op_tc27 0xFF08306CU
#define Adr_NX90_mtgy_op_tc27      0xFF08306CU
#define DFLT_VAL_NX90_mtgy_op_tc27 0x00000000U

#define MSK_NX90_mtgy_op_tc27_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc27_val         0
#define DFLT_VAL_NX90_mtgy_op_tc27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc27': */
#define MSK_USED_BITS_NX90_mtgy_op_tc27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc28 */
/* => MWMM TC register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc28  0x00001070U
#define Adr_NX90_mtgy_mtgy_op_tc28 0xFF083070U
#define Adr_NX90_mtgy_op_tc28      0xFF083070U
#define DFLT_VAL_NX90_mtgy_op_tc28 0x00000000U

#define MSK_NX90_mtgy_op_tc28_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc28_val         0
#define DFLT_VAL_NX90_mtgy_op_tc28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc28': */
#define MSK_USED_BITS_NX90_mtgy_op_tc28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc29 */
/* => MWMM TC register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc29  0x00001074U
#define Adr_NX90_mtgy_mtgy_op_tc29 0xFF083074U
#define Adr_NX90_mtgy_op_tc29      0xFF083074U
#define DFLT_VAL_NX90_mtgy_op_tc29 0x00000000U

#define MSK_NX90_mtgy_op_tc29_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc29_val         0
#define DFLT_VAL_NX90_mtgy_op_tc29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc29': */
#define MSK_USED_BITS_NX90_mtgy_op_tc29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc30 */
/* => MWMM TC register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc30  0x00001078U
#define Adr_NX90_mtgy_mtgy_op_tc30 0xFF083078U
#define Adr_NX90_mtgy_op_tc30      0xFF083078U
#define DFLT_VAL_NX90_mtgy_op_tc30 0x00000000U

#define MSK_NX90_mtgy_op_tc30_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc30_val         0
#define DFLT_VAL_NX90_mtgy_op_tc30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc30': */
#define MSK_USED_BITS_NX90_mtgy_op_tc30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc31 */
/* => MWMM TC register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc31  0x0000107CU
#define Adr_NX90_mtgy_mtgy_op_tc31 0xFF08307CU
#define Adr_NX90_mtgy_op_tc31      0xFF08307CU
#define DFLT_VAL_NX90_mtgy_op_tc31 0x00000000U

#define MSK_NX90_mtgy_op_tc31_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc31_val         0
#define DFLT_VAL_NX90_mtgy_op_tc31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc31': */
#define MSK_USED_BITS_NX90_mtgy_op_tc31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc32 */
/* => MWMM TC register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc32  0x00001080U
#define Adr_NX90_mtgy_mtgy_op_tc32 0xFF083080U
#define Adr_NX90_mtgy_op_tc32      0xFF083080U
#define DFLT_VAL_NX90_mtgy_op_tc32 0x00000000U

#define MSK_NX90_mtgy_op_tc32_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc32_val         0
#define DFLT_VAL_NX90_mtgy_op_tc32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc32': */
#define MSK_USED_BITS_NX90_mtgy_op_tc32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc33 */
/* => MWMM TC register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc33  0x00001084U
#define Adr_NX90_mtgy_mtgy_op_tc33 0xFF083084U
#define Adr_NX90_mtgy_op_tc33      0xFF083084U
#define DFLT_VAL_NX90_mtgy_op_tc33 0x00000000U

#define MSK_NX90_mtgy_op_tc33_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc33_val         0
#define DFLT_VAL_NX90_mtgy_op_tc33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc33': */
#define MSK_USED_BITS_NX90_mtgy_op_tc33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc34 */
/* => MWMM TC register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc34  0x00001088U
#define Adr_NX90_mtgy_mtgy_op_tc34 0xFF083088U
#define Adr_NX90_mtgy_op_tc34      0xFF083088U
#define DFLT_VAL_NX90_mtgy_op_tc34 0x00000000U

#define MSK_NX90_mtgy_op_tc34_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc34_val         0
#define DFLT_VAL_NX90_mtgy_op_tc34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc34': */
#define MSK_USED_BITS_NX90_mtgy_op_tc34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc35 */
/* => MWMM TC register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc35  0x0000108CU
#define Adr_NX90_mtgy_mtgy_op_tc35 0xFF08308CU
#define Adr_NX90_mtgy_op_tc35      0xFF08308CU
#define DFLT_VAL_NX90_mtgy_op_tc35 0x00000000U

#define MSK_NX90_mtgy_op_tc35_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc35_val         0
#define DFLT_VAL_NX90_mtgy_op_tc35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc35': */
#define MSK_USED_BITS_NX90_mtgy_op_tc35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc36 */
/* => MWMM TC register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc36  0x00001090U
#define Adr_NX90_mtgy_mtgy_op_tc36 0xFF083090U
#define Adr_NX90_mtgy_op_tc36      0xFF083090U
#define DFLT_VAL_NX90_mtgy_op_tc36 0x00000000U

#define MSK_NX90_mtgy_op_tc36_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc36_val         0
#define DFLT_VAL_NX90_mtgy_op_tc36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc36': */
#define MSK_USED_BITS_NX90_mtgy_op_tc36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc37 */
/* => MWMM TC register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc37  0x00001094U
#define Adr_NX90_mtgy_mtgy_op_tc37 0xFF083094U
#define Adr_NX90_mtgy_op_tc37      0xFF083094U
#define DFLT_VAL_NX90_mtgy_op_tc37 0x00000000U

#define MSK_NX90_mtgy_op_tc37_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc37_val         0
#define DFLT_VAL_NX90_mtgy_op_tc37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc37': */
#define MSK_USED_BITS_NX90_mtgy_op_tc37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc38 */
/* => MWMM TC register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc38  0x00001098U
#define Adr_NX90_mtgy_mtgy_op_tc38 0xFF083098U
#define Adr_NX90_mtgy_op_tc38      0xFF083098U
#define DFLT_VAL_NX90_mtgy_op_tc38 0x00000000U

#define MSK_NX90_mtgy_op_tc38_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc38_val         0
#define DFLT_VAL_NX90_mtgy_op_tc38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc38': */
#define MSK_USED_BITS_NX90_mtgy_op_tc38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc39 */
/* => MWMM TC register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc39  0x0000109CU
#define Adr_NX90_mtgy_mtgy_op_tc39 0xFF08309CU
#define Adr_NX90_mtgy_op_tc39      0xFF08309CU
#define DFLT_VAL_NX90_mtgy_op_tc39 0x00000000U

#define MSK_NX90_mtgy_op_tc39_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc39_val         0
#define DFLT_VAL_NX90_mtgy_op_tc39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc39': */
#define MSK_USED_BITS_NX90_mtgy_op_tc39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc40 */
/* => MWMM TC register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc40  0x000010A0U
#define Adr_NX90_mtgy_mtgy_op_tc40 0xFF0830A0U
#define Adr_NX90_mtgy_op_tc40      0xFF0830A0U
#define DFLT_VAL_NX90_mtgy_op_tc40 0x00000000U

#define MSK_NX90_mtgy_op_tc40_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc40_val         0
#define DFLT_VAL_NX90_mtgy_op_tc40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc40': */
#define MSK_USED_BITS_NX90_mtgy_op_tc40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc41 */
/* => MWMM TC register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc41  0x000010A4U
#define Adr_NX90_mtgy_mtgy_op_tc41 0xFF0830A4U
#define Adr_NX90_mtgy_op_tc41      0xFF0830A4U
#define DFLT_VAL_NX90_mtgy_op_tc41 0x00000000U

#define MSK_NX90_mtgy_op_tc41_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc41_val         0
#define DFLT_VAL_NX90_mtgy_op_tc41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc41': */
#define MSK_USED_BITS_NX90_mtgy_op_tc41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc42 */
/* => MWMM TC register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc42  0x000010A8U
#define Adr_NX90_mtgy_mtgy_op_tc42 0xFF0830A8U
#define Adr_NX90_mtgy_op_tc42      0xFF0830A8U
#define DFLT_VAL_NX90_mtgy_op_tc42 0x00000000U

#define MSK_NX90_mtgy_op_tc42_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc42_val         0
#define DFLT_VAL_NX90_mtgy_op_tc42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc42': */
#define MSK_USED_BITS_NX90_mtgy_op_tc42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc43 */
/* => MWMM TC register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc43  0x000010ACU
#define Adr_NX90_mtgy_mtgy_op_tc43 0xFF0830ACU
#define Adr_NX90_mtgy_op_tc43      0xFF0830ACU
#define DFLT_VAL_NX90_mtgy_op_tc43 0x00000000U

#define MSK_NX90_mtgy_op_tc43_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc43_val         0
#define DFLT_VAL_NX90_mtgy_op_tc43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc43': */
#define MSK_USED_BITS_NX90_mtgy_op_tc43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc44 */
/* => MWMM TC register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc44  0x000010B0U
#define Adr_NX90_mtgy_mtgy_op_tc44 0xFF0830B0U
#define Adr_NX90_mtgy_op_tc44      0xFF0830B0U
#define DFLT_VAL_NX90_mtgy_op_tc44 0x00000000U

#define MSK_NX90_mtgy_op_tc44_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc44_val         0
#define DFLT_VAL_NX90_mtgy_op_tc44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc44': */
#define MSK_USED_BITS_NX90_mtgy_op_tc44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc45 */
/* => MWMM TC register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc45  0x000010B4U
#define Adr_NX90_mtgy_mtgy_op_tc45 0xFF0830B4U
#define Adr_NX90_mtgy_op_tc45      0xFF0830B4U
#define DFLT_VAL_NX90_mtgy_op_tc45 0x00000000U

#define MSK_NX90_mtgy_op_tc45_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc45_val         0
#define DFLT_VAL_NX90_mtgy_op_tc45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc45': */
#define MSK_USED_BITS_NX90_mtgy_op_tc45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc46 */
/* => MWMM TC register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc46  0x000010B8U
#define Adr_NX90_mtgy_mtgy_op_tc46 0xFF0830B8U
#define Adr_NX90_mtgy_op_tc46      0xFF0830B8U
#define DFLT_VAL_NX90_mtgy_op_tc46 0x00000000U

#define MSK_NX90_mtgy_op_tc46_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc46_val         0
#define DFLT_VAL_NX90_mtgy_op_tc46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc46': */
#define MSK_USED_BITS_NX90_mtgy_op_tc46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc47 */
/* => MWMM TC register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc47  0x000010BCU
#define Adr_NX90_mtgy_mtgy_op_tc47 0xFF0830BCU
#define Adr_NX90_mtgy_op_tc47      0xFF0830BCU
#define DFLT_VAL_NX90_mtgy_op_tc47 0x00000000U

#define MSK_NX90_mtgy_op_tc47_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc47_val         0
#define DFLT_VAL_NX90_mtgy_op_tc47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc47': */
#define MSK_USED_BITS_NX90_mtgy_op_tc47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc48 */
/* => MWMM TC register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc48  0x000010C0U
#define Adr_NX90_mtgy_mtgy_op_tc48 0xFF0830C0U
#define Adr_NX90_mtgy_op_tc48      0xFF0830C0U
#define DFLT_VAL_NX90_mtgy_op_tc48 0x00000000U

#define MSK_NX90_mtgy_op_tc48_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc48_val         0
#define DFLT_VAL_NX90_mtgy_op_tc48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc48': */
#define MSK_USED_BITS_NX90_mtgy_op_tc48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc49 */
/* => MWMM TC register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc49  0x000010C4U
#define Adr_NX90_mtgy_mtgy_op_tc49 0xFF0830C4U
#define Adr_NX90_mtgy_op_tc49      0xFF0830C4U
#define DFLT_VAL_NX90_mtgy_op_tc49 0x00000000U

#define MSK_NX90_mtgy_op_tc49_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc49_val         0
#define DFLT_VAL_NX90_mtgy_op_tc49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc49': */
#define MSK_USED_BITS_NX90_mtgy_op_tc49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc50 */
/* => MWMM TC register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc50  0x000010C8U
#define Adr_NX90_mtgy_mtgy_op_tc50 0xFF0830C8U
#define Adr_NX90_mtgy_op_tc50      0xFF0830C8U
#define DFLT_VAL_NX90_mtgy_op_tc50 0x00000000U

#define MSK_NX90_mtgy_op_tc50_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc50_val         0
#define DFLT_VAL_NX90_mtgy_op_tc50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc50': */
#define MSK_USED_BITS_NX90_mtgy_op_tc50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc51 */
/* => MWMM TC register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc51  0x000010CCU
#define Adr_NX90_mtgy_mtgy_op_tc51 0xFF0830CCU
#define Adr_NX90_mtgy_op_tc51      0xFF0830CCU
#define DFLT_VAL_NX90_mtgy_op_tc51 0x00000000U

#define MSK_NX90_mtgy_op_tc51_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc51_val         0
#define DFLT_VAL_NX90_mtgy_op_tc51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc51': */
#define MSK_USED_BITS_NX90_mtgy_op_tc51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc52 */
/* => MWMM TC register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc52  0x000010D0U
#define Adr_NX90_mtgy_mtgy_op_tc52 0xFF0830D0U
#define Adr_NX90_mtgy_op_tc52      0xFF0830D0U
#define DFLT_VAL_NX90_mtgy_op_tc52 0x00000000U

#define MSK_NX90_mtgy_op_tc52_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc52_val         0
#define DFLT_VAL_NX90_mtgy_op_tc52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc52': */
#define MSK_USED_BITS_NX90_mtgy_op_tc52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc53 */
/* => MWMM TC register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc53  0x000010D4U
#define Adr_NX90_mtgy_mtgy_op_tc53 0xFF0830D4U
#define Adr_NX90_mtgy_op_tc53      0xFF0830D4U
#define DFLT_VAL_NX90_mtgy_op_tc53 0x00000000U

#define MSK_NX90_mtgy_op_tc53_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc53_val         0
#define DFLT_VAL_NX90_mtgy_op_tc53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc53': */
#define MSK_USED_BITS_NX90_mtgy_op_tc53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc54 */
/* => MWMM TC register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc54  0x000010D8U
#define Adr_NX90_mtgy_mtgy_op_tc54 0xFF0830D8U
#define Adr_NX90_mtgy_op_tc54      0xFF0830D8U
#define DFLT_VAL_NX90_mtgy_op_tc54 0x00000000U

#define MSK_NX90_mtgy_op_tc54_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc54_val         0
#define DFLT_VAL_NX90_mtgy_op_tc54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc54': */
#define MSK_USED_BITS_NX90_mtgy_op_tc54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc55 */
/* => MWMM TC register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc55  0x000010DCU
#define Adr_NX90_mtgy_mtgy_op_tc55 0xFF0830DCU
#define Adr_NX90_mtgy_op_tc55      0xFF0830DCU
#define DFLT_VAL_NX90_mtgy_op_tc55 0x00000000U

#define MSK_NX90_mtgy_op_tc55_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc55_val         0
#define DFLT_VAL_NX90_mtgy_op_tc55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc55': */
#define MSK_USED_BITS_NX90_mtgy_op_tc55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc56 */
/* => MWMM TC register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc56  0x000010E0U
#define Adr_NX90_mtgy_mtgy_op_tc56 0xFF0830E0U
#define Adr_NX90_mtgy_op_tc56      0xFF0830E0U
#define DFLT_VAL_NX90_mtgy_op_tc56 0x00000000U

#define MSK_NX90_mtgy_op_tc56_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc56_val         0
#define DFLT_VAL_NX90_mtgy_op_tc56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc56': */
#define MSK_USED_BITS_NX90_mtgy_op_tc56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc57 */
/* => MWMM TC register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc57  0x000010E4U
#define Adr_NX90_mtgy_mtgy_op_tc57 0xFF0830E4U
#define Adr_NX90_mtgy_op_tc57      0xFF0830E4U
#define DFLT_VAL_NX90_mtgy_op_tc57 0x00000000U

#define MSK_NX90_mtgy_op_tc57_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc57_val         0
#define DFLT_VAL_NX90_mtgy_op_tc57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc57': */
#define MSK_USED_BITS_NX90_mtgy_op_tc57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc58 */
/* => MWMM TC register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc58  0x000010E8U
#define Adr_NX90_mtgy_mtgy_op_tc58 0xFF0830E8U
#define Adr_NX90_mtgy_op_tc58      0xFF0830E8U
#define DFLT_VAL_NX90_mtgy_op_tc58 0x00000000U

#define MSK_NX90_mtgy_op_tc58_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc58_val         0
#define DFLT_VAL_NX90_mtgy_op_tc58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc58': */
#define MSK_USED_BITS_NX90_mtgy_op_tc58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc59 */
/* => MWMM TC register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc59  0x000010ECU
#define Adr_NX90_mtgy_mtgy_op_tc59 0xFF0830ECU
#define Adr_NX90_mtgy_op_tc59      0xFF0830ECU
#define DFLT_VAL_NX90_mtgy_op_tc59 0x00000000U

#define MSK_NX90_mtgy_op_tc59_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc59_val         0
#define DFLT_VAL_NX90_mtgy_op_tc59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc59': */
#define MSK_USED_BITS_NX90_mtgy_op_tc59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc60 */
/* => MWMM TC register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc60  0x000010F0U
#define Adr_NX90_mtgy_mtgy_op_tc60 0xFF0830F0U
#define Adr_NX90_mtgy_op_tc60      0xFF0830F0U
#define DFLT_VAL_NX90_mtgy_op_tc60 0x00000000U

#define MSK_NX90_mtgy_op_tc60_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc60_val         0
#define DFLT_VAL_NX90_mtgy_op_tc60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc60': */
#define MSK_USED_BITS_NX90_mtgy_op_tc60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc61 */
/* => MWMM TC register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc61  0x000010F4U
#define Adr_NX90_mtgy_mtgy_op_tc61 0xFF0830F4U
#define Adr_NX90_mtgy_op_tc61      0xFF0830F4U
#define DFLT_VAL_NX90_mtgy_op_tc61 0x00000000U

#define MSK_NX90_mtgy_op_tc61_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc61_val         0
#define DFLT_VAL_NX90_mtgy_op_tc61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc61': */
#define MSK_USED_BITS_NX90_mtgy_op_tc61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc62 */
/* => MWMM TC register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc62  0x000010F8U
#define Adr_NX90_mtgy_mtgy_op_tc62 0xFF0830F8U
#define Adr_NX90_mtgy_op_tc62      0xFF0830F8U
#define DFLT_VAL_NX90_mtgy_op_tc62 0x00000000U

#define MSK_NX90_mtgy_op_tc62_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc62_val         0
#define DFLT_VAL_NX90_mtgy_op_tc62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc62': */
#define MSK_USED_BITS_NX90_mtgy_op_tc62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc63 */
/* => MWMM TC register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc63  0x000010FCU
#define Adr_NX90_mtgy_mtgy_op_tc63 0xFF0830FCU
#define Adr_NX90_mtgy_op_tc63      0xFF0830FCU
#define DFLT_VAL_NX90_mtgy_op_tc63 0x00000000U

#define MSK_NX90_mtgy_op_tc63_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc63_val         0
#define DFLT_VAL_NX90_mtgy_op_tc63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc63': */
#define MSK_USED_BITS_NX90_mtgy_op_tc63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc64 */
/* => MWMM TC register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc64  0x00001100U
#define Adr_NX90_mtgy_mtgy_op_tc64 0xFF083100U
#define Adr_NX90_mtgy_op_tc64      0xFF083100U
#define DFLT_VAL_NX90_mtgy_op_tc64 0x00000000U

#define MSK_NX90_mtgy_op_tc64_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc64_val         0
#define DFLT_VAL_NX90_mtgy_op_tc64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc64': */
#define MSK_USED_BITS_NX90_mtgy_op_tc64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc65 */
/* => MWMM TC register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc65  0x00001104U
#define Adr_NX90_mtgy_mtgy_op_tc65 0xFF083104U
#define Adr_NX90_mtgy_op_tc65      0xFF083104U
#define DFLT_VAL_NX90_mtgy_op_tc65 0x00000000U

#define MSK_NX90_mtgy_op_tc65_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc65_val         0
#define DFLT_VAL_NX90_mtgy_op_tc65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc65': */
#define MSK_USED_BITS_NX90_mtgy_op_tc65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc66 */
/* => MWMM TC register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc66  0x00001108U
#define Adr_NX90_mtgy_mtgy_op_tc66 0xFF083108U
#define Adr_NX90_mtgy_op_tc66      0xFF083108U
#define DFLT_VAL_NX90_mtgy_op_tc66 0x00000000U

#define MSK_NX90_mtgy_op_tc66_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc66_val         0
#define DFLT_VAL_NX90_mtgy_op_tc66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc66': */
#define MSK_USED_BITS_NX90_mtgy_op_tc66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc67 */
/* => MWMM TC register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc67  0x0000110CU
#define Adr_NX90_mtgy_mtgy_op_tc67 0xFF08310CU
#define Adr_NX90_mtgy_op_tc67      0xFF08310CU
#define DFLT_VAL_NX90_mtgy_op_tc67 0x00000000U

#define MSK_NX90_mtgy_op_tc67_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc67_val         0
#define DFLT_VAL_NX90_mtgy_op_tc67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc67': */
#define MSK_USED_BITS_NX90_mtgy_op_tc67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc68 */
/* => MWMM TC register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc68  0x00001110U
#define Adr_NX90_mtgy_mtgy_op_tc68 0xFF083110U
#define Adr_NX90_mtgy_op_tc68      0xFF083110U
#define DFLT_VAL_NX90_mtgy_op_tc68 0x00000000U

#define MSK_NX90_mtgy_op_tc68_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc68_val         0
#define DFLT_VAL_NX90_mtgy_op_tc68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc68': */
#define MSK_USED_BITS_NX90_mtgy_op_tc68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc69 */
/* => MWMM TC register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc69  0x00001114U
#define Adr_NX90_mtgy_mtgy_op_tc69 0xFF083114U
#define Adr_NX90_mtgy_op_tc69      0xFF083114U
#define DFLT_VAL_NX90_mtgy_op_tc69 0x00000000U

#define MSK_NX90_mtgy_op_tc69_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc69_val         0
#define DFLT_VAL_NX90_mtgy_op_tc69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc69': */
#define MSK_USED_BITS_NX90_mtgy_op_tc69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc70 */
/* => MWMM TC register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc70  0x00001118U
#define Adr_NX90_mtgy_mtgy_op_tc70 0xFF083118U
#define Adr_NX90_mtgy_op_tc70      0xFF083118U
#define DFLT_VAL_NX90_mtgy_op_tc70 0x00000000U

#define MSK_NX90_mtgy_op_tc70_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc70_val         0
#define DFLT_VAL_NX90_mtgy_op_tc70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc70': */
#define MSK_USED_BITS_NX90_mtgy_op_tc70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc71 */
/* => MWMM TC register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc71  0x0000111CU
#define Adr_NX90_mtgy_mtgy_op_tc71 0xFF08311CU
#define Adr_NX90_mtgy_op_tc71      0xFF08311CU
#define DFLT_VAL_NX90_mtgy_op_tc71 0x00000000U

#define MSK_NX90_mtgy_op_tc71_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc71_val         0
#define DFLT_VAL_NX90_mtgy_op_tc71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc71': */
#define MSK_USED_BITS_NX90_mtgy_op_tc71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc72 */
/* => MWMM TC register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc72  0x00001120U
#define Adr_NX90_mtgy_mtgy_op_tc72 0xFF083120U
#define Adr_NX90_mtgy_op_tc72      0xFF083120U
#define DFLT_VAL_NX90_mtgy_op_tc72 0x00000000U

#define MSK_NX90_mtgy_op_tc72_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc72_val         0
#define DFLT_VAL_NX90_mtgy_op_tc72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc72': */
#define MSK_USED_BITS_NX90_mtgy_op_tc72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc73 */
/* => MWMM TC register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc73  0x00001124U
#define Adr_NX90_mtgy_mtgy_op_tc73 0xFF083124U
#define Adr_NX90_mtgy_op_tc73      0xFF083124U
#define DFLT_VAL_NX90_mtgy_op_tc73 0x00000000U

#define MSK_NX90_mtgy_op_tc73_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc73_val         0
#define DFLT_VAL_NX90_mtgy_op_tc73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc73': */
#define MSK_USED_BITS_NX90_mtgy_op_tc73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc74 */
/* => MWMM TC register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc74  0x00001128U
#define Adr_NX90_mtgy_mtgy_op_tc74 0xFF083128U
#define Adr_NX90_mtgy_op_tc74      0xFF083128U
#define DFLT_VAL_NX90_mtgy_op_tc74 0x00000000U

#define MSK_NX90_mtgy_op_tc74_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc74_val         0
#define DFLT_VAL_NX90_mtgy_op_tc74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc74': */
#define MSK_USED_BITS_NX90_mtgy_op_tc74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc75 */
/* => MWMM TC register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc75  0x0000112CU
#define Adr_NX90_mtgy_mtgy_op_tc75 0xFF08312CU
#define Adr_NX90_mtgy_op_tc75      0xFF08312CU
#define DFLT_VAL_NX90_mtgy_op_tc75 0x00000000U

#define MSK_NX90_mtgy_op_tc75_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc75_val         0
#define DFLT_VAL_NX90_mtgy_op_tc75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc75': */
#define MSK_USED_BITS_NX90_mtgy_op_tc75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc76 */
/* => MWMM TC register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc76  0x00001130U
#define Adr_NX90_mtgy_mtgy_op_tc76 0xFF083130U
#define Adr_NX90_mtgy_op_tc76      0xFF083130U
#define DFLT_VAL_NX90_mtgy_op_tc76 0x00000000U

#define MSK_NX90_mtgy_op_tc76_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc76_val         0
#define DFLT_VAL_NX90_mtgy_op_tc76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc76': */
#define MSK_USED_BITS_NX90_mtgy_op_tc76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc77 */
/* => MWMM TC register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc77  0x00001134U
#define Adr_NX90_mtgy_mtgy_op_tc77 0xFF083134U
#define Adr_NX90_mtgy_op_tc77      0xFF083134U
#define DFLT_VAL_NX90_mtgy_op_tc77 0x00000000U

#define MSK_NX90_mtgy_op_tc77_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc77_val         0
#define DFLT_VAL_NX90_mtgy_op_tc77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc77': */
#define MSK_USED_BITS_NX90_mtgy_op_tc77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc78 */
/* => MWMM TC register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc78  0x00001138U
#define Adr_NX90_mtgy_mtgy_op_tc78 0xFF083138U
#define Adr_NX90_mtgy_op_tc78      0xFF083138U
#define DFLT_VAL_NX90_mtgy_op_tc78 0x00000000U

#define MSK_NX90_mtgy_op_tc78_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc78_val         0
#define DFLT_VAL_NX90_mtgy_op_tc78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc78': */
#define MSK_USED_BITS_NX90_mtgy_op_tc78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc79 */
/* => MWMM TC register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc79  0x0000113CU
#define Adr_NX90_mtgy_mtgy_op_tc79 0xFF08313CU
#define Adr_NX90_mtgy_op_tc79      0xFF08313CU
#define DFLT_VAL_NX90_mtgy_op_tc79 0x00000000U

#define MSK_NX90_mtgy_op_tc79_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc79_val         0
#define DFLT_VAL_NX90_mtgy_op_tc79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc79': */
#define MSK_USED_BITS_NX90_mtgy_op_tc79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc80 */
/* => MWMM TC register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc80  0x00001140U
#define Adr_NX90_mtgy_mtgy_op_tc80 0xFF083140U
#define Adr_NX90_mtgy_op_tc80      0xFF083140U
#define DFLT_VAL_NX90_mtgy_op_tc80 0x00000000U

#define MSK_NX90_mtgy_op_tc80_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc80_val         0
#define DFLT_VAL_NX90_mtgy_op_tc80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc80': */
#define MSK_USED_BITS_NX90_mtgy_op_tc80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc81 */
/* => MWMM TC register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc81  0x00001144U
#define Adr_NX90_mtgy_mtgy_op_tc81 0xFF083144U
#define Adr_NX90_mtgy_op_tc81      0xFF083144U
#define DFLT_VAL_NX90_mtgy_op_tc81 0x00000000U

#define MSK_NX90_mtgy_op_tc81_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc81_val         0
#define DFLT_VAL_NX90_mtgy_op_tc81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc81': */
#define MSK_USED_BITS_NX90_mtgy_op_tc81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc82 */
/* => MWMM TC register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc82  0x00001148U
#define Adr_NX90_mtgy_mtgy_op_tc82 0xFF083148U
#define Adr_NX90_mtgy_op_tc82      0xFF083148U
#define DFLT_VAL_NX90_mtgy_op_tc82 0x00000000U

#define MSK_NX90_mtgy_op_tc82_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc82_val         0
#define DFLT_VAL_NX90_mtgy_op_tc82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc82': */
#define MSK_USED_BITS_NX90_mtgy_op_tc82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc83 */
/* => MWMM TC register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc83  0x0000114CU
#define Adr_NX90_mtgy_mtgy_op_tc83 0xFF08314CU
#define Adr_NX90_mtgy_op_tc83      0xFF08314CU
#define DFLT_VAL_NX90_mtgy_op_tc83 0x00000000U

#define MSK_NX90_mtgy_op_tc83_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc83_val         0
#define DFLT_VAL_NX90_mtgy_op_tc83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc83': */
#define MSK_USED_BITS_NX90_mtgy_op_tc83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc84 */
/* => MWMM TC register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc84  0x00001150U
#define Adr_NX90_mtgy_mtgy_op_tc84 0xFF083150U
#define Adr_NX90_mtgy_op_tc84      0xFF083150U
#define DFLT_VAL_NX90_mtgy_op_tc84 0x00000000U

#define MSK_NX90_mtgy_op_tc84_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc84_val         0
#define DFLT_VAL_NX90_mtgy_op_tc84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc84': */
#define MSK_USED_BITS_NX90_mtgy_op_tc84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc85 */
/* => MWMM TC register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc85  0x00001154U
#define Adr_NX90_mtgy_mtgy_op_tc85 0xFF083154U
#define Adr_NX90_mtgy_op_tc85      0xFF083154U
#define DFLT_VAL_NX90_mtgy_op_tc85 0x00000000U

#define MSK_NX90_mtgy_op_tc85_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc85_val         0
#define DFLT_VAL_NX90_mtgy_op_tc85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc85': */
#define MSK_USED_BITS_NX90_mtgy_op_tc85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc86 */
/* => MWMM TC register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc86  0x00001158U
#define Adr_NX90_mtgy_mtgy_op_tc86 0xFF083158U
#define Adr_NX90_mtgy_op_tc86      0xFF083158U
#define DFLT_VAL_NX90_mtgy_op_tc86 0x00000000U

#define MSK_NX90_mtgy_op_tc86_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc86_val         0
#define DFLT_VAL_NX90_mtgy_op_tc86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc86': */
#define MSK_USED_BITS_NX90_mtgy_op_tc86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc87 */
/* => MWMM TC register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc87  0x0000115CU
#define Adr_NX90_mtgy_mtgy_op_tc87 0xFF08315CU
#define Adr_NX90_mtgy_op_tc87      0xFF08315CU
#define DFLT_VAL_NX90_mtgy_op_tc87 0x00000000U

#define MSK_NX90_mtgy_op_tc87_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc87_val         0
#define DFLT_VAL_NX90_mtgy_op_tc87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc87': */
#define MSK_USED_BITS_NX90_mtgy_op_tc87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc88 */
/* => MWMM TC register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc88  0x00001160U
#define Adr_NX90_mtgy_mtgy_op_tc88 0xFF083160U
#define Adr_NX90_mtgy_op_tc88      0xFF083160U
#define DFLT_VAL_NX90_mtgy_op_tc88 0x00000000U

#define MSK_NX90_mtgy_op_tc88_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc88_val         0
#define DFLT_VAL_NX90_mtgy_op_tc88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc88': */
#define MSK_USED_BITS_NX90_mtgy_op_tc88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc89 */
/* => MWMM TC register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc89  0x00001164U
#define Adr_NX90_mtgy_mtgy_op_tc89 0xFF083164U
#define Adr_NX90_mtgy_op_tc89      0xFF083164U
#define DFLT_VAL_NX90_mtgy_op_tc89 0x00000000U

#define MSK_NX90_mtgy_op_tc89_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc89_val         0
#define DFLT_VAL_NX90_mtgy_op_tc89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc89': */
#define MSK_USED_BITS_NX90_mtgy_op_tc89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc90 */
/* => MWMM TC register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc90  0x00001168U
#define Adr_NX90_mtgy_mtgy_op_tc90 0xFF083168U
#define Adr_NX90_mtgy_op_tc90      0xFF083168U
#define DFLT_VAL_NX90_mtgy_op_tc90 0x00000000U

#define MSK_NX90_mtgy_op_tc90_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc90_val         0
#define DFLT_VAL_NX90_mtgy_op_tc90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc90': */
#define MSK_USED_BITS_NX90_mtgy_op_tc90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc91 */
/* => MWMM TC register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc91  0x0000116CU
#define Adr_NX90_mtgy_mtgy_op_tc91 0xFF08316CU
#define Adr_NX90_mtgy_op_tc91      0xFF08316CU
#define DFLT_VAL_NX90_mtgy_op_tc91 0x00000000U

#define MSK_NX90_mtgy_op_tc91_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc91_val         0
#define DFLT_VAL_NX90_mtgy_op_tc91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc91': */
#define MSK_USED_BITS_NX90_mtgy_op_tc91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc92 */
/* => MWMM TC register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc92  0x00001170U
#define Adr_NX90_mtgy_mtgy_op_tc92 0xFF083170U
#define Adr_NX90_mtgy_op_tc92      0xFF083170U
#define DFLT_VAL_NX90_mtgy_op_tc92 0x00000000U

#define MSK_NX90_mtgy_op_tc92_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc92_val         0
#define DFLT_VAL_NX90_mtgy_op_tc92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc92': */
#define MSK_USED_BITS_NX90_mtgy_op_tc92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc93 */
/* => MWMM TC register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc93  0x00001174U
#define Adr_NX90_mtgy_mtgy_op_tc93 0xFF083174U
#define Adr_NX90_mtgy_op_tc93      0xFF083174U
#define DFLT_VAL_NX90_mtgy_op_tc93 0x00000000U

#define MSK_NX90_mtgy_op_tc93_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc93_val         0
#define DFLT_VAL_NX90_mtgy_op_tc93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc93': */
#define MSK_USED_BITS_NX90_mtgy_op_tc93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc94 */
/* => MWMM TC register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc94  0x00001178U
#define Adr_NX90_mtgy_mtgy_op_tc94 0xFF083178U
#define Adr_NX90_mtgy_op_tc94      0xFF083178U
#define DFLT_VAL_NX90_mtgy_op_tc94 0x00000000U

#define MSK_NX90_mtgy_op_tc94_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc94_val         0
#define DFLT_VAL_NX90_mtgy_op_tc94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc94': */
#define MSK_USED_BITS_NX90_mtgy_op_tc94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc95 */
/* => MWMM TC register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc95  0x0000117CU
#define Adr_NX90_mtgy_mtgy_op_tc95 0xFF08317CU
#define Adr_NX90_mtgy_op_tc95      0xFF08317CU
#define DFLT_VAL_NX90_mtgy_op_tc95 0x00000000U

#define MSK_NX90_mtgy_op_tc95_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc95_val         0
#define DFLT_VAL_NX90_mtgy_op_tc95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc95': */
#define MSK_USED_BITS_NX90_mtgy_op_tc95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc96 */
/* => MWMM TC register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc96  0x00001180U
#define Adr_NX90_mtgy_mtgy_op_tc96 0xFF083180U
#define Adr_NX90_mtgy_op_tc96      0xFF083180U
#define DFLT_VAL_NX90_mtgy_op_tc96 0x00000000U

#define MSK_NX90_mtgy_op_tc96_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc96_val         0
#define DFLT_VAL_NX90_mtgy_op_tc96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc96': */
#define MSK_USED_BITS_NX90_mtgy_op_tc96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc97 */
/* => MWMM TC register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc97  0x00001184U
#define Adr_NX90_mtgy_mtgy_op_tc97 0xFF083184U
#define Adr_NX90_mtgy_op_tc97      0xFF083184U
#define DFLT_VAL_NX90_mtgy_op_tc97 0x00000000U

#define MSK_NX90_mtgy_op_tc97_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc97_val         0
#define DFLT_VAL_NX90_mtgy_op_tc97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc97': */
#define MSK_USED_BITS_NX90_mtgy_op_tc97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc98 */
/* => MWMM TC register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc98  0x00001188U
#define Adr_NX90_mtgy_mtgy_op_tc98 0xFF083188U
#define Adr_NX90_mtgy_op_tc98      0xFF083188U
#define DFLT_VAL_NX90_mtgy_op_tc98 0x00000000U

#define MSK_NX90_mtgy_op_tc98_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc98_val         0
#define DFLT_VAL_NX90_mtgy_op_tc98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc98': */
#define MSK_USED_BITS_NX90_mtgy_op_tc98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc99 */
/* => MWMM TC register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc99  0x0000118CU
#define Adr_NX90_mtgy_mtgy_op_tc99 0xFF08318CU
#define Adr_NX90_mtgy_op_tc99      0xFF08318CU
#define DFLT_VAL_NX90_mtgy_op_tc99 0x00000000U

#define MSK_NX90_mtgy_op_tc99_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc99_val         0
#define DFLT_VAL_NX90_mtgy_op_tc99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc99': */
#define MSK_USED_BITS_NX90_mtgy_op_tc99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc100 */
/* => MWMM TC register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc100  0x00001190U
#define Adr_NX90_mtgy_mtgy_op_tc100 0xFF083190U
#define Adr_NX90_mtgy_op_tc100      0xFF083190U
#define DFLT_VAL_NX90_mtgy_op_tc100 0x00000000U

#define MSK_NX90_mtgy_op_tc100_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc100_val         0
#define DFLT_VAL_NX90_mtgy_op_tc100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc100': */
#define MSK_USED_BITS_NX90_mtgy_op_tc100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc101 */
/* => MWMM TC register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc101  0x00001194U
#define Adr_NX90_mtgy_mtgy_op_tc101 0xFF083194U
#define Adr_NX90_mtgy_op_tc101      0xFF083194U
#define DFLT_VAL_NX90_mtgy_op_tc101 0x00000000U

#define MSK_NX90_mtgy_op_tc101_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc101_val         0
#define DFLT_VAL_NX90_mtgy_op_tc101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc101': */
#define MSK_USED_BITS_NX90_mtgy_op_tc101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc102 */
/* => MWMM TC register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc102  0x00001198U
#define Adr_NX90_mtgy_mtgy_op_tc102 0xFF083198U
#define Adr_NX90_mtgy_op_tc102      0xFF083198U
#define DFLT_VAL_NX90_mtgy_op_tc102 0x00000000U

#define MSK_NX90_mtgy_op_tc102_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc102_val         0
#define DFLT_VAL_NX90_mtgy_op_tc102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc102': */
#define MSK_USED_BITS_NX90_mtgy_op_tc102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc103 */
/* => MWMM TC register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc103  0x0000119CU
#define Adr_NX90_mtgy_mtgy_op_tc103 0xFF08319CU
#define Adr_NX90_mtgy_op_tc103      0xFF08319CU
#define DFLT_VAL_NX90_mtgy_op_tc103 0x00000000U

#define MSK_NX90_mtgy_op_tc103_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc103_val         0
#define DFLT_VAL_NX90_mtgy_op_tc103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc103': */
#define MSK_USED_BITS_NX90_mtgy_op_tc103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc104 */
/* => MWMM TC register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc104  0x000011A0U
#define Adr_NX90_mtgy_mtgy_op_tc104 0xFF0831A0U
#define Adr_NX90_mtgy_op_tc104      0xFF0831A0U
#define DFLT_VAL_NX90_mtgy_op_tc104 0x00000000U

#define MSK_NX90_mtgy_op_tc104_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc104_val         0
#define DFLT_VAL_NX90_mtgy_op_tc104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc104': */
#define MSK_USED_BITS_NX90_mtgy_op_tc104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc105 */
/* => MWMM TC register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc105  0x000011A4U
#define Adr_NX90_mtgy_mtgy_op_tc105 0xFF0831A4U
#define Adr_NX90_mtgy_op_tc105      0xFF0831A4U
#define DFLT_VAL_NX90_mtgy_op_tc105 0x00000000U

#define MSK_NX90_mtgy_op_tc105_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc105_val         0
#define DFLT_VAL_NX90_mtgy_op_tc105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc105': */
#define MSK_USED_BITS_NX90_mtgy_op_tc105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc106 */
/* => MWMM TC register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc106  0x000011A8U
#define Adr_NX90_mtgy_mtgy_op_tc106 0xFF0831A8U
#define Adr_NX90_mtgy_op_tc106      0xFF0831A8U
#define DFLT_VAL_NX90_mtgy_op_tc106 0x00000000U

#define MSK_NX90_mtgy_op_tc106_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc106_val         0
#define DFLT_VAL_NX90_mtgy_op_tc106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc106': */
#define MSK_USED_BITS_NX90_mtgy_op_tc106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc107 */
/* => MWMM TC register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc107  0x000011ACU
#define Adr_NX90_mtgy_mtgy_op_tc107 0xFF0831ACU
#define Adr_NX90_mtgy_op_tc107      0xFF0831ACU
#define DFLT_VAL_NX90_mtgy_op_tc107 0x00000000U

#define MSK_NX90_mtgy_op_tc107_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc107_val         0
#define DFLT_VAL_NX90_mtgy_op_tc107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc107': */
#define MSK_USED_BITS_NX90_mtgy_op_tc107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc108 */
/* => MWMM TC register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc108  0x000011B0U
#define Adr_NX90_mtgy_mtgy_op_tc108 0xFF0831B0U
#define Adr_NX90_mtgy_op_tc108      0xFF0831B0U
#define DFLT_VAL_NX90_mtgy_op_tc108 0x00000000U

#define MSK_NX90_mtgy_op_tc108_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc108_val         0
#define DFLT_VAL_NX90_mtgy_op_tc108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc108': */
#define MSK_USED_BITS_NX90_mtgy_op_tc108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc109 */
/* => MWMM TC register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc109  0x000011B4U
#define Adr_NX90_mtgy_mtgy_op_tc109 0xFF0831B4U
#define Adr_NX90_mtgy_op_tc109      0xFF0831B4U
#define DFLT_VAL_NX90_mtgy_op_tc109 0x00000000U

#define MSK_NX90_mtgy_op_tc109_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc109_val         0
#define DFLT_VAL_NX90_mtgy_op_tc109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc109': */
#define MSK_USED_BITS_NX90_mtgy_op_tc109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc110 */
/* => MWMM TC register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc110  0x000011B8U
#define Adr_NX90_mtgy_mtgy_op_tc110 0xFF0831B8U
#define Adr_NX90_mtgy_op_tc110      0xFF0831B8U
#define DFLT_VAL_NX90_mtgy_op_tc110 0x00000000U

#define MSK_NX90_mtgy_op_tc110_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc110_val         0
#define DFLT_VAL_NX90_mtgy_op_tc110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc110': */
#define MSK_USED_BITS_NX90_mtgy_op_tc110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc111 */
/* => MWMM TC register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc111  0x000011BCU
#define Adr_NX90_mtgy_mtgy_op_tc111 0xFF0831BCU
#define Adr_NX90_mtgy_op_tc111      0xFF0831BCU
#define DFLT_VAL_NX90_mtgy_op_tc111 0x00000000U

#define MSK_NX90_mtgy_op_tc111_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc111_val         0
#define DFLT_VAL_NX90_mtgy_op_tc111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc111': */
#define MSK_USED_BITS_NX90_mtgy_op_tc111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc112 */
/* => MWMM TC register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc112  0x000011C0U
#define Adr_NX90_mtgy_mtgy_op_tc112 0xFF0831C0U
#define Adr_NX90_mtgy_op_tc112      0xFF0831C0U
#define DFLT_VAL_NX90_mtgy_op_tc112 0x00000000U

#define MSK_NX90_mtgy_op_tc112_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc112_val         0
#define DFLT_VAL_NX90_mtgy_op_tc112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc112': */
#define MSK_USED_BITS_NX90_mtgy_op_tc112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc113 */
/* => MWMM TC register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc113  0x000011C4U
#define Adr_NX90_mtgy_mtgy_op_tc113 0xFF0831C4U
#define Adr_NX90_mtgy_op_tc113      0xFF0831C4U
#define DFLT_VAL_NX90_mtgy_op_tc113 0x00000000U

#define MSK_NX90_mtgy_op_tc113_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc113_val         0
#define DFLT_VAL_NX90_mtgy_op_tc113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc113': */
#define MSK_USED_BITS_NX90_mtgy_op_tc113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc114 */
/* => MWMM TC register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc114  0x000011C8U
#define Adr_NX90_mtgy_mtgy_op_tc114 0xFF0831C8U
#define Adr_NX90_mtgy_op_tc114      0xFF0831C8U
#define DFLT_VAL_NX90_mtgy_op_tc114 0x00000000U

#define MSK_NX90_mtgy_op_tc114_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc114_val         0
#define DFLT_VAL_NX90_mtgy_op_tc114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc114': */
#define MSK_USED_BITS_NX90_mtgy_op_tc114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc115 */
/* => MWMM TC register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc115  0x000011CCU
#define Adr_NX90_mtgy_mtgy_op_tc115 0xFF0831CCU
#define Adr_NX90_mtgy_op_tc115      0xFF0831CCU
#define DFLT_VAL_NX90_mtgy_op_tc115 0x00000000U

#define MSK_NX90_mtgy_op_tc115_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc115_val         0
#define DFLT_VAL_NX90_mtgy_op_tc115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc115': */
#define MSK_USED_BITS_NX90_mtgy_op_tc115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc116 */
/* => MWMM TC register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc116  0x000011D0U
#define Adr_NX90_mtgy_mtgy_op_tc116 0xFF0831D0U
#define Adr_NX90_mtgy_op_tc116      0xFF0831D0U
#define DFLT_VAL_NX90_mtgy_op_tc116 0x00000000U

#define MSK_NX90_mtgy_op_tc116_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc116_val         0
#define DFLT_VAL_NX90_mtgy_op_tc116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc116': */
#define MSK_USED_BITS_NX90_mtgy_op_tc116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc117 */
/* => MWMM TC register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc117  0x000011D4U
#define Adr_NX90_mtgy_mtgy_op_tc117 0xFF0831D4U
#define Adr_NX90_mtgy_op_tc117      0xFF0831D4U
#define DFLT_VAL_NX90_mtgy_op_tc117 0x00000000U

#define MSK_NX90_mtgy_op_tc117_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc117_val         0
#define DFLT_VAL_NX90_mtgy_op_tc117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc117': */
#define MSK_USED_BITS_NX90_mtgy_op_tc117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc118 */
/* => MWMM TC register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc118  0x000011D8U
#define Adr_NX90_mtgy_mtgy_op_tc118 0xFF0831D8U
#define Adr_NX90_mtgy_op_tc118      0xFF0831D8U
#define DFLT_VAL_NX90_mtgy_op_tc118 0x00000000U

#define MSK_NX90_mtgy_op_tc118_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc118_val         0
#define DFLT_VAL_NX90_mtgy_op_tc118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc118': */
#define MSK_USED_BITS_NX90_mtgy_op_tc118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc119 */
/* => MWMM TC register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc119  0x000011DCU
#define Adr_NX90_mtgy_mtgy_op_tc119 0xFF0831DCU
#define Adr_NX90_mtgy_op_tc119      0xFF0831DCU
#define DFLT_VAL_NX90_mtgy_op_tc119 0x00000000U

#define MSK_NX90_mtgy_op_tc119_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc119_val         0
#define DFLT_VAL_NX90_mtgy_op_tc119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc119': */
#define MSK_USED_BITS_NX90_mtgy_op_tc119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc120 */
/* => MWMM TC register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc120  0x000011E0U
#define Adr_NX90_mtgy_mtgy_op_tc120 0xFF0831E0U
#define Adr_NX90_mtgy_op_tc120      0xFF0831E0U
#define DFLT_VAL_NX90_mtgy_op_tc120 0x00000000U

#define MSK_NX90_mtgy_op_tc120_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc120_val         0
#define DFLT_VAL_NX90_mtgy_op_tc120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc120': */
#define MSK_USED_BITS_NX90_mtgy_op_tc120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc121 */
/* => MWMM TC register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc121  0x000011E4U
#define Adr_NX90_mtgy_mtgy_op_tc121 0xFF0831E4U
#define Adr_NX90_mtgy_op_tc121      0xFF0831E4U
#define DFLT_VAL_NX90_mtgy_op_tc121 0x00000000U

#define MSK_NX90_mtgy_op_tc121_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc121_val         0
#define DFLT_VAL_NX90_mtgy_op_tc121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc121': */
#define MSK_USED_BITS_NX90_mtgy_op_tc121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc122 */
/* => MWMM TC register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc122  0x000011E8U
#define Adr_NX90_mtgy_mtgy_op_tc122 0xFF0831E8U
#define Adr_NX90_mtgy_op_tc122      0xFF0831E8U
#define DFLT_VAL_NX90_mtgy_op_tc122 0x00000000U

#define MSK_NX90_mtgy_op_tc122_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc122_val         0
#define DFLT_VAL_NX90_mtgy_op_tc122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc122': */
#define MSK_USED_BITS_NX90_mtgy_op_tc122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc123 */
/* => MWMM TC register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc123  0x000011ECU
#define Adr_NX90_mtgy_mtgy_op_tc123 0xFF0831ECU
#define Adr_NX90_mtgy_op_tc123      0xFF0831ECU
#define DFLT_VAL_NX90_mtgy_op_tc123 0x00000000U

#define MSK_NX90_mtgy_op_tc123_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc123_val         0
#define DFLT_VAL_NX90_mtgy_op_tc123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc123': */
#define MSK_USED_BITS_NX90_mtgy_op_tc123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc124 */
/* => MWMM TC register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc124  0x000011F0U
#define Adr_NX90_mtgy_mtgy_op_tc124 0xFF0831F0U
#define Adr_NX90_mtgy_op_tc124      0xFF0831F0U
#define DFLT_VAL_NX90_mtgy_op_tc124 0x00000000U

#define MSK_NX90_mtgy_op_tc124_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc124_val         0
#define DFLT_VAL_NX90_mtgy_op_tc124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc124': */
#define MSK_USED_BITS_NX90_mtgy_op_tc124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc125 */
/* => MWMM TC register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc125  0x000011F4U
#define Adr_NX90_mtgy_mtgy_op_tc125 0xFF0831F4U
#define Adr_NX90_mtgy_op_tc125      0xFF0831F4U
#define DFLT_VAL_NX90_mtgy_op_tc125 0x00000000U

#define MSK_NX90_mtgy_op_tc125_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc125_val         0
#define DFLT_VAL_NX90_mtgy_op_tc125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc125': */
#define MSK_USED_BITS_NX90_mtgy_op_tc125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc126 */
/* => MWMM TC register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc126  0x000011F8U
#define Adr_NX90_mtgy_mtgy_op_tc126 0xFF0831F8U
#define Adr_NX90_mtgy_op_tc126      0xFF0831F8U
#define DFLT_VAL_NX90_mtgy_op_tc126 0x00000000U

#define MSK_NX90_mtgy_op_tc126_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc126_val         0
#define DFLT_VAL_NX90_mtgy_op_tc126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc126': */
#define MSK_USED_BITS_NX90_mtgy_op_tc126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc127 */
/* => MWMM TC register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc127  0x000011FCU
#define Adr_NX90_mtgy_mtgy_op_tc127 0xFF0831FCU
#define Adr_NX90_mtgy_op_tc127      0xFF0831FCU
#define DFLT_VAL_NX90_mtgy_op_tc127 0x00000000U

#define MSK_NX90_mtgy_op_tc127_val         0xffffffffU
#define SRT_NX90_mtgy_op_tc127_val         0
#define DFLT_VAL_NX90_mtgy_op_tc127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_tc127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_tc127': */
#define MSK_USED_BITS_NX90_mtgy_op_tc127 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts0 */
/* => MWMM TS register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts0  0x00001200U
#define Adr_NX90_mtgy_mtgy_op_ts0 0xFF083200U
#define Adr_NX90_mtgy_op_ts0      0xFF083200U
#define DFLT_VAL_NX90_mtgy_op_ts0 0x00000000U

#define MSK_NX90_mtgy_op_ts0_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts0_val         0
#define DFLT_VAL_NX90_mtgy_op_ts0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts0': */
#define MSK_USED_BITS_NX90_mtgy_op_ts0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts1 */
/* => MWMM TS register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts1  0x00001204U
#define Adr_NX90_mtgy_mtgy_op_ts1 0xFF083204U
#define Adr_NX90_mtgy_op_ts1      0xFF083204U
#define DFLT_VAL_NX90_mtgy_op_ts1 0x00000000U

#define MSK_NX90_mtgy_op_ts1_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts1_val         0
#define DFLT_VAL_NX90_mtgy_op_ts1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts1': */
#define MSK_USED_BITS_NX90_mtgy_op_ts1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts2 */
/* => MWMM TS register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts2  0x00001208U
#define Adr_NX90_mtgy_mtgy_op_ts2 0xFF083208U
#define Adr_NX90_mtgy_op_ts2      0xFF083208U
#define DFLT_VAL_NX90_mtgy_op_ts2 0x00000000U

#define MSK_NX90_mtgy_op_ts2_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts2_val         0
#define DFLT_VAL_NX90_mtgy_op_ts2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts2': */
#define MSK_USED_BITS_NX90_mtgy_op_ts2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts3 */
/* => MWMM TS register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts3  0x0000120CU
#define Adr_NX90_mtgy_mtgy_op_ts3 0xFF08320CU
#define Adr_NX90_mtgy_op_ts3      0xFF08320CU
#define DFLT_VAL_NX90_mtgy_op_ts3 0x00000000U

#define MSK_NX90_mtgy_op_ts3_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts3_val         0
#define DFLT_VAL_NX90_mtgy_op_ts3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts3': */
#define MSK_USED_BITS_NX90_mtgy_op_ts3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts4 */
/* => MWMM TS register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts4  0x00001210U
#define Adr_NX90_mtgy_mtgy_op_ts4 0xFF083210U
#define Adr_NX90_mtgy_op_ts4      0xFF083210U
#define DFLT_VAL_NX90_mtgy_op_ts4 0x00000000U

#define MSK_NX90_mtgy_op_ts4_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts4_val         0
#define DFLT_VAL_NX90_mtgy_op_ts4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts4': */
#define MSK_USED_BITS_NX90_mtgy_op_ts4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts5 */
/* => MWMM TS register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts5  0x00001214U
#define Adr_NX90_mtgy_mtgy_op_ts5 0xFF083214U
#define Adr_NX90_mtgy_op_ts5      0xFF083214U
#define DFLT_VAL_NX90_mtgy_op_ts5 0x00000000U

#define MSK_NX90_mtgy_op_ts5_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts5_val         0
#define DFLT_VAL_NX90_mtgy_op_ts5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts5': */
#define MSK_USED_BITS_NX90_mtgy_op_ts5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts6 */
/* => MWMM TS register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts6  0x00001218U
#define Adr_NX90_mtgy_mtgy_op_ts6 0xFF083218U
#define Adr_NX90_mtgy_op_ts6      0xFF083218U
#define DFLT_VAL_NX90_mtgy_op_ts6 0x00000000U

#define MSK_NX90_mtgy_op_ts6_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts6_val         0
#define DFLT_VAL_NX90_mtgy_op_ts6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts6': */
#define MSK_USED_BITS_NX90_mtgy_op_ts6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts7 */
/* => MWMM TS register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts7  0x0000121CU
#define Adr_NX90_mtgy_mtgy_op_ts7 0xFF08321CU
#define Adr_NX90_mtgy_op_ts7      0xFF08321CU
#define DFLT_VAL_NX90_mtgy_op_ts7 0x00000000U

#define MSK_NX90_mtgy_op_ts7_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts7_val         0
#define DFLT_VAL_NX90_mtgy_op_ts7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts7': */
#define MSK_USED_BITS_NX90_mtgy_op_ts7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts8 */
/* => MWMM TS register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts8  0x00001220U
#define Adr_NX90_mtgy_mtgy_op_ts8 0xFF083220U
#define Adr_NX90_mtgy_op_ts8      0xFF083220U
#define DFLT_VAL_NX90_mtgy_op_ts8 0x00000000U

#define MSK_NX90_mtgy_op_ts8_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts8_val         0
#define DFLT_VAL_NX90_mtgy_op_ts8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts8': */
#define MSK_USED_BITS_NX90_mtgy_op_ts8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts9 */
/* => MWMM TS register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts9  0x00001224U
#define Adr_NX90_mtgy_mtgy_op_ts9 0xFF083224U
#define Adr_NX90_mtgy_op_ts9      0xFF083224U
#define DFLT_VAL_NX90_mtgy_op_ts9 0x00000000U

#define MSK_NX90_mtgy_op_ts9_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts9_val         0
#define DFLT_VAL_NX90_mtgy_op_ts9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts9': */
#define MSK_USED_BITS_NX90_mtgy_op_ts9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts10 */
/* => MWMM TS register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts10  0x00001228U
#define Adr_NX90_mtgy_mtgy_op_ts10 0xFF083228U
#define Adr_NX90_mtgy_op_ts10      0xFF083228U
#define DFLT_VAL_NX90_mtgy_op_ts10 0x00000000U

#define MSK_NX90_mtgy_op_ts10_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts10_val         0
#define DFLT_VAL_NX90_mtgy_op_ts10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts10': */
#define MSK_USED_BITS_NX90_mtgy_op_ts10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts11 */
/* => MWMM TS register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts11  0x0000122CU
#define Adr_NX90_mtgy_mtgy_op_ts11 0xFF08322CU
#define Adr_NX90_mtgy_op_ts11      0xFF08322CU
#define DFLT_VAL_NX90_mtgy_op_ts11 0x00000000U

#define MSK_NX90_mtgy_op_ts11_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts11_val         0
#define DFLT_VAL_NX90_mtgy_op_ts11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts11': */
#define MSK_USED_BITS_NX90_mtgy_op_ts11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts12 */
/* => MWMM TS register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts12  0x00001230U
#define Adr_NX90_mtgy_mtgy_op_ts12 0xFF083230U
#define Adr_NX90_mtgy_op_ts12      0xFF083230U
#define DFLT_VAL_NX90_mtgy_op_ts12 0x00000000U

#define MSK_NX90_mtgy_op_ts12_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts12_val         0
#define DFLT_VAL_NX90_mtgy_op_ts12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts12': */
#define MSK_USED_BITS_NX90_mtgy_op_ts12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts13 */
/* => MWMM TS register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts13  0x00001234U
#define Adr_NX90_mtgy_mtgy_op_ts13 0xFF083234U
#define Adr_NX90_mtgy_op_ts13      0xFF083234U
#define DFLT_VAL_NX90_mtgy_op_ts13 0x00000000U

#define MSK_NX90_mtgy_op_ts13_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts13_val         0
#define DFLT_VAL_NX90_mtgy_op_ts13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts13': */
#define MSK_USED_BITS_NX90_mtgy_op_ts13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts14 */
/* => MWMM TS register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts14  0x00001238U
#define Adr_NX90_mtgy_mtgy_op_ts14 0xFF083238U
#define Adr_NX90_mtgy_op_ts14      0xFF083238U
#define DFLT_VAL_NX90_mtgy_op_ts14 0x00000000U

#define MSK_NX90_mtgy_op_ts14_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts14_val         0
#define DFLT_VAL_NX90_mtgy_op_ts14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts14': */
#define MSK_USED_BITS_NX90_mtgy_op_ts14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts15 */
/* => MWMM TS register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts15  0x0000123CU
#define Adr_NX90_mtgy_mtgy_op_ts15 0xFF08323CU
#define Adr_NX90_mtgy_op_ts15      0xFF08323CU
#define DFLT_VAL_NX90_mtgy_op_ts15 0x00000000U

#define MSK_NX90_mtgy_op_ts15_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts15_val         0
#define DFLT_VAL_NX90_mtgy_op_ts15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts15': */
#define MSK_USED_BITS_NX90_mtgy_op_ts15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts16 */
/* => MWMM TS register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts16  0x00001240U
#define Adr_NX90_mtgy_mtgy_op_ts16 0xFF083240U
#define Adr_NX90_mtgy_op_ts16      0xFF083240U
#define DFLT_VAL_NX90_mtgy_op_ts16 0x00000000U

#define MSK_NX90_mtgy_op_ts16_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts16_val         0
#define DFLT_VAL_NX90_mtgy_op_ts16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts16': */
#define MSK_USED_BITS_NX90_mtgy_op_ts16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts17 */
/* => MWMM TS register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts17  0x00001244U
#define Adr_NX90_mtgy_mtgy_op_ts17 0xFF083244U
#define Adr_NX90_mtgy_op_ts17      0xFF083244U
#define DFLT_VAL_NX90_mtgy_op_ts17 0x00000000U

#define MSK_NX90_mtgy_op_ts17_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts17_val         0
#define DFLT_VAL_NX90_mtgy_op_ts17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts17': */
#define MSK_USED_BITS_NX90_mtgy_op_ts17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts18 */
/* => MWMM TS register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts18  0x00001248U
#define Adr_NX90_mtgy_mtgy_op_ts18 0xFF083248U
#define Adr_NX90_mtgy_op_ts18      0xFF083248U
#define DFLT_VAL_NX90_mtgy_op_ts18 0x00000000U

#define MSK_NX90_mtgy_op_ts18_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts18_val         0
#define DFLT_VAL_NX90_mtgy_op_ts18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts18': */
#define MSK_USED_BITS_NX90_mtgy_op_ts18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts19 */
/* => MWMM TS register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts19  0x0000124CU
#define Adr_NX90_mtgy_mtgy_op_ts19 0xFF08324CU
#define Adr_NX90_mtgy_op_ts19      0xFF08324CU
#define DFLT_VAL_NX90_mtgy_op_ts19 0x00000000U

#define MSK_NX90_mtgy_op_ts19_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts19_val         0
#define DFLT_VAL_NX90_mtgy_op_ts19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts19': */
#define MSK_USED_BITS_NX90_mtgy_op_ts19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts20 */
/* => MWMM TS register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts20  0x00001250U
#define Adr_NX90_mtgy_mtgy_op_ts20 0xFF083250U
#define Adr_NX90_mtgy_op_ts20      0xFF083250U
#define DFLT_VAL_NX90_mtgy_op_ts20 0x00000000U

#define MSK_NX90_mtgy_op_ts20_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts20_val         0
#define DFLT_VAL_NX90_mtgy_op_ts20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts20': */
#define MSK_USED_BITS_NX90_mtgy_op_ts20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts21 */
/* => MWMM TS register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts21  0x00001254U
#define Adr_NX90_mtgy_mtgy_op_ts21 0xFF083254U
#define Adr_NX90_mtgy_op_ts21      0xFF083254U
#define DFLT_VAL_NX90_mtgy_op_ts21 0x00000000U

#define MSK_NX90_mtgy_op_ts21_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts21_val         0
#define DFLT_VAL_NX90_mtgy_op_ts21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts21': */
#define MSK_USED_BITS_NX90_mtgy_op_ts21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts22 */
/* => MWMM TS register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts22  0x00001258U
#define Adr_NX90_mtgy_mtgy_op_ts22 0xFF083258U
#define Adr_NX90_mtgy_op_ts22      0xFF083258U
#define DFLT_VAL_NX90_mtgy_op_ts22 0x00000000U

#define MSK_NX90_mtgy_op_ts22_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts22_val         0
#define DFLT_VAL_NX90_mtgy_op_ts22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts22': */
#define MSK_USED_BITS_NX90_mtgy_op_ts22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts23 */
/* => MWMM TS register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts23  0x0000125CU
#define Adr_NX90_mtgy_mtgy_op_ts23 0xFF08325CU
#define Adr_NX90_mtgy_op_ts23      0xFF08325CU
#define DFLT_VAL_NX90_mtgy_op_ts23 0x00000000U

#define MSK_NX90_mtgy_op_ts23_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts23_val         0
#define DFLT_VAL_NX90_mtgy_op_ts23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts23': */
#define MSK_USED_BITS_NX90_mtgy_op_ts23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts24 */
/* => MWMM TS register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts24  0x00001260U
#define Adr_NX90_mtgy_mtgy_op_ts24 0xFF083260U
#define Adr_NX90_mtgy_op_ts24      0xFF083260U
#define DFLT_VAL_NX90_mtgy_op_ts24 0x00000000U

#define MSK_NX90_mtgy_op_ts24_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts24_val         0
#define DFLT_VAL_NX90_mtgy_op_ts24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts24': */
#define MSK_USED_BITS_NX90_mtgy_op_ts24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts25 */
/* => MWMM TS register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts25  0x00001264U
#define Adr_NX90_mtgy_mtgy_op_ts25 0xFF083264U
#define Adr_NX90_mtgy_op_ts25      0xFF083264U
#define DFLT_VAL_NX90_mtgy_op_ts25 0x00000000U

#define MSK_NX90_mtgy_op_ts25_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts25_val         0
#define DFLT_VAL_NX90_mtgy_op_ts25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts25': */
#define MSK_USED_BITS_NX90_mtgy_op_ts25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts26 */
/* => MWMM TS register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts26  0x00001268U
#define Adr_NX90_mtgy_mtgy_op_ts26 0xFF083268U
#define Adr_NX90_mtgy_op_ts26      0xFF083268U
#define DFLT_VAL_NX90_mtgy_op_ts26 0x00000000U

#define MSK_NX90_mtgy_op_ts26_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts26_val         0
#define DFLT_VAL_NX90_mtgy_op_ts26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts26': */
#define MSK_USED_BITS_NX90_mtgy_op_ts26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts27 */
/* => MWMM TS register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts27  0x0000126CU
#define Adr_NX90_mtgy_mtgy_op_ts27 0xFF08326CU
#define Adr_NX90_mtgy_op_ts27      0xFF08326CU
#define DFLT_VAL_NX90_mtgy_op_ts27 0x00000000U

#define MSK_NX90_mtgy_op_ts27_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts27_val         0
#define DFLT_VAL_NX90_mtgy_op_ts27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts27': */
#define MSK_USED_BITS_NX90_mtgy_op_ts27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts28 */
/* => MWMM TS register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts28  0x00001270U
#define Adr_NX90_mtgy_mtgy_op_ts28 0xFF083270U
#define Adr_NX90_mtgy_op_ts28      0xFF083270U
#define DFLT_VAL_NX90_mtgy_op_ts28 0x00000000U

#define MSK_NX90_mtgy_op_ts28_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts28_val         0
#define DFLT_VAL_NX90_mtgy_op_ts28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts28': */
#define MSK_USED_BITS_NX90_mtgy_op_ts28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts29 */
/* => MWMM TS register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts29  0x00001274U
#define Adr_NX90_mtgy_mtgy_op_ts29 0xFF083274U
#define Adr_NX90_mtgy_op_ts29      0xFF083274U
#define DFLT_VAL_NX90_mtgy_op_ts29 0x00000000U

#define MSK_NX90_mtgy_op_ts29_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts29_val         0
#define DFLT_VAL_NX90_mtgy_op_ts29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts29': */
#define MSK_USED_BITS_NX90_mtgy_op_ts29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts30 */
/* => MWMM TS register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts30  0x00001278U
#define Adr_NX90_mtgy_mtgy_op_ts30 0xFF083278U
#define Adr_NX90_mtgy_op_ts30      0xFF083278U
#define DFLT_VAL_NX90_mtgy_op_ts30 0x00000000U

#define MSK_NX90_mtgy_op_ts30_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts30_val         0
#define DFLT_VAL_NX90_mtgy_op_ts30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts30': */
#define MSK_USED_BITS_NX90_mtgy_op_ts30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts31 */
/* => MWMM TS register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts31  0x0000127CU
#define Adr_NX90_mtgy_mtgy_op_ts31 0xFF08327CU
#define Adr_NX90_mtgy_op_ts31      0xFF08327CU
#define DFLT_VAL_NX90_mtgy_op_ts31 0x00000000U

#define MSK_NX90_mtgy_op_ts31_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts31_val         0
#define DFLT_VAL_NX90_mtgy_op_ts31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts31': */
#define MSK_USED_BITS_NX90_mtgy_op_ts31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts32 */
/* => MWMM TS register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts32  0x00001280U
#define Adr_NX90_mtgy_mtgy_op_ts32 0xFF083280U
#define Adr_NX90_mtgy_op_ts32      0xFF083280U
#define DFLT_VAL_NX90_mtgy_op_ts32 0x00000000U

#define MSK_NX90_mtgy_op_ts32_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts32_val         0
#define DFLT_VAL_NX90_mtgy_op_ts32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts32': */
#define MSK_USED_BITS_NX90_mtgy_op_ts32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts33 */
/* => MWMM TS register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts33  0x00001284U
#define Adr_NX90_mtgy_mtgy_op_ts33 0xFF083284U
#define Adr_NX90_mtgy_op_ts33      0xFF083284U
#define DFLT_VAL_NX90_mtgy_op_ts33 0x00000000U

#define MSK_NX90_mtgy_op_ts33_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts33_val         0
#define DFLT_VAL_NX90_mtgy_op_ts33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts33': */
#define MSK_USED_BITS_NX90_mtgy_op_ts33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts34 */
/* => MWMM TS register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts34  0x00001288U
#define Adr_NX90_mtgy_mtgy_op_ts34 0xFF083288U
#define Adr_NX90_mtgy_op_ts34      0xFF083288U
#define DFLT_VAL_NX90_mtgy_op_ts34 0x00000000U

#define MSK_NX90_mtgy_op_ts34_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts34_val         0
#define DFLT_VAL_NX90_mtgy_op_ts34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts34': */
#define MSK_USED_BITS_NX90_mtgy_op_ts34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts35 */
/* => MWMM TS register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts35  0x0000128CU
#define Adr_NX90_mtgy_mtgy_op_ts35 0xFF08328CU
#define Adr_NX90_mtgy_op_ts35      0xFF08328CU
#define DFLT_VAL_NX90_mtgy_op_ts35 0x00000000U

#define MSK_NX90_mtgy_op_ts35_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts35_val         0
#define DFLT_VAL_NX90_mtgy_op_ts35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts35': */
#define MSK_USED_BITS_NX90_mtgy_op_ts35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts36 */
/* => MWMM TS register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts36  0x00001290U
#define Adr_NX90_mtgy_mtgy_op_ts36 0xFF083290U
#define Adr_NX90_mtgy_op_ts36      0xFF083290U
#define DFLT_VAL_NX90_mtgy_op_ts36 0x00000000U

#define MSK_NX90_mtgy_op_ts36_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts36_val         0
#define DFLT_VAL_NX90_mtgy_op_ts36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts36': */
#define MSK_USED_BITS_NX90_mtgy_op_ts36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts37 */
/* => MWMM TS register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts37  0x00001294U
#define Adr_NX90_mtgy_mtgy_op_ts37 0xFF083294U
#define Adr_NX90_mtgy_op_ts37      0xFF083294U
#define DFLT_VAL_NX90_mtgy_op_ts37 0x00000000U

#define MSK_NX90_mtgy_op_ts37_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts37_val         0
#define DFLT_VAL_NX90_mtgy_op_ts37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts37': */
#define MSK_USED_BITS_NX90_mtgy_op_ts37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts38 */
/* => MWMM TS register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts38  0x00001298U
#define Adr_NX90_mtgy_mtgy_op_ts38 0xFF083298U
#define Adr_NX90_mtgy_op_ts38      0xFF083298U
#define DFLT_VAL_NX90_mtgy_op_ts38 0x00000000U

#define MSK_NX90_mtgy_op_ts38_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts38_val         0
#define DFLT_VAL_NX90_mtgy_op_ts38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts38': */
#define MSK_USED_BITS_NX90_mtgy_op_ts38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts39 */
/* => MWMM TS register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts39  0x0000129CU
#define Adr_NX90_mtgy_mtgy_op_ts39 0xFF08329CU
#define Adr_NX90_mtgy_op_ts39      0xFF08329CU
#define DFLT_VAL_NX90_mtgy_op_ts39 0x00000000U

#define MSK_NX90_mtgy_op_ts39_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts39_val         0
#define DFLT_VAL_NX90_mtgy_op_ts39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts39': */
#define MSK_USED_BITS_NX90_mtgy_op_ts39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts40 */
/* => MWMM TS register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts40  0x000012A0U
#define Adr_NX90_mtgy_mtgy_op_ts40 0xFF0832A0U
#define Adr_NX90_mtgy_op_ts40      0xFF0832A0U
#define DFLT_VAL_NX90_mtgy_op_ts40 0x00000000U

#define MSK_NX90_mtgy_op_ts40_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts40_val         0
#define DFLT_VAL_NX90_mtgy_op_ts40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts40': */
#define MSK_USED_BITS_NX90_mtgy_op_ts40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts41 */
/* => MWMM TS register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts41  0x000012A4U
#define Adr_NX90_mtgy_mtgy_op_ts41 0xFF0832A4U
#define Adr_NX90_mtgy_op_ts41      0xFF0832A4U
#define DFLT_VAL_NX90_mtgy_op_ts41 0x00000000U

#define MSK_NX90_mtgy_op_ts41_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts41_val         0
#define DFLT_VAL_NX90_mtgy_op_ts41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts41': */
#define MSK_USED_BITS_NX90_mtgy_op_ts41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts42 */
/* => MWMM TS register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts42  0x000012A8U
#define Adr_NX90_mtgy_mtgy_op_ts42 0xFF0832A8U
#define Adr_NX90_mtgy_op_ts42      0xFF0832A8U
#define DFLT_VAL_NX90_mtgy_op_ts42 0x00000000U

#define MSK_NX90_mtgy_op_ts42_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts42_val         0
#define DFLT_VAL_NX90_mtgy_op_ts42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts42': */
#define MSK_USED_BITS_NX90_mtgy_op_ts42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts43 */
/* => MWMM TS register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts43  0x000012ACU
#define Adr_NX90_mtgy_mtgy_op_ts43 0xFF0832ACU
#define Adr_NX90_mtgy_op_ts43      0xFF0832ACU
#define DFLT_VAL_NX90_mtgy_op_ts43 0x00000000U

#define MSK_NX90_mtgy_op_ts43_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts43_val         0
#define DFLT_VAL_NX90_mtgy_op_ts43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts43': */
#define MSK_USED_BITS_NX90_mtgy_op_ts43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts44 */
/* => MWMM TS register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts44  0x000012B0U
#define Adr_NX90_mtgy_mtgy_op_ts44 0xFF0832B0U
#define Adr_NX90_mtgy_op_ts44      0xFF0832B0U
#define DFLT_VAL_NX90_mtgy_op_ts44 0x00000000U

#define MSK_NX90_mtgy_op_ts44_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts44_val         0
#define DFLT_VAL_NX90_mtgy_op_ts44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts44': */
#define MSK_USED_BITS_NX90_mtgy_op_ts44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts45 */
/* => MWMM TS register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts45  0x000012B4U
#define Adr_NX90_mtgy_mtgy_op_ts45 0xFF0832B4U
#define Adr_NX90_mtgy_op_ts45      0xFF0832B4U
#define DFLT_VAL_NX90_mtgy_op_ts45 0x00000000U

#define MSK_NX90_mtgy_op_ts45_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts45_val         0
#define DFLT_VAL_NX90_mtgy_op_ts45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts45': */
#define MSK_USED_BITS_NX90_mtgy_op_ts45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts46 */
/* => MWMM TS register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts46  0x000012B8U
#define Adr_NX90_mtgy_mtgy_op_ts46 0xFF0832B8U
#define Adr_NX90_mtgy_op_ts46      0xFF0832B8U
#define DFLT_VAL_NX90_mtgy_op_ts46 0x00000000U

#define MSK_NX90_mtgy_op_ts46_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts46_val         0
#define DFLT_VAL_NX90_mtgy_op_ts46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts46': */
#define MSK_USED_BITS_NX90_mtgy_op_ts46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts47 */
/* => MWMM TS register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts47  0x000012BCU
#define Adr_NX90_mtgy_mtgy_op_ts47 0xFF0832BCU
#define Adr_NX90_mtgy_op_ts47      0xFF0832BCU
#define DFLT_VAL_NX90_mtgy_op_ts47 0x00000000U

#define MSK_NX90_mtgy_op_ts47_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts47_val         0
#define DFLT_VAL_NX90_mtgy_op_ts47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts47': */
#define MSK_USED_BITS_NX90_mtgy_op_ts47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts48 */
/* => MWMM TS register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts48  0x000012C0U
#define Adr_NX90_mtgy_mtgy_op_ts48 0xFF0832C0U
#define Adr_NX90_mtgy_op_ts48      0xFF0832C0U
#define DFLT_VAL_NX90_mtgy_op_ts48 0x00000000U

#define MSK_NX90_mtgy_op_ts48_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts48_val         0
#define DFLT_VAL_NX90_mtgy_op_ts48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts48': */
#define MSK_USED_BITS_NX90_mtgy_op_ts48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts49 */
/* => MWMM TS register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts49  0x000012C4U
#define Adr_NX90_mtgy_mtgy_op_ts49 0xFF0832C4U
#define Adr_NX90_mtgy_op_ts49      0xFF0832C4U
#define DFLT_VAL_NX90_mtgy_op_ts49 0x00000000U

#define MSK_NX90_mtgy_op_ts49_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts49_val         0
#define DFLT_VAL_NX90_mtgy_op_ts49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts49': */
#define MSK_USED_BITS_NX90_mtgy_op_ts49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts50 */
/* => MWMM TS register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts50  0x000012C8U
#define Adr_NX90_mtgy_mtgy_op_ts50 0xFF0832C8U
#define Adr_NX90_mtgy_op_ts50      0xFF0832C8U
#define DFLT_VAL_NX90_mtgy_op_ts50 0x00000000U

#define MSK_NX90_mtgy_op_ts50_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts50_val         0
#define DFLT_VAL_NX90_mtgy_op_ts50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts50': */
#define MSK_USED_BITS_NX90_mtgy_op_ts50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts51 */
/* => MWMM TS register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts51  0x000012CCU
#define Adr_NX90_mtgy_mtgy_op_ts51 0xFF0832CCU
#define Adr_NX90_mtgy_op_ts51      0xFF0832CCU
#define DFLT_VAL_NX90_mtgy_op_ts51 0x00000000U

#define MSK_NX90_mtgy_op_ts51_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts51_val         0
#define DFLT_VAL_NX90_mtgy_op_ts51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts51': */
#define MSK_USED_BITS_NX90_mtgy_op_ts51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts52 */
/* => MWMM TS register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts52  0x000012D0U
#define Adr_NX90_mtgy_mtgy_op_ts52 0xFF0832D0U
#define Adr_NX90_mtgy_op_ts52      0xFF0832D0U
#define DFLT_VAL_NX90_mtgy_op_ts52 0x00000000U

#define MSK_NX90_mtgy_op_ts52_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts52_val         0
#define DFLT_VAL_NX90_mtgy_op_ts52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts52': */
#define MSK_USED_BITS_NX90_mtgy_op_ts52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts53 */
/* => MWMM TS register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts53  0x000012D4U
#define Adr_NX90_mtgy_mtgy_op_ts53 0xFF0832D4U
#define Adr_NX90_mtgy_op_ts53      0xFF0832D4U
#define DFLT_VAL_NX90_mtgy_op_ts53 0x00000000U

#define MSK_NX90_mtgy_op_ts53_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts53_val         0
#define DFLT_VAL_NX90_mtgy_op_ts53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts53': */
#define MSK_USED_BITS_NX90_mtgy_op_ts53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts54 */
/* => MWMM TS register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts54  0x000012D8U
#define Adr_NX90_mtgy_mtgy_op_ts54 0xFF0832D8U
#define Adr_NX90_mtgy_op_ts54      0xFF0832D8U
#define DFLT_VAL_NX90_mtgy_op_ts54 0x00000000U

#define MSK_NX90_mtgy_op_ts54_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts54_val         0
#define DFLT_VAL_NX90_mtgy_op_ts54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts54': */
#define MSK_USED_BITS_NX90_mtgy_op_ts54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts55 */
/* => MWMM TS register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts55  0x000012DCU
#define Adr_NX90_mtgy_mtgy_op_ts55 0xFF0832DCU
#define Adr_NX90_mtgy_op_ts55      0xFF0832DCU
#define DFLT_VAL_NX90_mtgy_op_ts55 0x00000000U

#define MSK_NX90_mtgy_op_ts55_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts55_val         0
#define DFLT_VAL_NX90_mtgy_op_ts55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts55': */
#define MSK_USED_BITS_NX90_mtgy_op_ts55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts56 */
/* => MWMM TS register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts56  0x000012E0U
#define Adr_NX90_mtgy_mtgy_op_ts56 0xFF0832E0U
#define Adr_NX90_mtgy_op_ts56      0xFF0832E0U
#define DFLT_VAL_NX90_mtgy_op_ts56 0x00000000U

#define MSK_NX90_mtgy_op_ts56_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts56_val         0
#define DFLT_VAL_NX90_mtgy_op_ts56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts56': */
#define MSK_USED_BITS_NX90_mtgy_op_ts56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts57 */
/* => MWMM TS register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts57  0x000012E4U
#define Adr_NX90_mtgy_mtgy_op_ts57 0xFF0832E4U
#define Adr_NX90_mtgy_op_ts57      0xFF0832E4U
#define DFLT_VAL_NX90_mtgy_op_ts57 0x00000000U

#define MSK_NX90_mtgy_op_ts57_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts57_val         0
#define DFLT_VAL_NX90_mtgy_op_ts57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts57': */
#define MSK_USED_BITS_NX90_mtgy_op_ts57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts58 */
/* => MWMM TS register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts58  0x000012E8U
#define Adr_NX90_mtgy_mtgy_op_ts58 0xFF0832E8U
#define Adr_NX90_mtgy_op_ts58      0xFF0832E8U
#define DFLT_VAL_NX90_mtgy_op_ts58 0x00000000U

#define MSK_NX90_mtgy_op_ts58_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts58_val         0
#define DFLT_VAL_NX90_mtgy_op_ts58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts58': */
#define MSK_USED_BITS_NX90_mtgy_op_ts58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts59 */
/* => MWMM TS register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts59  0x000012ECU
#define Adr_NX90_mtgy_mtgy_op_ts59 0xFF0832ECU
#define Adr_NX90_mtgy_op_ts59      0xFF0832ECU
#define DFLT_VAL_NX90_mtgy_op_ts59 0x00000000U

#define MSK_NX90_mtgy_op_ts59_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts59_val         0
#define DFLT_VAL_NX90_mtgy_op_ts59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts59': */
#define MSK_USED_BITS_NX90_mtgy_op_ts59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts60 */
/* => MWMM TS register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts60  0x000012F0U
#define Adr_NX90_mtgy_mtgy_op_ts60 0xFF0832F0U
#define Adr_NX90_mtgy_op_ts60      0xFF0832F0U
#define DFLT_VAL_NX90_mtgy_op_ts60 0x00000000U

#define MSK_NX90_mtgy_op_ts60_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts60_val         0
#define DFLT_VAL_NX90_mtgy_op_ts60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts60': */
#define MSK_USED_BITS_NX90_mtgy_op_ts60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts61 */
/* => MWMM TS register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts61  0x000012F4U
#define Adr_NX90_mtgy_mtgy_op_ts61 0xFF0832F4U
#define Adr_NX90_mtgy_op_ts61      0xFF0832F4U
#define DFLT_VAL_NX90_mtgy_op_ts61 0x00000000U

#define MSK_NX90_mtgy_op_ts61_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts61_val         0
#define DFLT_VAL_NX90_mtgy_op_ts61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts61': */
#define MSK_USED_BITS_NX90_mtgy_op_ts61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts62 */
/* => MWMM TS register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts62  0x000012F8U
#define Adr_NX90_mtgy_mtgy_op_ts62 0xFF0832F8U
#define Adr_NX90_mtgy_op_ts62      0xFF0832F8U
#define DFLT_VAL_NX90_mtgy_op_ts62 0x00000000U

#define MSK_NX90_mtgy_op_ts62_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts62_val         0
#define DFLT_VAL_NX90_mtgy_op_ts62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts62': */
#define MSK_USED_BITS_NX90_mtgy_op_ts62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts63 */
/* => MWMM TS register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts63  0x000012FCU
#define Adr_NX90_mtgy_mtgy_op_ts63 0xFF0832FCU
#define Adr_NX90_mtgy_op_ts63      0xFF0832FCU
#define DFLT_VAL_NX90_mtgy_op_ts63 0x00000000U

#define MSK_NX90_mtgy_op_ts63_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts63_val         0
#define DFLT_VAL_NX90_mtgy_op_ts63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts63': */
#define MSK_USED_BITS_NX90_mtgy_op_ts63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts64 */
/* => MWMM TS register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts64  0x00001300U
#define Adr_NX90_mtgy_mtgy_op_ts64 0xFF083300U
#define Adr_NX90_mtgy_op_ts64      0xFF083300U
#define DFLT_VAL_NX90_mtgy_op_ts64 0x00000000U

#define MSK_NX90_mtgy_op_ts64_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts64_val         0
#define DFLT_VAL_NX90_mtgy_op_ts64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts64': */
#define MSK_USED_BITS_NX90_mtgy_op_ts64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts65 */
/* => MWMM TS register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts65  0x00001304U
#define Adr_NX90_mtgy_mtgy_op_ts65 0xFF083304U
#define Adr_NX90_mtgy_op_ts65      0xFF083304U
#define DFLT_VAL_NX90_mtgy_op_ts65 0x00000000U

#define MSK_NX90_mtgy_op_ts65_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts65_val         0
#define DFLT_VAL_NX90_mtgy_op_ts65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts65': */
#define MSK_USED_BITS_NX90_mtgy_op_ts65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts66 */
/* => MWMM TS register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts66  0x00001308U
#define Adr_NX90_mtgy_mtgy_op_ts66 0xFF083308U
#define Adr_NX90_mtgy_op_ts66      0xFF083308U
#define DFLT_VAL_NX90_mtgy_op_ts66 0x00000000U

#define MSK_NX90_mtgy_op_ts66_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts66_val         0
#define DFLT_VAL_NX90_mtgy_op_ts66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts66': */
#define MSK_USED_BITS_NX90_mtgy_op_ts66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts67 */
/* => MWMM TS register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts67  0x0000130CU
#define Adr_NX90_mtgy_mtgy_op_ts67 0xFF08330CU
#define Adr_NX90_mtgy_op_ts67      0xFF08330CU
#define DFLT_VAL_NX90_mtgy_op_ts67 0x00000000U

#define MSK_NX90_mtgy_op_ts67_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts67_val         0
#define DFLT_VAL_NX90_mtgy_op_ts67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts67': */
#define MSK_USED_BITS_NX90_mtgy_op_ts67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts68 */
/* => MWMM TS register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts68  0x00001310U
#define Adr_NX90_mtgy_mtgy_op_ts68 0xFF083310U
#define Adr_NX90_mtgy_op_ts68      0xFF083310U
#define DFLT_VAL_NX90_mtgy_op_ts68 0x00000000U

#define MSK_NX90_mtgy_op_ts68_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts68_val         0
#define DFLT_VAL_NX90_mtgy_op_ts68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts68': */
#define MSK_USED_BITS_NX90_mtgy_op_ts68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts69 */
/* => MWMM TS register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts69  0x00001314U
#define Adr_NX90_mtgy_mtgy_op_ts69 0xFF083314U
#define Adr_NX90_mtgy_op_ts69      0xFF083314U
#define DFLT_VAL_NX90_mtgy_op_ts69 0x00000000U

#define MSK_NX90_mtgy_op_ts69_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts69_val         0
#define DFLT_VAL_NX90_mtgy_op_ts69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts69': */
#define MSK_USED_BITS_NX90_mtgy_op_ts69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts70 */
/* => MWMM TS register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts70  0x00001318U
#define Adr_NX90_mtgy_mtgy_op_ts70 0xFF083318U
#define Adr_NX90_mtgy_op_ts70      0xFF083318U
#define DFLT_VAL_NX90_mtgy_op_ts70 0x00000000U

#define MSK_NX90_mtgy_op_ts70_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts70_val         0
#define DFLT_VAL_NX90_mtgy_op_ts70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts70': */
#define MSK_USED_BITS_NX90_mtgy_op_ts70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts71 */
/* => MWMM TS register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts71  0x0000131CU
#define Adr_NX90_mtgy_mtgy_op_ts71 0xFF08331CU
#define Adr_NX90_mtgy_op_ts71      0xFF08331CU
#define DFLT_VAL_NX90_mtgy_op_ts71 0x00000000U

#define MSK_NX90_mtgy_op_ts71_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts71_val         0
#define DFLT_VAL_NX90_mtgy_op_ts71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts71': */
#define MSK_USED_BITS_NX90_mtgy_op_ts71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts72 */
/* => MWMM TS register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts72  0x00001320U
#define Adr_NX90_mtgy_mtgy_op_ts72 0xFF083320U
#define Adr_NX90_mtgy_op_ts72      0xFF083320U
#define DFLT_VAL_NX90_mtgy_op_ts72 0x00000000U

#define MSK_NX90_mtgy_op_ts72_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts72_val         0
#define DFLT_VAL_NX90_mtgy_op_ts72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts72': */
#define MSK_USED_BITS_NX90_mtgy_op_ts72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts73 */
/* => MWMM TS register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts73  0x00001324U
#define Adr_NX90_mtgy_mtgy_op_ts73 0xFF083324U
#define Adr_NX90_mtgy_op_ts73      0xFF083324U
#define DFLT_VAL_NX90_mtgy_op_ts73 0x00000000U

#define MSK_NX90_mtgy_op_ts73_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts73_val         0
#define DFLT_VAL_NX90_mtgy_op_ts73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts73': */
#define MSK_USED_BITS_NX90_mtgy_op_ts73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts74 */
/* => MWMM TS register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts74  0x00001328U
#define Adr_NX90_mtgy_mtgy_op_ts74 0xFF083328U
#define Adr_NX90_mtgy_op_ts74      0xFF083328U
#define DFLT_VAL_NX90_mtgy_op_ts74 0x00000000U

#define MSK_NX90_mtgy_op_ts74_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts74_val         0
#define DFLT_VAL_NX90_mtgy_op_ts74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts74': */
#define MSK_USED_BITS_NX90_mtgy_op_ts74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts75 */
/* => MWMM TS register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts75  0x0000132CU
#define Adr_NX90_mtgy_mtgy_op_ts75 0xFF08332CU
#define Adr_NX90_mtgy_op_ts75      0xFF08332CU
#define DFLT_VAL_NX90_mtgy_op_ts75 0x00000000U

#define MSK_NX90_mtgy_op_ts75_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts75_val         0
#define DFLT_VAL_NX90_mtgy_op_ts75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts75': */
#define MSK_USED_BITS_NX90_mtgy_op_ts75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts76 */
/* => MWMM TS register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts76  0x00001330U
#define Adr_NX90_mtgy_mtgy_op_ts76 0xFF083330U
#define Adr_NX90_mtgy_op_ts76      0xFF083330U
#define DFLT_VAL_NX90_mtgy_op_ts76 0x00000000U

#define MSK_NX90_mtgy_op_ts76_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts76_val         0
#define DFLT_VAL_NX90_mtgy_op_ts76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts76': */
#define MSK_USED_BITS_NX90_mtgy_op_ts76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts77 */
/* => MWMM TS register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts77  0x00001334U
#define Adr_NX90_mtgy_mtgy_op_ts77 0xFF083334U
#define Adr_NX90_mtgy_op_ts77      0xFF083334U
#define DFLT_VAL_NX90_mtgy_op_ts77 0x00000000U

#define MSK_NX90_mtgy_op_ts77_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts77_val         0
#define DFLT_VAL_NX90_mtgy_op_ts77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts77': */
#define MSK_USED_BITS_NX90_mtgy_op_ts77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts78 */
/* => MWMM TS register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts78  0x00001338U
#define Adr_NX90_mtgy_mtgy_op_ts78 0xFF083338U
#define Adr_NX90_mtgy_op_ts78      0xFF083338U
#define DFLT_VAL_NX90_mtgy_op_ts78 0x00000000U

#define MSK_NX90_mtgy_op_ts78_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts78_val         0
#define DFLT_VAL_NX90_mtgy_op_ts78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts78': */
#define MSK_USED_BITS_NX90_mtgy_op_ts78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts79 */
/* => MWMM TS register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts79  0x0000133CU
#define Adr_NX90_mtgy_mtgy_op_ts79 0xFF08333CU
#define Adr_NX90_mtgy_op_ts79      0xFF08333CU
#define DFLT_VAL_NX90_mtgy_op_ts79 0x00000000U

#define MSK_NX90_mtgy_op_ts79_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts79_val         0
#define DFLT_VAL_NX90_mtgy_op_ts79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts79': */
#define MSK_USED_BITS_NX90_mtgy_op_ts79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts80 */
/* => MWMM TS register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts80  0x00001340U
#define Adr_NX90_mtgy_mtgy_op_ts80 0xFF083340U
#define Adr_NX90_mtgy_op_ts80      0xFF083340U
#define DFLT_VAL_NX90_mtgy_op_ts80 0x00000000U

#define MSK_NX90_mtgy_op_ts80_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts80_val         0
#define DFLT_VAL_NX90_mtgy_op_ts80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts80': */
#define MSK_USED_BITS_NX90_mtgy_op_ts80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts81 */
/* => MWMM TS register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts81  0x00001344U
#define Adr_NX90_mtgy_mtgy_op_ts81 0xFF083344U
#define Adr_NX90_mtgy_op_ts81      0xFF083344U
#define DFLT_VAL_NX90_mtgy_op_ts81 0x00000000U

#define MSK_NX90_mtgy_op_ts81_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts81_val         0
#define DFLT_VAL_NX90_mtgy_op_ts81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts81': */
#define MSK_USED_BITS_NX90_mtgy_op_ts81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts82 */
/* => MWMM TS register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts82  0x00001348U
#define Adr_NX90_mtgy_mtgy_op_ts82 0xFF083348U
#define Adr_NX90_mtgy_op_ts82      0xFF083348U
#define DFLT_VAL_NX90_mtgy_op_ts82 0x00000000U

#define MSK_NX90_mtgy_op_ts82_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts82_val         0
#define DFLT_VAL_NX90_mtgy_op_ts82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts82': */
#define MSK_USED_BITS_NX90_mtgy_op_ts82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts83 */
/* => MWMM TS register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts83  0x0000134CU
#define Adr_NX90_mtgy_mtgy_op_ts83 0xFF08334CU
#define Adr_NX90_mtgy_op_ts83      0xFF08334CU
#define DFLT_VAL_NX90_mtgy_op_ts83 0x00000000U

#define MSK_NX90_mtgy_op_ts83_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts83_val         0
#define DFLT_VAL_NX90_mtgy_op_ts83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts83': */
#define MSK_USED_BITS_NX90_mtgy_op_ts83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts84 */
/* => MWMM TS register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts84  0x00001350U
#define Adr_NX90_mtgy_mtgy_op_ts84 0xFF083350U
#define Adr_NX90_mtgy_op_ts84      0xFF083350U
#define DFLT_VAL_NX90_mtgy_op_ts84 0x00000000U

#define MSK_NX90_mtgy_op_ts84_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts84_val         0
#define DFLT_VAL_NX90_mtgy_op_ts84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts84': */
#define MSK_USED_BITS_NX90_mtgy_op_ts84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts85 */
/* => MWMM TS register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts85  0x00001354U
#define Adr_NX90_mtgy_mtgy_op_ts85 0xFF083354U
#define Adr_NX90_mtgy_op_ts85      0xFF083354U
#define DFLT_VAL_NX90_mtgy_op_ts85 0x00000000U

#define MSK_NX90_mtgy_op_ts85_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts85_val         0
#define DFLT_VAL_NX90_mtgy_op_ts85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts85': */
#define MSK_USED_BITS_NX90_mtgy_op_ts85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts86 */
/* => MWMM TS register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts86  0x00001358U
#define Adr_NX90_mtgy_mtgy_op_ts86 0xFF083358U
#define Adr_NX90_mtgy_op_ts86      0xFF083358U
#define DFLT_VAL_NX90_mtgy_op_ts86 0x00000000U

#define MSK_NX90_mtgy_op_ts86_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts86_val         0
#define DFLT_VAL_NX90_mtgy_op_ts86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts86': */
#define MSK_USED_BITS_NX90_mtgy_op_ts86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts87 */
/* => MWMM TS register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts87  0x0000135CU
#define Adr_NX90_mtgy_mtgy_op_ts87 0xFF08335CU
#define Adr_NX90_mtgy_op_ts87      0xFF08335CU
#define DFLT_VAL_NX90_mtgy_op_ts87 0x00000000U

#define MSK_NX90_mtgy_op_ts87_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts87_val         0
#define DFLT_VAL_NX90_mtgy_op_ts87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts87': */
#define MSK_USED_BITS_NX90_mtgy_op_ts87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts88 */
/* => MWMM TS register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts88  0x00001360U
#define Adr_NX90_mtgy_mtgy_op_ts88 0xFF083360U
#define Adr_NX90_mtgy_op_ts88      0xFF083360U
#define DFLT_VAL_NX90_mtgy_op_ts88 0x00000000U

#define MSK_NX90_mtgy_op_ts88_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts88_val         0
#define DFLT_VAL_NX90_mtgy_op_ts88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts88': */
#define MSK_USED_BITS_NX90_mtgy_op_ts88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts89 */
/* => MWMM TS register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts89  0x00001364U
#define Adr_NX90_mtgy_mtgy_op_ts89 0xFF083364U
#define Adr_NX90_mtgy_op_ts89      0xFF083364U
#define DFLT_VAL_NX90_mtgy_op_ts89 0x00000000U

#define MSK_NX90_mtgy_op_ts89_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts89_val         0
#define DFLT_VAL_NX90_mtgy_op_ts89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts89': */
#define MSK_USED_BITS_NX90_mtgy_op_ts89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts90 */
/* => MWMM TS register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts90  0x00001368U
#define Adr_NX90_mtgy_mtgy_op_ts90 0xFF083368U
#define Adr_NX90_mtgy_op_ts90      0xFF083368U
#define DFLT_VAL_NX90_mtgy_op_ts90 0x00000000U

#define MSK_NX90_mtgy_op_ts90_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts90_val         0
#define DFLT_VAL_NX90_mtgy_op_ts90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts90': */
#define MSK_USED_BITS_NX90_mtgy_op_ts90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts91 */
/* => MWMM TS register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts91  0x0000136CU
#define Adr_NX90_mtgy_mtgy_op_ts91 0xFF08336CU
#define Adr_NX90_mtgy_op_ts91      0xFF08336CU
#define DFLT_VAL_NX90_mtgy_op_ts91 0x00000000U

#define MSK_NX90_mtgy_op_ts91_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts91_val         0
#define DFLT_VAL_NX90_mtgy_op_ts91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts91': */
#define MSK_USED_BITS_NX90_mtgy_op_ts91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts92 */
/* => MWMM TS register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts92  0x00001370U
#define Adr_NX90_mtgy_mtgy_op_ts92 0xFF083370U
#define Adr_NX90_mtgy_op_ts92      0xFF083370U
#define DFLT_VAL_NX90_mtgy_op_ts92 0x00000000U

#define MSK_NX90_mtgy_op_ts92_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts92_val         0
#define DFLT_VAL_NX90_mtgy_op_ts92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts92': */
#define MSK_USED_BITS_NX90_mtgy_op_ts92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts93 */
/* => MWMM TS register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts93  0x00001374U
#define Adr_NX90_mtgy_mtgy_op_ts93 0xFF083374U
#define Adr_NX90_mtgy_op_ts93      0xFF083374U
#define DFLT_VAL_NX90_mtgy_op_ts93 0x00000000U

#define MSK_NX90_mtgy_op_ts93_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts93_val         0
#define DFLT_VAL_NX90_mtgy_op_ts93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts93': */
#define MSK_USED_BITS_NX90_mtgy_op_ts93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts94 */
/* => MWMM TS register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts94  0x00001378U
#define Adr_NX90_mtgy_mtgy_op_ts94 0xFF083378U
#define Adr_NX90_mtgy_op_ts94      0xFF083378U
#define DFLT_VAL_NX90_mtgy_op_ts94 0x00000000U

#define MSK_NX90_mtgy_op_ts94_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts94_val         0
#define DFLT_VAL_NX90_mtgy_op_ts94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts94': */
#define MSK_USED_BITS_NX90_mtgy_op_ts94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts95 */
/* => MWMM TS register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts95  0x0000137CU
#define Adr_NX90_mtgy_mtgy_op_ts95 0xFF08337CU
#define Adr_NX90_mtgy_op_ts95      0xFF08337CU
#define DFLT_VAL_NX90_mtgy_op_ts95 0x00000000U

#define MSK_NX90_mtgy_op_ts95_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts95_val         0
#define DFLT_VAL_NX90_mtgy_op_ts95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts95': */
#define MSK_USED_BITS_NX90_mtgy_op_ts95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts96 */
/* => MWMM TS register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts96  0x00001380U
#define Adr_NX90_mtgy_mtgy_op_ts96 0xFF083380U
#define Adr_NX90_mtgy_op_ts96      0xFF083380U
#define DFLT_VAL_NX90_mtgy_op_ts96 0x00000000U

#define MSK_NX90_mtgy_op_ts96_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts96_val         0
#define DFLT_VAL_NX90_mtgy_op_ts96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts96': */
#define MSK_USED_BITS_NX90_mtgy_op_ts96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts97 */
/* => MWMM TS register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts97  0x00001384U
#define Adr_NX90_mtgy_mtgy_op_ts97 0xFF083384U
#define Adr_NX90_mtgy_op_ts97      0xFF083384U
#define DFLT_VAL_NX90_mtgy_op_ts97 0x00000000U

#define MSK_NX90_mtgy_op_ts97_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts97_val         0
#define DFLT_VAL_NX90_mtgy_op_ts97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts97': */
#define MSK_USED_BITS_NX90_mtgy_op_ts97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts98 */
/* => MWMM TS register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts98  0x00001388U
#define Adr_NX90_mtgy_mtgy_op_ts98 0xFF083388U
#define Adr_NX90_mtgy_op_ts98      0xFF083388U
#define DFLT_VAL_NX90_mtgy_op_ts98 0x00000000U

#define MSK_NX90_mtgy_op_ts98_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts98_val         0
#define DFLT_VAL_NX90_mtgy_op_ts98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts98': */
#define MSK_USED_BITS_NX90_mtgy_op_ts98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts99 */
/* => MWMM TS register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts99  0x0000138CU
#define Adr_NX90_mtgy_mtgy_op_ts99 0xFF08338CU
#define Adr_NX90_mtgy_op_ts99      0xFF08338CU
#define DFLT_VAL_NX90_mtgy_op_ts99 0x00000000U

#define MSK_NX90_mtgy_op_ts99_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts99_val         0
#define DFLT_VAL_NX90_mtgy_op_ts99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts99': */
#define MSK_USED_BITS_NX90_mtgy_op_ts99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts100 */
/* => MWMM TS register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts100  0x00001390U
#define Adr_NX90_mtgy_mtgy_op_ts100 0xFF083390U
#define Adr_NX90_mtgy_op_ts100      0xFF083390U
#define DFLT_VAL_NX90_mtgy_op_ts100 0x00000000U

#define MSK_NX90_mtgy_op_ts100_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts100_val         0
#define DFLT_VAL_NX90_mtgy_op_ts100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts100': */
#define MSK_USED_BITS_NX90_mtgy_op_ts100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts101 */
/* => MWMM TS register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts101  0x00001394U
#define Adr_NX90_mtgy_mtgy_op_ts101 0xFF083394U
#define Adr_NX90_mtgy_op_ts101      0xFF083394U
#define DFLT_VAL_NX90_mtgy_op_ts101 0x00000000U

#define MSK_NX90_mtgy_op_ts101_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts101_val         0
#define DFLT_VAL_NX90_mtgy_op_ts101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts101': */
#define MSK_USED_BITS_NX90_mtgy_op_ts101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts102 */
/* => MWMM TS register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts102  0x00001398U
#define Adr_NX90_mtgy_mtgy_op_ts102 0xFF083398U
#define Adr_NX90_mtgy_op_ts102      0xFF083398U
#define DFLT_VAL_NX90_mtgy_op_ts102 0x00000000U

#define MSK_NX90_mtgy_op_ts102_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts102_val         0
#define DFLT_VAL_NX90_mtgy_op_ts102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts102': */
#define MSK_USED_BITS_NX90_mtgy_op_ts102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts103 */
/* => MWMM TS register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts103  0x0000139CU
#define Adr_NX90_mtgy_mtgy_op_ts103 0xFF08339CU
#define Adr_NX90_mtgy_op_ts103      0xFF08339CU
#define DFLT_VAL_NX90_mtgy_op_ts103 0x00000000U

#define MSK_NX90_mtgy_op_ts103_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts103_val         0
#define DFLT_VAL_NX90_mtgy_op_ts103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts103': */
#define MSK_USED_BITS_NX90_mtgy_op_ts103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts104 */
/* => MWMM TS register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts104  0x000013A0U
#define Adr_NX90_mtgy_mtgy_op_ts104 0xFF0833A0U
#define Adr_NX90_mtgy_op_ts104      0xFF0833A0U
#define DFLT_VAL_NX90_mtgy_op_ts104 0x00000000U

#define MSK_NX90_mtgy_op_ts104_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts104_val         0
#define DFLT_VAL_NX90_mtgy_op_ts104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts104': */
#define MSK_USED_BITS_NX90_mtgy_op_ts104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts105 */
/* => MWMM TS register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts105  0x000013A4U
#define Adr_NX90_mtgy_mtgy_op_ts105 0xFF0833A4U
#define Adr_NX90_mtgy_op_ts105      0xFF0833A4U
#define DFLT_VAL_NX90_mtgy_op_ts105 0x00000000U

#define MSK_NX90_mtgy_op_ts105_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts105_val         0
#define DFLT_VAL_NX90_mtgy_op_ts105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts105': */
#define MSK_USED_BITS_NX90_mtgy_op_ts105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts106 */
/* => MWMM TS register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts106  0x000013A8U
#define Adr_NX90_mtgy_mtgy_op_ts106 0xFF0833A8U
#define Adr_NX90_mtgy_op_ts106      0xFF0833A8U
#define DFLT_VAL_NX90_mtgy_op_ts106 0x00000000U

#define MSK_NX90_mtgy_op_ts106_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts106_val         0
#define DFLT_VAL_NX90_mtgy_op_ts106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts106': */
#define MSK_USED_BITS_NX90_mtgy_op_ts106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts107 */
/* => MWMM TS register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts107  0x000013ACU
#define Adr_NX90_mtgy_mtgy_op_ts107 0xFF0833ACU
#define Adr_NX90_mtgy_op_ts107      0xFF0833ACU
#define DFLT_VAL_NX90_mtgy_op_ts107 0x00000000U

#define MSK_NX90_mtgy_op_ts107_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts107_val         0
#define DFLT_VAL_NX90_mtgy_op_ts107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts107': */
#define MSK_USED_BITS_NX90_mtgy_op_ts107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts108 */
/* => MWMM TS register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts108  0x000013B0U
#define Adr_NX90_mtgy_mtgy_op_ts108 0xFF0833B0U
#define Adr_NX90_mtgy_op_ts108      0xFF0833B0U
#define DFLT_VAL_NX90_mtgy_op_ts108 0x00000000U

#define MSK_NX90_mtgy_op_ts108_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts108_val         0
#define DFLT_VAL_NX90_mtgy_op_ts108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts108': */
#define MSK_USED_BITS_NX90_mtgy_op_ts108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts109 */
/* => MWMM TS register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts109  0x000013B4U
#define Adr_NX90_mtgy_mtgy_op_ts109 0xFF0833B4U
#define Adr_NX90_mtgy_op_ts109      0xFF0833B4U
#define DFLT_VAL_NX90_mtgy_op_ts109 0x00000000U

#define MSK_NX90_mtgy_op_ts109_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts109_val         0
#define DFLT_VAL_NX90_mtgy_op_ts109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts109': */
#define MSK_USED_BITS_NX90_mtgy_op_ts109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts110 */
/* => MWMM TS register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts110  0x000013B8U
#define Adr_NX90_mtgy_mtgy_op_ts110 0xFF0833B8U
#define Adr_NX90_mtgy_op_ts110      0xFF0833B8U
#define DFLT_VAL_NX90_mtgy_op_ts110 0x00000000U

#define MSK_NX90_mtgy_op_ts110_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts110_val         0
#define DFLT_VAL_NX90_mtgy_op_ts110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts110': */
#define MSK_USED_BITS_NX90_mtgy_op_ts110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts111 */
/* => MWMM TS register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts111  0x000013BCU
#define Adr_NX90_mtgy_mtgy_op_ts111 0xFF0833BCU
#define Adr_NX90_mtgy_op_ts111      0xFF0833BCU
#define DFLT_VAL_NX90_mtgy_op_ts111 0x00000000U

#define MSK_NX90_mtgy_op_ts111_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts111_val         0
#define DFLT_VAL_NX90_mtgy_op_ts111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts111': */
#define MSK_USED_BITS_NX90_mtgy_op_ts111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts112 */
/* => MWMM TS register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts112  0x000013C0U
#define Adr_NX90_mtgy_mtgy_op_ts112 0xFF0833C0U
#define Adr_NX90_mtgy_op_ts112      0xFF0833C0U
#define DFLT_VAL_NX90_mtgy_op_ts112 0x00000000U

#define MSK_NX90_mtgy_op_ts112_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts112_val         0
#define DFLT_VAL_NX90_mtgy_op_ts112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts112': */
#define MSK_USED_BITS_NX90_mtgy_op_ts112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts113 */
/* => MWMM TS register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts113  0x000013C4U
#define Adr_NX90_mtgy_mtgy_op_ts113 0xFF0833C4U
#define Adr_NX90_mtgy_op_ts113      0xFF0833C4U
#define DFLT_VAL_NX90_mtgy_op_ts113 0x00000000U

#define MSK_NX90_mtgy_op_ts113_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts113_val         0
#define DFLT_VAL_NX90_mtgy_op_ts113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts113': */
#define MSK_USED_BITS_NX90_mtgy_op_ts113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts114 */
/* => MWMM TS register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts114  0x000013C8U
#define Adr_NX90_mtgy_mtgy_op_ts114 0xFF0833C8U
#define Adr_NX90_mtgy_op_ts114      0xFF0833C8U
#define DFLT_VAL_NX90_mtgy_op_ts114 0x00000000U

#define MSK_NX90_mtgy_op_ts114_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts114_val         0
#define DFLT_VAL_NX90_mtgy_op_ts114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts114': */
#define MSK_USED_BITS_NX90_mtgy_op_ts114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts115 */
/* => MWMM TS register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts115  0x000013CCU
#define Adr_NX90_mtgy_mtgy_op_ts115 0xFF0833CCU
#define Adr_NX90_mtgy_op_ts115      0xFF0833CCU
#define DFLT_VAL_NX90_mtgy_op_ts115 0x00000000U

#define MSK_NX90_mtgy_op_ts115_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts115_val         0
#define DFLT_VAL_NX90_mtgy_op_ts115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts115': */
#define MSK_USED_BITS_NX90_mtgy_op_ts115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts116 */
/* => MWMM TS register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts116  0x000013D0U
#define Adr_NX90_mtgy_mtgy_op_ts116 0xFF0833D0U
#define Adr_NX90_mtgy_op_ts116      0xFF0833D0U
#define DFLT_VAL_NX90_mtgy_op_ts116 0x00000000U

#define MSK_NX90_mtgy_op_ts116_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts116_val         0
#define DFLT_VAL_NX90_mtgy_op_ts116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts116': */
#define MSK_USED_BITS_NX90_mtgy_op_ts116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts117 */
/* => MWMM TS register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts117  0x000013D4U
#define Adr_NX90_mtgy_mtgy_op_ts117 0xFF0833D4U
#define Adr_NX90_mtgy_op_ts117      0xFF0833D4U
#define DFLT_VAL_NX90_mtgy_op_ts117 0x00000000U

#define MSK_NX90_mtgy_op_ts117_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts117_val         0
#define DFLT_VAL_NX90_mtgy_op_ts117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts117': */
#define MSK_USED_BITS_NX90_mtgy_op_ts117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts118 */
/* => MWMM TS register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts118  0x000013D8U
#define Adr_NX90_mtgy_mtgy_op_ts118 0xFF0833D8U
#define Adr_NX90_mtgy_op_ts118      0xFF0833D8U
#define DFLT_VAL_NX90_mtgy_op_ts118 0x00000000U

#define MSK_NX90_mtgy_op_ts118_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts118_val         0
#define DFLT_VAL_NX90_mtgy_op_ts118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts118': */
#define MSK_USED_BITS_NX90_mtgy_op_ts118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts119 */
/* => MWMM TS register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts119  0x000013DCU
#define Adr_NX90_mtgy_mtgy_op_ts119 0xFF0833DCU
#define Adr_NX90_mtgy_op_ts119      0xFF0833DCU
#define DFLT_VAL_NX90_mtgy_op_ts119 0x00000000U

#define MSK_NX90_mtgy_op_ts119_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts119_val         0
#define DFLT_VAL_NX90_mtgy_op_ts119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts119': */
#define MSK_USED_BITS_NX90_mtgy_op_ts119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts120 */
/* => MWMM TS register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts120  0x000013E0U
#define Adr_NX90_mtgy_mtgy_op_ts120 0xFF0833E0U
#define Adr_NX90_mtgy_op_ts120      0xFF0833E0U
#define DFLT_VAL_NX90_mtgy_op_ts120 0x00000000U

#define MSK_NX90_mtgy_op_ts120_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts120_val         0
#define DFLT_VAL_NX90_mtgy_op_ts120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts120': */
#define MSK_USED_BITS_NX90_mtgy_op_ts120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts121 */
/* => MWMM TS register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts121  0x000013E4U
#define Adr_NX90_mtgy_mtgy_op_ts121 0xFF0833E4U
#define Adr_NX90_mtgy_op_ts121      0xFF0833E4U
#define DFLT_VAL_NX90_mtgy_op_ts121 0x00000000U

#define MSK_NX90_mtgy_op_ts121_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts121_val         0
#define DFLT_VAL_NX90_mtgy_op_ts121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts121': */
#define MSK_USED_BITS_NX90_mtgy_op_ts121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts122 */
/* => MWMM TS register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts122  0x000013E8U
#define Adr_NX90_mtgy_mtgy_op_ts122 0xFF0833E8U
#define Adr_NX90_mtgy_op_ts122      0xFF0833E8U
#define DFLT_VAL_NX90_mtgy_op_ts122 0x00000000U

#define MSK_NX90_mtgy_op_ts122_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts122_val         0
#define DFLT_VAL_NX90_mtgy_op_ts122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts122': */
#define MSK_USED_BITS_NX90_mtgy_op_ts122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts123 */
/* => MWMM TS register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts123  0x000013ECU
#define Adr_NX90_mtgy_mtgy_op_ts123 0xFF0833ECU
#define Adr_NX90_mtgy_op_ts123      0xFF0833ECU
#define DFLT_VAL_NX90_mtgy_op_ts123 0x00000000U

#define MSK_NX90_mtgy_op_ts123_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts123_val         0
#define DFLT_VAL_NX90_mtgy_op_ts123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts123': */
#define MSK_USED_BITS_NX90_mtgy_op_ts123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts124 */
/* => MWMM TS register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts124  0x000013F0U
#define Adr_NX90_mtgy_mtgy_op_ts124 0xFF0833F0U
#define Adr_NX90_mtgy_op_ts124      0xFF0833F0U
#define DFLT_VAL_NX90_mtgy_op_ts124 0x00000000U

#define MSK_NX90_mtgy_op_ts124_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts124_val         0
#define DFLT_VAL_NX90_mtgy_op_ts124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts124': */
#define MSK_USED_BITS_NX90_mtgy_op_ts124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts125 */
/* => MWMM TS register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts125  0x000013F4U
#define Adr_NX90_mtgy_mtgy_op_ts125 0xFF0833F4U
#define Adr_NX90_mtgy_op_ts125      0xFF0833F4U
#define DFLT_VAL_NX90_mtgy_op_ts125 0x00000000U

#define MSK_NX90_mtgy_op_ts125_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts125_val         0
#define DFLT_VAL_NX90_mtgy_op_ts125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts125': */
#define MSK_USED_BITS_NX90_mtgy_op_ts125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts126 */
/* => MWMM TS register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts126  0x000013F8U
#define Adr_NX90_mtgy_mtgy_op_ts126 0xFF0833F8U
#define Adr_NX90_mtgy_op_ts126      0xFF0833F8U
#define DFLT_VAL_NX90_mtgy_op_ts126 0x00000000U

#define MSK_NX90_mtgy_op_ts126_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts126_val         0
#define DFLT_VAL_NX90_mtgy_op_ts126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts126': */
#define MSK_USED_BITS_NX90_mtgy_op_ts126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts127 */
/* => MWMM TS register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts127  0x000013FCU
#define Adr_NX90_mtgy_mtgy_op_ts127 0xFF0833FCU
#define Adr_NX90_mtgy_op_ts127      0xFF0833FCU
#define DFLT_VAL_NX90_mtgy_op_ts127 0x00000000U

#define MSK_NX90_mtgy_op_ts127_val         0xffffffffU
#define SRT_NX90_mtgy_op_ts127_val         0
#define DFLT_VAL_NX90_mtgy_op_ts127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_ts127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_ts127': */
#define MSK_USED_BITS_NX90_mtgy_op_ts127 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p0 */
/* => MWMM operand P register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p0  0x00001400U
#define Adr_NX90_mtgy_mtgy_op_p0 0xFF083400U
#define Adr_NX90_mtgy_op_p0      0xFF083400U
#define DFLT_VAL_NX90_mtgy_op_p0 0x00000000U

#define MSK_NX90_mtgy_op_p0_val         0xffffffffU
#define SRT_NX90_mtgy_op_p0_val         0
#define DFLT_VAL_NX90_mtgy_op_p0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p0': */
#define MSK_USED_BITS_NX90_mtgy_op_p0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p1 */
/* => MWMM operand P register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p1  0x00001404U
#define Adr_NX90_mtgy_mtgy_op_p1 0xFF083404U
#define Adr_NX90_mtgy_op_p1      0xFF083404U
#define DFLT_VAL_NX90_mtgy_op_p1 0x00000000U

#define MSK_NX90_mtgy_op_p1_val         0xffffffffU
#define SRT_NX90_mtgy_op_p1_val         0
#define DFLT_VAL_NX90_mtgy_op_p1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p1': */
#define MSK_USED_BITS_NX90_mtgy_op_p1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p2 */
/* => MWMM operand P register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p2  0x00001408U
#define Adr_NX90_mtgy_mtgy_op_p2 0xFF083408U
#define Adr_NX90_mtgy_op_p2      0xFF083408U
#define DFLT_VAL_NX90_mtgy_op_p2 0x00000000U

#define MSK_NX90_mtgy_op_p2_val         0xffffffffU
#define SRT_NX90_mtgy_op_p2_val         0
#define DFLT_VAL_NX90_mtgy_op_p2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p2': */
#define MSK_USED_BITS_NX90_mtgy_op_p2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p3 */
/* => MWMM operand P register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p3  0x0000140CU
#define Adr_NX90_mtgy_mtgy_op_p3 0xFF08340CU
#define Adr_NX90_mtgy_op_p3      0xFF08340CU
#define DFLT_VAL_NX90_mtgy_op_p3 0x00000000U

#define MSK_NX90_mtgy_op_p3_val         0xffffffffU
#define SRT_NX90_mtgy_op_p3_val         0
#define DFLT_VAL_NX90_mtgy_op_p3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p3': */
#define MSK_USED_BITS_NX90_mtgy_op_p3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p4 */
/* => MWMM operand P register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p4  0x00001410U
#define Adr_NX90_mtgy_mtgy_op_p4 0xFF083410U
#define Adr_NX90_mtgy_op_p4      0xFF083410U
#define DFLT_VAL_NX90_mtgy_op_p4 0x00000000U

#define MSK_NX90_mtgy_op_p4_val         0xffffffffU
#define SRT_NX90_mtgy_op_p4_val         0
#define DFLT_VAL_NX90_mtgy_op_p4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p4': */
#define MSK_USED_BITS_NX90_mtgy_op_p4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p5 */
/* => MWMM operand P register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p5  0x00001414U
#define Adr_NX90_mtgy_mtgy_op_p5 0xFF083414U
#define Adr_NX90_mtgy_op_p5      0xFF083414U
#define DFLT_VAL_NX90_mtgy_op_p5 0x00000000U

#define MSK_NX90_mtgy_op_p5_val         0xffffffffU
#define SRT_NX90_mtgy_op_p5_val         0
#define DFLT_VAL_NX90_mtgy_op_p5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p5': */
#define MSK_USED_BITS_NX90_mtgy_op_p5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p6 */
/* => MWMM operand P register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p6  0x00001418U
#define Adr_NX90_mtgy_mtgy_op_p6 0xFF083418U
#define Adr_NX90_mtgy_op_p6      0xFF083418U
#define DFLT_VAL_NX90_mtgy_op_p6 0x00000000U

#define MSK_NX90_mtgy_op_p6_val         0xffffffffU
#define SRT_NX90_mtgy_op_p6_val         0
#define DFLT_VAL_NX90_mtgy_op_p6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p6': */
#define MSK_USED_BITS_NX90_mtgy_op_p6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p7 */
/* => MWMM operand P register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p7  0x0000141CU
#define Adr_NX90_mtgy_mtgy_op_p7 0xFF08341CU
#define Adr_NX90_mtgy_op_p7      0xFF08341CU
#define DFLT_VAL_NX90_mtgy_op_p7 0x00000000U

#define MSK_NX90_mtgy_op_p7_val         0xffffffffU
#define SRT_NX90_mtgy_op_p7_val         0
#define DFLT_VAL_NX90_mtgy_op_p7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p7': */
#define MSK_USED_BITS_NX90_mtgy_op_p7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p8 */
/* => MWMM operand P register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p8  0x00001420U
#define Adr_NX90_mtgy_mtgy_op_p8 0xFF083420U
#define Adr_NX90_mtgy_op_p8      0xFF083420U
#define DFLT_VAL_NX90_mtgy_op_p8 0x00000000U

#define MSK_NX90_mtgy_op_p8_val         0xffffffffU
#define SRT_NX90_mtgy_op_p8_val         0
#define DFLT_VAL_NX90_mtgy_op_p8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p8': */
#define MSK_USED_BITS_NX90_mtgy_op_p8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p9 */
/* => MWMM operand P register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p9  0x00001424U
#define Adr_NX90_mtgy_mtgy_op_p9 0xFF083424U
#define Adr_NX90_mtgy_op_p9      0xFF083424U
#define DFLT_VAL_NX90_mtgy_op_p9 0x00000000U

#define MSK_NX90_mtgy_op_p9_val         0xffffffffU
#define SRT_NX90_mtgy_op_p9_val         0
#define DFLT_VAL_NX90_mtgy_op_p9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p9': */
#define MSK_USED_BITS_NX90_mtgy_op_p9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p10 */
/* => MWMM operand P register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p10  0x00001428U
#define Adr_NX90_mtgy_mtgy_op_p10 0xFF083428U
#define Adr_NX90_mtgy_op_p10      0xFF083428U
#define DFLT_VAL_NX90_mtgy_op_p10 0x00000000U

#define MSK_NX90_mtgy_op_p10_val         0xffffffffU
#define SRT_NX90_mtgy_op_p10_val         0
#define DFLT_VAL_NX90_mtgy_op_p10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p10': */
#define MSK_USED_BITS_NX90_mtgy_op_p10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p11 */
/* => MWMM operand P register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p11  0x0000142CU
#define Adr_NX90_mtgy_mtgy_op_p11 0xFF08342CU
#define Adr_NX90_mtgy_op_p11      0xFF08342CU
#define DFLT_VAL_NX90_mtgy_op_p11 0x00000000U

#define MSK_NX90_mtgy_op_p11_val         0xffffffffU
#define SRT_NX90_mtgy_op_p11_val         0
#define DFLT_VAL_NX90_mtgy_op_p11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p11': */
#define MSK_USED_BITS_NX90_mtgy_op_p11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p12 */
/* => MWMM operand P register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p12  0x00001430U
#define Adr_NX90_mtgy_mtgy_op_p12 0xFF083430U
#define Adr_NX90_mtgy_op_p12      0xFF083430U
#define DFLT_VAL_NX90_mtgy_op_p12 0x00000000U

#define MSK_NX90_mtgy_op_p12_val         0xffffffffU
#define SRT_NX90_mtgy_op_p12_val         0
#define DFLT_VAL_NX90_mtgy_op_p12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p12': */
#define MSK_USED_BITS_NX90_mtgy_op_p12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p13 */
/* => MWMM operand P register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p13  0x00001434U
#define Adr_NX90_mtgy_mtgy_op_p13 0xFF083434U
#define Adr_NX90_mtgy_op_p13      0xFF083434U
#define DFLT_VAL_NX90_mtgy_op_p13 0x00000000U

#define MSK_NX90_mtgy_op_p13_val         0xffffffffU
#define SRT_NX90_mtgy_op_p13_val         0
#define DFLT_VAL_NX90_mtgy_op_p13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p13': */
#define MSK_USED_BITS_NX90_mtgy_op_p13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p14 */
/* => MWMM operand P register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p14  0x00001438U
#define Adr_NX90_mtgy_mtgy_op_p14 0xFF083438U
#define Adr_NX90_mtgy_op_p14      0xFF083438U
#define DFLT_VAL_NX90_mtgy_op_p14 0x00000000U

#define MSK_NX90_mtgy_op_p14_val         0xffffffffU
#define SRT_NX90_mtgy_op_p14_val         0
#define DFLT_VAL_NX90_mtgy_op_p14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p14': */
#define MSK_USED_BITS_NX90_mtgy_op_p14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p15 */
/* => MWMM operand P register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p15  0x0000143CU
#define Adr_NX90_mtgy_mtgy_op_p15 0xFF08343CU
#define Adr_NX90_mtgy_op_p15      0xFF08343CU
#define DFLT_VAL_NX90_mtgy_op_p15 0x00000000U

#define MSK_NX90_mtgy_op_p15_val         0xffffffffU
#define SRT_NX90_mtgy_op_p15_val         0
#define DFLT_VAL_NX90_mtgy_op_p15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p15': */
#define MSK_USED_BITS_NX90_mtgy_op_p15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p16 */
/* => MWMM operand P register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p16  0x00001440U
#define Adr_NX90_mtgy_mtgy_op_p16 0xFF083440U
#define Adr_NX90_mtgy_op_p16      0xFF083440U
#define DFLT_VAL_NX90_mtgy_op_p16 0x00000000U

#define MSK_NX90_mtgy_op_p16_val         0xffffffffU
#define SRT_NX90_mtgy_op_p16_val         0
#define DFLT_VAL_NX90_mtgy_op_p16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p16': */
#define MSK_USED_BITS_NX90_mtgy_op_p16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p17 */
/* => MWMM operand P register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p17  0x00001444U
#define Adr_NX90_mtgy_mtgy_op_p17 0xFF083444U
#define Adr_NX90_mtgy_op_p17      0xFF083444U
#define DFLT_VAL_NX90_mtgy_op_p17 0x00000000U

#define MSK_NX90_mtgy_op_p17_val         0xffffffffU
#define SRT_NX90_mtgy_op_p17_val         0
#define DFLT_VAL_NX90_mtgy_op_p17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p17': */
#define MSK_USED_BITS_NX90_mtgy_op_p17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p18 */
/* => MWMM operand P register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p18  0x00001448U
#define Adr_NX90_mtgy_mtgy_op_p18 0xFF083448U
#define Adr_NX90_mtgy_op_p18      0xFF083448U
#define DFLT_VAL_NX90_mtgy_op_p18 0x00000000U

#define MSK_NX90_mtgy_op_p18_val         0xffffffffU
#define SRT_NX90_mtgy_op_p18_val         0
#define DFLT_VAL_NX90_mtgy_op_p18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p18': */
#define MSK_USED_BITS_NX90_mtgy_op_p18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p19 */
/* => MWMM operand P register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p19  0x0000144CU
#define Adr_NX90_mtgy_mtgy_op_p19 0xFF08344CU
#define Adr_NX90_mtgy_op_p19      0xFF08344CU
#define DFLT_VAL_NX90_mtgy_op_p19 0x00000000U

#define MSK_NX90_mtgy_op_p19_val         0xffffffffU
#define SRT_NX90_mtgy_op_p19_val         0
#define DFLT_VAL_NX90_mtgy_op_p19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p19': */
#define MSK_USED_BITS_NX90_mtgy_op_p19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p20 */
/* => MWMM operand P register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p20  0x00001450U
#define Adr_NX90_mtgy_mtgy_op_p20 0xFF083450U
#define Adr_NX90_mtgy_op_p20      0xFF083450U
#define DFLT_VAL_NX90_mtgy_op_p20 0x00000000U

#define MSK_NX90_mtgy_op_p20_val         0xffffffffU
#define SRT_NX90_mtgy_op_p20_val         0
#define DFLT_VAL_NX90_mtgy_op_p20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p20': */
#define MSK_USED_BITS_NX90_mtgy_op_p20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p21 */
/* => MWMM operand P register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p21  0x00001454U
#define Adr_NX90_mtgy_mtgy_op_p21 0xFF083454U
#define Adr_NX90_mtgy_op_p21      0xFF083454U
#define DFLT_VAL_NX90_mtgy_op_p21 0x00000000U

#define MSK_NX90_mtgy_op_p21_val         0xffffffffU
#define SRT_NX90_mtgy_op_p21_val         0
#define DFLT_VAL_NX90_mtgy_op_p21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p21': */
#define MSK_USED_BITS_NX90_mtgy_op_p21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p22 */
/* => MWMM operand P register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p22  0x00001458U
#define Adr_NX90_mtgy_mtgy_op_p22 0xFF083458U
#define Adr_NX90_mtgy_op_p22      0xFF083458U
#define DFLT_VAL_NX90_mtgy_op_p22 0x00000000U

#define MSK_NX90_mtgy_op_p22_val         0xffffffffU
#define SRT_NX90_mtgy_op_p22_val         0
#define DFLT_VAL_NX90_mtgy_op_p22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p22': */
#define MSK_USED_BITS_NX90_mtgy_op_p22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p23 */
/* => MWMM operand P register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p23  0x0000145CU
#define Adr_NX90_mtgy_mtgy_op_p23 0xFF08345CU
#define Adr_NX90_mtgy_op_p23      0xFF08345CU
#define DFLT_VAL_NX90_mtgy_op_p23 0x00000000U

#define MSK_NX90_mtgy_op_p23_val         0xffffffffU
#define SRT_NX90_mtgy_op_p23_val         0
#define DFLT_VAL_NX90_mtgy_op_p23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p23': */
#define MSK_USED_BITS_NX90_mtgy_op_p23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p24 */
/* => MWMM operand P register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p24  0x00001460U
#define Adr_NX90_mtgy_mtgy_op_p24 0xFF083460U
#define Adr_NX90_mtgy_op_p24      0xFF083460U
#define DFLT_VAL_NX90_mtgy_op_p24 0x00000000U

#define MSK_NX90_mtgy_op_p24_val         0xffffffffU
#define SRT_NX90_mtgy_op_p24_val         0
#define DFLT_VAL_NX90_mtgy_op_p24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p24': */
#define MSK_USED_BITS_NX90_mtgy_op_p24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p25 */
/* => MWMM operand P register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p25  0x00001464U
#define Adr_NX90_mtgy_mtgy_op_p25 0xFF083464U
#define Adr_NX90_mtgy_op_p25      0xFF083464U
#define DFLT_VAL_NX90_mtgy_op_p25 0x00000000U

#define MSK_NX90_mtgy_op_p25_val         0xffffffffU
#define SRT_NX90_mtgy_op_p25_val         0
#define DFLT_VAL_NX90_mtgy_op_p25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p25': */
#define MSK_USED_BITS_NX90_mtgy_op_p25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p26 */
/* => MWMM operand P register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p26  0x00001468U
#define Adr_NX90_mtgy_mtgy_op_p26 0xFF083468U
#define Adr_NX90_mtgy_op_p26      0xFF083468U
#define DFLT_VAL_NX90_mtgy_op_p26 0x00000000U

#define MSK_NX90_mtgy_op_p26_val         0xffffffffU
#define SRT_NX90_mtgy_op_p26_val         0
#define DFLT_VAL_NX90_mtgy_op_p26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p26': */
#define MSK_USED_BITS_NX90_mtgy_op_p26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p27 */
/* => MWMM operand P register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p27  0x0000146CU
#define Adr_NX90_mtgy_mtgy_op_p27 0xFF08346CU
#define Adr_NX90_mtgy_op_p27      0xFF08346CU
#define DFLT_VAL_NX90_mtgy_op_p27 0x00000000U

#define MSK_NX90_mtgy_op_p27_val         0xffffffffU
#define SRT_NX90_mtgy_op_p27_val         0
#define DFLT_VAL_NX90_mtgy_op_p27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p27': */
#define MSK_USED_BITS_NX90_mtgy_op_p27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p28 */
/* => MWMM operand P register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p28  0x00001470U
#define Adr_NX90_mtgy_mtgy_op_p28 0xFF083470U
#define Adr_NX90_mtgy_op_p28      0xFF083470U
#define DFLT_VAL_NX90_mtgy_op_p28 0x00000000U

#define MSK_NX90_mtgy_op_p28_val         0xffffffffU
#define SRT_NX90_mtgy_op_p28_val         0
#define DFLT_VAL_NX90_mtgy_op_p28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p28': */
#define MSK_USED_BITS_NX90_mtgy_op_p28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p29 */
/* => MWMM operand P register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p29  0x00001474U
#define Adr_NX90_mtgy_mtgy_op_p29 0xFF083474U
#define Adr_NX90_mtgy_op_p29      0xFF083474U
#define DFLT_VAL_NX90_mtgy_op_p29 0x00000000U

#define MSK_NX90_mtgy_op_p29_val         0xffffffffU
#define SRT_NX90_mtgy_op_p29_val         0
#define DFLT_VAL_NX90_mtgy_op_p29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p29': */
#define MSK_USED_BITS_NX90_mtgy_op_p29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p30 */
/* => MWMM operand P register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p30  0x00001478U
#define Adr_NX90_mtgy_mtgy_op_p30 0xFF083478U
#define Adr_NX90_mtgy_op_p30      0xFF083478U
#define DFLT_VAL_NX90_mtgy_op_p30 0x00000000U

#define MSK_NX90_mtgy_op_p30_val         0xffffffffU
#define SRT_NX90_mtgy_op_p30_val         0
#define DFLT_VAL_NX90_mtgy_op_p30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p30': */
#define MSK_USED_BITS_NX90_mtgy_op_p30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p31 */
/* => MWMM operand P register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p31  0x0000147CU
#define Adr_NX90_mtgy_mtgy_op_p31 0xFF08347CU
#define Adr_NX90_mtgy_op_p31      0xFF08347CU
#define DFLT_VAL_NX90_mtgy_op_p31 0x00000000U

#define MSK_NX90_mtgy_op_p31_val         0xffffffffU
#define SRT_NX90_mtgy_op_p31_val         0
#define DFLT_VAL_NX90_mtgy_op_p31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p31': */
#define MSK_USED_BITS_NX90_mtgy_op_p31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p32 */
/* => MWMM operand P register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p32  0x00001480U
#define Adr_NX90_mtgy_mtgy_op_p32 0xFF083480U
#define Adr_NX90_mtgy_op_p32      0xFF083480U
#define DFLT_VAL_NX90_mtgy_op_p32 0x00000000U

#define MSK_NX90_mtgy_op_p32_val         0xffffffffU
#define SRT_NX90_mtgy_op_p32_val         0
#define DFLT_VAL_NX90_mtgy_op_p32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p32': */
#define MSK_USED_BITS_NX90_mtgy_op_p32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p33 */
/* => MWMM operand P register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p33  0x00001484U
#define Adr_NX90_mtgy_mtgy_op_p33 0xFF083484U
#define Adr_NX90_mtgy_op_p33      0xFF083484U
#define DFLT_VAL_NX90_mtgy_op_p33 0x00000000U

#define MSK_NX90_mtgy_op_p33_val         0xffffffffU
#define SRT_NX90_mtgy_op_p33_val         0
#define DFLT_VAL_NX90_mtgy_op_p33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p33': */
#define MSK_USED_BITS_NX90_mtgy_op_p33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p34 */
/* => MWMM operand P register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p34  0x00001488U
#define Adr_NX90_mtgy_mtgy_op_p34 0xFF083488U
#define Adr_NX90_mtgy_op_p34      0xFF083488U
#define DFLT_VAL_NX90_mtgy_op_p34 0x00000000U

#define MSK_NX90_mtgy_op_p34_val         0xffffffffU
#define SRT_NX90_mtgy_op_p34_val         0
#define DFLT_VAL_NX90_mtgy_op_p34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p34': */
#define MSK_USED_BITS_NX90_mtgy_op_p34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p35 */
/* => MWMM operand P register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p35  0x0000148CU
#define Adr_NX90_mtgy_mtgy_op_p35 0xFF08348CU
#define Adr_NX90_mtgy_op_p35      0xFF08348CU
#define DFLT_VAL_NX90_mtgy_op_p35 0x00000000U

#define MSK_NX90_mtgy_op_p35_val         0xffffffffU
#define SRT_NX90_mtgy_op_p35_val         0
#define DFLT_VAL_NX90_mtgy_op_p35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p35': */
#define MSK_USED_BITS_NX90_mtgy_op_p35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p36 */
/* => MWMM operand P register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p36  0x00001490U
#define Adr_NX90_mtgy_mtgy_op_p36 0xFF083490U
#define Adr_NX90_mtgy_op_p36      0xFF083490U
#define DFLT_VAL_NX90_mtgy_op_p36 0x00000000U

#define MSK_NX90_mtgy_op_p36_val         0xffffffffU
#define SRT_NX90_mtgy_op_p36_val         0
#define DFLT_VAL_NX90_mtgy_op_p36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p36': */
#define MSK_USED_BITS_NX90_mtgy_op_p36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p37 */
/* => MWMM operand P register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p37  0x00001494U
#define Adr_NX90_mtgy_mtgy_op_p37 0xFF083494U
#define Adr_NX90_mtgy_op_p37      0xFF083494U
#define DFLT_VAL_NX90_mtgy_op_p37 0x00000000U

#define MSK_NX90_mtgy_op_p37_val         0xffffffffU
#define SRT_NX90_mtgy_op_p37_val         0
#define DFLT_VAL_NX90_mtgy_op_p37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p37': */
#define MSK_USED_BITS_NX90_mtgy_op_p37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p38 */
/* => MWMM operand P register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p38  0x00001498U
#define Adr_NX90_mtgy_mtgy_op_p38 0xFF083498U
#define Adr_NX90_mtgy_op_p38      0xFF083498U
#define DFLT_VAL_NX90_mtgy_op_p38 0x00000000U

#define MSK_NX90_mtgy_op_p38_val         0xffffffffU
#define SRT_NX90_mtgy_op_p38_val         0
#define DFLT_VAL_NX90_mtgy_op_p38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p38': */
#define MSK_USED_BITS_NX90_mtgy_op_p38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p39 */
/* => MWMM operand P register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p39  0x0000149CU
#define Adr_NX90_mtgy_mtgy_op_p39 0xFF08349CU
#define Adr_NX90_mtgy_op_p39      0xFF08349CU
#define DFLT_VAL_NX90_mtgy_op_p39 0x00000000U

#define MSK_NX90_mtgy_op_p39_val         0xffffffffU
#define SRT_NX90_mtgy_op_p39_val         0
#define DFLT_VAL_NX90_mtgy_op_p39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p39': */
#define MSK_USED_BITS_NX90_mtgy_op_p39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p40 */
/* => MWMM operand P register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p40  0x000014A0U
#define Adr_NX90_mtgy_mtgy_op_p40 0xFF0834A0U
#define Adr_NX90_mtgy_op_p40      0xFF0834A0U
#define DFLT_VAL_NX90_mtgy_op_p40 0x00000000U

#define MSK_NX90_mtgy_op_p40_val         0xffffffffU
#define SRT_NX90_mtgy_op_p40_val         0
#define DFLT_VAL_NX90_mtgy_op_p40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p40': */
#define MSK_USED_BITS_NX90_mtgy_op_p40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p41 */
/* => MWMM operand P register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p41  0x000014A4U
#define Adr_NX90_mtgy_mtgy_op_p41 0xFF0834A4U
#define Adr_NX90_mtgy_op_p41      0xFF0834A4U
#define DFLT_VAL_NX90_mtgy_op_p41 0x00000000U

#define MSK_NX90_mtgy_op_p41_val         0xffffffffU
#define SRT_NX90_mtgy_op_p41_val         0
#define DFLT_VAL_NX90_mtgy_op_p41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p41': */
#define MSK_USED_BITS_NX90_mtgy_op_p41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p42 */
/* => MWMM operand P register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p42  0x000014A8U
#define Adr_NX90_mtgy_mtgy_op_p42 0xFF0834A8U
#define Adr_NX90_mtgy_op_p42      0xFF0834A8U
#define DFLT_VAL_NX90_mtgy_op_p42 0x00000000U

#define MSK_NX90_mtgy_op_p42_val         0xffffffffU
#define SRT_NX90_mtgy_op_p42_val         0
#define DFLT_VAL_NX90_mtgy_op_p42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p42': */
#define MSK_USED_BITS_NX90_mtgy_op_p42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p43 */
/* => MWMM operand P register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p43  0x000014ACU
#define Adr_NX90_mtgy_mtgy_op_p43 0xFF0834ACU
#define Adr_NX90_mtgy_op_p43      0xFF0834ACU
#define DFLT_VAL_NX90_mtgy_op_p43 0x00000000U

#define MSK_NX90_mtgy_op_p43_val         0xffffffffU
#define SRT_NX90_mtgy_op_p43_val         0
#define DFLT_VAL_NX90_mtgy_op_p43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p43': */
#define MSK_USED_BITS_NX90_mtgy_op_p43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p44 */
/* => MWMM operand P register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p44  0x000014B0U
#define Adr_NX90_mtgy_mtgy_op_p44 0xFF0834B0U
#define Adr_NX90_mtgy_op_p44      0xFF0834B0U
#define DFLT_VAL_NX90_mtgy_op_p44 0x00000000U

#define MSK_NX90_mtgy_op_p44_val         0xffffffffU
#define SRT_NX90_mtgy_op_p44_val         0
#define DFLT_VAL_NX90_mtgy_op_p44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p44': */
#define MSK_USED_BITS_NX90_mtgy_op_p44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p45 */
/* => MWMM operand P register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p45  0x000014B4U
#define Adr_NX90_mtgy_mtgy_op_p45 0xFF0834B4U
#define Adr_NX90_mtgy_op_p45      0xFF0834B4U
#define DFLT_VAL_NX90_mtgy_op_p45 0x00000000U

#define MSK_NX90_mtgy_op_p45_val         0xffffffffU
#define SRT_NX90_mtgy_op_p45_val         0
#define DFLT_VAL_NX90_mtgy_op_p45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p45': */
#define MSK_USED_BITS_NX90_mtgy_op_p45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p46 */
/* => MWMM operand P register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p46  0x000014B8U
#define Adr_NX90_mtgy_mtgy_op_p46 0xFF0834B8U
#define Adr_NX90_mtgy_op_p46      0xFF0834B8U
#define DFLT_VAL_NX90_mtgy_op_p46 0x00000000U

#define MSK_NX90_mtgy_op_p46_val         0xffffffffU
#define SRT_NX90_mtgy_op_p46_val         0
#define DFLT_VAL_NX90_mtgy_op_p46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p46': */
#define MSK_USED_BITS_NX90_mtgy_op_p46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p47 */
/* => MWMM operand P register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p47  0x000014BCU
#define Adr_NX90_mtgy_mtgy_op_p47 0xFF0834BCU
#define Adr_NX90_mtgy_op_p47      0xFF0834BCU
#define DFLT_VAL_NX90_mtgy_op_p47 0x00000000U

#define MSK_NX90_mtgy_op_p47_val         0xffffffffU
#define SRT_NX90_mtgy_op_p47_val         0
#define DFLT_VAL_NX90_mtgy_op_p47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p47': */
#define MSK_USED_BITS_NX90_mtgy_op_p47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p48 */
/* => MWMM operand P register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p48  0x000014C0U
#define Adr_NX90_mtgy_mtgy_op_p48 0xFF0834C0U
#define Adr_NX90_mtgy_op_p48      0xFF0834C0U
#define DFLT_VAL_NX90_mtgy_op_p48 0x00000000U

#define MSK_NX90_mtgy_op_p48_val         0xffffffffU
#define SRT_NX90_mtgy_op_p48_val         0
#define DFLT_VAL_NX90_mtgy_op_p48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p48': */
#define MSK_USED_BITS_NX90_mtgy_op_p48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p49 */
/* => MWMM operand P register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p49  0x000014C4U
#define Adr_NX90_mtgy_mtgy_op_p49 0xFF0834C4U
#define Adr_NX90_mtgy_op_p49      0xFF0834C4U
#define DFLT_VAL_NX90_mtgy_op_p49 0x00000000U

#define MSK_NX90_mtgy_op_p49_val         0xffffffffU
#define SRT_NX90_mtgy_op_p49_val         0
#define DFLT_VAL_NX90_mtgy_op_p49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p49': */
#define MSK_USED_BITS_NX90_mtgy_op_p49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p50 */
/* => MWMM operand P register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p50  0x000014C8U
#define Adr_NX90_mtgy_mtgy_op_p50 0xFF0834C8U
#define Adr_NX90_mtgy_op_p50      0xFF0834C8U
#define DFLT_VAL_NX90_mtgy_op_p50 0x00000000U

#define MSK_NX90_mtgy_op_p50_val         0xffffffffU
#define SRT_NX90_mtgy_op_p50_val         0
#define DFLT_VAL_NX90_mtgy_op_p50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p50': */
#define MSK_USED_BITS_NX90_mtgy_op_p50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p51 */
/* => MWMM operand P register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p51  0x000014CCU
#define Adr_NX90_mtgy_mtgy_op_p51 0xFF0834CCU
#define Adr_NX90_mtgy_op_p51      0xFF0834CCU
#define DFLT_VAL_NX90_mtgy_op_p51 0x00000000U

#define MSK_NX90_mtgy_op_p51_val         0xffffffffU
#define SRT_NX90_mtgy_op_p51_val         0
#define DFLT_VAL_NX90_mtgy_op_p51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p51': */
#define MSK_USED_BITS_NX90_mtgy_op_p51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p52 */
/* => MWMM operand P register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p52  0x000014D0U
#define Adr_NX90_mtgy_mtgy_op_p52 0xFF0834D0U
#define Adr_NX90_mtgy_op_p52      0xFF0834D0U
#define DFLT_VAL_NX90_mtgy_op_p52 0x00000000U

#define MSK_NX90_mtgy_op_p52_val         0xffffffffU
#define SRT_NX90_mtgy_op_p52_val         0
#define DFLT_VAL_NX90_mtgy_op_p52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p52': */
#define MSK_USED_BITS_NX90_mtgy_op_p52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p53 */
/* => MWMM operand P register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p53  0x000014D4U
#define Adr_NX90_mtgy_mtgy_op_p53 0xFF0834D4U
#define Adr_NX90_mtgy_op_p53      0xFF0834D4U
#define DFLT_VAL_NX90_mtgy_op_p53 0x00000000U

#define MSK_NX90_mtgy_op_p53_val         0xffffffffU
#define SRT_NX90_mtgy_op_p53_val         0
#define DFLT_VAL_NX90_mtgy_op_p53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p53': */
#define MSK_USED_BITS_NX90_mtgy_op_p53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p54 */
/* => MWMM operand P register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p54  0x000014D8U
#define Adr_NX90_mtgy_mtgy_op_p54 0xFF0834D8U
#define Adr_NX90_mtgy_op_p54      0xFF0834D8U
#define DFLT_VAL_NX90_mtgy_op_p54 0x00000000U

#define MSK_NX90_mtgy_op_p54_val         0xffffffffU
#define SRT_NX90_mtgy_op_p54_val         0
#define DFLT_VAL_NX90_mtgy_op_p54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p54': */
#define MSK_USED_BITS_NX90_mtgy_op_p54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p55 */
/* => MWMM operand P register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p55  0x000014DCU
#define Adr_NX90_mtgy_mtgy_op_p55 0xFF0834DCU
#define Adr_NX90_mtgy_op_p55      0xFF0834DCU
#define DFLT_VAL_NX90_mtgy_op_p55 0x00000000U

#define MSK_NX90_mtgy_op_p55_val         0xffffffffU
#define SRT_NX90_mtgy_op_p55_val         0
#define DFLT_VAL_NX90_mtgy_op_p55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p55': */
#define MSK_USED_BITS_NX90_mtgy_op_p55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p56 */
/* => MWMM operand P register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p56  0x000014E0U
#define Adr_NX90_mtgy_mtgy_op_p56 0xFF0834E0U
#define Adr_NX90_mtgy_op_p56      0xFF0834E0U
#define DFLT_VAL_NX90_mtgy_op_p56 0x00000000U

#define MSK_NX90_mtgy_op_p56_val         0xffffffffU
#define SRT_NX90_mtgy_op_p56_val         0
#define DFLT_VAL_NX90_mtgy_op_p56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p56': */
#define MSK_USED_BITS_NX90_mtgy_op_p56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p57 */
/* => MWMM operand P register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p57  0x000014E4U
#define Adr_NX90_mtgy_mtgy_op_p57 0xFF0834E4U
#define Adr_NX90_mtgy_op_p57      0xFF0834E4U
#define DFLT_VAL_NX90_mtgy_op_p57 0x00000000U

#define MSK_NX90_mtgy_op_p57_val         0xffffffffU
#define SRT_NX90_mtgy_op_p57_val         0
#define DFLT_VAL_NX90_mtgy_op_p57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p57': */
#define MSK_USED_BITS_NX90_mtgy_op_p57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p58 */
/* => MWMM operand P register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p58  0x000014E8U
#define Adr_NX90_mtgy_mtgy_op_p58 0xFF0834E8U
#define Adr_NX90_mtgy_op_p58      0xFF0834E8U
#define DFLT_VAL_NX90_mtgy_op_p58 0x00000000U

#define MSK_NX90_mtgy_op_p58_val         0xffffffffU
#define SRT_NX90_mtgy_op_p58_val         0
#define DFLT_VAL_NX90_mtgy_op_p58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p58': */
#define MSK_USED_BITS_NX90_mtgy_op_p58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p59 */
/* => MWMM operand P register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p59  0x000014ECU
#define Adr_NX90_mtgy_mtgy_op_p59 0xFF0834ECU
#define Adr_NX90_mtgy_op_p59      0xFF0834ECU
#define DFLT_VAL_NX90_mtgy_op_p59 0x00000000U

#define MSK_NX90_mtgy_op_p59_val         0xffffffffU
#define SRT_NX90_mtgy_op_p59_val         0
#define DFLT_VAL_NX90_mtgy_op_p59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p59': */
#define MSK_USED_BITS_NX90_mtgy_op_p59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p60 */
/* => MWMM operand P register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p60  0x000014F0U
#define Adr_NX90_mtgy_mtgy_op_p60 0xFF0834F0U
#define Adr_NX90_mtgy_op_p60      0xFF0834F0U
#define DFLT_VAL_NX90_mtgy_op_p60 0x00000000U

#define MSK_NX90_mtgy_op_p60_val         0xffffffffU
#define SRT_NX90_mtgy_op_p60_val         0
#define DFLT_VAL_NX90_mtgy_op_p60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p60': */
#define MSK_USED_BITS_NX90_mtgy_op_p60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p61 */
/* => MWMM operand P register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p61  0x000014F4U
#define Adr_NX90_mtgy_mtgy_op_p61 0xFF0834F4U
#define Adr_NX90_mtgy_op_p61      0xFF0834F4U
#define DFLT_VAL_NX90_mtgy_op_p61 0x00000000U

#define MSK_NX90_mtgy_op_p61_val         0xffffffffU
#define SRT_NX90_mtgy_op_p61_val         0
#define DFLT_VAL_NX90_mtgy_op_p61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p61': */
#define MSK_USED_BITS_NX90_mtgy_op_p61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p62 */
/* => MWMM operand P register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p62  0x000014F8U
#define Adr_NX90_mtgy_mtgy_op_p62 0xFF0834F8U
#define Adr_NX90_mtgy_op_p62      0xFF0834F8U
#define DFLT_VAL_NX90_mtgy_op_p62 0x00000000U

#define MSK_NX90_mtgy_op_p62_val         0xffffffffU
#define SRT_NX90_mtgy_op_p62_val         0
#define DFLT_VAL_NX90_mtgy_op_p62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p62': */
#define MSK_USED_BITS_NX90_mtgy_op_p62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p63 */
/* => MWMM operand P register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p63  0x000014FCU
#define Adr_NX90_mtgy_mtgy_op_p63 0xFF0834FCU
#define Adr_NX90_mtgy_op_p63      0xFF0834FCU
#define DFLT_VAL_NX90_mtgy_op_p63 0x00000000U

#define MSK_NX90_mtgy_op_p63_val         0xffffffffU
#define SRT_NX90_mtgy_op_p63_val         0
#define DFLT_VAL_NX90_mtgy_op_p63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p63': */
#define MSK_USED_BITS_NX90_mtgy_op_p63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p64 */
/* => MWMM operand P register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p64  0x00001500U
#define Adr_NX90_mtgy_mtgy_op_p64 0xFF083500U
#define Adr_NX90_mtgy_op_p64      0xFF083500U
#define DFLT_VAL_NX90_mtgy_op_p64 0x00000000U

#define MSK_NX90_mtgy_op_p64_val         0xffffffffU
#define SRT_NX90_mtgy_op_p64_val         0
#define DFLT_VAL_NX90_mtgy_op_p64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p64': */
#define MSK_USED_BITS_NX90_mtgy_op_p64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p65 */
/* => MWMM operand P register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p65  0x00001504U
#define Adr_NX90_mtgy_mtgy_op_p65 0xFF083504U
#define Adr_NX90_mtgy_op_p65      0xFF083504U
#define DFLT_VAL_NX90_mtgy_op_p65 0x00000000U

#define MSK_NX90_mtgy_op_p65_val         0xffffffffU
#define SRT_NX90_mtgy_op_p65_val         0
#define DFLT_VAL_NX90_mtgy_op_p65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p65': */
#define MSK_USED_BITS_NX90_mtgy_op_p65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p66 */
/* => MWMM operand P register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p66  0x00001508U
#define Adr_NX90_mtgy_mtgy_op_p66 0xFF083508U
#define Adr_NX90_mtgy_op_p66      0xFF083508U
#define DFLT_VAL_NX90_mtgy_op_p66 0x00000000U

#define MSK_NX90_mtgy_op_p66_val         0xffffffffU
#define SRT_NX90_mtgy_op_p66_val         0
#define DFLT_VAL_NX90_mtgy_op_p66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p66': */
#define MSK_USED_BITS_NX90_mtgy_op_p66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p67 */
/* => MWMM operand P register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p67  0x0000150CU
#define Adr_NX90_mtgy_mtgy_op_p67 0xFF08350CU
#define Adr_NX90_mtgy_op_p67      0xFF08350CU
#define DFLT_VAL_NX90_mtgy_op_p67 0x00000000U

#define MSK_NX90_mtgy_op_p67_val         0xffffffffU
#define SRT_NX90_mtgy_op_p67_val         0
#define DFLT_VAL_NX90_mtgy_op_p67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p67': */
#define MSK_USED_BITS_NX90_mtgy_op_p67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p68 */
/* => MWMM operand P register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p68  0x00001510U
#define Adr_NX90_mtgy_mtgy_op_p68 0xFF083510U
#define Adr_NX90_mtgy_op_p68      0xFF083510U
#define DFLT_VAL_NX90_mtgy_op_p68 0x00000000U

#define MSK_NX90_mtgy_op_p68_val         0xffffffffU
#define SRT_NX90_mtgy_op_p68_val         0
#define DFLT_VAL_NX90_mtgy_op_p68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p68': */
#define MSK_USED_BITS_NX90_mtgy_op_p68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p69 */
/* => MWMM operand P register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p69  0x00001514U
#define Adr_NX90_mtgy_mtgy_op_p69 0xFF083514U
#define Adr_NX90_mtgy_op_p69      0xFF083514U
#define DFLT_VAL_NX90_mtgy_op_p69 0x00000000U

#define MSK_NX90_mtgy_op_p69_val         0xffffffffU
#define SRT_NX90_mtgy_op_p69_val         0
#define DFLT_VAL_NX90_mtgy_op_p69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p69': */
#define MSK_USED_BITS_NX90_mtgy_op_p69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p70 */
/* => MWMM operand P register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p70  0x00001518U
#define Adr_NX90_mtgy_mtgy_op_p70 0xFF083518U
#define Adr_NX90_mtgy_op_p70      0xFF083518U
#define DFLT_VAL_NX90_mtgy_op_p70 0x00000000U

#define MSK_NX90_mtgy_op_p70_val         0xffffffffU
#define SRT_NX90_mtgy_op_p70_val         0
#define DFLT_VAL_NX90_mtgy_op_p70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p70': */
#define MSK_USED_BITS_NX90_mtgy_op_p70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p71 */
/* => MWMM operand P register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p71  0x0000151CU
#define Adr_NX90_mtgy_mtgy_op_p71 0xFF08351CU
#define Adr_NX90_mtgy_op_p71      0xFF08351CU
#define DFLT_VAL_NX90_mtgy_op_p71 0x00000000U

#define MSK_NX90_mtgy_op_p71_val         0xffffffffU
#define SRT_NX90_mtgy_op_p71_val         0
#define DFLT_VAL_NX90_mtgy_op_p71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p71': */
#define MSK_USED_BITS_NX90_mtgy_op_p71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p72 */
/* => MWMM operand P register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p72  0x00001520U
#define Adr_NX90_mtgy_mtgy_op_p72 0xFF083520U
#define Adr_NX90_mtgy_op_p72      0xFF083520U
#define DFLT_VAL_NX90_mtgy_op_p72 0x00000000U

#define MSK_NX90_mtgy_op_p72_val         0xffffffffU
#define SRT_NX90_mtgy_op_p72_val         0
#define DFLT_VAL_NX90_mtgy_op_p72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p72': */
#define MSK_USED_BITS_NX90_mtgy_op_p72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p73 */
/* => MWMM operand P register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p73  0x00001524U
#define Adr_NX90_mtgy_mtgy_op_p73 0xFF083524U
#define Adr_NX90_mtgy_op_p73      0xFF083524U
#define DFLT_VAL_NX90_mtgy_op_p73 0x00000000U

#define MSK_NX90_mtgy_op_p73_val         0xffffffffU
#define SRT_NX90_mtgy_op_p73_val         0
#define DFLT_VAL_NX90_mtgy_op_p73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p73': */
#define MSK_USED_BITS_NX90_mtgy_op_p73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p74 */
/* => MWMM operand P register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p74  0x00001528U
#define Adr_NX90_mtgy_mtgy_op_p74 0xFF083528U
#define Adr_NX90_mtgy_op_p74      0xFF083528U
#define DFLT_VAL_NX90_mtgy_op_p74 0x00000000U

#define MSK_NX90_mtgy_op_p74_val         0xffffffffU
#define SRT_NX90_mtgy_op_p74_val         0
#define DFLT_VAL_NX90_mtgy_op_p74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p74': */
#define MSK_USED_BITS_NX90_mtgy_op_p74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p75 */
/* => MWMM operand P register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p75  0x0000152CU
#define Adr_NX90_mtgy_mtgy_op_p75 0xFF08352CU
#define Adr_NX90_mtgy_op_p75      0xFF08352CU
#define DFLT_VAL_NX90_mtgy_op_p75 0x00000000U

#define MSK_NX90_mtgy_op_p75_val         0xffffffffU
#define SRT_NX90_mtgy_op_p75_val         0
#define DFLT_VAL_NX90_mtgy_op_p75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p75': */
#define MSK_USED_BITS_NX90_mtgy_op_p75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p76 */
/* => MWMM operand P register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p76  0x00001530U
#define Adr_NX90_mtgy_mtgy_op_p76 0xFF083530U
#define Adr_NX90_mtgy_op_p76      0xFF083530U
#define DFLT_VAL_NX90_mtgy_op_p76 0x00000000U

#define MSK_NX90_mtgy_op_p76_val         0xffffffffU
#define SRT_NX90_mtgy_op_p76_val         0
#define DFLT_VAL_NX90_mtgy_op_p76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p76': */
#define MSK_USED_BITS_NX90_mtgy_op_p76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p77 */
/* => MWMM operand P register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p77  0x00001534U
#define Adr_NX90_mtgy_mtgy_op_p77 0xFF083534U
#define Adr_NX90_mtgy_op_p77      0xFF083534U
#define DFLT_VAL_NX90_mtgy_op_p77 0x00000000U

#define MSK_NX90_mtgy_op_p77_val         0xffffffffU
#define SRT_NX90_mtgy_op_p77_val         0
#define DFLT_VAL_NX90_mtgy_op_p77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p77': */
#define MSK_USED_BITS_NX90_mtgy_op_p77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p78 */
/* => MWMM operand P register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p78  0x00001538U
#define Adr_NX90_mtgy_mtgy_op_p78 0xFF083538U
#define Adr_NX90_mtgy_op_p78      0xFF083538U
#define DFLT_VAL_NX90_mtgy_op_p78 0x00000000U

#define MSK_NX90_mtgy_op_p78_val         0xffffffffU
#define SRT_NX90_mtgy_op_p78_val         0
#define DFLT_VAL_NX90_mtgy_op_p78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p78': */
#define MSK_USED_BITS_NX90_mtgy_op_p78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p79 */
/* => MWMM operand P register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p79  0x0000153CU
#define Adr_NX90_mtgy_mtgy_op_p79 0xFF08353CU
#define Adr_NX90_mtgy_op_p79      0xFF08353CU
#define DFLT_VAL_NX90_mtgy_op_p79 0x00000000U

#define MSK_NX90_mtgy_op_p79_val         0xffffffffU
#define SRT_NX90_mtgy_op_p79_val         0
#define DFLT_VAL_NX90_mtgy_op_p79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p79': */
#define MSK_USED_BITS_NX90_mtgy_op_p79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p80 */
/* => MWMM operand P register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p80  0x00001540U
#define Adr_NX90_mtgy_mtgy_op_p80 0xFF083540U
#define Adr_NX90_mtgy_op_p80      0xFF083540U
#define DFLT_VAL_NX90_mtgy_op_p80 0x00000000U

#define MSK_NX90_mtgy_op_p80_val         0xffffffffU
#define SRT_NX90_mtgy_op_p80_val         0
#define DFLT_VAL_NX90_mtgy_op_p80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p80': */
#define MSK_USED_BITS_NX90_mtgy_op_p80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p81 */
/* => MWMM operand P register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p81  0x00001544U
#define Adr_NX90_mtgy_mtgy_op_p81 0xFF083544U
#define Adr_NX90_mtgy_op_p81      0xFF083544U
#define DFLT_VAL_NX90_mtgy_op_p81 0x00000000U

#define MSK_NX90_mtgy_op_p81_val         0xffffffffU
#define SRT_NX90_mtgy_op_p81_val         0
#define DFLT_VAL_NX90_mtgy_op_p81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p81': */
#define MSK_USED_BITS_NX90_mtgy_op_p81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p82 */
/* => MWMM operand P register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p82  0x00001548U
#define Adr_NX90_mtgy_mtgy_op_p82 0xFF083548U
#define Adr_NX90_mtgy_op_p82      0xFF083548U
#define DFLT_VAL_NX90_mtgy_op_p82 0x00000000U

#define MSK_NX90_mtgy_op_p82_val         0xffffffffU
#define SRT_NX90_mtgy_op_p82_val         0
#define DFLT_VAL_NX90_mtgy_op_p82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p82': */
#define MSK_USED_BITS_NX90_mtgy_op_p82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p83 */
/* => MWMM operand P register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p83  0x0000154CU
#define Adr_NX90_mtgy_mtgy_op_p83 0xFF08354CU
#define Adr_NX90_mtgy_op_p83      0xFF08354CU
#define DFLT_VAL_NX90_mtgy_op_p83 0x00000000U

#define MSK_NX90_mtgy_op_p83_val         0xffffffffU
#define SRT_NX90_mtgy_op_p83_val         0
#define DFLT_VAL_NX90_mtgy_op_p83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p83': */
#define MSK_USED_BITS_NX90_mtgy_op_p83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p84 */
/* => MWMM operand P register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p84  0x00001550U
#define Adr_NX90_mtgy_mtgy_op_p84 0xFF083550U
#define Adr_NX90_mtgy_op_p84      0xFF083550U
#define DFLT_VAL_NX90_mtgy_op_p84 0x00000000U

#define MSK_NX90_mtgy_op_p84_val         0xffffffffU
#define SRT_NX90_mtgy_op_p84_val         0
#define DFLT_VAL_NX90_mtgy_op_p84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p84': */
#define MSK_USED_BITS_NX90_mtgy_op_p84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p85 */
/* => MWMM operand P register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p85  0x00001554U
#define Adr_NX90_mtgy_mtgy_op_p85 0xFF083554U
#define Adr_NX90_mtgy_op_p85      0xFF083554U
#define DFLT_VAL_NX90_mtgy_op_p85 0x00000000U

#define MSK_NX90_mtgy_op_p85_val         0xffffffffU
#define SRT_NX90_mtgy_op_p85_val         0
#define DFLT_VAL_NX90_mtgy_op_p85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p85': */
#define MSK_USED_BITS_NX90_mtgy_op_p85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p86 */
/* => MWMM operand P register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p86  0x00001558U
#define Adr_NX90_mtgy_mtgy_op_p86 0xFF083558U
#define Adr_NX90_mtgy_op_p86      0xFF083558U
#define DFLT_VAL_NX90_mtgy_op_p86 0x00000000U

#define MSK_NX90_mtgy_op_p86_val         0xffffffffU
#define SRT_NX90_mtgy_op_p86_val         0
#define DFLT_VAL_NX90_mtgy_op_p86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p86': */
#define MSK_USED_BITS_NX90_mtgy_op_p86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p87 */
/* => MWMM operand P register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p87  0x0000155CU
#define Adr_NX90_mtgy_mtgy_op_p87 0xFF08355CU
#define Adr_NX90_mtgy_op_p87      0xFF08355CU
#define DFLT_VAL_NX90_mtgy_op_p87 0x00000000U

#define MSK_NX90_mtgy_op_p87_val         0xffffffffU
#define SRT_NX90_mtgy_op_p87_val         0
#define DFLT_VAL_NX90_mtgy_op_p87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p87': */
#define MSK_USED_BITS_NX90_mtgy_op_p87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p88 */
/* => MWMM operand P register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p88  0x00001560U
#define Adr_NX90_mtgy_mtgy_op_p88 0xFF083560U
#define Adr_NX90_mtgy_op_p88      0xFF083560U
#define DFLT_VAL_NX90_mtgy_op_p88 0x00000000U

#define MSK_NX90_mtgy_op_p88_val         0xffffffffU
#define SRT_NX90_mtgy_op_p88_val         0
#define DFLT_VAL_NX90_mtgy_op_p88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p88': */
#define MSK_USED_BITS_NX90_mtgy_op_p88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p89 */
/* => MWMM operand P register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p89  0x00001564U
#define Adr_NX90_mtgy_mtgy_op_p89 0xFF083564U
#define Adr_NX90_mtgy_op_p89      0xFF083564U
#define DFLT_VAL_NX90_mtgy_op_p89 0x00000000U

#define MSK_NX90_mtgy_op_p89_val         0xffffffffU
#define SRT_NX90_mtgy_op_p89_val         0
#define DFLT_VAL_NX90_mtgy_op_p89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p89': */
#define MSK_USED_BITS_NX90_mtgy_op_p89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p90 */
/* => MWMM operand P register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p90  0x00001568U
#define Adr_NX90_mtgy_mtgy_op_p90 0xFF083568U
#define Adr_NX90_mtgy_op_p90      0xFF083568U
#define DFLT_VAL_NX90_mtgy_op_p90 0x00000000U

#define MSK_NX90_mtgy_op_p90_val         0xffffffffU
#define SRT_NX90_mtgy_op_p90_val         0
#define DFLT_VAL_NX90_mtgy_op_p90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p90': */
#define MSK_USED_BITS_NX90_mtgy_op_p90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p91 */
/* => MWMM operand P register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p91  0x0000156CU
#define Adr_NX90_mtgy_mtgy_op_p91 0xFF08356CU
#define Adr_NX90_mtgy_op_p91      0xFF08356CU
#define DFLT_VAL_NX90_mtgy_op_p91 0x00000000U

#define MSK_NX90_mtgy_op_p91_val         0xffffffffU
#define SRT_NX90_mtgy_op_p91_val         0
#define DFLT_VAL_NX90_mtgy_op_p91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p91': */
#define MSK_USED_BITS_NX90_mtgy_op_p91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p92 */
/* => MWMM operand P register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p92  0x00001570U
#define Adr_NX90_mtgy_mtgy_op_p92 0xFF083570U
#define Adr_NX90_mtgy_op_p92      0xFF083570U
#define DFLT_VAL_NX90_mtgy_op_p92 0x00000000U

#define MSK_NX90_mtgy_op_p92_val         0xffffffffU
#define SRT_NX90_mtgy_op_p92_val         0
#define DFLT_VAL_NX90_mtgy_op_p92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p92': */
#define MSK_USED_BITS_NX90_mtgy_op_p92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p93 */
/* => MWMM operand P register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p93  0x00001574U
#define Adr_NX90_mtgy_mtgy_op_p93 0xFF083574U
#define Adr_NX90_mtgy_op_p93      0xFF083574U
#define DFLT_VAL_NX90_mtgy_op_p93 0x00000000U

#define MSK_NX90_mtgy_op_p93_val         0xffffffffU
#define SRT_NX90_mtgy_op_p93_val         0
#define DFLT_VAL_NX90_mtgy_op_p93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p93': */
#define MSK_USED_BITS_NX90_mtgy_op_p93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p94 */
/* => MWMM operand P register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p94  0x00001578U
#define Adr_NX90_mtgy_mtgy_op_p94 0xFF083578U
#define Adr_NX90_mtgy_op_p94      0xFF083578U
#define DFLT_VAL_NX90_mtgy_op_p94 0x00000000U

#define MSK_NX90_mtgy_op_p94_val         0xffffffffU
#define SRT_NX90_mtgy_op_p94_val         0
#define DFLT_VAL_NX90_mtgy_op_p94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p94': */
#define MSK_USED_BITS_NX90_mtgy_op_p94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p95 */
/* => MWMM operand P register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p95  0x0000157CU
#define Adr_NX90_mtgy_mtgy_op_p95 0xFF08357CU
#define Adr_NX90_mtgy_op_p95      0xFF08357CU
#define DFLT_VAL_NX90_mtgy_op_p95 0x00000000U

#define MSK_NX90_mtgy_op_p95_val         0xffffffffU
#define SRT_NX90_mtgy_op_p95_val         0
#define DFLT_VAL_NX90_mtgy_op_p95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p95': */
#define MSK_USED_BITS_NX90_mtgy_op_p95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p96 */
/* => MWMM operand P register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p96  0x00001580U
#define Adr_NX90_mtgy_mtgy_op_p96 0xFF083580U
#define Adr_NX90_mtgy_op_p96      0xFF083580U
#define DFLT_VAL_NX90_mtgy_op_p96 0x00000000U

#define MSK_NX90_mtgy_op_p96_val         0xffffffffU
#define SRT_NX90_mtgy_op_p96_val         0
#define DFLT_VAL_NX90_mtgy_op_p96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p96': */
#define MSK_USED_BITS_NX90_mtgy_op_p96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p97 */
/* => MWMM operand P register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p97  0x00001584U
#define Adr_NX90_mtgy_mtgy_op_p97 0xFF083584U
#define Adr_NX90_mtgy_op_p97      0xFF083584U
#define DFLT_VAL_NX90_mtgy_op_p97 0x00000000U

#define MSK_NX90_mtgy_op_p97_val         0xffffffffU
#define SRT_NX90_mtgy_op_p97_val         0
#define DFLT_VAL_NX90_mtgy_op_p97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p97': */
#define MSK_USED_BITS_NX90_mtgy_op_p97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p98 */
/* => MWMM operand P register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p98  0x00001588U
#define Adr_NX90_mtgy_mtgy_op_p98 0xFF083588U
#define Adr_NX90_mtgy_op_p98      0xFF083588U
#define DFLT_VAL_NX90_mtgy_op_p98 0x00000000U

#define MSK_NX90_mtgy_op_p98_val         0xffffffffU
#define SRT_NX90_mtgy_op_p98_val         0
#define DFLT_VAL_NX90_mtgy_op_p98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p98': */
#define MSK_USED_BITS_NX90_mtgy_op_p98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p99 */
/* => MWMM operand P register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p99  0x0000158CU
#define Adr_NX90_mtgy_mtgy_op_p99 0xFF08358CU
#define Adr_NX90_mtgy_op_p99      0xFF08358CU
#define DFLT_VAL_NX90_mtgy_op_p99 0x00000000U

#define MSK_NX90_mtgy_op_p99_val         0xffffffffU
#define SRT_NX90_mtgy_op_p99_val         0
#define DFLT_VAL_NX90_mtgy_op_p99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p99': */
#define MSK_USED_BITS_NX90_mtgy_op_p99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p100 */
/* => MWMM operand P register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p100  0x00001590U
#define Adr_NX90_mtgy_mtgy_op_p100 0xFF083590U
#define Adr_NX90_mtgy_op_p100      0xFF083590U
#define DFLT_VAL_NX90_mtgy_op_p100 0x00000000U

#define MSK_NX90_mtgy_op_p100_val         0xffffffffU
#define SRT_NX90_mtgy_op_p100_val         0
#define DFLT_VAL_NX90_mtgy_op_p100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p100': */
#define MSK_USED_BITS_NX90_mtgy_op_p100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p101 */
/* => MWMM operand P register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p101  0x00001594U
#define Adr_NX90_mtgy_mtgy_op_p101 0xFF083594U
#define Adr_NX90_mtgy_op_p101      0xFF083594U
#define DFLT_VAL_NX90_mtgy_op_p101 0x00000000U

#define MSK_NX90_mtgy_op_p101_val         0xffffffffU
#define SRT_NX90_mtgy_op_p101_val         0
#define DFLT_VAL_NX90_mtgy_op_p101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p101': */
#define MSK_USED_BITS_NX90_mtgy_op_p101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p102 */
/* => MWMM operand P register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p102  0x00001598U
#define Adr_NX90_mtgy_mtgy_op_p102 0xFF083598U
#define Adr_NX90_mtgy_op_p102      0xFF083598U
#define DFLT_VAL_NX90_mtgy_op_p102 0x00000000U

#define MSK_NX90_mtgy_op_p102_val         0xffffffffU
#define SRT_NX90_mtgy_op_p102_val         0
#define DFLT_VAL_NX90_mtgy_op_p102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p102': */
#define MSK_USED_BITS_NX90_mtgy_op_p102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p103 */
/* => MWMM operand P register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p103  0x0000159CU
#define Adr_NX90_mtgy_mtgy_op_p103 0xFF08359CU
#define Adr_NX90_mtgy_op_p103      0xFF08359CU
#define DFLT_VAL_NX90_mtgy_op_p103 0x00000000U

#define MSK_NX90_mtgy_op_p103_val         0xffffffffU
#define SRT_NX90_mtgy_op_p103_val         0
#define DFLT_VAL_NX90_mtgy_op_p103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p103': */
#define MSK_USED_BITS_NX90_mtgy_op_p103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p104 */
/* => MWMM operand P register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p104  0x000015A0U
#define Adr_NX90_mtgy_mtgy_op_p104 0xFF0835A0U
#define Adr_NX90_mtgy_op_p104      0xFF0835A0U
#define DFLT_VAL_NX90_mtgy_op_p104 0x00000000U

#define MSK_NX90_mtgy_op_p104_val         0xffffffffU
#define SRT_NX90_mtgy_op_p104_val         0
#define DFLT_VAL_NX90_mtgy_op_p104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p104': */
#define MSK_USED_BITS_NX90_mtgy_op_p104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p105 */
/* => MWMM operand P register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p105  0x000015A4U
#define Adr_NX90_mtgy_mtgy_op_p105 0xFF0835A4U
#define Adr_NX90_mtgy_op_p105      0xFF0835A4U
#define DFLT_VAL_NX90_mtgy_op_p105 0x00000000U

#define MSK_NX90_mtgy_op_p105_val         0xffffffffU
#define SRT_NX90_mtgy_op_p105_val         0
#define DFLT_VAL_NX90_mtgy_op_p105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p105': */
#define MSK_USED_BITS_NX90_mtgy_op_p105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p106 */
/* => MWMM operand P register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p106  0x000015A8U
#define Adr_NX90_mtgy_mtgy_op_p106 0xFF0835A8U
#define Adr_NX90_mtgy_op_p106      0xFF0835A8U
#define DFLT_VAL_NX90_mtgy_op_p106 0x00000000U

#define MSK_NX90_mtgy_op_p106_val         0xffffffffU
#define SRT_NX90_mtgy_op_p106_val         0
#define DFLT_VAL_NX90_mtgy_op_p106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p106': */
#define MSK_USED_BITS_NX90_mtgy_op_p106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p107 */
/* => MWMM operand P register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p107  0x000015ACU
#define Adr_NX90_mtgy_mtgy_op_p107 0xFF0835ACU
#define Adr_NX90_mtgy_op_p107      0xFF0835ACU
#define DFLT_VAL_NX90_mtgy_op_p107 0x00000000U

#define MSK_NX90_mtgy_op_p107_val         0xffffffffU
#define SRT_NX90_mtgy_op_p107_val         0
#define DFLT_VAL_NX90_mtgy_op_p107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p107': */
#define MSK_USED_BITS_NX90_mtgy_op_p107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p108 */
/* => MWMM operand P register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p108  0x000015B0U
#define Adr_NX90_mtgy_mtgy_op_p108 0xFF0835B0U
#define Adr_NX90_mtgy_op_p108      0xFF0835B0U
#define DFLT_VAL_NX90_mtgy_op_p108 0x00000000U

#define MSK_NX90_mtgy_op_p108_val         0xffffffffU
#define SRT_NX90_mtgy_op_p108_val         0
#define DFLT_VAL_NX90_mtgy_op_p108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p108': */
#define MSK_USED_BITS_NX90_mtgy_op_p108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p109 */
/* => MWMM operand P register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p109  0x000015B4U
#define Adr_NX90_mtgy_mtgy_op_p109 0xFF0835B4U
#define Adr_NX90_mtgy_op_p109      0xFF0835B4U
#define DFLT_VAL_NX90_mtgy_op_p109 0x00000000U

#define MSK_NX90_mtgy_op_p109_val         0xffffffffU
#define SRT_NX90_mtgy_op_p109_val         0
#define DFLT_VAL_NX90_mtgy_op_p109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p109': */
#define MSK_USED_BITS_NX90_mtgy_op_p109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p110 */
/* => MWMM operand P register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p110  0x000015B8U
#define Adr_NX90_mtgy_mtgy_op_p110 0xFF0835B8U
#define Adr_NX90_mtgy_op_p110      0xFF0835B8U
#define DFLT_VAL_NX90_mtgy_op_p110 0x00000000U

#define MSK_NX90_mtgy_op_p110_val         0xffffffffU
#define SRT_NX90_mtgy_op_p110_val         0
#define DFLT_VAL_NX90_mtgy_op_p110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p110': */
#define MSK_USED_BITS_NX90_mtgy_op_p110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p111 */
/* => MWMM operand P register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p111  0x000015BCU
#define Adr_NX90_mtgy_mtgy_op_p111 0xFF0835BCU
#define Adr_NX90_mtgy_op_p111      0xFF0835BCU
#define DFLT_VAL_NX90_mtgy_op_p111 0x00000000U

#define MSK_NX90_mtgy_op_p111_val         0xffffffffU
#define SRT_NX90_mtgy_op_p111_val         0
#define DFLT_VAL_NX90_mtgy_op_p111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p111': */
#define MSK_USED_BITS_NX90_mtgy_op_p111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p112 */
/* => MWMM operand P register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p112  0x000015C0U
#define Adr_NX90_mtgy_mtgy_op_p112 0xFF0835C0U
#define Adr_NX90_mtgy_op_p112      0xFF0835C0U
#define DFLT_VAL_NX90_mtgy_op_p112 0x00000000U

#define MSK_NX90_mtgy_op_p112_val         0xffffffffU
#define SRT_NX90_mtgy_op_p112_val         0
#define DFLT_VAL_NX90_mtgy_op_p112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p112': */
#define MSK_USED_BITS_NX90_mtgy_op_p112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p113 */
/* => MWMM operand P register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p113  0x000015C4U
#define Adr_NX90_mtgy_mtgy_op_p113 0xFF0835C4U
#define Adr_NX90_mtgy_op_p113      0xFF0835C4U
#define DFLT_VAL_NX90_mtgy_op_p113 0x00000000U

#define MSK_NX90_mtgy_op_p113_val         0xffffffffU
#define SRT_NX90_mtgy_op_p113_val         0
#define DFLT_VAL_NX90_mtgy_op_p113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p113': */
#define MSK_USED_BITS_NX90_mtgy_op_p113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p114 */
/* => MWMM operand P register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p114  0x000015C8U
#define Adr_NX90_mtgy_mtgy_op_p114 0xFF0835C8U
#define Adr_NX90_mtgy_op_p114      0xFF0835C8U
#define DFLT_VAL_NX90_mtgy_op_p114 0x00000000U

#define MSK_NX90_mtgy_op_p114_val         0xffffffffU
#define SRT_NX90_mtgy_op_p114_val         0
#define DFLT_VAL_NX90_mtgy_op_p114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p114': */
#define MSK_USED_BITS_NX90_mtgy_op_p114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p115 */
/* => MWMM operand P register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p115  0x000015CCU
#define Adr_NX90_mtgy_mtgy_op_p115 0xFF0835CCU
#define Adr_NX90_mtgy_op_p115      0xFF0835CCU
#define DFLT_VAL_NX90_mtgy_op_p115 0x00000000U

#define MSK_NX90_mtgy_op_p115_val         0xffffffffU
#define SRT_NX90_mtgy_op_p115_val         0
#define DFLT_VAL_NX90_mtgy_op_p115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p115': */
#define MSK_USED_BITS_NX90_mtgy_op_p115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p116 */
/* => MWMM operand P register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p116  0x000015D0U
#define Adr_NX90_mtgy_mtgy_op_p116 0xFF0835D0U
#define Adr_NX90_mtgy_op_p116      0xFF0835D0U
#define DFLT_VAL_NX90_mtgy_op_p116 0x00000000U

#define MSK_NX90_mtgy_op_p116_val         0xffffffffU
#define SRT_NX90_mtgy_op_p116_val         0
#define DFLT_VAL_NX90_mtgy_op_p116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p116': */
#define MSK_USED_BITS_NX90_mtgy_op_p116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p117 */
/* => MWMM operand P register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p117  0x000015D4U
#define Adr_NX90_mtgy_mtgy_op_p117 0xFF0835D4U
#define Adr_NX90_mtgy_op_p117      0xFF0835D4U
#define DFLT_VAL_NX90_mtgy_op_p117 0x00000000U

#define MSK_NX90_mtgy_op_p117_val         0xffffffffU
#define SRT_NX90_mtgy_op_p117_val         0
#define DFLT_VAL_NX90_mtgy_op_p117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p117': */
#define MSK_USED_BITS_NX90_mtgy_op_p117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p118 */
/* => MWMM operand P register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p118  0x000015D8U
#define Adr_NX90_mtgy_mtgy_op_p118 0xFF0835D8U
#define Adr_NX90_mtgy_op_p118      0xFF0835D8U
#define DFLT_VAL_NX90_mtgy_op_p118 0x00000000U

#define MSK_NX90_mtgy_op_p118_val         0xffffffffU
#define SRT_NX90_mtgy_op_p118_val         0
#define DFLT_VAL_NX90_mtgy_op_p118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p118': */
#define MSK_USED_BITS_NX90_mtgy_op_p118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p119 */
/* => MWMM operand P register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p119  0x000015DCU
#define Adr_NX90_mtgy_mtgy_op_p119 0xFF0835DCU
#define Adr_NX90_mtgy_op_p119      0xFF0835DCU
#define DFLT_VAL_NX90_mtgy_op_p119 0x00000000U

#define MSK_NX90_mtgy_op_p119_val         0xffffffffU
#define SRT_NX90_mtgy_op_p119_val         0
#define DFLT_VAL_NX90_mtgy_op_p119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p119': */
#define MSK_USED_BITS_NX90_mtgy_op_p119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p120 */
/* => MWMM operand P register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p120  0x000015E0U
#define Adr_NX90_mtgy_mtgy_op_p120 0xFF0835E0U
#define Adr_NX90_mtgy_op_p120      0xFF0835E0U
#define DFLT_VAL_NX90_mtgy_op_p120 0x00000000U

#define MSK_NX90_mtgy_op_p120_val         0xffffffffU
#define SRT_NX90_mtgy_op_p120_val         0
#define DFLT_VAL_NX90_mtgy_op_p120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p120': */
#define MSK_USED_BITS_NX90_mtgy_op_p120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p121 */
/* => MWMM operand P register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p121  0x000015E4U
#define Adr_NX90_mtgy_mtgy_op_p121 0xFF0835E4U
#define Adr_NX90_mtgy_op_p121      0xFF0835E4U
#define DFLT_VAL_NX90_mtgy_op_p121 0x00000000U

#define MSK_NX90_mtgy_op_p121_val         0xffffffffU
#define SRT_NX90_mtgy_op_p121_val         0
#define DFLT_VAL_NX90_mtgy_op_p121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p121': */
#define MSK_USED_BITS_NX90_mtgy_op_p121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p122 */
/* => MWMM operand P register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p122  0x000015E8U
#define Adr_NX90_mtgy_mtgy_op_p122 0xFF0835E8U
#define Adr_NX90_mtgy_op_p122      0xFF0835E8U
#define DFLT_VAL_NX90_mtgy_op_p122 0x00000000U

#define MSK_NX90_mtgy_op_p122_val         0xffffffffU
#define SRT_NX90_mtgy_op_p122_val         0
#define DFLT_VAL_NX90_mtgy_op_p122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p122': */
#define MSK_USED_BITS_NX90_mtgy_op_p122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p123 */
/* => MWMM operand P register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p123  0x000015ECU
#define Adr_NX90_mtgy_mtgy_op_p123 0xFF0835ECU
#define Adr_NX90_mtgy_op_p123      0xFF0835ECU
#define DFLT_VAL_NX90_mtgy_op_p123 0x00000000U

#define MSK_NX90_mtgy_op_p123_val         0xffffffffU
#define SRT_NX90_mtgy_op_p123_val         0
#define DFLT_VAL_NX90_mtgy_op_p123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p123': */
#define MSK_USED_BITS_NX90_mtgy_op_p123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p124 */
/* => MWMM operand P register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p124  0x000015F0U
#define Adr_NX90_mtgy_mtgy_op_p124 0xFF0835F0U
#define Adr_NX90_mtgy_op_p124      0xFF0835F0U
#define DFLT_VAL_NX90_mtgy_op_p124 0x00000000U

#define MSK_NX90_mtgy_op_p124_val         0xffffffffU
#define SRT_NX90_mtgy_op_p124_val         0
#define DFLT_VAL_NX90_mtgy_op_p124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p124': */
#define MSK_USED_BITS_NX90_mtgy_op_p124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p125 */
/* => MWMM operand P register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p125  0x000015F4U
#define Adr_NX90_mtgy_mtgy_op_p125 0xFF0835F4U
#define Adr_NX90_mtgy_op_p125      0xFF0835F4U
#define DFLT_VAL_NX90_mtgy_op_p125 0x00000000U

#define MSK_NX90_mtgy_op_p125_val         0xffffffffU
#define SRT_NX90_mtgy_op_p125_val         0
#define DFLT_VAL_NX90_mtgy_op_p125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p125': */
#define MSK_USED_BITS_NX90_mtgy_op_p125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p126 */
/* => MWMM operand P register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p126  0x000015F8U
#define Adr_NX90_mtgy_mtgy_op_p126 0xFF0835F8U
#define Adr_NX90_mtgy_op_p126      0xFF0835F8U
#define DFLT_VAL_NX90_mtgy_op_p126 0x00000000U

#define MSK_NX90_mtgy_op_p126_val         0xffffffffU
#define SRT_NX90_mtgy_op_p126_val         0
#define DFLT_VAL_NX90_mtgy_op_p126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p126': */
#define MSK_USED_BITS_NX90_mtgy_op_p126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p127 */
/* => MWMM operand P register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p127  0x000015FCU
#define Adr_NX90_mtgy_mtgy_op_p127 0xFF0835FCU
#define Adr_NX90_mtgy_op_p127      0xFF0835FCU
#define DFLT_VAL_NX90_mtgy_op_p127 0x00000000U

#define MSK_NX90_mtgy_op_p127_val         0xffffffffU
#define SRT_NX90_mtgy_op_p127_val         0
#define DFLT_VAL_NX90_mtgy_op_p127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_p127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_p127': */
#define MSK_USED_BITS_NX90_mtgy_op_p127 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b0 */
/* => MWMM operand B register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b0  0x00001600U
#define Adr_NX90_mtgy_mtgy_op_b0 0xFF083600U
#define Adr_NX90_mtgy_op_b0      0xFF083600U
#define DFLT_VAL_NX90_mtgy_op_b0 0x00000000U

#define MSK_NX90_mtgy_op_b0_val         0xffffffffU
#define SRT_NX90_mtgy_op_b0_val         0
#define DFLT_VAL_NX90_mtgy_op_b0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b0': */
#define MSK_USED_BITS_NX90_mtgy_op_b0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b1 */
/* => MWMM operand B register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b1  0x00001604U
#define Adr_NX90_mtgy_mtgy_op_b1 0xFF083604U
#define Adr_NX90_mtgy_op_b1      0xFF083604U
#define DFLT_VAL_NX90_mtgy_op_b1 0x00000000U

#define MSK_NX90_mtgy_op_b1_val         0xffffffffU
#define SRT_NX90_mtgy_op_b1_val         0
#define DFLT_VAL_NX90_mtgy_op_b1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b1': */
#define MSK_USED_BITS_NX90_mtgy_op_b1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b2 */
/* => MWMM operand B register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b2  0x00001608U
#define Adr_NX90_mtgy_mtgy_op_b2 0xFF083608U
#define Adr_NX90_mtgy_op_b2      0xFF083608U
#define DFLT_VAL_NX90_mtgy_op_b2 0x00000000U

#define MSK_NX90_mtgy_op_b2_val         0xffffffffU
#define SRT_NX90_mtgy_op_b2_val         0
#define DFLT_VAL_NX90_mtgy_op_b2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b2': */
#define MSK_USED_BITS_NX90_mtgy_op_b2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b3 */
/* => MWMM operand B register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b3  0x0000160CU
#define Adr_NX90_mtgy_mtgy_op_b3 0xFF08360CU
#define Adr_NX90_mtgy_op_b3      0xFF08360CU
#define DFLT_VAL_NX90_mtgy_op_b3 0x00000000U

#define MSK_NX90_mtgy_op_b3_val         0xffffffffU
#define SRT_NX90_mtgy_op_b3_val         0
#define DFLT_VAL_NX90_mtgy_op_b3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b3': */
#define MSK_USED_BITS_NX90_mtgy_op_b3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b4 */
/* => MWMM operand B register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b4  0x00001610U
#define Adr_NX90_mtgy_mtgy_op_b4 0xFF083610U
#define Adr_NX90_mtgy_op_b4      0xFF083610U
#define DFLT_VAL_NX90_mtgy_op_b4 0x00000000U

#define MSK_NX90_mtgy_op_b4_val         0xffffffffU
#define SRT_NX90_mtgy_op_b4_val         0
#define DFLT_VAL_NX90_mtgy_op_b4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b4': */
#define MSK_USED_BITS_NX90_mtgy_op_b4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b5 */
/* => MWMM operand B register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b5  0x00001614U
#define Adr_NX90_mtgy_mtgy_op_b5 0xFF083614U
#define Adr_NX90_mtgy_op_b5      0xFF083614U
#define DFLT_VAL_NX90_mtgy_op_b5 0x00000000U

#define MSK_NX90_mtgy_op_b5_val         0xffffffffU
#define SRT_NX90_mtgy_op_b5_val         0
#define DFLT_VAL_NX90_mtgy_op_b5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b5': */
#define MSK_USED_BITS_NX90_mtgy_op_b5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b6 */
/* => MWMM operand B register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b6  0x00001618U
#define Adr_NX90_mtgy_mtgy_op_b6 0xFF083618U
#define Adr_NX90_mtgy_op_b6      0xFF083618U
#define DFLT_VAL_NX90_mtgy_op_b6 0x00000000U

#define MSK_NX90_mtgy_op_b6_val         0xffffffffU
#define SRT_NX90_mtgy_op_b6_val         0
#define DFLT_VAL_NX90_mtgy_op_b6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b6': */
#define MSK_USED_BITS_NX90_mtgy_op_b6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b7 */
/* => MWMM operand B register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b7  0x0000161CU
#define Adr_NX90_mtgy_mtgy_op_b7 0xFF08361CU
#define Adr_NX90_mtgy_op_b7      0xFF08361CU
#define DFLT_VAL_NX90_mtgy_op_b7 0x00000000U

#define MSK_NX90_mtgy_op_b7_val         0xffffffffU
#define SRT_NX90_mtgy_op_b7_val         0
#define DFLT_VAL_NX90_mtgy_op_b7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b7': */
#define MSK_USED_BITS_NX90_mtgy_op_b7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b8 */
/* => MWMM operand B register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b8  0x00001620U
#define Adr_NX90_mtgy_mtgy_op_b8 0xFF083620U
#define Adr_NX90_mtgy_op_b8      0xFF083620U
#define DFLT_VAL_NX90_mtgy_op_b8 0x00000000U

#define MSK_NX90_mtgy_op_b8_val         0xffffffffU
#define SRT_NX90_mtgy_op_b8_val         0
#define DFLT_VAL_NX90_mtgy_op_b8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b8': */
#define MSK_USED_BITS_NX90_mtgy_op_b8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b9 */
/* => MWMM operand B register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b9  0x00001624U
#define Adr_NX90_mtgy_mtgy_op_b9 0xFF083624U
#define Adr_NX90_mtgy_op_b9      0xFF083624U
#define DFLT_VAL_NX90_mtgy_op_b9 0x00000000U

#define MSK_NX90_mtgy_op_b9_val         0xffffffffU
#define SRT_NX90_mtgy_op_b9_val         0
#define DFLT_VAL_NX90_mtgy_op_b9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b9': */
#define MSK_USED_BITS_NX90_mtgy_op_b9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b10 */
/* => MWMM operand B register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b10  0x00001628U
#define Adr_NX90_mtgy_mtgy_op_b10 0xFF083628U
#define Adr_NX90_mtgy_op_b10      0xFF083628U
#define DFLT_VAL_NX90_mtgy_op_b10 0x00000000U

#define MSK_NX90_mtgy_op_b10_val         0xffffffffU
#define SRT_NX90_mtgy_op_b10_val         0
#define DFLT_VAL_NX90_mtgy_op_b10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b10': */
#define MSK_USED_BITS_NX90_mtgy_op_b10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b11 */
/* => MWMM operand B register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b11  0x0000162CU
#define Adr_NX90_mtgy_mtgy_op_b11 0xFF08362CU
#define Adr_NX90_mtgy_op_b11      0xFF08362CU
#define DFLT_VAL_NX90_mtgy_op_b11 0x00000000U

#define MSK_NX90_mtgy_op_b11_val         0xffffffffU
#define SRT_NX90_mtgy_op_b11_val         0
#define DFLT_VAL_NX90_mtgy_op_b11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b11': */
#define MSK_USED_BITS_NX90_mtgy_op_b11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b12 */
/* => MWMM operand B register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b12  0x00001630U
#define Adr_NX90_mtgy_mtgy_op_b12 0xFF083630U
#define Adr_NX90_mtgy_op_b12      0xFF083630U
#define DFLT_VAL_NX90_mtgy_op_b12 0x00000000U

#define MSK_NX90_mtgy_op_b12_val         0xffffffffU
#define SRT_NX90_mtgy_op_b12_val         0
#define DFLT_VAL_NX90_mtgy_op_b12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b12': */
#define MSK_USED_BITS_NX90_mtgy_op_b12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b13 */
/* => MWMM operand B register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b13  0x00001634U
#define Adr_NX90_mtgy_mtgy_op_b13 0xFF083634U
#define Adr_NX90_mtgy_op_b13      0xFF083634U
#define DFLT_VAL_NX90_mtgy_op_b13 0x00000000U

#define MSK_NX90_mtgy_op_b13_val         0xffffffffU
#define SRT_NX90_mtgy_op_b13_val         0
#define DFLT_VAL_NX90_mtgy_op_b13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b13': */
#define MSK_USED_BITS_NX90_mtgy_op_b13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b14 */
/* => MWMM operand B register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b14  0x00001638U
#define Adr_NX90_mtgy_mtgy_op_b14 0xFF083638U
#define Adr_NX90_mtgy_op_b14      0xFF083638U
#define DFLT_VAL_NX90_mtgy_op_b14 0x00000000U

#define MSK_NX90_mtgy_op_b14_val         0xffffffffU
#define SRT_NX90_mtgy_op_b14_val         0
#define DFLT_VAL_NX90_mtgy_op_b14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b14': */
#define MSK_USED_BITS_NX90_mtgy_op_b14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b15 */
/* => MWMM operand B register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b15  0x0000163CU
#define Adr_NX90_mtgy_mtgy_op_b15 0xFF08363CU
#define Adr_NX90_mtgy_op_b15      0xFF08363CU
#define DFLT_VAL_NX90_mtgy_op_b15 0x00000000U

#define MSK_NX90_mtgy_op_b15_val         0xffffffffU
#define SRT_NX90_mtgy_op_b15_val         0
#define DFLT_VAL_NX90_mtgy_op_b15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b15': */
#define MSK_USED_BITS_NX90_mtgy_op_b15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b16 */
/* => MWMM operand B register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b16  0x00001640U
#define Adr_NX90_mtgy_mtgy_op_b16 0xFF083640U
#define Adr_NX90_mtgy_op_b16      0xFF083640U
#define DFLT_VAL_NX90_mtgy_op_b16 0x00000000U

#define MSK_NX90_mtgy_op_b16_val         0xffffffffU
#define SRT_NX90_mtgy_op_b16_val         0
#define DFLT_VAL_NX90_mtgy_op_b16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b16': */
#define MSK_USED_BITS_NX90_mtgy_op_b16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b17 */
/* => MWMM operand B register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b17  0x00001644U
#define Adr_NX90_mtgy_mtgy_op_b17 0xFF083644U
#define Adr_NX90_mtgy_op_b17      0xFF083644U
#define DFLT_VAL_NX90_mtgy_op_b17 0x00000000U

#define MSK_NX90_mtgy_op_b17_val         0xffffffffU
#define SRT_NX90_mtgy_op_b17_val         0
#define DFLT_VAL_NX90_mtgy_op_b17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b17': */
#define MSK_USED_BITS_NX90_mtgy_op_b17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b18 */
/* => MWMM operand B register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b18  0x00001648U
#define Adr_NX90_mtgy_mtgy_op_b18 0xFF083648U
#define Adr_NX90_mtgy_op_b18      0xFF083648U
#define DFLT_VAL_NX90_mtgy_op_b18 0x00000000U

#define MSK_NX90_mtgy_op_b18_val         0xffffffffU
#define SRT_NX90_mtgy_op_b18_val         0
#define DFLT_VAL_NX90_mtgy_op_b18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b18': */
#define MSK_USED_BITS_NX90_mtgy_op_b18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b19 */
/* => MWMM operand B register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b19  0x0000164CU
#define Adr_NX90_mtgy_mtgy_op_b19 0xFF08364CU
#define Adr_NX90_mtgy_op_b19      0xFF08364CU
#define DFLT_VAL_NX90_mtgy_op_b19 0x00000000U

#define MSK_NX90_mtgy_op_b19_val         0xffffffffU
#define SRT_NX90_mtgy_op_b19_val         0
#define DFLT_VAL_NX90_mtgy_op_b19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b19': */
#define MSK_USED_BITS_NX90_mtgy_op_b19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b20 */
/* => MWMM operand B register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b20  0x00001650U
#define Adr_NX90_mtgy_mtgy_op_b20 0xFF083650U
#define Adr_NX90_mtgy_op_b20      0xFF083650U
#define DFLT_VAL_NX90_mtgy_op_b20 0x00000000U

#define MSK_NX90_mtgy_op_b20_val         0xffffffffU
#define SRT_NX90_mtgy_op_b20_val         0
#define DFLT_VAL_NX90_mtgy_op_b20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b20': */
#define MSK_USED_BITS_NX90_mtgy_op_b20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b21 */
/* => MWMM operand B register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b21  0x00001654U
#define Adr_NX90_mtgy_mtgy_op_b21 0xFF083654U
#define Adr_NX90_mtgy_op_b21      0xFF083654U
#define DFLT_VAL_NX90_mtgy_op_b21 0x00000000U

#define MSK_NX90_mtgy_op_b21_val         0xffffffffU
#define SRT_NX90_mtgy_op_b21_val         0
#define DFLT_VAL_NX90_mtgy_op_b21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b21': */
#define MSK_USED_BITS_NX90_mtgy_op_b21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b22 */
/* => MWMM operand B register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b22  0x00001658U
#define Adr_NX90_mtgy_mtgy_op_b22 0xFF083658U
#define Adr_NX90_mtgy_op_b22      0xFF083658U
#define DFLT_VAL_NX90_mtgy_op_b22 0x00000000U

#define MSK_NX90_mtgy_op_b22_val         0xffffffffU
#define SRT_NX90_mtgy_op_b22_val         0
#define DFLT_VAL_NX90_mtgy_op_b22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b22': */
#define MSK_USED_BITS_NX90_mtgy_op_b22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b23 */
/* => MWMM operand B register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b23  0x0000165CU
#define Adr_NX90_mtgy_mtgy_op_b23 0xFF08365CU
#define Adr_NX90_mtgy_op_b23      0xFF08365CU
#define DFLT_VAL_NX90_mtgy_op_b23 0x00000000U

#define MSK_NX90_mtgy_op_b23_val         0xffffffffU
#define SRT_NX90_mtgy_op_b23_val         0
#define DFLT_VAL_NX90_mtgy_op_b23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b23': */
#define MSK_USED_BITS_NX90_mtgy_op_b23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b24 */
/* => MWMM operand B register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b24  0x00001660U
#define Adr_NX90_mtgy_mtgy_op_b24 0xFF083660U
#define Adr_NX90_mtgy_op_b24      0xFF083660U
#define DFLT_VAL_NX90_mtgy_op_b24 0x00000000U

#define MSK_NX90_mtgy_op_b24_val         0xffffffffU
#define SRT_NX90_mtgy_op_b24_val         0
#define DFLT_VAL_NX90_mtgy_op_b24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b24': */
#define MSK_USED_BITS_NX90_mtgy_op_b24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b25 */
/* => MWMM operand B register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b25  0x00001664U
#define Adr_NX90_mtgy_mtgy_op_b25 0xFF083664U
#define Adr_NX90_mtgy_op_b25      0xFF083664U
#define DFLT_VAL_NX90_mtgy_op_b25 0x00000000U

#define MSK_NX90_mtgy_op_b25_val         0xffffffffU
#define SRT_NX90_mtgy_op_b25_val         0
#define DFLT_VAL_NX90_mtgy_op_b25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b25': */
#define MSK_USED_BITS_NX90_mtgy_op_b25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b26 */
/* => MWMM operand B register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b26  0x00001668U
#define Adr_NX90_mtgy_mtgy_op_b26 0xFF083668U
#define Adr_NX90_mtgy_op_b26      0xFF083668U
#define DFLT_VAL_NX90_mtgy_op_b26 0x00000000U

#define MSK_NX90_mtgy_op_b26_val         0xffffffffU
#define SRT_NX90_mtgy_op_b26_val         0
#define DFLT_VAL_NX90_mtgy_op_b26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b26': */
#define MSK_USED_BITS_NX90_mtgy_op_b26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b27 */
/* => MWMM operand B register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b27  0x0000166CU
#define Adr_NX90_mtgy_mtgy_op_b27 0xFF08366CU
#define Adr_NX90_mtgy_op_b27      0xFF08366CU
#define DFLT_VAL_NX90_mtgy_op_b27 0x00000000U

#define MSK_NX90_mtgy_op_b27_val         0xffffffffU
#define SRT_NX90_mtgy_op_b27_val         0
#define DFLT_VAL_NX90_mtgy_op_b27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b27': */
#define MSK_USED_BITS_NX90_mtgy_op_b27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b28 */
/* => MWMM operand B register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b28  0x00001670U
#define Adr_NX90_mtgy_mtgy_op_b28 0xFF083670U
#define Adr_NX90_mtgy_op_b28      0xFF083670U
#define DFLT_VAL_NX90_mtgy_op_b28 0x00000000U

#define MSK_NX90_mtgy_op_b28_val         0xffffffffU
#define SRT_NX90_mtgy_op_b28_val         0
#define DFLT_VAL_NX90_mtgy_op_b28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b28': */
#define MSK_USED_BITS_NX90_mtgy_op_b28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b29 */
/* => MWMM operand B register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b29  0x00001674U
#define Adr_NX90_mtgy_mtgy_op_b29 0xFF083674U
#define Adr_NX90_mtgy_op_b29      0xFF083674U
#define DFLT_VAL_NX90_mtgy_op_b29 0x00000000U

#define MSK_NX90_mtgy_op_b29_val         0xffffffffU
#define SRT_NX90_mtgy_op_b29_val         0
#define DFLT_VAL_NX90_mtgy_op_b29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b29': */
#define MSK_USED_BITS_NX90_mtgy_op_b29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b30 */
/* => MWMM operand B register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b30  0x00001678U
#define Adr_NX90_mtgy_mtgy_op_b30 0xFF083678U
#define Adr_NX90_mtgy_op_b30      0xFF083678U
#define DFLT_VAL_NX90_mtgy_op_b30 0x00000000U

#define MSK_NX90_mtgy_op_b30_val         0xffffffffU
#define SRT_NX90_mtgy_op_b30_val         0
#define DFLT_VAL_NX90_mtgy_op_b30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b30': */
#define MSK_USED_BITS_NX90_mtgy_op_b30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b31 */
/* => MWMM operand B register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b31  0x0000167CU
#define Adr_NX90_mtgy_mtgy_op_b31 0xFF08367CU
#define Adr_NX90_mtgy_op_b31      0xFF08367CU
#define DFLT_VAL_NX90_mtgy_op_b31 0x00000000U

#define MSK_NX90_mtgy_op_b31_val         0xffffffffU
#define SRT_NX90_mtgy_op_b31_val         0
#define DFLT_VAL_NX90_mtgy_op_b31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b31': */
#define MSK_USED_BITS_NX90_mtgy_op_b31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b32 */
/* => MWMM operand B register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b32  0x00001680U
#define Adr_NX90_mtgy_mtgy_op_b32 0xFF083680U
#define Adr_NX90_mtgy_op_b32      0xFF083680U
#define DFLT_VAL_NX90_mtgy_op_b32 0x00000000U

#define MSK_NX90_mtgy_op_b32_val         0xffffffffU
#define SRT_NX90_mtgy_op_b32_val         0
#define DFLT_VAL_NX90_mtgy_op_b32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b32': */
#define MSK_USED_BITS_NX90_mtgy_op_b32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b33 */
/* => MWMM operand B register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b33  0x00001684U
#define Adr_NX90_mtgy_mtgy_op_b33 0xFF083684U
#define Adr_NX90_mtgy_op_b33      0xFF083684U
#define DFLT_VAL_NX90_mtgy_op_b33 0x00000000U

#define MSK_NX90_mtgy_op_b33_val         0xffffffffU
#define SRT_NX90_mtgy_op_b33_val         0
#define DFLT_VAL_NX90_mtgy_op_b33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b33': */
#define MSK_USED_BITS_NX90_mtgy_op_b33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b34 */
/* => MWMM operand B register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b34  0x00001688U
#define Adr_NX90_mtgy_mtgy_op_b34 0xFF083688U
#define Adr_NX90_mtgy_op_b34      0xFF083688U
#define DFLT_VAL_NX90_mtgy_op_b34 0x00000000U

#define MSK_NX90_mtgy_op_b34_val         0xffffffffU
#define SRT_NX90_mtgy_op_b34_val         0
#define DFLT_VAL_NX90_mtgy_op_b34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b34': */
#define MSK_USED_BITS_NX90_mtgy_op_b34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b35 */
/* => MWMM operand B register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b35  0x0000168CU
#define Adr_NX90_mtgy_mtgy_op_b35 0xFF08368CU
#define Adr_NX90_mtgy_op_b35      0xFF08368CU
#define DFLT_VAL_NX90_mtgy_op_b35 0x00000000U

#define MSK_NX90_mtgy_op_b35_val         0xffffffffU
#define SRT_NX90_mtgy_op_b35_val         0
#define DFLT_VAL_NX90_mtgy_op_b35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b35': */
#define MSK_USED_BITS_NX90_mtgy_op_b35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b36 */
/* => MWMM operand B register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b36  0x00001690U
#define Adr_NX90_mtgy_mtgy_op_b36 0xFF083690U
#define Adr_NX90_mtgy_op_b36      0xFF083690U
#define DFLT_VAL_NX90_mtgy_op_b36 0x00000000U

#define MSK_NX90_mtgy_op_b36_val         0xffffffffU
#define SRT_NX90_mtgy_op_b36_val         0
#define DFLT_VAL_NX90_mtgy_op_b36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b36': */
#define MSK_USED_BITS_NX90_mtgy_op_b36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b37 */
/* => MWMM operand B register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b37  0x00001694U
#define Adr_NX90_mtgy_mtgy_op_b37 0xFF083694U
#define Adr_NX90_mtgy_op_b37      0xFF083694U
#define DFLT_VAL_NX90_mtgy_op_b37 0x00000000U

#define MSK_NX90_mtgy_op_b37_val         0xffffffffU
#define SRT_NX90_mtgy_op_b37_val         0
#define DFLT_VAL_NX90_mtgy_op_b37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b37': */
#define MSK_USED_BITS_NX90_mtgy_op_b37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b38 */
/* => MWMM operand B register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b38  0x00001698U
#define Adr_NX90_mtgy_mtgy_op_b38 0xFF083698U
#define Adr_NX90_mtgy_op_b38      0xFF083698U
#define DFLT_VAL_NX90_mtgy_op_b38 0x00000000U

#define MSK_NX90_mtgy_op_b38_val         0xffffffffU
#define SRT_NX90_mtgy_op_b38_val         0
#define DFLT_VAL_NX90_mtgy_op_b38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b38': */
#define MSK_USED_BITS_NX90_mtgy_op_b38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b39 */
/* => MWMM operand B register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b39  0x0000169CU
#define Adr_NX90_mtgy_mtgy_op_b39 0xFF08369CU
#define Adr_NX90_mtgy_op_b39      0xFF08369CU
#define DFLT_VAL_NX90_mtgy_op_b39 0x00000000U

#define MSK_NX90_mtgy_op_b39_val         0xffffffffU
#define SRT_NX90_mtgy_op_b39_val         0
#define DFLT_VAL_NX90_mtgy_op_b39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b39': */
#define MSK_USED_BITS_NX90_mtgy_op_b39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b40 */
/* => MWMM operand B register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b40  0x000016A0U
#define Adr_NX90_mtgy_mtgy_op_b40 0xFF0836A0U
#define Adr_NX90_mtgy_op_b40      0xFF0836A0U
#define DFLT_VAL_NX90_mtgy_op_b40 0x00000000U

#define MSK_NX90_mtgy_op_b40_val         0xffffffffU
#define SRT_NX90_mtgy_op_b40_val         0
#define DFLT_VAL_NX90_mtgy_op_b40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b40': */
#define MSK_USED_BITS_NX90_mtgy_op_b40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b41 */
/* => MWMM operand B register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b41  0x000016A4U
#define Adr_NX90_mtgy_mtgy_op_b41 0xFF0836A4U
#define Adr_NX90_mtgy_op_b41      0xFF0836A4U
#define DFLT_VAL_NX90_mtgy_op_b41 0x00000000U

#define MSK_NX90_mtgy_op_b41_val         0xffffffffU
#define SRT_NX90_mtgy_op_b41_val         0
#define DFLT_VAL_NX90_mtgy_op_b41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b41': */
#define MSK_USED_BITS_NX90_mtgy_op_b41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b42 */
/* => MWMM operand B register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b42  0x000016A8U
#define Adr_NX90_mtgy_mtgy_op_b42 0xFF0836A8U
#define Adr_NX90_mtgy_op_b42      0xFF0836A8U
#define DFLT_VAL_NX90_mtgy_op_b42 0x00000000U

#define MSK_NX90_mtgy_op_b42_val         0xffffffffU
#define SRT_NX90_mtgy_op_b42_val         0
#define DFLT_VAL_NX90_mtgy_op_b42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b42': */
#define MSK_USED_BITS_NX90_mtgy_op_b42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b43 */
/* => MWMM operand B register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b43  0x000016ACU
#define Adr_NX90_mtgy_mtgy_op_b43 0xFF0836ACU
#define Adr_NX90_mtgy_op_b43      0xFF0836ACU
#define DFLT_VAL_NX90_mtgy_op_b43 0x00000000U

#define MSK_NX90_mtgy_op_b43_val         0xffffffffU
#define SRT_NX90_mtgy_op_b43_val         0
#define DFLT_VAL_NX90_mtgy_op_b43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b43': */
#define MSK_USED_BITS_NX90_mtgy_op_b43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b44 */
/* => MWMM operand B register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b44  0x000016B0U
#define Adr_NX90_mtgy_mtgy_op_b44 0xFF0836B0U
#define Adr_NX90_mtgy_op_b44      0xFF0836B0U
#define DFLT_VAL_NX90_mtgy_op_b44 0x00000000U

#define MSK_NX90_mtgy_op_b44_val         0xffffffffU
#define SRT_NX90_mtgy_op_b44_val         0
#define DFLT_VAL_NX90_mtgy_op_b44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b44': */
#define MSK_USED_BITS_NX90_mtgy_op_b44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b45 */
/* => MWMM operand B register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b45  0x000016B4U
#define Adr_NX90_mtgy_mtgy_op_b45 0xFF0836B4U
#define Adr_NX90_mtgy_op_b45      0xFF0836B4U
#define DFLT_VAL_NX90_mtgy_op_b45 0x00000000U

#define MSK_NX90_mtgy_op_b45_val         0xffffffffU
#define SRT_NX90_mtgy_op_b45_val         0
#define DFLT_VAL_NX90_mtgy_op_b45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b45': */
#define MSK_USED_BITS_NX90_mtgy_op_b45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b46 */
/* => MWMM operand B register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b46  0x000016B8U
#define Adr_NX90_mtgy_mtgy_op_b46 0xFF0836B8U
#define Adr_NX90_mtgy_op_b46      0xFF0836B8U
#define DFLT_VAL_NX90_mtgy_op_b46 0x00000000U

#define MSK_NX90_mtgy_op_b46_val         0xffffffffU
#define SRT_NX90_mtgy_op_b46_val         0
#define DFLT_VAL_NX90_mtgy_op_b46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b46': */
#define MSK_USED_BITS_NX90_mtgy_op_b46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b47 */
/* => MWMM operand B register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b47  0x000016BCU
#define Adr_NX90_mtgy_mtgy_op_b47 0xFF0836BCU
#define Adr_NX90_mtgy_op_b47      0xFF0836BCU
#define DFLT_VAL_NX90_mtgy_op_b47 0x00000000U

#define MSK_NX90_mtgy_op_b47_val         0xffffffffU
#define SRT_NX90_mtgy_op_b47_val         0
#define DFLT_VAL_NX90_mtgy_op_b47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b47': */
#define MSK_USED_BITS_NX90_mtgy_op_b47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b48 */
/* => MWMM operand B register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b48  0x000016C0U
#define Adr_NX90_mtgy_mtgy_op_b48 0xFF0836C0U
#define Adr_NX90_mtgy_op_b48      0xFF0836C0U
#define DFLT_VAL_NX90_mtgy_op_b48 0x00000000U

#define MSK_NX90_mtgy_op_b48_val         0xffffffffU
#define SRT_NX90_mtgy_op_b48_val         0
#define DFLT_VAL_NX90_mtgy_op_b48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b48': */
#define MSK_USED_BITS_NX90_mtgy_op_b48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b49 */
/* => MWMM operand B register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b49  0x000016C4U
#define Adr_NX90_mtgy_mtgy_op_b49 0xFF0836C4U
#define Adr_NX90_mtgy_op_b49      0xFF0836C4U
#define DFLT_VAL_NX90_mtgy_op_b49 0x00000000U

#define MSK_NX90_mtgy_op_b49_val         0xffffffffU
#define SRT_NX90_mtgy_op_b49_val         0
#define DFLT_VAL_NX90_mtgy_op_b49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b49': */
#define MSK_USED_BITS_NX90_mtgy_op_b49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b50 */
/* => MWMM operand B register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b50  0x000016C8U
#define Adr_NX90_mtgy_mtgy_op_b50 0xFF0836C8U
#define Adr_NX90_mtgy_op_b50      0xFF0836C8U
#define DFLT_VAL_NX90_mtgy_op_b50 0x00000000U

#define MSK_NX90_mtgy_op_b50_val         0xffffffffU
#define SRT_NX90_mtgy_op_b50_val         0
#define DFLT_VAL_NX90_mtgy_op_b50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b50': */
#define MSK_USED_BITS_NX90_mtgy_op_b50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b51 */
/* => MWMM operand B register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b51  0x000016CCU
#define Adr_NX90_mtgy_mtgy_op_b51 0xFF0836CCU
#define Adr_NX90_mtgy_op_b51      0xFF0836CCU
#define DFLT_VAL_NX90_mtgy_op_b51 0x00000000U

#define MSK_NX90_mtgy_op_b51_val         0xffffffffU
#define SRT_NX90_mtgy_op_b51_val         0
#define DFLT_VAL_NX90_mtgy_op_b51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b51': */
#define MSK_USED_BITS_NX90_mtgy_op_b51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b52 */
/* => MWMM operand B register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b52  0x000016D0U
#define Adr_NX90_mtgy_mtgy_op_b52 0xFF0836D0U
#define Adr_NX90_mtgy_op_b52      0xFF0836D0U
#define DFLT_VAL_NX90_mtgy_op_b52 0x00000000U

#define MSK_NX90_mtgy_op_b52_val         0xffffffffU
#define SRT_NX90_mtgy_op_b52_val         0
#define DFLT_VAL_NX90_mtgy_op_b52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b52': */
#define MSK_USED_BITS_NX90_mtgy_op_b52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b53 */
/* => MWMM operand B register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b53  0x000016D4U
#define Adr_NX90_mtgy_mtgy_op_b53 0xFF0836D4U
#define Adr_NX90_mtgy_op_b53      0xFF0836D4U
#define DFLT_VAL_NX90_mtgy_op_b53 0x00000000U

#define MSK_NX90_mtgy_op_b53_val         0xffffffffU
#define SRT_NX90_mtgy_op_b53_val         0
#define DFLT_VAL_NX90_mtgy_op_b53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b53': */
#define MSK_USED_BITS_NX90_mtgy_op_b53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b54 */
/* => MWMM operand B register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b54  0x000016D8U
#define Adr_NX90_mtgy_mtgy_op_b54 0xFF0836D8U
#define Adr_NX90_mtgy_op_b54      0xFF0836D8U
#define DFLT_VAL_NX90_mtgy_op_b54 0x00000000U

#define MSK_NX90_mtgy_op_b54_val         0xffffffffU
#define SRT_NX90_mtgy_op_b54_val         0
#define DFLT_VAL_NX90_mtgy_op_b54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b54': */
#define MSK_USED_BITS_NX90_mtgy_op_b54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b55 */
/* => MWMM operand B register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b55  0x000016DCU
#define Adr_NX90_mtgy_mtgy_op_b55 0xFF0836DCU
#define Adr_NX90_mtgy_op_b55      0xFF0836DCU
#define DFLT_VAL_NX90_mtgy_op_b55 0x00000000U

#define MSK_NX90_mtgy_op_b55_val         0xffffffffU
#define SRT_NX90_mtgy_op_b55_val         0
#define DFLT_VAL_NX90_mtgy_op_b55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b55': */
#define MSK_USED_BITS_NX90_mtgy_op_b55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b56 */
/* => MWMM operand B register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b56  0x000016E0U
#define Adr_NX90_mtgy_mtgy_op_b56 0xFF0836E0U
#define Adr_NX90_mtgy_op_b56      0xFF0836E0U
#define DFLT_VAL_NX90_mtgy_op_b56 0x00000000U

#define MSK_NX90_mtgy_op_b56_val         0xffffffffU
#define SRT_NX90_mtgy_op_b56_val         0
#define DFLT_VAL_NX90_mtgy_op_b56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b56': */
#define MSK_USED_BITS_NX90_mtgy_op_b56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b57 */
/* => MWMM operand B register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b57  0x000016E4U
#define Adr_NX90_mtgy_mtgy_op_b57 0xFF0836E4U
#define Adr_NX90_mtgy_op_b57      0xFF0836E4U
#define DFLT_VAL_NX90_mtgy_op_b57 0x00000000U

#define MSK_NX90_mtgy_op_b57_val         0xffffffffU
#define SRT_NX90_mtgy_op_b57_val         0
#define DFLT_VAL_NX90_mtgy_op_b57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b57': */
#define MSK_USED_BITS_NX90_mtgy_op_b57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b58 */
/* => MWMM operand B register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b58  0x000016E8U
#define Adr_NX90_mtgy_mtgy_op_b58 0xFF0836E8U
#define Adr_NX90_mtgy_op_b58      0xFF0836E8U
#define DFLT_VAL_NX90_mtgy_op_b58 0x00000000U

#define MSK_NX90_mtgy_op_b58_val         0xffffffffU
#define SRT_NX90_mtgy_op_b58_val         0
#define DFLT_VAL_NX90_mtgy_op_b58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b58': */
#define MSK_USED_BITS_NX90_mtgy_op_b58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b59 */
/* => MWMM operand B register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b59  0x000016ECU
#define Adr_NX90_mtgy_mtgy_op_b59 0xFF0836ECU
#define Adr_NX90_mtgy_op_b59      0xFF0836ECU
#define DFLT_VAL_NX90_mtgy_op_b59 0x00000000U

#define MSK_NX90_mtgy_op_b59_val         0xffffffffU
#define SRT_NX90_mtgy_op_b59_val         0
#define DFLT_VAL_NX90_mtgy_op_b59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b59': */
#define MSK_USED_BITS_NX90_mtgy_op_b59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b60 */
/* => MWMM operand B register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b60  0x000016F0U
#define Adr_NX90_mtgy_mtgy_op_b60 0xFF0836F0U
#define Adr_NX90_mtgy_op_b60      0xFF0836F0U
#define DFLT_VAL_NX90_mtgy_op_b60 0x00000000U

#define MSK_NX90_mtgy_op_b60_val         0xffffffffU
#define SRT_NX90_mtgy_op_b60_val         0
#define DFLT_VAL_NX90_mtgy_op_b60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b60': */
#define MSK_USED_BITS_NX90_mtgy_op_b60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b61 */
/* => MWMM operand B register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b61  0x000016F4U
#define Adr_NX90_mtgy_mtgy_op_b61 0xFF0836F4U
#define Adr_NX90_mtgy_op_b61      0xFF0836F4U
#define DFLT_VAL_NX90_mtgy_op_b61 0x00000000U

#define MSK_NX90_mtgy_op_b61_val         0xffffffffU
#define SRT_NX90_mtgy_op_b61_val         0
#define DFLT_VAL_NX90_mtgy_op_b61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b61': */
#define MSK_USED_BITS_NX90_mtgy_op_b61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b62 */
/* => MWMM operand B register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b62  0x000016F8U
#define Adr_NX90_mtgy_mtgy_op_b62 0xFF0836F8U
#define Adr_NX90_mtgy_op_b62      0xFF0836F8U
#define DFLT_VAL_NX90_mtgy_op_b62 0x00000000U

#define MSK_NX90_mtgy_op_b62_val         0xffffffffU
#define SRT_NX90_mtgy_op_b62_val         0
#define DFLT_VAL_NX90_mtgy_op_b62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b62': */
#define MSK_USED_BITS_NX90_mtgy_op_b62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b63 */
/* => MWMM operand B register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b63  0x000016FCU
#define Adr_NX90_mtgy_mtgy_op_b63 0xFF0836FCU
#define Adr_NX90_mtgy_op_b63      0xFF0836FCU
#define DFLT_VAL_NX90_mtgy_op_b63 0x00000000U

#define MSK_NX90_mtgy_op_b63_val         0xffffffffU
#define SRT_NX90_mtgy_op_b63_val         0
#define DFLT_VAL_NX90_mtgy_op_b63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b63': */
#define MSK_USED_BITS_NX90_mtgy_op_b63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b64 */
/* => MWMM operand B register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b64  0x00001700U
#define Adr_NX90_mtgy_mtgy_op_b64 0xFF083700U
#define Adr_NX90_mtgy_op_b64      0xFF083700U
#define DFLT_VAL_NX90_mtgy_op_b64 0x00000000U

#define MSK_NX90_mtgy_op_b64_val         0xffffffffU
#define SRT_NX90_mtgy_op_b64_val         0
#define DFLT_VAL_NX90_mtgy_op_b64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b64': */
#define MSK_USED_BITS_NX90_mtgy_op_b64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b65 */
/* => MWMM operand B register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b65  0x00001704U
#define Adr_NX90_mtgy_mtgy_op_b65 0xFF083704U
#define Adr_NX90_mtgy_op_b65      0xFF083704U
#define DFLT_VAL_NX90_mtgy_op_b65 0x00000000U

#define MSK_NX90_mtgy_op_b65_val         0xffffffffU
#define SRT_NX90_mtgy_op_b65_val         0
#define DFLT_VAL_NX90_mtgy_op_b65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b65': */
#define MSK_USED_BITS_NX90_mtgy_op_b65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b66 */
/* => MWMM operand B register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b66  0x00001708U
#define Adr_NX90_mtgy_mtgy_op_b66 0xFF083708U
#define Adr_NX90_mtgy_op_b66      0xFF083708U
#define DFLT_VAL_NX90_mtgy_op_b66 0x00000000U

#define MSK_NX90_mtgy_op_b66_val         0xffffffffU
#define SRT_NX90_mtgy_op_b66_val         0
#define DFLT_VAL_NX90_mtgy_op_b66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b66': */
#define MSK_USED_BITS_NX90_mtgy_op_b66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b67 */
/* => MWMM operand B register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b67  0x0000170CU
#define Adr_NX90_mtgy_mtgy_op_b67 0xFF08370CU
#define Adr_NX90_mtgy_op_b67      0xFF08370CU
#define DFLT_VAL_NX90_mtgy_op_b67 0x00000000U

#define MSK_NX90_mtgy_op_b67_val         0xffffffffU
#define SRT_NX90_mtgy_op_b67_val         0
#define DFLT_VAL_NX90_mtgy_op_b67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b67': */
#define MSK_USED_BITS_NX90_mtgy_op_b67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b68 */
/* => MWMM operand B register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b68  0x00001710U
#define Adr_NX90_mtgy_mtgy_op_b68 0xFF083710U
#define Adr_NX90_mtgy_op_b68      0xFF083710U
#define DFLT_VAL_NX90_mtgy_op_b68 0x00000000U

#define MSK_NX90_mtgy_op_b68_val         0xffffffffU
#define SRT_NX90_mtgy_op_b68_val         0
#define DFLT_VAL_NX90_mtgy_op_b68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b68': */
#define MSK_USED_BITS_NX90_mtgy_op_b68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b69 */
/* => MWMM operand B register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b69  0x00001714U
#define Adr_NX90_mtgy_mtgy_op_b69 0xFF083714U
#define Adr_NX90_mtgy_op_b69      0xFF083714U
#define DFLT_VAL_NX90_mtgy_op_b69 0x00000000U

#define MSK_NX90_mtgy_op_b69_val         0xffffffffU
#define SRT_NX90_mtgy_op_b69_val         0
#define DFLT_VAL_NX90_mtgy_op_b69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b69': */
#define MSK_USED_BITS_NX90_mtgy_op_b69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b70 */
/* => MWMM operand B register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b70  0x00001718U
#define Adr_NX90_mtgy_mtgy_op_b70 0xFF083718U
#define Adr_NX90_mtgy_op_b70      0xFF083718U
#define DFLT_VAL_NX90_mtgy_op_b70 0x00000000U

#define MSK_NX90_mtgy_op_b70_val         0xffffffffU
#define SRT_NX90_mtgy_op_b70_val         0
#define DFLT_VAL_NX90_mtgy_op_b70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b70': */
#define MSK_USED_BITS_NX90_mtgy_op_b70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b71 */
/* => MWMM operand B register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b71  0x0000171CU
#define Adr_NX90_mtgy_mtgy_op_b71 0xFF08371CU
#define Adr_NX90_mtgy_op_b71      0xFF08371CU
#define DFLT_VAL_NX90_mtgy_op_b71 0x00000000U

#define MSK_NX90_mtgy_op_b71_val         0xffffffffU
#define SRT_NX90_mtgy_op_b71_val         0
#define DFLT_VAL_NX90_mtgy_op_b71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b71': */
#define MSK_USED_BITS_NX90_mtgy_op_b71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b72 */
/* => MWMM operand B register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b72  0x00001720U
#define Adr_NX90_mtgy_mtgy_op_b72 0xFF083720U
#define Adr_NX90_mtgy_op_b72      0xFF083720U
#define DFLT_VAL_NX90_mtgy_op_b72 0x00000000U

#define MSK_NX90_mtgy_op_b72_val         0xffffffffU
#define SRT_NX90_mtgy_op_b72_val         0
#define DFLT_VAL_NX90_mtgy_op_b72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b72': */
#define MSK_USED_BITS_NX90_mtgy_op_b72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b73 */
/* => MWMM operand B register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b73  0x00001724U
#define Adr_NX90_mtgy_mtgy_op_b73 0xFF083724U
#define Adr_NX90_mtgy_op_b73      0xFF083724U
#define DFLT_VAL_NX90_mtgy_op_b73 0x00000000U

#define MSK_NX90_mtgy_op_b73_val         0xffffffffU
#define SRT_NX90_mtgy_op_b73_val         0
#define DFLT_VAL_NX90_mtgy_op_b73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b73': */
#define MSK_USED_BITS_NX90_mtgy_op_b73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b74 */
/* => MWMM operand B register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b74  0x00001728U
#define Adr_NX90_mtgy_mtgy_op_b74 0xFF083728U
#define Adr_NX90_mtgy_op_b74      0xFF083728U
#define DFLT_VAL_NX90_mtgy_op_b74 0x00000000U

#define MSK_NX90_mtgy_op_b74_val         0xffffffffU
#define SRT_NX90_mtgy_op_b74_val         0
#define DFLT_VAL_NX90_mtgy_op_b74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b74': */
#define MSK_USED_BITS_NX90_mtgy_op_b74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b75 */
/* => MWMM operand B register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b75  0x0000172CU
#define Adr_NX90_mtgy_mtgy_op_b75 0xFF08372CU
#define Adr_NX90_mtgy_op_b75      0xFF08372CU
#define DFLT_VAL_NX90_mtgy_op_b75 0x00000000U

#define MSK_NX90_mtgy_op_b75_val         0xffffffffU
#define SRT_NX90_mtgy_op_b75_val         0
#define DFLT_VAL_NX90_mtgy_op_b75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b75': */
#define MSK_USED_BITS_NX90_mtgy_op_b75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b76 */
/* => MWMM operand B register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b76  0x00001730U
#define Adr_NX90_mtgy_mtgy_op_b76 0xFF083730U
#define Adr_NX90_mtgy_op_b76      0xFF083730U
#define DFLT_VAL_NX90_mtgy_op_b76 0x00000000U

#define MSK_NX90_mtgy_op_b76_val         0xffffffffU
#define SRT_NX90_mtgy_op_b76_val         0
#define DFLT_VAL_NX90_mtgy_op_b76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b76': */
#define MSK_USED_BITS_NX90_mtgy_op_b76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b77 */
/* => MWMM operand B register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b77  0x00001734U
#define Adr_NX90_mtgy_mtgy_op_b77 0xFF083734U
#define Adr_NX90_mtgy_op_b77      0xFF083734U
#define DFLT_VAL_NX90_mtgy_op_b77 0x00000000U

#define MSK_NX90_mtgy_op_b77_val         0xffffffffU
#define SRT_NX90_mtgy_op_b77_val         0
#define DFLT_VAL_NX90_mtgy_op_b77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b77': */
#define MSK_USED_BITS_NX90_mtgy_op_b77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b78 */
/* => MWMM operand B register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b78  0x00001738U
#define Adr_NX90_mtgy_mtgy_op_b78 0xFF083738U
#define Adr_NX90_mtgy_op_b78      0xFF083738U
#define DFLT_VAL_NX90_mtgy_op_b78 0x00000000U

#define MSK_NX90_mtgy_op_b78_val         0xffffffffU
#define SRT_NX90_mtgy_op_b78_val         0
#define DFLT_VAL_NX90_mtgy_op_b78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b78': */
#define MSK_USED_BITS_NX90_mtgy_op_b78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b79 */
/* => MWMM operand B register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b79  0x0000173CU
#define Adr_NX90_mtgy_mtgy_op_b79 0xFF08373CU
#define Adr_NX90_mtgy_op_b79      0xFF08373CU
#define DFLT_VAL_NX90_mtgy_op_b79 0x00000000U

#define MSK_NX90_mtgy_op_b79_val         0xffffffffU
#define SRT_NX90_mtgy_op_b79_val         0
#define DFLT_VAL_NX90_mtgy_op_b79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b79': */
#define MSK_USED_BITS_NX90_mtgy_op_b79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b80 */
/* => MWMM operand B register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b80  0x00001740U
#define Adr_NX90_mtgy_mtgy_op_b80 0xFF083740U
#define Adr_NX90_mtgy_op_b80      0xFF083740U
#define DFLT_VAL_NX90_mtgy_op_b80 0x00000000U

#define MSK_NX90_mtgy_op_b80_val         0xffffffffU
#define SRT_NX90_mtgy_op_b80_val         0
#define DFLT_VAL_NX90_mtgy_op_b80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b80': */
#define MSK_USED_BITS_NX90_mtgy_op_b80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b81 */
/* => MWMM operand B register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b81  0x00001744U
#define Adr_NX90_mtgy_mtgy_op_b81 0xFF083744U
#define Adr_NX90_mtgy_op_b81      0xFF083744U
#define DFLT_VAL_NX90_mtgy_op_b81 0x00000000U

#define MSK_NX90_mtgy_op_b81_val         0xffffffffU
#define SRT_NX90_mtgy_op_b81_val         0
#define DFLT_VAL_NX90_mtgy_op_b81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b81': */
#define MSK_USED_BITS_NX90_mtgy_op_b81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b82 */
/* => MWMM operand B register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b82  0x00001748U
#define Adr_NX90_mtgy_mtgy_op_b82 0xFF083748U
#define Adr_NX90_mtgy_op_b82      0xFF083748U
#define DFLT_VAL_NX90_mtgy_op_b82 0x00000000U

#define MSK_NX90_mtgy_op_b82_val         0xffffffffU
#define SRT_NX90_mtgy_op_b82_val         0
#define DFLT_VAL_NX90_mtgy_op_b82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b82': */
#define MSK_USED_BITS_NX90_mtgy_op_b82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b83 */
/* => MWMM operand B register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b83  0x0000174CU
#define Adr_NX90_mtgy_mtgy_op_b83 0xFF08374CU
#define Adr_NX90_mtgy_op_b83      0xFF08374CU
#define DFLT_VAL_NX90_mtgy_op_b83 0x00000000U

#define MSK_NX90_mtgy_op_b83_val         0xffffffffU
#define SRT_NX90_mtgy_op_b83_val         0
#define DFLT_VAL_NX90_mtgy_op_b83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b83': */
#define MSK_USED_BITS_NX90_mtgy_op_b83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b84 */
/* => MWMM operand B register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b84  0x00001750U
#define Adr_NX90_mtgy_mtgy_op_b84 0xFF083750U
#define Adr_NX90_mtgy_op_b84      0xFF083750U
#define DFLT_VAL_NX90_mtgy_op_b84 0x00000000U

#define MSK_NX90_mtgy_op_b84_val         0xffffffffU
#define SRT_NX90_mtgy_op_b84_val         0
#define DFLT_VAL_NX90_mtgy_op_b84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b84': */
#define MSK_USED_BITS_NX90_mtgy_op_b84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b85 */
/* => MWMM operand B register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b85  0x00001754U
#define Adr_NX90_mtgy_mtgy_op_b85 0xFF083754U
#define Adr_NX90_mtgy_op_b85      0xFF083754U
#define DFLT_VAL_NX90_mtgy_op_b85 0x00000000U

#define MSK_NX90_mtgy_op_b85_val         0xffffffffU
#define SRT_NX90_mtgy_op_b85_val         0
#define DFLT_VAL_NX90_mtgy_op_b85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b85': */
#define MSK_USED_BITS_NX90_mtgy_op_b85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b86 */
/* => MWMM operand B register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b86  0x00001758U
#define Adr_NX90_mtgy_mtgy_op_b86 0xFF083758U
#define Adr_NX90_mtgy_op_b86      0xFF083758U
#define DFLT_VAL_NX90_mtgy_op_b86 0x00000000U

#define MSK_NX90_mtgy_op_b86_val         0xffffffffU
#define SRT_NX90_mtgy_op_b86_val         0
#define DFLT_VAL_NX90_mtgy_op_b86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b86': */
#define MSK_USED_BITS_NX90_mtgy_op_b86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b87 */
/* => MWMM operand B register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b87  0x0000175CU
#define Adr_NX90_mtgy_mtgy_op_b87 0xFF08375CU
#define Adr_NX90_mtgy_op_b87      0xFF08375CU
#define DFLT_VAL_NX90_mtgy_op_b87 0x00000000U

#define MSK_NX90_mtgy_op_b87_val         0xffffffffU
#define SRT_NX90_mtgy_op_b87_val         0
#define DFLT_VAL_NX90_mtgy_op_b87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b87': */
#define MSK_USED_BITS_NX90_mtgy_op_b87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b88 */
/* => MWMM operand B register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b88  0x00001760U
#define Adr_NX90_mtgy_mtgy_op_b88 0xFF083760U
#define Adr_NX90_mtgy_op_b88      0xFF083760U
#define DFLT_VAL_NX90_mtgy_op_b88 0x00000000U

#define MSK_NX90_mtgy_op_b88_val         0xffffffffU
#define SRT_NX90_mtgy_op_b88_val         0
#define DFLT_VAL_NX90_mtgy_op_b88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b88': */
#define MSK_USED_BITS_NX90_mtgy_op_b88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b89 */
/* => MWMM operand B register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b89  0x00001764U
#define Adr_NX90_mtgy_mtgy_op_b89 0xFF083764U
#define Adr_NX90_mtgy_op_b89      0xFF083764U
#define DFLT_VAL_NX90_mtgy_op_b89 0x00000000U

#define MSK_NX90_mtgy_op_b89_val         0xffffffffU
#define SRT_NX90_mtgy_op_b89_val         0
#define DFLT_VAL_NX90_mtgy_op_b89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b89': */
#define MSK_USED_BITS_NX90_mtgy_op_b89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b90 */
/* => MWMM operand B register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b90  0x00001768U
#define Adr_NX90_mtgy_mtgy_op_b90 0xFF083768U
#define Adr_NX90_mtgy_op_b90      0xFF083768U
#define DFLT_VAL_NX90_mtgy_op_b90 0x00000000U

#define MSK_NX90_mtgy_op_b90_val         0xffffffffU
#define SRT_NX90_mtgy_op_b90_val         0
#define DFLT_VAL_NX90_mtgy_op_b90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b90': */
#define MSK_USED_BITS_NX90_mtgy_op_b90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b91 */
/* => MWMM operand B register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b91  0x0000176CU
#define Adr_NX90_mtgy_mtgy_op_b91 0xFF08376CU
#define Adr_NX90_mtgy_op_b91      0xFF08376CU
#define DFLT_VAL_NX90_mtgy_op_b91 0x00000000U

#define MSK_NX90_mtgy_op_b91_val         0xffffffffU
#define SRT_NX90_mtgy_op_b91_val         0
#define DFLT_VAL_NX90_mtgy_op_b91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b91': */
#define MSK_USED_BITS_NX90_mtgy_op_b91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b92 */
/* => MWMM operand B register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b92  0x00001770U
#define Adr_NX90_mtgy_mtgy_op_b92 0xFF083770U
#define Adr_NX90_mtgy_op_b92      0xFF083770U
#define DFLT_VAL_NX90_mtgy_op_b92 0x00000000U

#define MSK_NX90_mtgy_op_b92_val         0xffffffffU
#define SRT_NX90_mtgy_op_b92_val         0
#define DFLT_VAL_NX90_mtgy_op_b92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b92': */
#define MSK_USED_BITS_NX90_mtgy_op_b92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b93 */
/* => MWMM operand B register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b93  0x00001774U
#define Adr_NX90_mtgy_mtgy_op_b93 0xFF083774U
#define Adr_NX90_mtgy_op_b93      0xFF083774U
#define DFLT_VAL_NX90_mtgy_op_b93 0x00000000U

#define MSK_NX90_mtgy_op_b93_val         0xffffffffU
#define SRT_NX90_mtgy_op_b93_val         0
#define DFLT_VAL_NX90_mtgy_op_b93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b93': */
#define MSK_USED_BITS_NX90_mtgy_op_b93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b94 */
/* => MWMM operand B register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b94  0x00001778U
#define Adr_NX90_mtgy_mtgy_op_b94 0xFF083778U
#define Adr_NX90_mtgy_op_b94      0xFF083778U
#define DFLT_VAL_NX90_mtgy_op_b94 0x00000000U

#define MSK_NX90_mtgy_op_b94_val         0xffffffffU
#define SRT_NX90_mtgy_op_b94_val         0
#define DFLT_VAL_NX90_mtgy_op_b94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b94': */
#define MSK_USED_BITS_NX90_mtgy_op_b94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b95 */
/* => MWMM operand B register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b95  0x0000177CU
#define Adr_NX90_mtgy_mtgy_op_b95 0xFF08377CU
#define Adr_NX90_mtgy_op_b95      0xFF08377CU
#define DFLT_VAL_NX90_mtgy_op_b95 0x00000000U

#define MSK_NX90_mtgy_op_b95_val         0xffffffffU
#define SRT_NX90_mtgy_op_b95_val         0
#define DFLT_VAL_NX90_mtgy_op_b95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b95': */
#define MSK_USED_BITS_NX90_mtgy_op_b95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b96 */
/* => MWMM operand B register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b96  0x00001780U
#define Adr_NX90_mtgy_mtgy_op_b96 0xFF083780U
#define Adr_NX90_mtgy_op_b96      0xFF083780U
#define DFLT_VAL_NX90_mtgy_op_b96 0x00000000U

#define MSK_NX90_mtgy_op_b96_val         0xffffffffU
#define SRT_NX90_mtgy_op_b96_val         0
#define DFLT_VAL_NX90_mtgy_op_b96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b96': */
#define MSK_USED_BITS_NX90_mtgy_op_b96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b97 */
/* => MWMM operand B register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b97  0x00001784U
#define Adr_NX90_mtgy_mtgy_op_b97 0xFF083784U
#define Adr_NX90_mtgy_op_b97      0xFF083784U
#define DFLT_VAL_NX90_mtgy_op_b97 0x00000000U

#define MSK_NX90_mtgy_op_b97_val         0xffffffffU
#define SRT_NX90_mtgy_op_b97_val         0
#define DFLT_VAL_NX90_mtgy_op_b97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b97': */
#define MSK_USED_BITS_NX90_mtgy_op_b97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b98 */
/* => MWMM operand B register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b98  0x00001788U
#define Adr_NX90_mtgy_mtgy_op_b98 0xFF083788U
#define Adr_NX90_mtgy_op_b98      0xFF083788U
#define DFLT_VAL_NX90_mtgy_op_b98 0x00000000U

#define MSK_NX90_mtgy_op_b98_val         0xffffffffU
#define SRT_NX90_mtgy_op_b98_val         0
#define DFLT_VAL_NX90_mtgy_op_b98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b98': */
#define MSK_USED_BITS_NX90_mtgy_op_b98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b99 */
/* => MWMM operand B register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b99  0x0000178CU
#define Adr_NX90_mtgy_mtgy_op_b99 0xFF08378CU
#define Adr_NX90_mtgy_op_b99      0xFF08378CU
#define DFLT_VAL_NX90_mtgy_op_b99 0x00000000U

#define MSK_NX90_mtgy_op_b99_val         0xffffffffU
#define SRT_NX90_mtgy_op_b99_val         0
#define DFLT_VAL_NX90_mtgy_op_b99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b99': */
#define MSK_USED_BITS_NX90_mtgy_op_b99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b100 */
/* => MWMM operand B register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b100  0x00001790U
#define Adr_NX90_mtgy_mtgy_op_b100 0xFF083790U
#define Adr_NX90_mtgy_op_b100      0xFF083790U
#define DFLT_VAL_NX90_mtgy_op_b100 0x00000000U

#define MSK_NX90_mtgy_op_b100_val         0xffffffffU
#define SRT_NX90_mtgy_op_b100_val         0
#define DFLT_VAL_NX90_mtgy_op_b100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b100': */
#define MSK_USED_BITS_NX90_mtgy_op_b100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b101 */
/* => MWMM operand B register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b101  0x00001794U
#define Adr_NX90_mtgy_mtgy_op_b101 0xFF083794U
#define Adr_NX90_mtgy_op_b101      0xFF083794U
#define DFLT_VAL_NX90_mtgy_op_b101 0x00000000U

#define MSK_NX90_mtgy_op_b101_val         0xffffffffU
#define SRT_NX90_mtgy_op_b101_val         0
#define DFLT_VAL_NX90_mtgy_op_b101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b101': */
#define MSK_USED_BITS_NX90_mtgy_op_b101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b102 */
/* => MWMM operand B register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b102  0x00001798U
#define Adr_NX90_mtgy_mtgy_op_b102 0xFF083798U
#define Adr_NX90_mtgy_op_b102      0xFF083798U
#define DFLT_VAL_NX90_mtgy_op_b102 0x00000000U

#define MSK_NX90_mtgy_op_b102_val         0xffffffffU
#define SRT_NX90_mtgy_op_b102_val         0
#define DFLT_VAL_NX90_mtgy_op_b102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b102': */
#define MSK_USED_BITS_NX90_mtgy_op_b102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b103 */
/* => MWMM operand B register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b103  0x0000179CU
#define Adr_NX90_mtgy_mtgy_op_b103 0xFF08379CU
#define Adr_NX90_mtgy_op_b103      0xFF08379CU
#define DFLT_VAL_NX90_mtgy_op_b103 0x00000000U

#define MSK_NX90_mtgy_op_b103_val         0xffffffffU
#define SRT_NX90_mtgy_op_b103_val         0
#define DFLT_VAL_NX90_mtgy_op_b103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b103': */
#define MSK_USED_BITS_NX90_mtgy_op_b103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b104 */
/* => MWMM operand B register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b104  0x000017A0U
#define Adr_NX90_mtgy_mtgy_op_b104 0xFF0837A0U
#define Adr_NX90_mtgy_op_b104      0xFF0837A0U
#define DFLT_VAL_NX90_mtgy_op_b104 0x00000000U

#define MSK_NX90_mtgy_op_b104_val         0xffffffffU
#define SRT_NX90_mtgy_op_b104_val         0
#define DFLT_VAL_NX90_mtgy_op_b104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b104': */
#define MSK_USED_BITS_NX90_mtgy_op_b104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b105 */
/* => MWMM operand B register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b105  0x000017A4U
#define Adr_NX90_mtgy_mtgy_op_b105 0xFF0837A4U
#define Adr_NX90_mtgy_op_b105      0xFF0837A4U
#define DFLT_VAL_NX90_mtgy_op_b105 0x00000000U

#define MSK_NX90_mtgy_op_b105_val         0xffffffffU
#define SRT_NX90_mtgy_op_b105_val         0
#define DFLT_VAL_NX90_mtgy_op_b105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b105': */
#define MSK_USED_BITS_NX90_mtgy_op_b105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b106 */
/* => MWMM operand B register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b106  0x000017A8U
#define Adr_NX90_mtgy_mtgy_op_b106 0xFF0837A8U
#define Adr_NX90_mtgy_op_b106      0xFF0837A8U
#define DFLT_VAL_NX90_mtgy_op_b106 0x00000000U

#define MSK_NX90_mtgy_op_b106_val         0xffffffffU
#define SRT_NX90_mtgy_op_b106_val         0
#define DFLT_VAL_NX90_mtgy_op_b106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b106': */
#define MSK_USED_BITS_NX90_mtgy_op_b106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b107 */
/* => MWMM operand B register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b107  0x000017ACU
#define Adr_NX90_mtgy_mtgy_op_b107 0xFF0837ACU
#define Adr_NX90_mtgy_op_b107      0xFF0837ACU
#define DFLT_VAL_NX90_mtgy_op_b107 0x00000000U

#define MSK_NX90_mtgy_op_b107_val         0xffffffffU
#define SRT_NX90_mtgy_op_b107_val         0
#define DFLT_VAL_NX90_mtgy_op_b107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b107': */
#define MSK_USED_BITS_NX90_mtgy_op_b107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b108 */
/* => MWMM operand B register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b108  0x000017B0U
#define Adr_NX90_mtgy_mtgy_op_b108 0xFF0837B0U
#define Adr_NX90_mtgy_op_b108      0xFF0837B0U
#define DFLT_VAL_NX90_mtgy_op_b108 0x00000000U

#define MSK_NX90_mtgy_op_b108_val         0xffffffffU
#define SRT_NX90_mtgy_op_b108_val         0
#define DFLT_VAL_NX90_mtgy_op_b108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b108': */
#define MSK_USED_BITS_NX90_mtgy_op_b108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b109 */
/* => MWMM operand B register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b109  0x000017B4U
#define Adr_NX90_mtgy_mtgy_op_b109 0xFF0837B4U
#define Adr_NX90_mtgy_op_b109      0xFF0837B4U
#define DFLT_VAL_NX90_mtgy_op_b109 0x00000000U

#define MSK_NX90_mtgy_op_b109_val         0xffffffffU
#define SRT_NX90_mtgy_op_b109_val         0
#define DFLT_VAL_NX90_mtgy_op_b109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b109': */
#define MSK_USED_BITS_NX90_mtgy_op_b109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b110 */
/* => MWMM operand B register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b110  0x000017B8U
#define Adr_NX90_mtgy_mtgy_op_b110 0xFF0837B8U
#define Adr_NX90_mtgy_op_b110      0xFF0837B8U
#define DFLT_VAL_NX90_mtgy_op_b110 0x00000000U

#define MSK_NX90_mtgy_op_b110_val         0xffffffffU
#define SRT_NX90_mtgy_op_b110_val         0
#define DFLT_VAL_NX90_mtgy_op_b110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b110': */
#define MSK_USED_BITS_NX90_mtgy_op_b110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b111 */
/* => MWMM operand B register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b111  0x000017BCU
#define Adr_NX90_mtgy_mtgy_op_b111 0xFF0837BCU
#define Adr_NX90_mtgy_op_b111      0xFF0837BCU
#define DFLT_VAL_NX90_mtgy_op_b111 0x00000000U

#define MSK_NX90_mtgy_op_b111_val         0xffffffffU
#define SRT_NX90_mtgy_op_b111_val         0
#define DFLT_VAL_NX90_mtgy_op_b111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b111': */
#define MSK_USED_BITS_NX90_mtgy_op_b111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b112 */
/* => MWMM operand B register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b112  0x000017C0U
#define Adr_NX90_mtgy_mtgy_op_b112 0xFF0837C0U
#define Adr_NX90_mtgy_op_b112      0xFF0837C0U
#define DFLT_VAL_NX90_mtgy_op_b112 0x00000000U

#define MSK_NX90_mtgy_op_b112_val         0xffffffffU
#define SRT_NX90_mtgy_op_b112_val         0
#define DFLT_VAL_NX90_mtgy_op_b112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b112': */
#define MSK_USED_BITS_NX90_mtgy_op_b112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b113 */
/* => MWMM operand B register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b113  0x000017C4U
#define Adr_NX90_mtgy_mtgy_op_b113 0xFF0837C4U
#define Adr_NX90_mtgy_op_b113      0xFF0837C4U
#define DFLT_VAL_NX90_mtgy_op_b113 0x00000000U

#define MSK_NX90_mtgy_op_b113_val         0xffffffffU
#define SRT_NX90_mtgy_op_b113_val         0
#define DFLT_VAL_NX90_mtgy_op_b113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b113': */
#define MSK_USED_BITS_NX90_mtgy_op_b113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b114 */
/* => MWMM operand B register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b114  0x000017C8U
#define Adr_NX90_mtgy_mtgy_op_b114 0xFF0837C8U
#define Adr_NX90_mtgy_op_b114      0xFF0837C8U
#define DFLT_VAL_NX90_mtgy_op_b114 0x00000000U

#define MSK_NX90_mtgy_op_b114_val         0xffffffffU
#define SRT_NX90_mtgy_op_b114_val         0
#define DFLT_VAL_NX90_mtgy_op_b114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b114': */
#define MSK_USED_BITS_NX90_mtgy_op_b114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b115 */
/* => MWMM operand B register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b115  0x000017CCU
#define Adr_NX90_mtgy_mtgy_op_b115 0xFF0837CCU
#define Adr_NX90_mtgy_op_b115      0xFF0837CCU
#define DFLT_VAL_NX90_mtgy_op_b115 0x00000000U

#define MSK_NX90_mtgy_op_b115_val         0xffffffffU
#define SRT_NX90_mtgy_op_b115_val         0
#define DFLT_VAL_NX90_mtgy_op_b115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b115': */
#define MSK_USED_BITS_NX90_mtgy_op_b115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b116 */
/* => MWMM operand B register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b116  0x000017D0U
#define Adr_NX90_mtgy_mtgy_op_b116 0xFF0837D0U
#define Adr_NX90_mtgy_op_b116      0xFF0837D0U
#define DFLT_VAL_NX90_mtgy_op_b116 0x00000000U

#define MSK_NX90_mtgy_op_b116_val         0xffffffffU
#define SRT_NX90_mtgy_op_b116_val         0
#define DFLT_VAL_NX90_mtgy_op_b116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b116': */
#define MSK_USED_BITS_NX90_mtgy_op_b116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b117 */
/* => MWMM operand B register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b117  0x000017D4U
#define Adr_NX90_mtgy_mtgy_op_b117 0xFF0837D4U
#define Adr_NX90_mtgy_op_b117      0xFF0837D4U
#define DFLT_VAL_NX90_mtgy_op_b117 0x00000000U

#define MSK_NX90_mtgy_op_b117_val         0xffffffffU
#define SRT_NX90_mtgy_op_b117_val         0
#define DFLT_VAL_NX90_mtgy_op_b117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b117': */
#define MSK_USED_BITS_NX90_mtgy_op_b117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b118 */
/* => MWMM operand B register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b118  0x000017D8U
#define Adr_NX90_mtgy_mtgy_op_b118 0xFF0837D8U
#define Adr_NX90_mtgy_op_b118      0xFF0837D8U
#define DFLT_VAL_NX90_mtgy_op_b118 0x00000000U

#define MSK_NX90_mtgy_op_b118_val         0xffffffffU
#define SRT_NX90_mtgy_op_b118_val         0
#define DFLT_VAL_NX90_mtgy_op_b118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b118': */
#define MSK_USED_BITS_NX90_mtgy_op_b118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b119 */
/* => MWMM operand B register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b119  0x000017DCU
#define Adr_NX90_mtgy_mtgy_op_b119 0xFF0837DCU
#define Adr_NX90_mtgy_op_b119      0xFF0837DCU
#define DFLT_VAL_NX90_mtgy_op_b119 0x00000000U

#define MSK_NX90_mtgy_op_b119_val         0xffffffffU
#define SRT_NX90_mtgy_op_b119_val         0
#define DFLT_VAL_NX90_mtgy_op_b119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b119': */
#define MSK_USED_BITS_NX90_mtgy_op_b119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b120 */
/* => MWMM operand B register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b120  0x000017E0U
#define Adr_NX90_mtgy_mtgy_op_b120 0xFF0837E0U
#define Adr_NX90_mtgy_op_b120      0xFF0837E0U
#define DFLT_VAL_NX90_mtgy_op_b120 0x00000000U

#define MSK_NX90_mtgy_op_b120_val         0xffffffffU
#define SRT_NX90_mtgy_op_b120_val         0
#define DFLT_VAL_NX90_mtgy_op_b120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b120': */
#define MSK_USED_BITS_NX90_mtgy_op_b120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b121 */
/* => MWMM operand B register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b121  0x000017E4U
#define Adr_NX90_mtgy_mtgy_op_b121 0xFF0837E4U
#define Adr_NX90_mtgy_op_b121      0xFF0837E4U
#define DFLT_VAL_NX90_mtgy_op_b121 0x00000000U

#define MSK_NX90_mtgy_op_b121_val         0xffffffffU
#define SRT_NX90_mtgy_op_b121_val         0
#define DFLT_VAL_NX90_mtgy_op_b121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b121': */
#define MSK_USED_BITS_NX90_mtgy_op_b121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b122 */
/* => MWMM operand B register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b122  0x000017E8U
#define Adr_NX90_mtgy_mtgy_op_b122 0xFF0837E8U
#define Adr_NX90_mtgy_op_b122      0xFF0837E8U
#define DFLT_VAL_NX90_mtgy_op_b122 0x00000000U

#define MSK_NX90_mtgy_op_b122_val         0xffffffffU
#define SRT_NX90_mtgy_op_b122_val         0
#define DFLT_VAL_NX90_mtgy_op_b122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b122': */
#define MSK_USED_BITS_NX90_mtgy_op_b122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b123 */
/* => MWMM operand B register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b123  0x000017ECU
#define Adr_NX90_mtgy_mtgy_op_b123 0xFF0837ECU
#define Adr_NX90_mtgy_op_b123      0xFF0837ECU
#define DFLT_VAL_NX90_mtgy_op_b123 0x00000000U

#define MSK_NX90_mtgy_op_b123_val         0xffffffffU
#define SRT_NX90_mtgy_op_b123_val         0
#define DFLT_VAL_NX90_mtgy_op_b123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b123': */
#define MSK_USED_BITS_NX90_mtgy_op_b123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b124 */
/* => MWMM operand B register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b124  0x000017F0U
#define Adr_NX90_mtgy_mtgy_op_b124 0xFF0837F0U
#define Adr_NX90_mtgy_op_b124      0xFF0837F0U
#define DFLT_VAL_NX90_mtgy_op_b124 0x00000000U

#define MSK_NX90_mtgy_op_b124_val         0xffffffffU
#define SRT_NX90_mtgy_op_b124_val         0
#define DFLT_VAL_NX90_mtgy_op_b124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b124': */
#define MSK_USED_BITS_NX90_mtgy_op_b124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b125 */
/* => MWMM operand B register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b125  0x000017F4U
#define Adr_NX90_mtgy_mtgy_op_b125 0xFF0837F4U
#define Adr_NX90_mtgy_op_b125      0xFF0837F4U
#define DFLT_VAL_NX90_mtgy_op_b125 0x00000000U

#define MSK_NX90_mtgy_op_b125_val         0xffffffffU
#define SRT_NX90_mtgy_op_b125_val         0
#define DFLT_VAL_NX90_mtgy_op_b125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b125': */
#define MSK_USED_BITS_NX90_mtgy_op_b125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b126 */
/* => MWMM operand B register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b126  0x000017F8U
#define Adr_NX90_mtgy_mtgy_op_b126 0xFF0837F8U
#define Adr_NX90_mtgy_op_b126      0xFF0837F8U
#define DFLT_VAL_NX90_mtgy_op_b126 0x00000000U

#define MSK_NX90_mtgy_op_b126_val         0xffffffffU
#define SRT_NX90_mtgy_op_b126_val         0
#define DFLT_VAL_NX90_mtgy_op_b126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b126': */
#define MSK_USED_BITS_NX90_mtgy_op_b126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b127 */
/* => MWMM operand B register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b127  0x000017FCU
#define Adr_NX90_mtgy_mtgy_op_b127 0xFF0837FCU
#define Adr_NX90_mtgy_op_b127      0xFF0837FCU
#define DFLT_VAL_NX90_mtgy_op_b127 0x00000000U

#define MSK_NX90_mtgy_op_b127_val         0xffffffffU
#define SRT_NX90_mtgy_op_b127_val         0
#define DFLT_VAL_NX90_mtgy_op_b127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_b127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_b127': */
#define MSK_USED_BITS_NX90_mtgy_op_b127 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a0 */
/* => MWMM operand A register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a0  0x00001800U
#define Adr_NX90_mtgy_mtgy_op_a0 0xFF083800U
#define Adr_NX90_mtgy_op_a0      0xFF083800U
#define DFLT_VAL_NX90_mtgy_op_a0 0x00000000U

#define MSK_NX90_mtgy_op_a0_val         0xffffffffU
#define SRT_NX90_mtgy_op_a0_val         0
#define DFLT_VAL_NX90_mtgy_op_a0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a0': */
#define MSK_USED_BITS_NX90_mtgy_op_a0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a1 */
/* => MWMM operand A register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a1  0x00001804U
#define Adr_NX90_mtgy_mtgy_op_a1 0xFF083804U
#define Adr_NX90_mtgy_op_a1      0xFF083804U
#define DFLT_VAL_NX90_mtgy_op_a1 0x00000000U

#define MSK_NX90_mtgy_op_a1_val         0xffffffffU
#define SRT_NX90_mtgy_op_a1_val         0
#define DFLT_VAL_NX90_mtgy_op_a1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a1': */
#define MSK_USED_BITS_NX90_mtgy_op_a1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a2 */
/* => MWMM operand A register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a2  0x00001808U
#define Adr_NX90_mtgy_mtgy_op_a2 0xFF083808U
#define Adr_NX90_mtgy_op_a2      0xFF083808U
#define DFLT_VAL_NX90_mtgy_op_a2 0x00000000U

#define MSK_NX90_mtgy_op_a2_val         0xffffffffU
#define SRT_NX90_mtgy_op_a2_val         0
#define DFLT_VAL_NX90_mtgy_op_a2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a2': */
#define MSK_USED_BITS_NX90_mtgy_op_a2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a3 */
/* => MWMM operand A register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a3  0x0000180CU
#define Adr_NX90_mtgy_mtgy_op_a3 0xFF08380CU
#define Adr_NX90_mtgy_op_a3      0xFF08380CU
#define DFLT_VAL_NX90_mtgy_op_a3 0x00000000U

#define MSK_NX90_mtgy_op_a3_val         0xffffffffU
#define SRT_NX90_mtgy_op_a3_val         0
#define DFLT_VAL_NX90_mtgy_op_a3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a3': */
#define MSK_USED_BITS_NX90_mtgy_op_a3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a4 */
/* => MWMM operand A register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a4  0x00001810U
#define Adr_NX90_mtgy_mtgy_op_a4 0xFF083810U
#define Adr_NX90_mtgy_op_a4      0xFF083810U
#define DFLT_VAL_NX90_mtgy_op_a4 0x00000000U

#define MSK_NX90_mtgy_op_a4_val         0xffffffffU
#define SRT_NX90_mtgy_op_a4_val         0
#define DFLT_VAL_NX90_mtgy_op_a4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a4': */
#define MSK_USED_BITS_NX90_mtgy_op_a4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a5 */
/* => MWMM operand A register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a5  0x00001814U
#define Adr_NX90_mtgy_mtgy_op_a5 0xFF083814U
#define Adr_NX90_mtgy_op_a5      0xFF083814U
#define DFLT_VAL_NX90_mtgy_op_a5 0x00000000U

#define MSK_NX90_mtgy_op_a5_val         0xffffffffU
#define SRT_NX90_mtgy_op_a5_val         0
#define DFLT_VAL_NX90_mtgy_op_a5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a5': */
#define MSK_USED_BITS_NX90_mtgy_op_a5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a6 */
/* => MWMM operand A register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a6  0x00001818U
#define Adr_NX90_mtgy_mtgy_op_a6 0xFF083818U
#define Adr_NX90_mtgy_op_a6      0xFF083818U
#define DFLT_VAL_NX90_mtgy_op_a6 0x00000000U

#define MSK_NX90_mtgy_op_a6_val         0xffffffffU
#define SRT_NX90_mtgy_op_a6_val         0
#define DFLT_VAL_NX90_mtgy_op_a6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a6': */
#define MSK_USED_BITS_NX90_mtgy_op_a6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a7 */
/* => MWMM operand A register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a7  0x0000181CU
#define Adr_NX90_mtgy_mtgy_op_a7 0xFF08381CU
#define Adr_NX90_mtgy_op_a7      0xFF08381CU
#define DFLT_VAL_NX90_mtgy_op_a7 0x00000000U

#define MSK_NX90_mtgy_op_a7_val         0xffffffffU
#define SRT_NX90_mtgy_op_a7_val         0
#define DFLT_VAL_NX90_mtgy_op_a7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a7': */
#define MSK_USED_BITS_NX90_mtgy_op_a7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a8 */
/* => MWMM operand A register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a8  0x00001820U
#define Adr_NX90_mtgy_mtgy_op_a8 0xFF083820U
#define Adr_NX90_mtgy_op_a8      0xFF083820U
#define DFLT_VAL_NX90_mtgy_op_a8 0x00000000U

#define MSK_NX90_mtgy_op_a8_val         0xffffffffU
#define SRT_NX90_mtgy_op_a8_val         0
#define DFLT_VAL_NX90_mtgy_op_a8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a8': */
#define MSK_USED_BITS_NX90_mtgy_op_a8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a9 */
/* => MWMM operand A register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a9  0x00001824U
#define Adr_NX90_mtgy_mtgy_op_a9 0xFF083824U
#define Adr_NX90_mtgy_op_a9      0xFF083824U
#define DFLT_VAL_NX90_mtgy_op_a9 0x00000000U

#define MSK_NX90_mtgy_op_a9_val         0xffffffffU
#define SRT_NX90_mtgy_op_a9_val         0
#define DFLT_VAL_NX90_mtgy_op_a9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a9': */
#define MSK_USED_BITS_NX90_mtgy_op_a9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a10 */
/* => MWMM operand A register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a10  0x00001828U
#define Adr_NX90_mtgy_mtgy_op_a10 0xFF083828U
#define Adr_NX90_mtgy_op_a10      0xFF083828U
#define DFLT_VAL_NX90_mtgy_op_a10 0x00000000U

#define MSK_NX90_mtgy_op_a10_val         0xffffffffU
#define SRT_NX90_mtgy_op_a10_val         0
#define DFLT_VAL_NX90_mtgy_op_a10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a10': */
#define MSK_USED_BITS_NX90_mtgy_op_a10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a11 */
/* => MWMM operand A register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a11  0x0000182CU
#define Adr_NX90_mtgy_mtgy_op_a11 0xFF08382CU
#define Adr_NX90_mtgy_op_a11      0xFF08382CU
#define DFLT_VAL_NX90_mtgy_op_a11 0x00000000U

#define MSK_NX90_mtgy_op_a11_val         0xffffffffU
#define SRT_NX90_mtgy_op_a11_val         0
#define DFLT_VAL_NX90_mtgy_op_a11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a11': */
#define MSK_USED_BITS_NX90_mtgy_op_a11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a12 */
/* => MWMM operand A register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a12  0x00001830U
#define Adr_NX90_mtgy_mtgy_op_a12 0xFF083830U
#define Adr_NX90_mtgy_op_a12      0xFF083830U
#define DFLT_VAL_NX90_mtgy_op_a12 0x00000000U

#define MSK_NX90_mtgy_op_a12_val         0xffffffffU
#define SRT_NX90_mtgy_op_a12_val         0
#define DFLT_VAL_NX90_mtgy_op_a12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a12': */
#define MSK_USED_BITS_NX90_mtgy_op_a12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a13 */
/* => MWMM operand A register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a13  0x00001834U
#define Adr_NX90_mtgy_mtgy_op_a13 0xFF083834U
#define Adr_NX90_mtgy_op_a13      0xFF083834U
#define DFLT_VAL_NX90_mtgy_op_a13 0x00000000U

#define MSK_NX90_mtgy_op_a13_val         0xffffffffU
#define SRT_NX90_mtgy_op_a13_val         0
#define DFLT_VAL_NX90_mtgy_op_a13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a13': */
#define MSK_USED_BITS_NX90_mtgy_op_a13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a14 */
/* => MWMM operand A register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a14  0x00001838U
#define Adr_NX90_mtgy_mtgy_op_a14 0xFF083838U
#define Adr_NX90_mtgy_op_a14      0xFF083838U
#define DFLT_VAL_NX90_mtgy_op_a14 0x00000000U

#define MSK_NX90_mtgy_op_a14_val         0xffffffffU
#define SRT_NX90_mtgy_op_a14_val         0
#define DFLT_VAL_NX90_mtgy_op_a14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a14': */
#define MSK_USED_BITS_NX90_mtgy_op_a14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a15 */
/* => MWMM operand A register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a15  0x0000183CU
#define Adr_NX90_mtgy_mtgy_op_a15 0xFF08383CU
#define Adr_NX90_mtgy_op_a15      0xFF08383CU
#define DFLT_VAL_NX90_mtgy_op_a15 0x00000000U

#define MSK_NX90_mtgy_op_a15_val         0xffffffffU
#define SRT_NX90_mtgy_op_a15_val         0
#define DFLT_VAL_NX90_mtgy_op_a15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a15': */
#define MSK_USED_BITS_NX90_mtgy_op_a15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a16 */
/* => MWMM operand A register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a16  0x00001840U
#define Adr_NX90_mtgy_mtgy_op_a16 0xFF083840U
#define Adr_NX90_mtgy_op_a16      0xFF083840U
#define DFLT_VAL_NX90_mtgy_op_a16 0x00000000U

#define MSK_NX90_mtgy_op_a16_val         0xffffffffU
#define SRT_NX90_mtgy_op_a16_val         0
#define DFLT_VAL_NX90_mtgy_op_a16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a16': */
#define MSK_USED_BITS_NX90_mtgy_op_a16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a17 */
/* => MWMM operand A register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a17  0x00001844U
#define Adr_NX90_mtgy_mtgy_op_a17 0xFF083844U
#define Adr_NX90_mtgy_op_a17      0xFF083844U
#define DFLT_VAL_NX90_mtgy_op_a17 0x00000000U

#define MSK_NX90_mtgy_op_a17_val         0xffffffffU
#define SRT_NX90_mtgy_op_a17_val         0
#define DFLT_VAL_NX90_mtgy_op_a17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a17': */
#define MSK_USED_BITS_NX90_mtgy_op_a17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a18 */
/* => MWMM operand A register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a18  0x00001848U
#define Adr_NX90_mtgy_mtgy_op_a18 0xFF083848U
#define Adr_NX90_mtgy_op_a18      0xFF083848U
#define DFLT_VAL_NX90_mtgy_op_a18 0x00000000U

#define MSK_NX90_mtgy_op_a18_val         0xffffffffU
#define SRT_NX90_mtgy_op_a18_val         0
#define DFLT_VAL_NX90_mtgy_op_a18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a18': */
#define MSK_USED_BITS_NX90_mtgy_op_a18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a19 */
/* => MWMM operand A register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a19  0x0000184CU
#define Adr_NX90_mtgy_mtgy_op_a19 0xFF08384CU
#define Adr_NX90_mtgy_op_a19      0xFF08384CU
#define DFLT_VAL_NX90_mtgy_op_a19 0x00000000U

#define MSK_NX90_mtgy_op_a19_val         0xffffffffU
#define SRT_NX90_mtgy_op_a19_val         0
#define DFLT_VAL_NX90_mtgy_op_a19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a19': */
#define MSK_USED_BITS_NX90_mtgy_op_a19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a20 */
/* => MWMM operand A register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a20  0x00001850U
#define Adr_NX90_mtgy_mtgy_op_a20 0xFF083850U
#define Adr_NX90_mtgy_op_a20      0xFF083850U
#define DFLT_VAL_NX90_mtgy_op_a20 0x00000000U

#define MSK_NX90_mtgy_op_a20_val         0xffffffffU
#define SRT_NX90_mtgy_op_a20_val         0
#define DFLT_VAL_NX90_mtgy_op_a20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a20': */
#define MSK_USED_BITS_NX90_mtgy_op_a20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a21 */
/* => MWMM operand A register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a21  0x00001854U
#define Adr_NX90_mtgy_mtgy_op_a21 0xFF083854U
#define Adr_NX90_mtgy_op_a21      0xFF083854U
#define DFLT_VAL_NX90_mtgy_op_a21 0x00000000U

#define MSK_NX90_mtgy_op_a21_val         0xffffffffU
#define SRT_NX90_mtgy_op_a21_val         0
#define DFLT_VAL_NX90_mtgy_op_a21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a21': */
#define MSK_USED_BITS_NX90_mtgy_op_a21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a22 */
/* => MWMM operand A register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a22  0x00001858U
#define Adr_NX90_mtgy_mtgy_op_a22 0xFF083858U
#define Adr_NX90_mtgy_op_a22      0xFF083858U
#define DFLT_VAL_NX90_mtgy_op_a22 0x00000000U

#define MSK_NX90_mtgy_op_a22_val         0xffffffffU
#define SRT_NX90_mtgy_op_a22_val         0
#define DFLT_VAL_NX90_mtgy_op_a22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a22': */
#define MSK_USED_BITS_NX90_mtgy_op_a22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a23 */
/* => MWMM operand A register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a23  0x0000185CU
#define Adr_NX90_mtgy_mtgy_op_a23 0xFF08385CU
#define Adr_NX90_mtgy_op_a23      0xFF08385CU
#define DFLT_VAL_NX90_mtgy_op_a23 0x00000000U

#define MSK_NX90_mtgy_op_a23_val         0xffffffffU
#define SRT_NX90_mtgy_op_a23_val         0
#define DFLT_VAL_NX90_mtgy_op_a23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a23': */
#define MSK_USED_BITS_NX90_mtgy_op_a23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a24 */
/* => MWMM operand A register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a24  0x00001860U
#define Adr_NX90_mtgy_mtgy_op_a24 0xFF083860U
#define Adr_NX90_mtgy_op_a24      0xFF083860U
#define DFLT_VAL_NX90_mtgy_op_a24 0x00000000U

#define MSK_NX90_mtgy_op_a24_val         0xffffffffU
#define SRT_NX90_mtgy_op_a24_val         0
#define DFLT_VAL_NX90_mtgy_op_a24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a24': */
#define MSK_USED_BITS_NX90_mtgy_op_a24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a25 */
/* => MWMM operand A register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a25  0x00001864U
#define Adr_NX90_mtgy_mtgy_op_a25 0xFF083864U
#define Adr_NX90_mtgy_op_a25      0xFF083864U
#define DFLT_VAL_NX90_mtgy_op_a25 0x00000000U

#define MSK_NX90_mtgy_op_a25_val         0xffffffffU
#define SRT_NX90_mtgy_op_a25_val         0
#define DFLT_VAL_NX90_mtgy_op_a25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a25': */
#define MSK_USED_BITS_NX90_mtgy_op_a25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a26 */
/* => MWMM operand A register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a26  0x00001868U
#define Adr_NX90_mtgy_mtgy_op_a26 0xFF083868U
#define Adr_NX90_mtgy_op_a26      0xFF083868U
#define DFLT_VAL_NX90_mtgy_op_a26 0x00000000U

#define MSK_NX90_mtgy_op_a26_val         0xffffffffU
#define SRT_NX90_mtgy_op_a26_val         0
#define DFLT_VAL_NX90_mtgy_op_a26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a26': */
#define MSK_USED_BITS_NX90_mtgy_op_a26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a27 */
/* => MWMM operand A register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a27  0x0000186CU
#define Adr_NX90_mtgy_mtgy_op_a27 0xFF08386CU
#define Adr_NX90_mtgy_op_a27      0xFF08386CU
#define DFLT_VAL_NX90_mtgy_op_a27 0x00000000U

#define MSK_NX90_mtgy_op_a27_val         0xffffffffU
#define SRT_NX90_mtgy_op_a27_val         0
#define DFLT_VAL_NX90_mtgy_op_a27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a27': */
#define MSK_USED_BITS_NX90_mtgy_op_a27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a28 */
/* => MWMM operand A register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a28  0x00001870U
#define Adr_NX90_mtgy_mtgy_op_a28 0xFF083870U
#define Adr_NX90_mtgy_op_a28      0xFF083870U
#define DFLT_VAL_NX90_mtgy_op_a28 0x00000000U

#define MSK_NX90_mtgy_op_a28_val         0xffffffffU
#define SRT_NX90_mtgy_op_a28_val         0
#define DFLT_VAL_NX90_mtgy_op_a28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a28': */
#define MSK_USED_BITS_NX90_mtgy_op_a28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a29 */
/* => MWMM operand A register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a29  0x00001874U
#define Adr_NX90_mtgy_mtgy_op_a29 0xFF083874U
#define Adr_NX90_mtgy_op_a29      0xFF083874U
#define DFLT_VAL_NX90_mtgy_op_a29 0x00000000U

#define MSK_NX90_mtgy_op_a29_val         0xffffffffU
#define SRT_NX90_mtgy_op_a29_val         0
#define DFLT_VAL_NX90_mtgy_op_a29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a29': */
#define MSK_USED_BITS_NX90_mtgy_op_a29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a30 */
/* => MWMM operand A register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a30  0x00001878U
#define Adr_NX90_mtgy_mtgy_op_a30 0xFF083878U
#define Adr_NX90_mtgy_op_a30      0xFF083878U
#define DFLT_VAL_NX90_mtgy_op_a30 0x00000000U

#define MSK_NX90_mtgy_op_a30_val         0xffffffffU
#define SRT_NX90_mtgy_op_a30_val         0
#define DFLT_VAL_NX90_mtgy_op_a30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a30': */
#define MSK_USED_BITS_NX90_mtgy_op_a30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a31 */
/* => MWMM operand A register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a31  0x0000187CU
#define Adr_NX90_mtgy_mtgy_op_a31 0xFF08387CU
#define Adr_NX90_mtgy_op_a31      0xFF08387CU
#define DFLT_VAL_NX90_mtgy_op_a31 0x00000000U

#define MSK_NX90_mtgy_op_a31_val         0xffffffffU
#define SRT_NX90_mtgy_op_a31_val         0
#define DFLT_VAL_NX90_mtgy_op_a31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a31': */
#define MSK_USED_BITS_NX90_mtgy_op_a31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a32 */
/* => MWMM operand A register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a32  0x00001880U
#define Adr_NX90_mtgy_mtgy_op_a32 0xFF083880U
#define Adr_NX90_mtgy_op_a32      0xFF083880U
#define DFLT_VAL_NX90_mtgy_op_a32 0x00000000U

#define MSK_NX90_mtgy_op_a32_val         0xffffffffU
#define SRT_NX90_mtgy_op_a32_val         0
#define DFLT_VAL_NX90_mtgy_op_a32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a32': */
#define MSK_USED_BITS_NX90_mtgy_op_a32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a33 */
/* => MWMM operand A register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a33  0x00001884U
#define Adr_NX90_mtgy_mtgy_op_a33 0xFF083884U
#define Adr_NX90_mtgy_op_a33      0xFF083884U
#define DFLT_VAL_NX90_mtgy_op_a33 0x00000000U

#define MSK_NX90_mtgy_op_a33_val         0xffffffffU
#define SRT_NX90_mtgy_op_a33_val         0
#define DFLT_VAL_NX90_mtgy_op_a33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a33': */
#define MSK_USED_BITS_NX90_mtgy_op_a33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a34 */
/* => MWMM operand A register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a34  0x00001888U
#define Adr_NX90_mtgy_mtgy_op_a34 0xFF083888U
#define Adr_NX90_mtgy_op_a34      0xFF083888U
#define DFLT_VAL_NX90_mtgy_op_a34 0x00000000U

#define MSK_NX90_mtgy_op_a34_val         0xffffffffU
#define SRT_NX90_mtgy_op_a34_val         0
#define DFLT_VAL_NX90_mtgy_op_a34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a34': */
#define MSK_USED_BITS_NX90_mtgy_op_a34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a35 */
/* => MWMM operand A register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a35  0x0000188CU
#define Adr_NX90_mtgy_mtgy_op_a35 0xFF08388CU
#define Adr_NX90_mtgy_op_a35      0xFF08388CU
#define DFLT_VAL_NX90_mtgy_op_a35 0x00000000U

#define MSK_NX90_mtgy_op_a35_val         0xffffffffU
#define SRT_NX90_mtgy_op_a35_val         0
#define DFLT_VAL_NX90_mtgy_op_a35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a35': */
#define MSK_USED_BITS_NX90_mtgy_op_a35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a36 */
/* => MWMM operand A register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a36  0x00001890U
#define Adr_NX90_mtgy_mtgy_op_a36 0xFF083890U
#define Adr_NX90_mtgy_op_a36      0xFF083890U
#define DFLT_VAL_NX90_mtgy_op_a36 0x00000000U

#define MSK_NX90_mtgy_op_a36_val         0xffffffffU
#define SRT_NX90_mtgy_op_a36_val         0
#define DFLT_VAL_NX90_mtgy_op_a36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a36': */
#define MSK_USED_BITS_NX90_mtgy_op_a36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a37 */
/* => MWMM operand A register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a37  0x00001894U
#define Adr_NX90_mtgy_mtgy_op_a37 0xFF083894U
#define Adr_NX90_mtgy_op_a37      0xFF083894U
#define DFLT_VAL_NX90_mtgy_op_a37 0x00000000U

#define MSK_NX90_mtgy_op_a37_val         0xffffffffU
#define SRT_NX90_mtgy_op_a37_val         0
#define DFLT_VAL_NX90_mtgy_op_a37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a37': */
#define MSK_USED_BITS_NX90_mtgy_op_a37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a38 */
/* => MWMM operand A register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a38  0x00001898U
#define Adr_NX90_mtgy_mtgy_op_a38 0xFF083898U
#define Adr_NX90_mtgy_op_a38      0xFF083898U
#define DFLT_VAL_NX90_mtgy_op_a38 0x00000000U

#define MSK_NX90_mtgy_op_a38_val         0xffffffffU
#define SRT_NX90_mtgy_op_a38_val         0
#define DFLT_VAL_NX90_mtgy_op_a38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a38': */
#define MSK_USED_BITS_NX90_mtgy_op_a38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a39 */
/* => MWMM operand A register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a39  0x0000189CU
#define Adr_NX90_mtgy_mtgy_op_a39 0xFF08389CU
#define Adr_NX90_mtgy_op_a39      0xFF08389CU
#define DFLT_VAL_NX90_mtgy_op_a39 0x00000000U

#define MSK_NX90_mtgy_op_a39_val         0xffffffffU
#define SRT_NX90_mtgy_op_a39_val         0
#define DFLT_VAL_NX90_mtgy_op_a39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a39': */
#define MSK_USED_BITS_NX90_mtgy_op_a39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a40 */
/* => MWMM operand A register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a40  0x000018A0U
#define Adr_NX90_mtgy_mtgy_op_a40 0xFF0838A0U
#define Adr_NX90_mtgy_op_a40      0xFF0838A0U
#define DFLT_VAL_NX90_mtgy_op_a40 0x00000000U

#define MSK_NX90_mtgy_op_a40_val         0xffffffffU
#define SRT_NX90_mtgy_op_a40_val         0
#define DFLT_VAL_NX90_mtgy_op_a40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a40': */
#define MSK_USED_BITS_NX90_mtgy_op_a40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a41 */
/* => MWMM operand A register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a41  0x000018A4U
#define Adr_NX90_mtgy_mtgy_op_a41 0xFF0838A4U
#define Adr_NX90_mtgy_op_a41      0xFF0838A4U
#define DFLT_VAL_NX90_mtgy_op_a41 0x00000000U

#define MSK_NX90_mtgy_op_a41_val         0xffffffffU
#define SRT_NX90_mtgy_op_a41_val         0
#define DFLT_VAL_NX90_mtgy_op_a41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a41': */
#define MSK_USED_BITS_NX90_mtgy_op_a41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a42 */
/* => MWMM operand A register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a42  0x000018A8U
#define Adr_NX90_mtgy_mtgy_op_a42 0xFF0838A8U
#define Adr_NX90_mtgy_op_a42      0xFF0838A8U
#define DFLT_VAL_NX90_mtgy_op_a42 0x00000000U

#define MSK_NX90_mtgy_op_a42_val         0xffffffffU
#define SRT_NX90_mtgy_op_a42_val         0
#define DFLT_VAL_NX90_mtgy_op_a42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a42': */
#define MSK_USED_BITS_NX90_mtgy_op_a42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a43 */
/* => MWMM operand A register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a43  0x000018ACU
#define Adr_NX90_mtgy_mtgy_op_a43 0xFF0838ACU
#define Adr_NX90_mtgy_op_a43      0xFF0838ACU
#define DFLT_VAL_NX90_mtgy_op_a43 0x00000000U

#define MSK_NX90_mtgy_op_a43_val         0xffffffffU
#define SRT_NX90_mtgy_op_a43_val         0
#define DFLT_VAL_NX90_mtgy_op_a43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a43': */
#define MSK_USED_BITS_NX90_mtgy_op_a43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a44 */
/* => MWMM operand A register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a44  0x000018B0U
#define Adr_NX90_mtgy_mtgy_op_a44 0xFF0838B0U
#define Adr_NX90_mtgy_op_a44      0xFF0838B0U
#define DFLT_VAL_NX90_mtgy_op_a44 0x00000000U

#define MSK_NX90_mtgy_op_a44_val         0xffffffffU
#define SRT_NX90_mtgy_op_a44_val         0
#define DFLT_VAL_NX90_mtgy_op_a44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a44': */
#define MSK_USED_BITS_NX90_mtgy_op_a44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a45 */
/* => MWMM operand A register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a45  0x000018B4U
#define Adr_NX90_mtgy_mtgy_op_a45 0xFF0838B4U
#define Adr_NX90_mtgy_op_a45      0xFF0838B4U
#define DFLT_VAL_NX90_mtgy_op_a45 0x00000000U

#define MSK_NX90_mtgy_op_a45_val         0xffffffffU
#define SRT_NX90_mtgy_op_a45_val         0
#define DFLT_VAL_NX90_mtgy_op_a45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a45': */
#define MSK_USED_BITS_NX90_mtgy_op_a45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a46 */
/* => MWMM operand A register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a46  0x000018B8U
#define Adr_NX90_mtgy_mtgy_op_a46 0xFF0838B8U
#define Adr_NX90_mtgy_op_a46      0xFF0838B8U
#define DFLT_VAL_NX90_mtgy_op_a46 0x00000000U

#define MSK_NX90_mtgy_op_a46_val         0xffffffffU
#define SRT_NX90_mtgy_op_a46_val         0
#define DFLT_VAL_NX90_mtgy_op_a46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a46': */
#define MSK_USED_BITS_NX90_mtgy_op_a46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a47 */
/* => MWMM operand A register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a47  0x000018BCU
#define Adr_NX90_mtgy_mtgy_op_a47 0xFF0838BCU
#define Adr_NX90_mtgy_op_a47      0xFF0838BCU
#define DFLT_VAL_NX90_mtgy_op_a47 0x00000000U

#define MSK_NX90_mtgy_op_a47_val         0xffffffffU
#define SRT_NX90_mtgy_op_a47_val         0
#define DFLT_VAL_NX90_mtgy_op_a47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a47': */
#define MSK_USED_BITS_NX90_mtgy_op_a47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a48 */
/* => MWMM operand A register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a48  0x000018C0U
#define Adr_NX90_mtgy_mtgy_op_a48 0xFF0838C0U
#define Adr_NX90_mtgy_op_a48      0xFF0838C0U
#define DFLT_VAL_NX90_mtgy_op_a48 0x00000000U

#define MSK_NX90_mtgy_op_a48_val         0xffffffffU
#define SRT_NX90_mtgy_op_a48_val         0
#define DFLT_VAL_NX90_mtgy_op_a48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a48': */
#define MSK_USED_BITS_NX90_mtgy_op_a48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a49 */
/* => MWMM operand A register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a49  0x000018C4U
#define Adr_NX90_mtgy_mtgy_op_a49 0xFF0838C4U
#define Adr_NX90_mtgy_op_a49      0xFF0838C4U
#define DFLT_VAL_NX90_mtgy_op_a49 0x00000000U

#define MSK_NX90_mtgy_op_a49_val         0xffffffffU
#define SRT_NX90_mtgy_op_a49_val         0
#define DFLT_VAL_NX90_mtgy_op_a49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a49': */
#define MSK_USED_BITS_NX90_mtgy_op_a49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a50 */
/* => MWMM operand A register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a50  0x000018C8U
#define Adr_NX90_mtgy_mtgy_op_a50 0xFF0838C8U
#define Adr_NX90_mtgy_op_a50      0xFF0838C8U
#define DFLT_VAL_NX90_mtgy_op_a50 0x00000000U

#define MSK_NX90_mtgy_op_a50_val         0xffffffffU
#define SRT_NX90_mtgy_op_a50_val         0
#define DFLT_VAL_NX90_mtgy_op_a50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a50': */
#define MSK_USED_BITS_NX90_mtgy_op_a50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a51 */
/* => MWMM operand A register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a51  0x000018CCU
#define Adr_NX90_mtgy_mtgy_op_a51 0xFF0838CCU
#define Adr_NX90_mtgy_op_a51      0xFF0838CCU
#define DFLT_VAL_NX90_mtgy_op_a51 0x00000000U

#define MSK_NX90_mtgy_op_a51_val         0xffffffffU
#define SRT_NX90_mtgy_op_a51_val         0
#define DFLT_VAL_NX90_mtgy_op_a51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a51': */
#define MSK_USED_BITS_NX90_mtgy_op_a51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a52 */
/* => MWMM operand A register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a52  0x000018D0U
#define Adr_NX90_mtgy_mtgy_op_a52 0xFF0838D0U
#define Adr_NX90_mtgy_op_a52      0xFF0838D0U
#define DFLT_VAL_NX90_mtgy_op_a52 0x00000000U

#define MSK_NX90_mtgy_op_a52_val         0xffffffffU
#define SRT_NX90_mtgy_op_a52_val         0
#define DFLT_VAL_NX90_mtgy_op_a52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a52': */
#define MSK_USED_BITS_NX90_mtgy_op_a52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a53 */
/* => MWMM operand A register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a53  0x000018D4U
#define Adr_NX90_mtgy_mtgy_op_a53 0xFF0838D4U
#define Adr_NX90_mtgy_op_a53      0xFF0838D4U
#define DFLT_VAL_NX90_mtgy_op_a53 0x00000000U

#define MSK_NX90_mtgy_op_a53_val         0xffffffffU
#define SRT_NX90_mtgy_op_a53_val         0
#define DFLT_VAL_NX90_mtgy_op_a53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a53': */
#define MSK_USED_BITS_NX90_mtgy_op_a53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a54 */
/* => MWMM operand A register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a54  0x000018D8U
#define Adr_NX90_mtgy_mtgy_op_a54 0xFF0838D8U
#define Adr_NX90_mtgy_op_a54      0xFF0838D8U
#define DFLT_VAL_NX90_mtgy_op_a54 0x00000000U

#define MSK_NX90_mtgy_op_a54_val         0xffffffffU
#define SRT_NX90_mtgy_op_a54_val         0
#define DFLT_VAL_NX90_mtgy_op_a54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a54': */
#define MSK_USED_BITS_NX90_mtgy_op_a54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a55 */
/* => MWMM operand A register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a55  0x000018DCU
#define Adr_NX90_mtgy_mtgy_op_a55 0xFF0838DCU
#define Adr_NX90_mtgy_op_a55      0xFF0838DCU
#define DFLT_VAL_NX90_mtgy_op_a55 0x00000000U

#define MSK_NX90_mtgy_op_a55_val         0xffffffffU
#define SRT_NX90_mtgy_op_a55_val         0
#define DFLT_VAL_NX90_mtgy_op_a55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a55': */
#define MSK_USED_BITS_NX90_mtgy_op_a55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a56 */
/* => MWMM operand A register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a56  0x000018E0U
#define Adr_NX90_mtgy_mtgy_op_a56 0xFF0838E0U
#define Adr_NX90_mtgy_op_a56      0xFF0838E0U
#define DFLT_VAL_NX90_mtgy_op_a56 0x00000000U

#define MSK_NX90_mtgy_op_a56_val         0xffffffffU
#define SRT_NX90_mtgy_op_a56_val         0
#define DFLT_VAL_NX90_mtgy_op_a56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a56': */
#define MSK_USED_BITS_NX90_mtgy_op_a56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a57 */
/* => MWMM operand A register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a57  0x000018E4U
#define Adr_NX90_mtgy_mtgy_op_a57 0xFF0838E4U
#define Adr_NX90_mtgy_op_a57      0xFF0838E4U
#define DFLT_VAL_NX90_mtgy_op_a57 0x00000000U

#define MSK_NX90_mtgy_op_a57_val         0xffffffffU
#define SRT_NX90_mtgy_op_a57_val         0
#define DFLT_VAL_NX90_mtgy_op_a57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a57': */
#define MSK_USED_BITS_NX90_mtgy_op_a57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a58 */
/* => MWMM operand A register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a58  0x000018E8U
#define Adr_NX90_mtgy_mtgy_op_a58 0xFF0838E8U
#define Adr_NX90_mtgy_op_a58      0xFF0838E8U
#define DFLT_VAL_NX90_mtgy_op_a58 0x00000000U

#define MSK_NX90_mtgy_op_a58_val         0xffffffffU
#define SRT_NX90_mtgy_op_a58_val         0
#define DFLT_VAL_NX90_mtgy_op_a58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a58': */
#define MSK_USED_BITS_NX90_mtgy_op_a58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a59 */
/* => MWMM operand A register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a59  0x000018ECU
#define Adr_NX90_mtgy_mtgy_op_a59 0xFF0838ECU
#define Adr_NX90_mtgy_op_a59      0xFF0838ECU
#define DFLT_VAL_NX90_mtgy_op_a59 0x00000000U

#define MSK_NX90_mtgy_op_a59_val         0xffffffffU
#define SRT_NX90_mtgy_op_a59_val         0
#define DFLT_VAL_NX90_mtgy_op_a59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a59': */
#define MSK_USED_BITS_NX90_mtgy_op_a59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a60 */
/* => MWMM operand A register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a60  0x000018F0U
#define Adr_NX90_mtgy_mtgy_op_a60 0xFF0838F0U
#define Adr_NX90_mtgy_op_a60      0xFF0838F0U
#define DFLT_VAL_NX90_mtgy_op_a60 0x00000000U

#define MSK_NX90_mtgy_op_a60_val         0xffffffffU
#define SRT_NX90_mtgy_op_a60_val         0
#define DFLT_VAL_NX90_mtgy_op_a60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a60': */
#define MSK_USED_BITS_NX90_mtgy_op_a60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a61 */
/* => MWMM operand A register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a61  0x000018F4U
#define Adr_NX90_mtgy_mtgy_op_a61 0xFF0838F4U
#define Adr_NX90_mtgy_op_a61      0xFF0838F4U
#define DFLT_VAL_NX90_mtgy_op_a61 0x00000000U

#define MSK_NX90_mtgy_op_a61_val         0xffffffffU
#define SRT_NX90_mtgy_op_a61_val         0
#define DFLT_VAL_NX90_mtgy_op_a61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a61': */
#define MSK_USED_BITS_NX90_mtgy_op_a61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a62 */
/* => MWMM operand A register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a62  0x000018F8U
#define Adr_NX90_mtgy_mtgy_op_a62 0xFF0838F8U
#define Adr_NX90_mtgy_op_a62      0xFF0838F8U
#define DFLT_VAL_NX90_mtgy_op_a62 0x00000000U

#define MSK_NX90_mtgy_op_a62_val         0xffffffffU
#define SRT_NX90_mtgy_op_a62_val         0
#define DFLT_VAL_NX90_mtgy_op_a62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a62': */
#define MSK_USED_BITS_NX90_mtgy_op_a62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a63 */
/* => MWMM operand A register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a63  0x000018FCU
#define Adr_NX90_mtgy_mtgy_op_a63 0xFF0838FCU
#define Adr_NX90_mtgy_op_a63      0xFF0838FCU
#define DFLT_VAL_NX90_mtgy_op_a63 0x00000000U

#define MSK_NX90_mtgy_op_a63_val         0xffffffffU
#define SRT_NX90_mtgy_op_a63_val         0
#define DFLT_VAL_NX90_mtgy_op_a63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a63': */
#define MSK_USED_BITS_NX90_mtgy_op_a63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a64 */
/* => MWMM operand A register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a64  0x00001900U
#define Adr_NX90_mtgy_mtgy_op_a64 0xFF083900U
#define Adr_NX90_mtgy_op_a64      0xFF083900U
#define DFLT_VAL_NX90_mtgy_op_a64 0x00000000U

#define MSK_NX90_mtgy_op_a64_val         0xffffffffU
#define SRT_NX90_mtgy_op_a64_val         0
#define DFLT_VAL_NX90_mtgy_op_a64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a64': */
#define MSK_USED_BITS_NX90_mtgy_op_a64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a65 */
/* => MWMM operand A register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a65  0x00001904U
#define Adr_NX90_mtgy_mtgy_op_a65 0xFF083904U
#define Adr_NX90_mtgy_op_a65      0xFF083904U
#define DFLT_VAL_NX90_mtgy_op_a65 0x00000000U

#define MSK_NX90_mtgy_op_a65_val         0xffffffffU
#define SRT_NX90_mtgy_op_a65_val         0
#define DFLT_VAL_NX90_mtgy_op_a65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a65': */
#define MSK_USED_BITS_NX90_mtgy_op_a65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a66 */
/* => MWMM operand A register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a66  0x00001908U
#define Adr_NX90_mtgy_mtgy_op_a66 0xFF083908U
#define Adr_NX90_mtgy_op_a66      0xFF083908U
#define DFLT_VAL_NX90_mtgy_op_a66 0x00000000U

#define MSK_NX90_mtgy_op_a66_val         0xffffffffU
#define SRT_NX90_mtgy_op_a66_val         0
#define DFLT_VAL_NX90_mtgy_op_a66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a66': */
#define MSK_USED_BITS_NX90_mtgy_op_a66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a67 */
/* => MWMM operand A register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a67  0x0000190CU
#define Adr_NX90_mtgy_mtgy_op_a67 0xFF08390CU
#define Adr_NX90_mtgy_op_a67      0xFF08390CU
#define DFLT_VAL_NX90_mtgy_op_a67 0x00000000U

#define MSK_NX90_mtgy_op_a67_val         0xffffffffU
#define SRT_NX90_mtgy_op_a67_val         0
#define DFLT_VAL_NX90_mtgy_op_a67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a67': */
#define MSK_USED_BITS_NX90_mtgy_op_a67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a68 */
/* => MWMM operand A register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a68  0x00001910U
#define Adr_NX90_mtgy_mtgy_op_a68 0xFF083910U
#define Adr_NX90_mtgy_op_a68      0xFF083910U
#define DFLT_VAL_NX90_mtgy_op_a68 0x00000000U

#define MSK_NX90_mtgy_op_a68_val         0xffffffffU
#define SRT_NX90_mtgy_op_a68_val         0
#define DFLT_VAL_NX90_mtgy_op_a68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a68': */
#define MSK_USED_BITS_NX90_mtgy_op_a68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a69 */
/* => MWMM operand A register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a69  0x00001914U
#define Adr_NX90_mtgy_mtgy_op_a69 0xFF083914U
#define Adr_NX90_mtgy_op_a69      0xFF083914U
#define DFLT_VAL_NX90_mtgy_op_a69 0x00000000U

#define MSK_NX90_mtgy_op_a69_val         0xffffffffU
#define SRT_NX90_mtgy_op_a69_val         0
#define DFLT_VAL_NX90_mtgy_op_a69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a69': */
#define MSK_USED_BITS_NX90_mtgy_op_a69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a70 */
/* => MWMM operand A register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a70  0x00001918U
#define Adr_NX90_mtgy_mtgy_op_a70 0xFF083918U
#define Adr_NX90_mtgy_op_a70      0xFF083918U
#define DFLT_VAL_NX90_mtgy_op_a70 0x00000000U

#define MSK_NX90_mtgy_op_a70_val         0xffffffffU
#define SRT_NX90_mtgy_op_a70_val         0
#define DFLT_VAL_NX90_mtgy_op_a70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a70': */
#define MSK_USED_BITS_NX90_mtgy_op_a70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a71 */
/* => MWMM operand A register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a71  0x0000191CU
#define Adr_NX90_mtgy_mtgy_op_a71 0xFF08391CU
#define Adr_NX90_mtgy_op_a71      0xFF08391CU
#define DFLT_VAL_NX90_mtgy_op_a71 0x00000000U

#define MSK_NX90_mtgy_op_a71_val         0xffffffffU
#define SRT_NX90_mtgy_op_a71_val         0
#define DFLT_VAL_NX90_mtgy_op_a71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a71': */
#define MSK_USED_BITS_NX90_mtgy_op_a71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a72 */
/* => MWMM operand A register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a72  0x00001920U
#define Adr_NX90_mtgy_mtgy_op_a72 0xFF083920U
#define Adr_NX90_mtgy_op_a72      0xFF083920U
#define DFLT_VAL_NX90_mtgy_op_a72 0x00000000U

#define MSK_NX90_mtgy_op_a72_val         0xffffffffU
#define SRT_NX90_mtgy_op_a72_val         0
#define DFLT_VAL_NX90_mtgy_op_a72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a72': */
#define MSK_USED_BITS_NX90_mtgy_op_a72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a73 */
/* => MWMM operand A register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a73  0x00001924U
#define Adr_NX90_mtgy_mtgy_op_a73 0xFF083924U
#define Adr_NX90_mtgy_op_a73      0xFF083924U
#define DFLT_VAL_NX90_mtgy_op_a73 0x00000000U

#define MSK_NX90_mtgy_op_a73_val         0xffffffffU
#define SRT_NX90_mtgy_op_a73_val         0
#define DFLT_VAL_NX90_mtgy_op_a73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a73': */
#define MSK_USED_BITS_NX90_mtgy_op_a73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a74 */
/* => MWMM operand A register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a74  0x00001928U
#define Adr_NX90_mtgy_mtgy_op_a74 0xFF083928U
#define Adr_NX90_mtgy_op_a74      0xFF083928U
#define DFLT_VAL_NX90_mtgy_op_a74 0x00000000U

#define MSK_NX90_mtgy_op_a74_val         0xffffffffU
#define SRT_NX90_mtgy_op_a74_val         0
#define DFLT_VAL_NX90_mtgy_op_a74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a74': */
#define MSK_USED_BITS_NX90_mtgy_op_a74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a75 */
/* => MWMM operand A register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a75  0x0000192CU
#define Adr_NX90_mtgy_mtgy_op_a75 0xFF08392CU
#define Adr_NX90_mtgy_op_a75      0xFF08392CU
#define DFLT_VAL_NX90_mtgy_op_a75 0x00000000U

#define MSK_NX90_mtgy_op_a75_val         0xffffffffU
#define SRT_NX90_mtgy_op_a75_val         0
#define DFLT_VAL_NX90_mtgy_op_a75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a75': */
#define MSK_USED_BITS_NX90_mtgy_op_a75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a76 */
/* => MWMM operand A register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a76  0x00001930U
#define Adr_NX90_mtgy_mtgy_op_a76 0xFF083930U
#define Adr_NX90_mtgy_op_a76      0xFF083930U
#define DFLT_VAL_NX90_mtgy_op_a76 0x00000000U

#define MSK_NX90_mtgy_op_a76_val         0xffffffffU
#define SRT_NX90_mtgy_op_a76_val         0
#define DFLT_VAL_NX90_mtgy_op_a76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a76': */
#define MSK_USED_BITS_NX90_mtgy_op_a76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a77 */
/* => MWMM operand A register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a77  0x00001934U
#define Adr_NX90_mtgy_mtgy_op_a77 0xFF083934U
#define Adr_NX90_mtgy_op_a77      0xFF083934U
#define DFLT_VAL_NX90_mtgy_op_a77 0x00000000U

#define MSK_NX90_mtgy_op_a77_val         0xffffffffU
#define SRT_NX90_mtgy_op_a77_val         0
#define DFLT_VAL_NX90_mtgy_op_a77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a77': */
#define MSK_USED_BITS_NX90_mtgy_op_a77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a78 */
/* => MWMM operand A register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a78  0x00001938U
#define Adr_NX90_mtgy_mtgy_op_a78 0xFF083938U
#define Adr_NX90_mtgy_op_a78      0xFF083938U
#define DFLT_VAL_NX90_mtgy_op_a78 0x00000000U

#define MSK_NX90_mtgy_op_a78_val         0xffffffffU
#define SRT_NX90_mtgy_op_a78_val         0
#define DFLT_VAL_NX90_mtgy_op_a78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a78': */
#define MSK_USED_BITS_NX90_mtgy_op_a78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a79 */
/* => MWMM operand A register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a79  0x0000193CU
#define Adr_NX90_mtgy_mtgy_op_a79 0xFF08393CU
#define Adr_NX90_mtgy_op_a79      0xFF08393CU
#define DFLT_VAL_NX90_mtgy_op_a79 0x00000000U

#define MSK_NX90_mtgy_op_a79_val         0xffffffffU
#define SRT_NX90_mtgy_op_a79_val         0
#define DFLT_VAL_NX90_mtgy_op_a79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a79': */
#define MSK_USED_BITS_NX90_mtgy_op_a79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a80 */
/* => MWMM operand A register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a80  0x00001940U
#define Adr_NX90_mtgy_mtgy_op_a80 0xFF083940U
#define Adr_NX90_mtgy_op_a80      0xFF083940U
#define DFLT_VAL_NX90_mtgy_op_a80 0x00000000U

#define MSK_NX90_mtgy_op_a80_val         0xffffffffU
#define SRT_NX90_mtgy_op_a80_val         0
#define DFLT_VAL_NX90_mtgy_op_a80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a80': */
#define MSK_USED_BITS_NX90_mtgy_op_a80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a81 */
/* => MWMM operand A register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a81  0x00001944U
#define Adr_NX90_mtgy_mtgy_op_a81 0xFF083944U
#define Adr_NX90_mtgy_op_a81      0xFF083944U
#define DFLT_VAL_NX90_mtgy_op_a81 0x00000000U

#define MSK_NX90_mtgy_op_a81_val         0xffffffffU
#define SRT_NX90_mtgy_op_a81_val         0
#define DFLT_VAL_NX90_mtgy_op_a81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a81': */
#define MSK_USED_BITS_NX90_mtgy_op_a81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a82 */
/* => MWMM operand A register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a82  0x00001948U
#define Adr_NX90_mtgy_mtgy_op_a82 0xFF083948U
#define Adr_NX90_mtgy_op_a82      0xFF083948U
#define DFLT_VAL_NX90_mtgy_op_a82 0x00000000U

#define MSK_NX90_mtgy_op_a82_val         0xffffffffU
#define SRT_NX90_mtgy_op_a82_val         0
#define DFLT_VAL_NX90_mtgy_op_a82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a82': */
#define MSK_USED_BITS_NX90_mtgy_op_a82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a83 */
/* => MWMM operand A register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a83  0x0000194CU
#define Adr_NX90_mtgy_mtgy_op_a83 0xFF08394CU
#define Adr_NX90_mtgy_op_a83      0xFF08394CU
#define DFLT_VAL_NX90_mtgy_op_a83 0x00000000U

#define MSK_NX90_mtgy_op_a83_val         0xffffffffU
#define SRT_NX90_mtgy_op_a83_val         0
#define DFLT_VAL_NX90_mtgy_op_a83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a83': */
#define MSK_USED_BITS_NX90_mtgy_op_a83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a84 */
/* => MWMM operand A register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a84  0x00001950U
#define Adr_NX90_mtgy_mtgy_op_a84 0xFF083950U
#define Adr_NX90_mtgy_op_a84      0xFF083950U
#define DFLT_VAL_NX90_mtgy_op_a84 0x00000000U

#define MSK_NX90_mtgy_op_a84_val         0xffffffffU
#define SRT_NX90_mtgy_op_a84_val         0
#define DFLT_VAL_NX90_mtgy_op_a84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a84': */
#define MSK_USED_BITS_NX90_mtgy_op_a84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a85 */
/* => MWMM operand A register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a85  0x00001954U
#define Adr_NX90_mtgy_mtgy_op_a85 0xFF083954U
#define Adr_NX90_mtgy_op_a85      0xFF083954U
#define DFLT_VAL_NX90_mtgy_op_a85 0x00000000U

#define MSK_NX90_mtgy_op_a85_val         0xffffffffU
#define SRT_NX90_mtgy_op_a85_val         0
#define DFLT_VAL_NX90_mtgy_op_a85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a85': */
#define MSK_USED_BITS_NX90_mtgy_op_a85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a86 */
/* => MWMM operand A register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a86  0x00001958U
#define Adr_NX90_mtgy_mtgy_op_a86 0xFF083958U
#define Adr_NX90_mtgy_op_a86      0xFF083958U
#define DFLT_VAL_NX90_mtgy_op_a86 0x00000000U

#define MSK_NX90_mtgy_op_a86_val         0xffffffffU
#define SRT_NX90_mtgy_op_a86_val         0
#define DFLT_VAL_NX90_mtgy_op_a86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a86': */
#define MSK_USED_BITS_NX90_mtgy_op_a86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a87 */
/* => MWMM operand A register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a87  0x0000195CU
#define Adr_NX90_mtgy_mtgy_op_a87 0xFF08395CU
#define Adr_NX90_mtgy_op_a87      0xFF08395CU
#define DFLT_VAL_NX90_mtgy_op_a87 0x00000000U

#define MSK_NX90_mtgy_op_a87_val         0xffffffffU
#define SRT_NX90_mtgy_op_a87_val         0
#define DFLT_VAL_NX90_mtgy_op_a87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a87': */
#define MSK_USED_BITS_NX90_mtgy_op_a87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a88 */
/* => MWMM operand A register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a88  0x00001960U
#define Adr_NX90_mtgy_mtgy_op_a88 0xFF083960U
#define Adr_NX90_mtgy_op_a88      0xFF083960U
#define DFLT_VAL_NX90_mtgy_op_a88 0x00000000U

#define MSK_NX90_mtgy_op_a88_val         0xffffffffU
#define SRT_NX90_mtgy_op_a88_val         0
#define DFLT_VAL_NX90_mtgy_op_a88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a88': */
#define MSK_USED_BITS_NX90_mtgy_op_a88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a89 */
/* => MWMM operand A register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a89  0x00001964U
#define Adr_NX90_mtgy_mtgy_op_a89 0xFF083964U
#define Adr_NX90_mtgy_op_a89      0xFF083964U
#define DFLT_VAL_NX90_mtgy_op_a89 0x00000000U

#define MSK_NX90_mtgy_op_a89_val         0xffffffffU
#define SRT_NX90_mtgy_op_a89_val         0
#define DFLT_VAL_NX90_mtgy_op_a89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a89': */
#define MSK_USED_BITS_NX90_mtgy_op_a89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a90 */
/* => MWMM operand A register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a90  0x00001968U
#define Adr_NX90_mtgy_mtgy_op_a90 0xFF083968U
#define Adr_NX90_mtgy_op_a90      0xFF083968U
#define DFLT_VAL_NX90_mtgy_op_a90 0x00000000U

#define MSK_NX90_mtgy_op_a90_val         0xffffffffU
#define SRT_NX90_mtgy_op_a90_val         0
#define DFLT_VAL_NX90_mtgy_op_a90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a90': */
#define MSK_USED_BITS_NX90_mtgy_op_a90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a91 */
/* => MWMM operand A register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a91  0x0000196CU
#define Adr_NX90_mtgy_mtgy_op_a91 0xFF08396CU
#define Adr_NX90_mtgy_op_a91      0xFF08396CU
#define DFLT_VAL_NX90_mtgy_op_a91 0x00000000U

#define MSK_NX90_mtgy_op_a91_val         0xffffffffU
#define SRT_NX90_mtgy_op_a91_val         0
#define DFLT_VAL_NX90_mtgy_op_a91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a91': */
#define MSK_USED_BITS_NX90_mtgy_op_a91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a92 */
/* => MWMM operand A register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a92  0x00001970U
#define Adr_NX90_mtgy_mtgy_op_a92 0xFF083970U
#define Adr_NX90_mtgy_op_a92      0xFF083970U
#define DFLT_VAL_NX90_mtgy_op_a92 0x00000000U

#define MSK_NX90_mtgy_op_a92_val         0xffffffffU
#define SRT_NX90_mtgy_op_a92_val         0
#define DFLT_VAL_NX90_mtgy_op_a92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a92': */
#define MSK_USED_BITS_NX90_mtgy_op_a92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a93 */
/* => MWMM operand A register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a93  0x00001974U
#define Adr_NX90_mtgy_mtgy_op_a93 0xFF083974U
#define Adr_NX90_mtgy_op_a93      0xFF083974U
#define DFLT_VAL_NX90_mtgy_op_a93 0x00000000U

#define MSK_NX90_mtgy_op_a93_val         0xffffffffU
#define SRT_NX90_mtgy_op_a93_val         0
#define DFLT_VAL_NX90_mtgy_op_a93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a93': */
#define MSK_USED_BITS_NX90_mtgy_op_a93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a94 */
/* => MWMM operand A register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a94  0x00001978U
#define Adr_NX90_mtgy_mtgy_op_a94 0xFF083978U
#define Adr_NX90_mtgy_op_a94      0xFF083978U
#define DFLT_VAL_NX90_mtgy_op_a94 0x00000000U

#define MSK_NX90_mtgy_op_a94_val         0xffffffffU
#define SRT_NX90_mtgy_op_a94_val         0
#define DFLT_VAL_NX90_mtgy_op_a94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a94': */
#define MSK_USED_BITS_NX90_mtgy_op_a94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a95 */
/* => MWMM operand A register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a95  0x0000197CU
#define Adr_NX90_mtgy_mtgy_op_a95 0xFF08397CU
#define Adr_NX90_mtgy_op_a95      0xFF08397CU
#define DFLT_VAL_NX90_mtgy_op_a95 0x00000000U

#define MSK_NX90_mtgy_op_a95_val         0xffffffffU
#define SRT_NX90_mtgy_op_a95_val         0
#define DFLT_VAL_NX90_mtgy_op_a95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a95': */
#define MSK_USED_BITS_NX90_mtgy_op_a95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a96 */
/* => MWMM operand A register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a96  0x00001980U
#define Adr_NX90_mtgy_mtgy_op_a96 0xFF083980U
#define Adr_NX90_mtgy_op_a96      0xFF083980U
#define DFLT_VAL_NX90_mtgy_op_a96 0x00000000U

#define MSK_NX90_mtgy_op_a96_val         0xffffffffU
#define SRT_NX90_mtgy_op_a96_val         0
#define DFLT_VAL_NX90_mtgy_op_a96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a96': */
#define MSK_USED_BITS_NX90_mtgy_op_a96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a97 */
/* => MWMM operand A register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a97  0x00001984U
#define Adr_NX90_mtgy_mtgy_op_a97 0xFF083984U
#define Adr_NX90_mtgy_op_a97      0xFF083984U
#define DFLT_VAL_NX90_mtgy_op_a97 0x00000000U

#define MSK_NX90_mtgy_op_a97_val         0xffffffffU
#define SRT_NX90_mtgy_op_a97_val         0
#define DFLT_VAL_NX90_mtgy_op_a97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a97': */
#define MSK_USED_BITS_NX90_mtgy_op_a97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a98 */
/* => MWMM operand A register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a98  0x00001988U
#define Adr_NX90_mtgy_mtgy_op_a98 0xFF083988U
#define Adr_NX90_mtgy_op_a98      0xFF083988U
#define DFLT_VAL_NX90_mtgy_op_a98 0x00000000U

#define MSK_NX90_mtgy_op_a98_val         0xffffffffU
#define SRT_NX90_mtgy_op_a98_val         0
#define DFLT_VAL_NX90_mtgy_op_a98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a98': */
#define MSK_USED_BITS_NX90_mtgy_op_a98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a99 */
/* => MWMM operand A register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a99  0x0000198CU
#define Adr_NX90_mtgy_mtgy_op_a99 0xFF08398CU
#define Adr_NX90_mtgy_op_a99      0xFF08398CU
#define DFLT_VAL_NX90_mtgy_op_a99 0x00000000U

#define MSK_NX90_mtgy_op_a99_val         0xffffffffU
#define SRT_NX90_mtgy_op_a99_val         0
#define DFLT_VAL_NX90_mtgy_op_a99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a99': */
#define MSK_USED_BITS_NX90_mtgy_op_a99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a100 */
/* => MWMM operand A register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a100  0x00001990U
#define Adr_NX90_mtgy_mtgy_op_a100 0xFF083990U
#define Adr_NX90_mtgy_op_a100      0xFF083990U
#define DFLT_VAL_NX90_mtgy_op_a100 0x00000000U

#define MSK_NX90_mtgy_op_a100_val         0xffffffffU
#define SRT_NX90_mtgy_op_a100_val         0
#define DFLT_VAL_NX90_mtgy_op_a100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a100': */
#define MSK_USED_BITS_NX90_mtgy_op_a100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a101 */
/* => MWMM operand A register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a101  0x00001994U
#define Adr_NX90_mtgy_mtgy_op_a101 0xFF083994U
#define Adr_NX90_mtgy_op_a101      0xFF083994U
#define DFLT_VAL_NX90_mtgy_op_a101 0x00000000U

#define MSK_NX90_mtgy_op_a101_val         0xffffffffU
#define SRT_NX90_mtgy_op_a101_val         0
#define DFLT_VAL_NX90_mtgy_op_a101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a101': */
#define MSK_USED_BITS_NX90_mtgy_op_a101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a102 */
/* => MWMM operand A register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a102  0x00001998U
#define Adr_NX90_mtgy_mtgy_op_a102 0xFF083998U
#define Adr_NX90_mtgy_op_a102      0xFF083998U
#define DFLT_VAL_NX90_mtgy_op_a102 0x00000000U

#define MSK_NX90_mtgy_op_a102_val         0xffffffffU
#define SRT_NX90_mtgy_op_a102_val         0
#define DFLT_VAL_NX90_mtgy_op_a102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a102': */
#define MSK_USED_BITS_NX90_mtgy_op_a102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a103 */
/* => MWMM operand A register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a103  0x0000199CU
#define Adr_NX90_mtgy_mtgy_op_a103 0xFF08399CU
#define Adr_NX90_mtgy_op_a103      0xFF08399CU
#define DFLT_VAL_NX90_mtgy_op_a103 0x00000000U

#define MSK_NX90_mtgy_op_a103_val         0xffffffffU
#define SRT_NX90_mtgy_op_a103_val         0
#define DFLT_VAL_NX90_mtgy_op_a103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a103': */
#define MSK_USED_BITS_NX90_mtgy_op_a103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a104 */
/* => MWMM operand A register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a104  0x000019A0U
#define Adr_NX90_mtgy_mtgy_op_a104 0xFF0839A0U
#define Adr_NX90_mtgy_op_a104      0xFF0839A0U
#define DFLT_VAL_NX90_mtgy_op_a104 0x00000000U

#define MSK_NX90_mtgy_op_a104_val         0xffffffffU
#define SRT_NX90_mtgy_op_a104_val         0
#define DFLT_VAL_NX90_mtgy_op_a104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a104': */
#define MSK_USED_BITS_NX90_mtgy_op_a104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a105 */
/* => MWMM operand A register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a105  0x000019A4U
#define Adr_NX90_mtgy_mtgy_op_a105 0xFF0839A4U
#define Adr_NX90_mtgy_op_a105      0xFF0839A4U
#define DFLT_VAL_NX90_mtgy_op_a105 0x00000000U

#define MSK_NX90_mtgy_op_a105_val         0xffffffffU
#define SRT_NX90_mtgy_op_a105_val         0
#define DFLT_VAL_NX90_mtgy_op_a105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a105': */
#define MSK_USED_BITS_NX90_mtgy_op_a105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a106 */
/* => MWMM operand A register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a106  0x000019A8U
#define Adr_NX90_mtgy_mtgy_op_a106 0xFF0839A8U
#define Adr_NX90_mtgy_op_a106      0xFF0839A8U
#define DFLT_VAL_NX90_mtgy_op_a106 0x00000000U

#define MSK_NX90_mtgy_op_a106_val         0xffffffffU
#define SRT_NX90_mtgy_op_a106_val         0
#define DFLT_VAL_NX90_mtgy_op_a106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a106': */
#define MSK_USED_BITS_NX90_mtgy_op_a106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a107 */
/* => MWMM operand A register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a107  0x000019ACU
#define Adr_NX90_mtgy_mtgy_op_a107 0xFF0839ACU
#define Adr_NX90_mtgy_op_a107      0xFF0839ACU
#define DFLT_VAL_NX90_mtgy_op_a107 0x00000000U

#define MSK_NX90_mtgy_op_a107_val         0xffffffffU
#define SRT_NX90_mtgy_op_a107_val         0
#define DFLT_VAL_NX90_mtgy_op_a107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a107': */
#define MSK_USED_BITS_NX90_mtgy_op_a107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a108 */
/* => MWMM operand A register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a108  0x000019B0U
#define Adr_NX90_mtgy_mtgy_op_a108 0xFF0839B0U
#define Adr_NX90_mtgy_op_a108      0xFF0839B0U
#define DFLT_VAL_NX90_mtgy_op_a108 0x00000000U

#define MSK_NX90_mtgy_op_a108_val         0xffffffffU
#define SRT_NX90_mtgy_op_a108_val         0
#define DFLT_VAL_NX90_mtgy_op_a108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a108': */
#define MSK_USED_BITS_NX90_mtgy_op_a108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a109 */
/* => MWMM operand A register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a109  0x000019B4U
#define Adr_NX90_mtgy_mtgy_op_a109 0xFF0839B4U
#define Adr_NX90_mtgy_op_a109      0xFF0839B4U
#define DFLT_VAL_NX90_mtgy_op_a109 0x00000000U

#define MSK_NX90_mtgy_op_a109_val         0xffffffffU
#define SRT_NX90_mtgy_op_a109_val         0
#define DFLT_VAL_NX90_mtgy_op_a109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a109': */
#define MSK_USED_BITS_NX90_mtgy_op_a109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a110 */
/* => MWMM operand A register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a110  0x000019B8U
#define Adr_NX90_mtgy_mtgy_op_a110 0xFF0839B8U
#define Adr_NX90_mtgy_op_a110      0xFF0839B8U
#define DFLT_VAL_NX90_mtgy_op_a110 0x00000000U

#define MSK_NX90_mtgy_op_a110_val         0xffffffffU
#define SRT_NX90_mtgy_op_a110_val         0
#define DFLT_VAL_NX90_mtgy_op_a110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a110': */
#define MSK_USED_BITS_NX90_mtgy_op_a110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a111 */
/* => MWMM operand A register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a111  0x000019BCU
#define Adr_NX90_mtgy_mtgy_op_a111 0xFF0839BCU
#define Adr_NX90_mtgy_op_a111      0xFF0839BCU
#define DFLT_VAL_NX90_mtgy_op_a111 0x00000000U

#define MSK_NX90_mtgy_op_a111_val         0xffffffffU
#define SRT_NX90_mtgy_op_a111_val         0
#define DFLT_VAL_NX90_mtgy_op_a111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a111': */
#define MSK_USED_BITS_NX90_mtgy_op_a111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a112 */
/* => MWMM operand A register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a112  0x000019C0U
#define Adr_NX90_mtgy_mtgy_op_a112 0xFF0839C0U
#define Adr_NX90_mtgy_op_a112      0xFF0839C0U
#define DFLT_VAL_NX90_mtgy_op_a112 0x00000000U

#define MSK_NX90_mtgy_op_a112_val         0xffffffffU
#define SRT_NX90_mtgy_op_a112_val         0
#define DFLT_VAL_NX90_mtgy_op_a112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a112': */
#define MSK_USED_BITS_NX90_mtgy_op_a112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a113 */
/* => MWMM operand A register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a113  0x000019C4U
#define Adr_NX90_mtgy_mtgy_op_a113 0xFF0839C4U
#define Adr_NX90_mtgy_op_a113      0xFF0839C4U
#define DFLT_VAL_NX90_mtgy_op_a113 0x00000000U

#define MSK_NX90_mtgy_op_a113_val         0xffffffffU
#define SRT_NX90_mtgy_op_a113_val         0
#define DFLT_VAL_NX90_mtgy_op_a113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a113': */
#define MSK_USED_BITS_NX90_mtgy_op_a113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a114 */
/* => MWMM operand A register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a114  0x000019C8U
#define Adr_NX90_mtgy_mtgy_op_a114 0xFF0839C8U
#define Adr_NX90_mtgy_op_a114      0xFF0839C8U
#define DFLT_VAL_NX90_mtgy_op_a114 0x00000000U

#define MSK_NX90_mtgy_op_a114_val         0xffffffffU
#define SRT_NX90_mtgy_op_a114_val         0
#define DFLT_VAL_NX90_mtgy_op_a114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a114': */
#define MSK_USED_BITS_NX90_mtgy_op_a114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a115 */
/* => MWMM operand A register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a115  0x000019CCU
#define Adr_NX90_mtgy_mtgy_op_a115 0xFF0839CCU
#define Adr_NX90_mtgy_op_a115      0xFF0839CCU
#define DFLT_VAL_NX90_mtgy_op_a115 0x00000000U

#define MSK_NX90_mtgy_op_a115_val         0xffffffffU
#define SRT_NX90_mtgy_op_a115_val         0
#define DFLT_VAL_NX90_mtgy_op_a115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a115': */
#define MSK_USED_BITS_NX90_mtgy_op_a115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a116 */
/* => MWMM operand A register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a116  0x000019D0U
#define Adr_NX90_mtgy_mtgy_op_a116 0xFF0839D0U
#define Adr_NX90_mtgy_op_a116      0xFF0839D0U
#define DFLT_VAL_NX90_mtgy_op_a116 0x00000000U

#define MSK_NX90_mtgy_op_a116_val         0xffffffffU
#define SRT_NX90_mtgy_op_a116_val         0
#define DFLT_VAL_NX90_mtgy_op_a116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a116': */
#define MSK_USED_BITS_NX90_mtgy_op_a116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a117 */
/* => MWMM operand A register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a117  0x000019D4U
#define Adr_NX90_mtgy_mtgy_op_a117 0xFF0839D4U
#define Adr_NX90_mtgy_op_a117      0xFF0839D4U
#define DFLT_VAL_NX90_mtgy_op_a117 0x00000000U

#define MSK_NX90_mtgy_op_a117_val         0xffffffffU
#define SRT_NX90_mtgy_op_a117_val         0
#define DFLT_VAL_NX90_mtgy_op_a117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a117': */
#define MSK_USED_BITS_NX90_mtgy_op_a117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a118 */
/* => MWMM operand A register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a118  0x000019D8U
#define Adr_NX90_mtgy_mtgy_op_a118 0xFF0839D8U
#define Adr_NX90_mtgy_op_a118      0xFF0839D8U
#define DFLT_VAL_NX90_mtgy_op_a118 0x00000000U

#define MSK_NX90_mtgy_op_a118_val         0xffffffffU
#define SRT_NX90_mtgy_op_a118_val         0
#define DFLT_VAL_NX90_mtgy_op_a118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a118': */
#define MSK_USED_BITS_NX90_mtgy_op_a118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a119 */
/* => MWMM operand A register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a119  0x000019DCU
#define Adr_NX90_mtgy_mtgy_op_a119 0xFF0839DCU
#define Adr_NX90_mtgy_op_a119      0xFF0839DCU
#define DFLT_VAL_NX90_mtgy_op_a119 0x00000000U

#define MSK_NX90_mtgy_op_a119_val         0xffffffffU
#define SRT_NX90_mtgy_op_a119_val         0
#define DFLT_VAL_NX90_mtgy_op_a119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a119': */
#define MSK_USED_BITS_NX90_mtgy_op_a119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a120 */
/* => MWMM operand A register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a120  0x000019E0U
#define Adr_NX90_mtgy_mtgy_op_a120 0xFF0839E0U
#define Adr_NX90_mtgy_op_a120      0xFF0839E0U
#define DFLT_VAL_NX90_mtgy_op_a120 0x00000000U

#define MSK_NX90_mtgy_op_a120_val         0xffffffffU
#define SRT_NX90_mtgy_op_a120_val         0
#define DFLT_VAL_NX90_mtgy_op_a120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a120': */
#define MSK_USED_BITS_NX90_mtgy_op_a120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a121 */
/* => MWMM operand A register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a121  0x000019E4U
#define Adr_NX90_mtgy_mtgy_op_a121 0xFF0839E4U
#define Adr_NX90_mtgy_op_a121      0xFF0839E4U
#define DFLT_VAL_NX90_mtgy_op_a121 0x00000000U

#define MSK_NX90_mtgy_op_a121_val         0xffffffffU
#define SRT_NX90_mtgy_op_a121_val         0
#define DFLT_VAL_NX90_mtgy_op_a121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a121': */
#define MSK_USED_BITS_NX90_mtgy_op_a121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a122 */
/* => MWMM operand A register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a122  0x000019E8U
#define Adr_NX90_mtgy_mtgy_op_a122 0xFF0839E8U
#define Adr_NX90_mtgy_op_a122      0xFF0839E8U
#define DFLT_VAL_NX90_mtgy_op_a122 0x00000000U

#define MSK_NX90_mtgy_op_a122_val         0xffffffffU
#define SRT_NX90_mtgy_op_a122_val         0
#define DFLT_VAL_NX90_mtgy_op_a122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a122': */
#define MSK_USED_BITS_NX90_mtgy_op_a122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a123 */
/* => MWMM operand A register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a123  0x000019ECU
#define Adr_NX90_mtgy_mtgy_op_a123 0xFF0839ECU
#define Adr_NX90_mtgy_op_a123      0xFF0839ECU
#define DFLT_VAL_NX90_mtgy_op_a123 0x00000000U

#define MSK_NX90_mtgy_op_a123_val         0xffffffffU
#define SRT_NX90_mtgy_op_a123_val         0
#define DFLT_VAL_NX90_mtgy_op_a123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a123': */
#define MSK_USED_BITS_NX90_mtgy_op_a123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a124 */
/* => MWMM operand A register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a124  0x000019F0U
#define Adr_NX90_mtgy_mtgy_op_a124 0xFF0839F0U
#define Adr_NX90_mtgy_op_a124      0xFF0839F0U
#define DFLT_VAL_NX90_mtgy_op_a124 0x00000000U

#define MSK_NX90_mtgy_op_a124_val         0xffffffffU
#define SRT_NX90_mtgy_op_a124_val         0
#define DFLT_VAL_NX90_mtgy_op_a124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a124': */
#define MSK_USED_BITS_NX90_mtgy_op_a124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a125 */
/* => MWMM operand A register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a125  0x000019F4U
#define Adr_NX90_mtgy_mtgy_op_a125 0xFF0839F4U
#define Adr_NX90_mtgy_op_a125      0xFF0839F4U
#define DFLT_VAL_NX90_mtgy_op_a125 0x00000000U

#define MSK_NX90_mtgy_op_a125_val         0xffffffffU
#define SRT_NX90_mtgy_op_a125_val         0
#define DFLT_VAL_NX90_mtgy_op_a125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a125': */
#define MSK_USED_BITS_NX90_mtgy_op_a125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a126 */
/* => MWMM operand A register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a126  0x000019F8U
#define Adr_NX90_mtgy_mtgy_op_a126 0xFF0839F8U
#define Adr_NX90_mtgy_op_a126      0xFF0839F8U
#define DFLT_VAL_NX90_mtgy_op_a126 0x00000000U

#define MSK_NX90_mtgy_op_a126_val         0xffffffffU
#define SRT_NX90_mtgy_op_a126_val         0
#define DFLT_VAL_NX90_mtgy_op_a126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a126': */
#define MSK_USED_BITS_NX90_mtgy_op_a126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a127 */
/* => MWMM operand A register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a127  0x000019FCU
#define Adr_NX90_mtgy_mtgy_op_a127 0xFF0839FCU
#define Adr_NX90_mtgy_op_a127      0xFF0839FCU
#define DFLT_VAL_NX90_mtgy_op_a127 0x00000000U

#define MSK_NX90_mtgy_op_a127_val         0xffffffffU
#define SRT_NX90_mtgy_op_a127_val         0
#define DFLT_VAL_NX90_mtgy_op_a127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_a127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_a127': */
#define MSK_USED_BITS_NX90_mtgy_op_a127 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e0 */
/* => MWMM operand E register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e0  0x00001A00U
#define Adr_NX90_mtgy_mtgy_op_e0 0xFF083A00U
#define Adr_NX90_mtgy_op_e0      0xFF083A00U
#define DFLT_VAL_NX90_mtgy_op_e0 0x00000000U

#define MSK_NX90_mtgy_op_e0_val         0xffffffffU
#define SRT_NX90_mtgy_op_e0_val         0
#define DFLT_VAL_NX90_mtgy_op_e0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e0': */
#define MSK_USED_BITS_NX90_mtgy_op_e0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e1 */
/* => MWMM operand E register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e1  0x00001A04U
#define Adr_NX90_mtgy_mtgy_op_e1 0xFF083A04U
#define Adr_NX90_mtgy_op_e1      0xFF083A04U
#define DFLT_VAL_NX90_mtgy_op_e1 0x00000000U

#define MSK_NX90_mtgy_op_e1_val         0xffffffffU
#define SRT_NX90_mtgy_op_e1_val         0
#define DFLT_VAL_NX90_mtgy_op_e1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e1': */
#define MSK_USED_BITS_NX90_mtgy_op_e1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e2 */
/* => MWMM operand E register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e2  0x00001A08U
#define Adr_NX90_mtgy_mtgy_op_e2 0xFF083A08U
#define Adr_NX90_mtgy_op_e2      0xFF083A08U
#define DFLT_VAL_NX90_mtgy_op_e2 0x00000000U

#define MSK_NX90_mtgy_op_e2_val         0xffffffffU
#define SRT_NX90_mtgy_op_e2_val         0
#define DFLT_VAL_NX90_mtgy_op_e2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e2': */
#define MSK_USED_BITS_NX90_mtgy_op_e2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e3 */
/* => MWMM operand E register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e3  0x00001A0CU
#define Adr_NX90_mtgy_mtgy_op_e3 0xFF083A0CU
#define Adr_NX90_mtgy_op_e3      0xFF083A0CU
#define DFLT_VAL_NX90_mtgy_op_e3 0x00000000U

#define MSK_NX90_mtgy_op_e3_val         0xffffffffU
#define SRT_NX90_mtgy_op_e3_val         0
#define DFLT_VAL_NX90_mtgy_op_e3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e3': */
#define MSK_USED_BITS_NX90_mtgy_op_e3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e4 */
/* => MWMM operand E register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e4  0x00001A10U
#define Adr_NX90_mtgy_mtgy_op_e4 0xFF083A10U
#define Adr_NX90_mtgy_op_e4      0xFF083A10U
#define DFLT_VAL_NX90_mtgy_op_e4 0x00000000U

#define MSK_NX90_mtgy_op_e4_val         0xffffffffU
#define SRT_NX90_mtgy_op_e4_val         0
#define DFLT_VAL_NX90_mtgy_op_e4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e4': */
#define MSK_USED_BITS_NX90_mtgy_op_e4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e5 */
/* => MWMM operand E register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e5  0x00001A14U
#define Adr_NX90_mtgy_mtgy_op_e5 0xFF083A14U
#define Adr_NX90_mtgy_op_e5      0xFF083A14U
#define DFLT_VAL_NX90_mtgy_op_e5 0x00000000U

#define MSK_NX90_mtgy_op_e5_val         0xffffffffU
#define SRT_NX90_mtgy_op_e5_val         0
#define DFLT_VAL_NX90_mtgy_op_e5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e5': */
#define MSK_USED_BITS_NX90_mtgy_op_e5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e6 */
/* => MWMM operand E register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e6  0x00001A18U
#define Adr_NX90_mtgy_mtgy_op_e6 0xFF083A18U
#define Adr_NX90_mtgy_op_e6      0xFF083A18U
#define DFLT_VAL_NX90_mtgy_op_e6 0x00000000U

#define MSK_NX90_mtgy_op_e6_val         0xffffffffU
#define SRT_NX90_mtgy_op_e6_val         0
#define DFLT_VAL_NX90_mtgy_op_e6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e6': */
#define MSK_USED_BITS_NX90_mtgy_op_e6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e7 */
/* => MWMM operand E register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e7  0x00001A1CU
#define Adr_NX90_mtgy_mtgy_op_e7 0xFF083A1CU
#define Adr_NX90_mtgy_op_e7      0xFF083A1CU
#define DFLT_VAL_NX90_mtgy_op_e7 0x00000000U

#define MSK_NX90_mtgy_op_e7_val         0xffffffffU
#define SRT_NX90_mtgy_op_e7_val         0
#define DFLT_VAL_NX90_mtgy_op_e7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e7': */
#define MSK_USED_BITS_NX90_mtgy_op_e7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e8 */
/* => MWMM operand E register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e8  0x00001A20U
#define Adr_NX90_mtgy_mtgy_op_e8 0xFF083A20U
#define Adr_NX90_mtgy_op_e8      0xFF083A20U
#define DFLT_VAL_NX90_mtgy_op_e8 0x00000000U

#define MSK_NX90_mtgy_op_e8_val         0xffffffffU
#define SRT_NX90_mtgy_op_e8_val         0
#define DFLT_VAL_NX90_mtgy_op_e8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e8': */
#define MSK_USED_BITS_NX90_mtgy_op_e8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e9 */
/* => MWMM operand E register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e9  0x00001A24U
#define Adr_NX90_mtgy_mtgy_op_e9 0xFF083A24U
#define Adr_NX90_mtgy_op_e9      0xFF083A24U
#define DFLT_VAL_NX90_mtgy_op_e9 0x00000000U

#define MSK_NX90_mtgy_op_e9_val         0xffffffffU
#define SRT_NX90_mtgy_op_e9_val         0
#define DFLT_VAL_NX90_mtgy_op_e9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e9': */
#define MSK_USED_BITS_NX90_mtgy_op_e9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e10 */
/* => MWMM operand E register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e10  0x00001A28U
#define Adr_NX90_mtgy_mtgy_op_e10 0xFF083A28U
#define Adr_NX90_mtgy_op_e10      0xFF083A28U
#define DFLT_VAL_NX90_mtgy_op_e10 0x00000000U

#define MSK_NX90_mtgy_op_e10_val         0xffffffffU
#define SRT_NX90_mtgy_op_e10_val         0
#define DFLT_VAL_NX90_mtgy_op_e10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e10': */
#define MSK_USED_BITS_NX90_mtgy_op_e10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e11 */
/* => MWMM operand E register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e11  0x00001A2CU
#define Adr_NX90_mtgy_mtgy_op_e11 0xFF083A2CU
#define Adr_NX90_mtgy_op_e11      0xFF083A2CU
#define DFLT_VAL_NX90_mtgy_op_e11 0x00000000U

#define MSK_NX90_mtgy_op_e11_val         0xffffffffU
#define SRT_NX90_mtgy_op_e11_val         0
#define DFLT_VAL_NX90_mtgy_op_e11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e11': */
#define MSK_USED_BITS_NX90_mtgy_op_e11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e12 */
/* => MWMM operand E register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e12  0x00001A30U
#define Adr_NX90_mtgy_mtgy_op_e12 0xFF083A30U
#define Adr_NX90_mtgy_op_e12      0xFF083A30U
#define DFLT_VAL_NX90_mtgy_op_e12 0x00000000U

#define MSK_NX90_mtgy_op_e12_val         0xffffffffU
#define SRT_NX90_mtgy_op_e12_val         0
#define DFLT_VAL_NX90_mtgy_op_e12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e12': */
#define MSK_USED_BITS_NX90_mtgy_op_e12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e13 */
/* => MWMM operand E register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e13  0x00001A34U
#define Adr_NX90_mtgy_mtgy_op_e13 0xFF083A34U
#define Adr_NX90_mtgy_op_e13      0xFF083A34U
#define DFLT_VAL_NX90_mtgy_op_e13 0x00000000U

#define MSK_NX90_mtgy_op_e13_val         0xffffffffU
#define SRT_NX90_mtgy_op_e13_val         0
#define DFLT_VAL_NX90_mtgy_op_e13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e13': */
#define MSK_USED_BITS_NX90_mtgy_op_e13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e14 */
/* => MWMM operand E register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e14  0x00001A38U
#define Adr_NX90_mtgy_mtgy_op_e14 0xFF083A38U
#define Adr_NX90_mtgy_op_e14      0xFF083A38U
#define DFLT_VAL_NX90_mtgy_op_e14 0x00000000U

#define MSK_NX90_mtgy_op_e14_val         0xffffffffU
#define SRT_NX90_mtgy_op_e14_val         0
#define DFLT_VAL_NX90_mtgy_op_e14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e14': */
#define MSK_USED_BITS_NX90_mtgy_op_e14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e15 */
/* => MWMM operand E register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e15  0x00001A3CU
#define Adr_NX90_mtgy_mtgy_op_e15 0xFF083A3CU
#define Adr_NX90_mtgy_op_e15      0xFF083A3CU
#define DFLT_VAL_NX90_mtgy_op_e15 0x00000000U

#define MSK_NX90_mtgy_op_e15_val         0xffffffffU
#define SRT_NX90_mtgy_op_e15_val         0
#define DFLT_VAL_NX90_mtgy_op_e15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e15': */
#define MSK_USED_BITS_NX90_mtgy_op_e15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e16 */
/* => MWMM operand E register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e16  0x00001A40U
#define Adr_NX90_mtgy_mtgy_op_e16 0xFF083A40U
#define Adr_NX90_mtgy_op_e16      0xFF083A40U
#define DFLT_VAL_NX90_mtgy_op_e16 0x00000000U

#define MSK_NX90_mtgy_op_e16_val         0xffffffffU
#define SRT_NX90_mtgy_op_e16_val         0
#define DFLT_VAL_NX90_mtgy_op_e16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e16': */
#define MSK_USED_BITS_NX90_mtgy_op_e16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e17 */
/* => MWMM operand E register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e17  0x00001A44U
#define Adr_NX90_mtgy_mtgy_op_e17 0xFF083A44U
#define Adr_NX90_mtgy_op_e17      0xFF083A44U
#define DFLT_VAL_NX90_mtgy_op_e17 0x00000000U

#define MSK_NX90_mtgy_op_e17_val         0xffffffffU
#define SRT_NX90_mtgy_op_e17_val         0
#define DFLT_VAL_NX90_mtgy_op_e17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e17': */
#define MSK_USED_BITS_NX90_mtgy_op_e17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e18 */
/* => MWMM operand E register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e18  0x00001A48U
#define Adr_NX90_mtgy_mtgy_op_e18 0xFF083A48U
#define Adr_NX90_mtgy_op_e18      0xFF083A48U
#define DFLT_VAL_NX90_mtgy_op_e18 0x00000000U

#define MSK_NX90_mtgy_op_e18_val         0xffffffffU
#define SRT_NX90_mtgy_op_e18_val         0
#define DFLT_VAL_NX90_mtgy_op_e18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e18': */
#define MSK_USED_BITS_NX90_mtgy_op_e18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e19 */
/* => MWMM operand E register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e19  0x00001A4CU
#define Adr_NX90_mtgy_mtgy_op_e19 0xFF083A4CU
#define Adr_NX90_mtgy_op_e19      0xFF083A4CU
#define DFLT_VAL_NX90_mtgy_op_e19 0x00000000U

#define MSK_NX90_mtgy_op_e19_val         0xffffffffU
#define SRT_NX90_mtgy_op_e19_val         0
#define DFLT_VAL_NX90_mtgy_op_e19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e19': */
#define MSK_USED_BITS_NX90_mtgy_op_e19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e20 */
/* => MWMM operand E register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e20  0x00001A50U
#define Adr_NX90_mtgy_mtgy_op_e20 0xFF083A50U
#define Adr_NX90_mtgy_op_e20      0xFF083A50U
#define DFLT_VAL_NX90_mtgy_op_e20 0x00000000U

#define MSK_NX90_mtgy_op_e20_val         0xffffffffU
#define SRT_NX90_mtgy_op_e20_val         0
#define DFLT_VAL_NX90_mtgy_op_e20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e20': */
#define MSK_USED_BITS_NX90_mtgy_op_e20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e21 */
/* => MWMM operand E register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e21  0x00001A54U
#define Adr_NX90_mtgy_mtgy_op_e21 0xFF083A54U
#define Adr_NX90_mtgy_op_e21      0xFF083A54U
#define DFLT_VAL_NX90_mtgy_op_e21 0x00000000U

#define MSK_NX90_mtgy_op_e21_val         0xffffffffU
#define SRT_NX90_mtgy_op_e21_val         0
#define DFLT_VAL_NX90_mtgy_op_e21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e21': */
#define MSK_USED_BITS_NX90_mtgy_op_e21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e22 */
/* => MWMM operand E register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e22  0x00001A58U
#define Adr_NX90_mtgy_mtgy_op_e22 0xFF083A58U
#define Adr_NX90_mtgy_op_e22      0xFF083A58U
#define DFLT_VAL_NX90_mtgy_op_e22 0x00000000U

#define MSK_NX90_mtgy_op_e22_val         0xffffffffU
#define SRT_NX90_mtgy_op_e22_val         0
#define DFLT_VAL_NX90_mtgy_op_e22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e22': */
#define MSK_USED_BITS_NX90_mtgy_op_e22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e23 */
/* => MWMM operand E register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e23  0x00001A5CU
#define Adr_NX90_mtgy_mtgy_op_e23 0xFF083A5CU
#define Adr_NX90_mtgy_op_e23      0xFF083A5CU
#define DFLT_VAL_NX90_mtgy_op_e23 0x00000000U

#define MSK_NX90_mtgy_op_e23_val         0xffffffffU
#define SRT_NX90_mtgy_op_e23_val         0
#define DFLT_VAL_NX90_mtgy_op_e23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e23': */
#define MSK_USED_BITS_NX90_mtgy_op_e23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e24 */
/* => MWMM operand E register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e24  0x00001A60U
#define Adr_NX90_mtgy_mtgy_op_e24 0xFF083A60U
#define Adr_NX90_mtgy_op_e24      0xFF083A60U
#define DFLT_VAL_NX90_mtgy_op_e24 0x00000000U

#define MSK_NX90_mtgy_op_e24_val         0xffffffffU
#define SRT_NX90_mtgy_op_e24_val         0
#define DFLT_VAL_NX90_mtgy_op_e24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e24': */
#define MSK_USED_BITS_NX90_mtgy_op_e24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e25 */
/* => MWMM operand E register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e25  0x00001A64U
#define Adr_NX90_mtgy_mtgy_op_e25 0xFF083A64U
#define Adr_NX90_mtgy_op_e25      0xFF083A64U
#define DFLT_VAL_NX90_mtgy_op_e25 0x00000000U

#define MSK_NX90_mtgy_op_e25_val         0xffffffffU
#define SRT_NX90_mtgy_op_e25_val         0
#define DFLT_VAL_NX90_mtgy_op_e25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e25': */
#define MSK_USED_BITS_NX90_mtgy_op_e25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e26 */
/* => MWMM operand E register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e26  0x00001A68U
#define Adr_NX90_mtgy_mtgy_op_e26 0xFF083A68U
#define Adr_NX90_mtgy_op_e26      0xFF083A68U
#define DFLT_VAL_NX90_mtgy_op_e26 0x00000000U

#define MSK_NX90_mtgy_op_e26_val         0xffffffffU
#define SRT_NX90_mtgy_op_e26_val         0
#define DFLT_VAL_NX90_mtgy_op_e26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e26': */
#define MSK_USED_BITS_NX90_mtgy_op_e26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e27 */
/* => MWMM operand E register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e27  0x00001A6CU
#define Adr_NX90_mtgy_mtgy_op_e27 0xFF083A6CU
#define Adr_NX90_mtgy_op_e27      0xFF083A6CU
#define DFLT_VAL_NX90_mtgy_op_e27 0x00000000U

#define MSK_NX90_mtgy_op_e27_val         0xffffffffU
#define SRT_NX90_mtgy_op_e27_val         0
#define DFLT_VAL_NX90_mtgy_op_e27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e27': */
#define MSK_USED_BITS_NX90_mtgy_op_e27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e28 */
/* => MWMM operand E register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e28  0x00001A70U
#define Adr_NX90_mtgy_mtgy_op_e28 0xFF083A70U
#define Adr_NX90_mtgy_op_e28      0xFF083A70U
#define DFLT_VAL_NX90_mtgy_op_e28 0x00000000U

#define MSK_NX90_mtgy_op_e28_val         0xffffffffU
#define SRT_NX90_mtgy_op_e28_val         0
#define DFLT_VAL_NX90_mtgy_op_e28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e28': */
#define MSK_USED_BITS_NX90_mtgy_op_e28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e29 */
/* => MWMM operand E register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e29  0x00001A74U
#define Adr_NX90_mtgy_mtgy_op_e29 0xFF083A74U
#define Adr_NX90_mtgy_op_e29      0xFF083A74U
#define DFLT_VAL_NX90_mtgy_op_e29 0x00000000U

#define MSK_NX90_mtgy_op_e29_val         0xffffffffU
#define SRT_NX90_mtgy_op_e29_val         0
#define DFLT_VAL_NX90_mtgy_op_e29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e29': */
#define MSK_USED_BITS_NX90_mtgy_op_e29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e30 */
/* => MWMM operand E register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e30  0x00001A78U
#define Adr_NX90_mtgy_mtgy_op_e30 0xFF083A78U
#define Adr_NX90_mtgy_op_e30      0xFF083A78U
#define DFLT_VAL_NX90_mtgy_op_e30 0x00000000U

#define MSK_NX90_mtgy_op_e30_val         0xffffffffU
#define SRT_NX90_mtgy_op_e30_val         0
#define DFLT_VAL_NX90_mtgy_op_e30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e30': */
#define MSK_USED_BITS_NX90_mtgy_op_e30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e31 */
/* => MWMM operand E register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e31  0x00001A7CU
#define Adr_NX90_mtgy_mtgy_op_e31 0xFF083A7CU
#define Adr_NX90_mtgy_op_e31      0xFF083A7CU
#define DFLT_VAL_NX90_mtgy_op_e31 0x00000000U

#define MSK_NX90_mtgy_op_e31_val         0xffffffffU
#define SRT_NX90_mtgy_op_e31_val         0
#define DFLT_VAL_NX90_mtgy_op_e31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e31': */
#define MSK_USED_BITS_NX90_mtgy_op_e31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e32 */
/* => MWMM operand E register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e32  0x00001A80U
#define Adr_NX90_mtgy_mtgy_op_e32 0xFF083A80U
#define Adr_NX90_mtgy_op_e32      0xFF083A80U
#define DFLT_VAL_NX90_mtgy_op_e32 0x00000000U

#define MSK_NX90_mtgy_op_e32_val         0xffffffffU
#define SRT_NX90_mtgy_op_e32_val         0
#define DFLT_VAL_NX90_mtgy_op_e32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e32': */
#define MSK_USED_BITS_NX90_mtgy_op_e32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e33 */
/* => MWMM operand E register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e33  0x00001A84U
#define Adr_NX90_mtgy_mtgy_op_e33 0xFF083A84U
#define Adr_NX90_mtgy_op_e33      0xFF083A84U
#define DFLT_VAL_NX90_mtgy_op_e33 0x00000000U

#define MSK_NX90_mtgy_op_e33_val         0xffffffffU
#define SRT_NX90_mtgy_op_e33_val         0
#define DFLT_VAL_NX90_mtgy_op_e33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e33': */
#define MSK_USED_BITS_NX90_mtgy_op_e33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e34 */
/* => MWMM operand E register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e34  0x00001A88U
#define Adr_NX90_mtgy_mtgy_op_e34 0xFF083A88U
#define Adr_NX90_mtgy_op_e34      0xFF083A88U
#define DFLT_VAL_NX90_mtgy_op_e34 0x00000000U

#define MSK_NX90_mtgy_op_e34_val         0xffffffffU
#define SRT_NX90_mtgy_op_e34_val         0
#define DFLT_VAL_NX90_mtgy_op_e34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e34': */
#define MSK_USED_BITS_NX90_mtgy_op_e34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e35 */
/* => MWMM operand E register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e35  0x00001A8CU
#define Adr_NX90_mtgy_mtgy_op_e35 0xFF083A8CU
#define Adr_NX90_mtgy_op_e35      0xFF083A8CU
#define DFLT_VAL_NX90_mtgy_op_e35 0x00000000U

#define MSK_NX90_mtgy_op_e35_val         0xffffffffU
#define SRT_NX90_mtgy_op_e35_val         0
#define DFLT_VAL_NX90_mtgy_op_e35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e35': */
#define MSK_USED_BITS_NX90_mtgy_op_e35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e36 */
/* => MWMM operand E register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e36  0x00001A90U
#define Adr_NX90_mtgy_mtgy_op_e36 0xFF083A90U
#define Adr_NX90_mtgy_op_e36      0xFF083A90U
#define DFLT_VAL_NX90_mtgy_op_e36 0x00000000U

#define MSK_NX90_mtgy_op_e36_val         0xffffffffU
#define SRT_NX90_mtgy_op_e36_val         0
#define DFLT_VAL_NX90_mtgy_op_e36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e36': */
#define MSK_USED_BITS_NX90_mtgy_op_e36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e37 */
/* => MWMM operand E register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e37  0x00001A94U
#define Adr_NX90_mtgy_mtgy_op_e37 0xFF083A94U
#define Adr_NX90_mtgy_op_e37      0xFF083A94U
#define DFLT_VAL_NX90_mtgy_op_e37 0x00000000U

#define MSK_NX90_mtgy_op_e37_val         0xffffffffU
#define SRT_NX90_mtgy_op_e37_val         0
#define DFLT_VAL_NX90_mtgy_op_e37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e37': */
#define MSK_USED_BITS_NX90_mtgy_op_e37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e38 */
/* => MWMM operand E register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e38  0x00001A98U
#define Adr_NX90_mtgy_mtgy_op_e38 0xFF083A98U
#define Adr_NX90_mtgy_op_e38      0xFF083A98U
#define DFLT_VAL_NX90_mtgy_op_e38 0x00000000U

#define MSK_NX90_mtgy_op_e38_val         0xffffffffU
#define SRT_NX90_mtgy_op_e38_val         0
#define DFLT_VAL_NX90_mtgy_op_e38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e38': */
#define MSK_USED_BITS_NX90_mtgy_op_e38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e39 */
/* => MWMM operand E register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e39  0x00001A9CU
#define Adr_NX90_mtgy_mtgy_op_e39 0xFF083A9CU
#define Adr_NX90_mtgy_op_e39      0xFF083A9CU
#define DFLT_VAL_NX90_mtgy_op_e39 0x00000000U

#define MSK_NX90_mtgy_op_e39_val         0xffffffffU
#define SRT_NX90_mtgy_op_e39_val         0
#define DFLT_VAL_NX90_mtgy_op_e39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e39': */
#define MSK_USED_BITS_NX90_mtgy_op_e39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e40 */
/* => MWMM operand E register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e40  0x00001AA0U
#define Adr_NX90_mtgy_mtgy_op_e40 0xFF083AA0U
#define Adr_NX90_mtgy_op_e40      0xFF083AA0U
#define DFLT_VAL_NX90_mtgy_op_e40 0x00000000U

#define MSK_NX90_mtgy_op_e40_val         0xffffffffU
#define SRT_NX90_mtgy_op_e40_val         0
#define DFLT_VAL_NX90_mtgy_op_e40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e40': */
#define MSK_USED_BITS_NX90_mtgy_op_e40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e41 */
/* => MWMM operand E register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e41  0x00001AA4U
#define Adr_NX90_mtgy_mtgy_op_e41 0xFF083AA4U
#define Adr_NX90_mtgy_op_e41      0xFF083AA4U
#define DFLT_VAL_NX90_mtgy_op_e41 0x00000000U

#define MSK_NX90_mtgy_op_e41_val         0xffffffffU
#define SRT_NX90_mtgy_op_e41_val         0
#define DFLT_VAL_NX90_mtgy_op_e41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e41': */
#define MSK_USED_BITS_NX90_mtgy_op_e41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e42 */
/* => MWMM operand E register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e42  0x00001AA8U
#define Adr_NX90_mtgy_mtgy_op_e42 0xFF083AA8U
#define Adr_NX90_mtgy_op_e42      0xFF083AA8U
#define DFLT_VAL_NX90_mtgy_op_e42 0x00000000U

#define MSK_NX90_mtgy_op_e42_val         0xffffffffU
#define SRT_NX90_mtgy_op_e42_val         0
#define DFLT_VAL_NX90_mtgy_op_e42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e42': */
#define MSK_USED_BITS_NX90_mtgy_op_e42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e43 */
/* => MWMM operand E register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e43  0x00001AACU
#define Adr_NX90_mtgy_mtgy_op_e43 0xFF083AACU
#define Adr_NX90_mtgy_op_e43      0xFF083AACU
#define DFLT_VAL_NX90_mtgy_op_e43 0x00000000U

#define MSK_NX90_mtgy_op_e43_val         0xffffffffU
#define SRT_NX90_mtgy_op_e43_val         0
#define DFLT_VAL_NX90_mtgy_op_e43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e43': */
#define MSK_USED_BITS_NX90_mtgy_op_e43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e44 */
/* => MWMM operand E register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e44  0x00001AB0U
#define Adr_NX90_mtgy_mtgy_op_e44 0xFF083AB0U
#define Adr_NX90_mtgy_op_e44      0xFF083AB0U
#define DFLT_VAL_NX90_mtgy_op_e44 0x00000000U

#define MSK_NX90_mtgy_op_e44_val         0xffffffffU
#define SRT_NX90_mtgy_op_e44_val         0
#define DFLT_VAL_NX90_mtgy_op_e44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e44': */
#define MSK_USED_BITS_NX90_mtgy_op_e44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e45 */
/* => MWMM operand E register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e45  0x00001AB4U
#define Adr_NX90_mtgy_mtgy_op_e45 0xFF083AB4U
#define Adr_NX90_mtgy_op_e45      0xFF083AB4U
#define DFLT_VAL_NX90_mtgy_op_e45 0x00000000U

#define MSK_NX90_mtgy_op_e45_val         0xffffffffU
#define SRT_NX90_mtgy_op_e45_val         0
#define DFLT_VAL_NX90_mtgy_op_e45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e45': */
#define MSK_USED_BITS_NX90_mtgy_op_e45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e46 */
/* => MWMM operand E register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e46  0x00001AB8U
#define Adr_NX90_mtgy_mtgy_op_e46 0xFF083AB8U
#define Adr_NX90_mtgy_op_e46      0xFF083AB8U
#define DFLT_VAL_NX90_mtgy_op_e46 0x00000000U

#define MSK_NX90_mtgy_op_e46_val         0xffffffffU
#define SRT_NX90_mtgy_op_e46_val         0
#define DFLT_VAL_NX90_mtgy_op_e46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e46': */
#define MSK_USED_BITS_NX90_mtgy_op_e46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e47 */
/* => MWMM operand E register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e47  0x00001ABCU
#define Adr_NX90_mtgy_mtgy_op_e47 0xFF083ABCU
#define Adr_NX90_mtgy_op_e47      0xFF083ABCU
#define DFLT_VAL_NX90_mtgy_op_e47 0x00000000U

#define MSK_NX90_mtgy_op_e47_val         0xffffffffU
#define SRT_NX90_mtgy_op_e47_val         0
#define DFLT_VAL_NX90_mtgy_op_e47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e47': */
#define MSK_USED_BITS_NX90_mtgy_op_e47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e48 */
/* => MWMM operand E register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e48  0x00001AC0U
#define Adr_NX90_mtgy_mtgy_op_e48 0xFF083AC0U
#define Adr_NX90_mtgy_op_e48      0xFF083AC0U
#define DFLT_VAL_NX90_mtgy_op_e48 0x00000000U

#define MSK_NX90_mtgy_op_e48_val         0xffffffffU
#define SRT_NX90_mtgy_op_e48_val         0
#define DFLT_VAL_NX90_mtgy_op_e48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e48': */
#define MSK_USED_BITS_NX90_mtgy_op_e48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e49 */
/* => MWMM operand E register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e49  0x00001AC4U
#define Adr_NX90_mtgy_mtgy_op_e49 0xFF083AC4U
#define Adr_NX90_mtgy_op_e49      0xFF083AC4U
#define DFLT_VAL_NX90_mtgy_op_e49 0x00000000U

#define MSK_NX90_mtgy_op_e49_val         0xffffffffU
#define SRT_NX90_mtgy_op_e49_val         0
#define DFLT_VAL_NX90_mtgy_op_e49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e49': */
#define MSK_USED_BITS_NX90_mtgy_op_e49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e50 */
/* => MWMM operand E register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e50  0x00001AC8U
#define Adr_NX90_mtgy_mtgy_op_e50 0xFF083AC8U
#define Adr_NX90_mtgy_op_e50      0xFF083AC8U
#define DFLT_VAL_NX90_mtgy_op_e50 0x00000000U

#define MSK_NX90_mtgy_op_e50_val         0xffffffffU
#define SRT_NX90_mtgy_op_e50_val         0
#define DFLT_VAL_NX90_mtgy_op_e50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e50': */
#define MSK_USED_BITS_NX90_mtgy_op_e50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e51 */
/* => MWMM operand E register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e51  0x00001ACCU
#define Adr_NX90_mtgy_mtgy_op_e51 0xFF083ACCU
#define Adr_NX90_mtgy_op_e51      0xFF083ACCU
#define DFLT_VAL_NX90_mtgy_op_e51 0x00000000U

#define MSK_NX90_mtgy_op_e51_val         0xffffffffU
#define SRT_NX90_mtgy_op_e51_val         0
#define DFLT_VAL_NX90_mtgy_op_e51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e51': */
#define MSK_USED_BITS_NX90_mtgy_op_e51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e52 */
/* => MWMM operand E register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e52  0x00001AD0U
#define Adr_NX90_mtgy_mtgy_op_e52 0xFF083AD0U
#define Adr_NX90_mtgy_op_e52      0xFF083AD0U
#define DFLT_VAL_NX90_mtgy_op_e52 0x00000000U

#define MSK_NX90_mtgy_op_e52_val         0xffffffffU
#define SRT_NX90_mtgy_op_e52_val         0
#define DFLT_VAL_NX90_mtgy_op_e52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e52': */
#define MSK_USED_BITS_NX90_mtgy_op_e52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e53 */
/* => MWMM operand E register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e53  0x00001AD4U
#define Adr_NX90_mtgy_mtgy_op_e53 0xFF083AD4U
#define Adr_NX90_mtgy_op_e53      0xFF083AD4U
#define DFLT_VAL_NX90_mtgy_op_e53 0x00000000U

#define MSK_NX90_mtgy_op_e53_val         0xffffffffU
#define SRT_NX90_mtgy_op_e53_val         0
#define DFLT_VAL_NX90_mtgy_op_e53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e53': */
#define MSK_USED_BITS_NX90_mtgy_op_e53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e54 */
/* => MWMM operand E register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e54  0x00001AD8U
#define Adr_NX90_mtgy_mtgy_op_e54 0xFF083AD8U
#define Adr_NX90_mtgy_op_e54      0xFF083AD8U
#define DFLT_VAL_NX90_mtgy_op_e54 0x00000000U

#define MSK_NX90_mtgy_op_e54_val         0xffffffffU
#define SRT_NX90_mtgy_op_e54_val         0
#define DFLT_VAL_NX90_mtgy_op_e54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e54': */
#define MSK_USED_BITS_NX90_mtgy_op_e54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e55 */
/* => MWMM operand E register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e55  0x00001ADCU
#define Adr_NX90_mtgy_mtgy_op_e55 0xFF083ADCU
#define Adr_NX90_mtgy_op_e55      0xFF083ADCU
#define DFLT_VAL_NX90_mtgy_op_e55 0x00000000U

#define MSK_NX90_mtgy_op_e55_val         0xffffffffU
#define SRT_NX90_mtgy_op_e55_val         0
#define DFLT_VAL_NX90_mtgy_op_e55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e55': */
#define MSK_USED_BITS_NX90_mtgy_op_e55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e56 */
/* => MWMM operand E register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e56  0x00001AE0U
#define Adr_NX90_mtgy_mtgy_op_e56 0xFF083AE0U
#define Adr_NX90_mtgy_op_e56      0xFF083AE0U
#define DFLT_VAL_NX90_mtgy_op_e56 0x00000000U

#define MSK_NX90_mtgy_op_e56_val         0xffffffffU
#define SRT_NX90_mtgy_op_e56_val         0
#define DFLT_VAL_NX90_mtgy_op_e56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e56': */
#define MSK_USED_BITS_NX90_mtgy_op_e56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e57 */
/* => MWMM operand E register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e57  0x00001AE4U
#define Adr_NX90_mtgy_mtgy_op_e57 0xFF083AE4U
#define Adr_NX90_mtgy_op_e57      0xFF083AE4U
#define DFLT_VAL_NX90_mtgy_op_e57 0x00000000U

#define MSK_NX90_mtgy_op_e57_val         0xffffffffU
#define SRT_NX90_mtgy_op_e57_val         0
#define DFLT_VAL_NX90_mtgy_op_e57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e57': */
#define MSK_USED_BITS_NX90_mtgy_op_e57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e58 */
/* => MWMM operand E register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e58  0x00001AE8U
#define Adr_NX90_mtgy_mtgy_op_e58 0xFF083AE8U
#define Adr_NX90_mtgy_op_e58      0xFF083AE8U
#define DFLT_VAL_NX90_mtgy_op_e58 0x00000000U

#define MSK_NX90_mtgy_op_e58_val         0xffffffffU
#define SRT_NX90_mtgy_op_e58_val         0
#define DFLT_VAL_NX90_mtgy_op_e58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e58': */
#define MSK_USED_BITS_NX90_mtgy_op_e58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e59 */
/* => MWMM operand E register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e59  0x00001AECU
#define Adr_NX90_mtgy_mtgy_op_e59 0xFF083AECU
#define Adr_NX90_mtgy_op_e59      0xFF083AECU
#define DFLT_VAL_NX90_mtgy_op_e59 0x00000000U

#define MSK_NX90_mtgy_op_e59_val         0xffffffffU
#define SRT_NX90_mtgy_op_e59_val         0
#define DFLT_VAL_NX90_mtgy_op_e59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e59': */
#define MSK_USED_BITS_NX90_mtgy_op_e59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e60 */
/* => MWMM operand E register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e60  0x00001AF0U
#define Adr_NX90_mtgy_mtgy_op_e60 0xFF083AF0U
#define Adr_NX90_mtgy_op_e60      0xFF083AF0U
#define DFLT_VAL_NX90_mtgy_op_e60 0x00000000U

#define MSK_NX90_mtgy_op_e60_val         0xffffffffU
#define SRT_NX90_mtgy_op_e60_val         0
#define DFLT_VAL_NX90_mtgy_op_e60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e60': */
#define MSK_USED_BITS_NX90_mtgy_op_e60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e61 */
/* => MWMM operand E register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e61  0x00001AF4U
#define Adr_NX90_mtgy_mtgy_op_e61 0xFF083AF4U
#define Adr_NX90_mtgy_op_e61      0xFF083AF4U
#define DFLT_VAL_NX90_mtgy_op_e61 0x00000000U

#define MSK_NX90_mtgy_op_e61_val         0xffffffffU
#define SRT_NX90_mtgy_op_e61_val         0
#define DFLT_VAL_NX90_mtgy_op_e61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e61': */
#define MSK_USED_BITS_NX90_mtgy_op_e61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e62 */
/* => MWMM operand E register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e62  0x00001AF8U
#define Adr_NX90_mtgy_mtgy_op_e62 0xFF083AF8U
#define Adr_NX90_mtgy_op_e62      0xFF083AF8U
#define DFLT_VAL_NX90_mtgy_op_e62 0x00000000U

#define MSK_NX90_mtgy_op_e62_val         0xffffffffU
#define SRT_NX90_mtgy_op_e62_val         0
#define DFLT_VAL_NX90_mtgy_op_e62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e62': */
#define MSK_USED_BITS_NX90_mtgy_op_e62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e63 */
/* => MWMM operand E register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e63  0x00001AFCU
#define Adr_NX90_mtgy_mtgy_op_e63 0xFF083AFCU
#define Adr_NX90_mtgy_op_e63      0xFF083AFCU
#define DFLT_VAL_NX90_mtgy_op_e63 0x00000000U

#define MSK_NX90_mtgy_op_e63_val         0xffffffffU
#define SRT_NX90_mtgy_op_e63_val         0
#define DFLT_VAL_NX90_mtgy_op_e63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e63': */
#define MSK_USED_BITS_NX90_mtgy_op_e63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e64 */
/* => MWMM operand E register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e64  0x00001B00U
#define Adr_NX90_mtgy_mtgy_op_e64 0xFF083B00U
#define Adr_NX90_mtgy_op_e64      0xFF083B00U
#define DFLT_VAL_NX90_mtgy_op_e64 0x00000000U

#define MSK_NX90_mtgy_op_e64_val         0xffffffffU
#define SRT_NX90_mtgy_op_e64_val         0
#define DFLT_VAL_NX90_mtgy_op_e64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e64': */
#define MSK_USED_BITS_NX90_mtgy_op_e64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e65 */
/* => MWMM operand E register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e65  0x00001B04U
#define Adr_NX90_mtgy_mtgy_op_e65 0xFF083B04U
#define Adr_NX90_mtgy_op_e65      0xFF083B04U
#define DFLT_VAL_NX90_mtgy_op_e65 0x00000000U

#define MSK_NX90_mtgy_op_e65_val         0xffffffffU
#define SRT_NX90_mtgy_op_e65_val         0
#define DFLT_VAL_NX90_mtgy_op_e65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e65': */
#define MSK_USED_BITS_NX90_mtgy_op_e65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e66 */
/* => MWMM operand E register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e66  0x00001B08U
#define Adr_NX90_mtgy_mtgy_op_e66 0xFF083B08U
#define Adr_NX90_mtgy_op_e66      0xFF083B08U
#define DFLT_VAL_NX90_mtgy_op_e66 0x00000000U

#define MSK_NX90_mtgy_op_e66_val         0xffffffffU
#define SRT_NX90_mtgy_op_e66_val         0
#define DFLT_VAL_NX90_mtgy_op_e66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e66': */
#define MSK_USED_BITS_NX90_mtgy_op_e66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e67 */
/* => MWMM operand E register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e67  0x00001B0CU
#define Adr_NX90_mtgy_mtgy_op_e67 0xFF083B0CU
#define Adr_NX90_mtgy_op_e67      0xFF083B0CU
#define DFLT_VAL_NX90_mtgy_op_e67 0x00000000U

#define MSK_NX90_mtgy_op_e67_val         0xffffffffU
#define SRT_NX90_mtgy_op_e67_val         0
#define DFLT_VAL_NX90_mtgy_op_e67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e67': */
#define MSK_USED_BITS_NX90_mtgy_op_e67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e68 */
/* => MWMM operand E register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e68  0x00001B10U
#define Adr_NX90_mtgy_mtgy_op_e68 0xFF083B10U
#define Adr_NX90_mtgy_op_e68      0xFF083B10U
#define DFLT_VAL_NX90_mtgy_op_e68 0x00000000U

#define MSK_NX90_mtgy_op_e68_val         0xffffffffU
#define SRT_NX90_mtgy_op_e68_val         0
#define DFLT_VAL_NX90_mtgy_op_e68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e68': */
#define MSK_USED_BITS_NX90_mtgy_op_e68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e69 */
/* => MWMM operand E register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e69  0x00001B14U
#define Adr_NX90_mtgy_mtgy_op_e69 0xFF083B14U
#define Adr_NX90_mtgy_op_e69      0xFF083B14U
#define DFLT_VAL_NX90_mtgy_op_e69 0x00000000U

#define MSK_NX90_mtgy_op_e69_val         0xffffffffU
#define SRT_NX90_mtgy_op_e69_val         0
#define DFLT_VAL_NX90_mtgy_op_e69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e69': */
#define MSK_USED_BITS_NX90_mtgy_op_e69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e70 */
/* => MWMM operand E register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e70  0x00001B18U
#define Adr_NX90_mtgy_mtgy_op_e70 0xFF083B18U
#define Adr_NX90_mtgy_op_e70      0xFF083B18U
#define DFLT_VAL_NX90_mtgy_op_e70 0x00000000U

#define MSK_NX90_mtgy_op_e70_val         0xffffffffU
#define SRT_NX90_mtgy_op_e70_val         0
#define DFLT_VAL_NX90_mtgy_op_e70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e70': */
#define MSK_USED_BITS_NX90_mtgy_op_e70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e71 */
/* => MWMM operand E register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e71  0x00001B1CU
#define Adr_NX90_mtgy_mtgy_op_e71 0xFF083B1CU
#define Adr_NX90_mtgy_op_e71      0xFF083B1CU
#define DFLT_VAL_NX90_mtgy_op_e71 0x00000000U

#define MSK_NX90_mtgy_op_e71_val         0xffffffffU
#define SRT_NX90_mtgy_op_e71_val         0
#define DFLT_VAL_NX90_mtgy_op_e71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e71': */
#define MSK_USED_BITS_NX90_mtgy_op_e71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e72 */
/* => MWMM operand E register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e72  0x00001B20U
#define Adr_NX90_mtgy_mtgy_op_e72 0xFF083B20U
#define Adr_NX90_mtgy_op_e72      0xFF083B20U
#define DFLT_VAL_NX90_mtgy_op_e72 0x00000000U

#define MSK_NX90_mtgy_op_e72_val         0xffffffffU
#define SRT_NX90_mtgy_op_e72_val         0
#define DFLT_VAL_NX90_mtgy_op_e72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e72': */
#define MSK_USED_BITS_NX90_mtgy_op_e72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e73 */
/* => MWMM operand E register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e73  0x00001B24U
#define Adr_NX90_mtgy_mtgy_op_e73 0xFF083B24U
#define Adr_NX90_mtgy_op_e73      0xFF083B24U
#define DFLT_VAL_NX90_mtgy_op_e73 0x00000000U

#define MSK_NX90_mtgy_op_e73_val         0xffffffffU
#define SRT_NX90_mtgy_op_e73_val         0
#define DFLT_VAL_NX90_mtgy_op_e73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e73': */
#define MSK_USED_BITS_NX90_mtgy_op_e73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e74 */
/* => MWMM operand E register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e74  0x00001B28U
#define Adr_NX90_mtgy_mtgy_op_e74 0xFF083B28U
#define Adr_NX90_mtgy_op_e74      0xFF083B28U
#define DFLT_VAL_NX90_mtgy_op_e74 0x00000000U

#define MSK_NX90_mtgy_op_e74_val         0xffffffffU
#define SRT_NX90_mtgy_op_e74_val         0
#define DFLT_VAL_NX90_mtgy_op_e74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e74': */
#define MSK_USED_BITS_NX90_mtgy_op_e74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e75 */
/* => MWMM operand E register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e75  0x00001B2CU
#define Adr_NX90_mtgy_mtgy_op_e75 0xFF083B2CU
#define Adr_NX90_mtgy_op_e75      0xFF083B2CU
#define DFLT_VAL_NX90_mtgy_op_e75 0x00000000U

#define MSK_NX90_mtgy_op_e75_val         0xffffffffU
#define SRT_NX90_mtgy_op_e75_val         0
#define DFLT_VAL_NX90_mtgy_op_e75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e75': */
#define MSK_USED_BITS_NX90_mtgy_op_e75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e76 */
/* => MWMM operand E register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e76  0x00001B30U
#define Adr_NX90_mtgy_mtgy_op_e76 0xFF083B30U
#define Adr_NX90_mtgy_op_e76      0xFF083B30U
#define DFLT_VAL_NX90_mtgy_op_e76 0x00000000U

#define MSK_NX90_mtgy_op_e76_val         0xffffffffU
#define SRT_NX90_mtgy_op_e76_val         0
#define DFLT_VAL_NX90_mtgy_op_e76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e76': */
#define MSK_USED_BITS_NX90_mtgy_op_e76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e77 */
/* => MWMM operand E register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e77  0x00001B34U
#define Adr_NX90_mtgy_mtgy_op_e77 0xFF083B34U
#define Adr_NX90_mtgy_op_e77      0xFF083B34U
#define DFLT_VAL_NX90_mtgy_op_e77 0x00000000U

#define MSK_NX90_mtgy_op_e77_val         0xffffffffU
#define SRT_NX90_mtgy_op_e77_val         0
#define DFLT_VAL_NX90_mtgy_op_e77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e77': */
#define MSK_USED_BITS_NX90_mtgy_op_e77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e78 */
/* => MWMM operand E register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e78  0x00001B38U
#define Adr_NX90_mtgy_mtgy_op_e78 0xFF083B38U
#define Adr_NX90_mtgy_op_e78      0xFF083B38U
#define DFLT_VAL_NX90_mtgy_op_e78 0x00000000U

#define MSK_NX90_mtgy_op_e78_val         0xffffffffU
#define SRT_NX90_mtgy_op_e78_val         0
#define DFLT_VAL_NX90_mtgy_op_e78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e78': */
#define MSK_USED_BITS_NX90_mtgy_op_e78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e79 */
/* => MWMM operand E register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e79  0x00001B3CU
#define Adr_NX90_mtgy_mtgy_op_e79 0xFF083B3CU
#define Adr_NX90_mtgy_op_e79      0xFF083B3CU
#define DFLT_VAL_NX90_mtgy_op_e79 0x00000000U

#define MSK_NX90_mtgy_op_e79_val         0xffffffffU
#define SRT_NX90_mtgy_op_e79_val         0
#define DFLT_VAL_NX90_mtgy_op_e79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e79': */
#define MSK_USED_BITS_NX90_mtgy_op_e79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e80 */
/* => MWMM operand E register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e80  0x00001B40U
#define Adr_NX90_mtgy_mtgy_op_e80 0xFF083B40U
#define Adr_NX90_mtgy_op_e80      0xFF083B40U
#define DFLT_VAL_NX90_mtgy_op_e80 0x00000000U

#define MSK_NX90_mtgy_op_e80_val         0xffffffffU
#define SRT_NX90_mtgy_op_e80_val         0
#define DFLT_VAL_NX90_mtgy_op_e80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e80': */
#define MSK_USED_BITS_NX90_mtgy_op_e80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e81 */
/* => MWMM operand E register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e81  0x00001B44U
#define Adr_NX90_mtgy_mtgy_op_e81 0xFF083B44U
#define Adr_NX90_mtgy_op_e81      0xFF083B44U
#define DFLT_VAL_NX90_mtgy_op_e81 0x00000000U

#define MSK_NX90_mtgy_op_e81_val         0xffffffffU
#define SRT_NX90_mtgy_op_e81_val         0
#define DFLT_VAL_NX90_mtgy_op_e81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e81': */
#define MSK_USED_BITS_NX90_mtgy_op_e81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e82 */
/* => MWMM operand E register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e82  0x00001B48U
#define Adr_NX90_mtgy_mtgy_op_e82 0xFF083B48U
#define Adr_NX90_mtgy_op_e82      0xFF083B48U
#define DFLT_VAL_NX90_mtgy_op_e82 0x00000000U

#define MSK_NX90_mtgy_op_e82_val         0xffffffffU
#define SRT_NX90_mtgy_op_e82_val         0
#define DFLT_VAL_NX90_mtgy_op_e82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e82': */
#define MSK_USED_BITS_NX90_mtgy_op_e82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e83 */
/* => MWMM operand E register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e83  0x00001B4CU
#define Adr_NX90_mtgy_mtgy_op_e83 0xFF083B4CU
#define Adr_NX90_mtgy_op_e83      0xFF083B4CU
#define DFLT_VAL_NX90_mtgy_op_e83 0x00000000U

#define MSK_NX90_mtgy_op_e83_val         0xffffffffU
#define SRT_NX90_mtgy_op_e83_val         0
#define DFLT_VAL_NX90_mtgy_op_e83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e83': */
#define MSK_USED_BITS_NX90_mtgy_op_e83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e84 */
/* => MWMM operand E register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e84  0x00001B50U
#define Adr_NX90_mtgy_mtgy_op_e84 0xFF083B50U
#define Adr_NX90_mtgy_op_e84      0xFF083B50U
#define DFLT_VAL_NX90_mtgy_op_e84 0x00000000U

#define MSK_NX90_mtgy_op_e84_val         0xffffffffU
#define SRT_NX90_mtgy_op_e84_val         0
#define DFLT_VAL_NX90_mtgy_op_e84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e84': */
#define MSK_USED_BITS_NX90_mtgy_op_e84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e85 */
/* => MWMM operand E register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e85  0x00001B54U
#define Adr_NX90_mtgy_mtgy_op_e85 0xFF083B54U
#define Adr_NX90_mtgy_op_e85      0xFF083B54U
#define DFLT_VAL_NX90_mtgy_op_e85 0x00000000U

#define MSK_NX90_mtgy_op_e85_val         0xffffffffU
#define SRT_NX90_mtgy_op_e85_val         0
#define DFLT_VAL_NX90_mtgy_op_e85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e85': */
#define MSK_USED_BITS_NX90_mtgy_op_e85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e86 */
/* => MWMM operand E register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e86  0x00001B58U
#define Adr_NX90_mtgy_mtgy_op_e86 0xFF083B58U
#define Adr_NX90_mtgy_op_e86      0xFF083B58U
#define DFLT_VAL_NX90_mtgy_op_e86 0x00000000U

#define MSK_NX90_mtgy_op_e86_val         0xffffffffU
#define SRT_NX90_mtgy_op_e86_val         0
#define DFLT_VAL_NX90_mtgy_op_e86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e86': */
#define MSK_USED_BITS_NX90_mtgy_op_e86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e87 */
/* => MWMM operand E register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e87  0x00001B5CU
#define Adr_NX90_mtgy_mtgy_op_e87 0xFF083B5CU
#define Adr_NX90_mtgy_op_e87      0xFF083B5CU
#define DFLT_VAL_NX90_mtgy_op_e87 0x00000000U

#define MSK_NX90_mtgy_op_e87_val         0xffffffffU
#define SRT_NX90_mtgy_op_e87_val         0
#define DFLT_VAL_NX90_mtgy_op_e87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e87': */
#define MSK_USED_BITS_NX90_mtgy_op_e87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e88 */
/* => MWMM operand E register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e88  0x00001B60U
#define Adr_NX90_mtgy_mtgy_op_e88 0xFF083B60U
#define Adr_NX90_mtgy_op_e88      0xFF083B60U
#define DFLT_VAL_NX90_mtgy_op_e88 0x00000000U

#define MSK_NX90_mtgy_op_e88_val         0xffffffffU
#define SRT_NX90_mtgy_op_e88_val         0
#define DFLT_VAL_NX90_mtgy_op_e88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e88': */
#define MSK_USED_BITS_NX90_mtgy_op_e88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e89 */
/* => MWMM operand E register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e89  0x00001B64U
#define Adr_NX90_mtgy_mtgy_op_e89 0xFF083B64U
#define Adr_NX90_mtgy_op_e89      0xFF083B64U
#define DFLT_VAL_NX90_mtgy_op_e89 0x00000000U

#define MSK_NX90_mtgy_op_e89_val         0xffffffffU
#define SRT_NX90_mtgy_op_e89_val         0
#define DFLT_VAL_NX90_mtgy_op_e89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e89': */
#define MSK_USED_BITS_NX90_mtgy_op_e89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e90 */
/* => MWMM operand E register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e90  0x00001B68U
#define Adr_NX90_mtgy_mtgy_op_e90 0xFF083B68U
#define Adr_NX90_mtgy_op_e90      0xFF083B68U
#define DFLT_VAL_NX90_mtgy_op_e90 0x00000000U

#define MSK_NX90_mtgy_op_e90_val         0xffffffffU
#define SRT_NX90_mtgy_op_e90_val         0
#define DFLT_VAL_NX90_mtgy_op_e90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e90': */
#define MSK_USED_BITS_NX90_mtgy_op_e90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e91 */
/* => MWMM operand E register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e91  0x00001B6CU
#define Adr_NX90_mtgy_mtgy_op_e91 0xFF083B6CU
#define Adr_NX90_mtgy_op_e91      0xFF083B6CU
#define DFLT_VAL_NX90_mtgy_op_e91 0x00000000U

#define MSK_NX90_mtgy_op_e91_val         0xffffffffU
#define SRT_NX90_mtgy_op_e91_val         0
#define DFLT_VAL_NX90_mtgy_op_e91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e91': */
#define MSK_USED_BITS_NX90_mtgy_op_e91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e92 */
/* => MWMM operand E register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e92  0x00001B70U
#define Adr_NX90_mtgy_mtgy_op_e92 0xFF083B70U
#define Adr_NX90_mtgy_op_e92      0xFF083B70U
#define DFLT_VAL_NX90_mtgy_op_e92 0x00000000U

#define MSK_NX90_mtgy_op_e92_val         0xffffffffU
#define SRT_NX90_mtgy_op_e92_val         0
#define DFLT_VAL_NX90_mtgy_op_e92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e92': */
#define MSK_USED_BITS_NX90_mtgy_op_e92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e93 */
/* => MWMM operand E register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e93  0x00001B74U
#define Adr_NX90_mtgy_mtgy_op_e93 0xFF083B74U
#define Adr_NX90_mtgy_op_e93      0xFF083B74U
#define DFLT_VAL_NX90_mtgy_op_e93 0x00000000U

#define MSK_NX90_mtgy_op_e93_val         0xffffffffU
#define SRT_NX90_mtgy_op_e93_val         0
#define DFLT_VAL_NX90_mtgy_op_e93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e93': */
#define MSK_USED_BITS_NX90_mtgy_op_e93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e94 */
/* => MWMM operand E register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e94  0x00001B78U
#define Adr_NX90_mtgy_mtgy_op_e94 0xFF083B78U
#define Adr_NX90_mtgy_op_e94      0xFF083B78U
#define DFLT_VAL_NX90_mtgy_op_e94 0x00000000U

#define MSK_NX90_mtgy_op_e94_val         0xffffffffU
#define SRT_NX90_mtgy_op_e94_val         0
#define DFLT_VAL_NX90_mtgy_op_e94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e94': */
#define MSK_USED_BITS_NX90_mtgy_op_e94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e95 */
/* => MWMM operand E register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e95  0x00001B7CU
#define Adr_NX90_mtgy_mtgy_op_e95 0xFF083B7CU
#define Adr_NX90_mtgy_op_e95      0xFF083B7CU
#define DFLT_VAL_NX90_mtgy_op_e95 0x00000000U

#define MSK_NX90_mtgy_op_e95_val         0xffffffffU
#define SRT_NX90_mtgy_op_e95_val         0
#define DFLT_VAL_NX90_mtgy_op_e95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e95': */
#define MSK_USED_BITS_NX90_mtgy_op_e95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e96 */
/* => MWMM operand E register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e96  0x00001B80U
#define Adr_NX90_mtgy_mtgy_op_e96 0xFF083B80U
#define Adr_NX90_mtgy_op_e96      0xFF083B80U
#define DFLT_VAL_NX90_mtgy_op_e96 0x00000000U

#define MSK_NX90_mtgy_op_e96_val         0xffffffffU
#define SRT_NX90_mtgy_op_e96_val         0
#define DFLT_VAL_NX90_mtgy_op_e96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e96': */
#define MSK_USED_BITS_NX90_mtgy_op_e96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e97 */
/* => MWMM operand E register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e97  0x00001B84U
#define Adr_NX90_mtgy_mtgy_op_e97 0xFF083B84U
#define Adr_NX90_mtgy_op_e97      0xFF083B84U
#define DFLT_VAL_NX90_mtgy_op_e97 0x00000000U

#define MSK_NX90_mtgy_op_e97_val         0xffffffffU
#define SRT_NX90_mtgy_op_e97_val         0
#define DFLT_VAL_NX90_mtgy_op_e97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e97': */
#define MSK_USED_BITS_NX90_mtgy_op_e97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e98 */
/* => MWMM operand E register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e98  0x00001B88U
#define Adr_NX90_mtgy_mtgy_op_e98 0xFF083B88U
#define Adr_NX90_mtgy_op_e98      0xFF083B88U
#define DFLT_VAL_NX90_mtgy_op_e98 0x00000000U

#define MSK_NX90_mtgy_op_e98_val         0xffffffffU
#define SRT_NX90_mtgy_op_e98_val         0
#define DFLT_VAL_NX90_mtgy_op_e98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e98': */
#define MSK_USED_BITS_NX90_mtgy_op_e98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e99 */
/* => MWMM operand E register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e99  0x00001B8CU
#define Adr_NX90_mtgy_mtgy_op_e99 0xFF083B8CU
#define Adr_NX90_mtgy_op_e99      0xFF083B8CU
#define DFLT_VAL_NX90_mtgy_op_e99 0x00000000U

#define MSK_NX90_mtgy_op_e99_val         0xffffffffU
#define SRT_NX90_mtgy_op_e99_val         0
#define DFLT_VAL_NX90_mtgy_op_e99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e99': */
#define MSK_USED_BITS_NX90_mtgy_op_e99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e100 */
/* => MWMM operand E register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e100  0x00001B90U
#define Adr_NX90_mtgy_mtgy_op_e100 0xFF083B90U
#define Adr_NX90_mtgy_op_e100      0xFF083B90U
#define DFLT_VAL_NX90_mtgy_op_e100 0x00000000U

#define MSK_NX90_mtgy_op_e100_val         0xffffffffU
#define SRT_NX90_mtgy_op_e100_val         0
#define DFLT_VAL_NX90_mtgy_op_e100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e100': */
#define MSK_USED_BITS_NX90_mtgy_op_e100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e101 */
/* => MWMM operand E register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e101  0x00001B94U
#define Adr_NX90_mtgy_mtgy_op_e101 0xFF083B94U
#define Adr_NX90_mtgy_op_e101      0xFF083B94U
#define DFLT_VAL_NX90_mtgy_op_e101 0x00000000U

#define MSK_NX90_mtgy_op_e101_val         0xffffffffU
#define SRT_NX90_mtgy_op_e101_val         0
#define DFLT_VAL_NX90_mtgy_op_e101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e101': */
#define MSK_USED_BITS_NX90_mtgy_op_e101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e102 */
/* => MWMM operand E register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e102  0x00001B98U
#define Adr_NX90_mtgy_mtgy_op_e102 0xFF083B98U
#define Adr_NX90_mtgy_op_e102      0xFF083B98U
#define DFLT_VAL_NX90_mtgy_op_e102 0x00000000U

#define MSK_NX90_mtgy_op_e102_val         0xffffffffU
#define SRT_NX90_mtgy_op_e102_val         0
#define DFLT_VAL_NX90_mtgy_op_e102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e102': */
#define MSK_USED_BITS_NX90_mtgy_op_e102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e103 */
/* => MWMM operand E register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e103  0x00001B9CU
#define Adr_NX90_mtgy_mtgy_op_e103 0xFF083B9CU
#define Adr_NX90_mtgy_op_e103      0xFF083B9CU
#define DFLT_VAL_NX90_mtgy_op_e103 0x00000000U

#define MSK_NX90_mtgy_op_e103_val         0xffffffffU
#define SRT_NX90_mtgy_op_e103_val         0
#define DFLT_VAL_NX90_mtgy_op_e103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e103': */
#define MSK_USED_BITS_NX90_mtgy_op_e103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e104 */
/* => MWMM operand E register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e104  0x00001BA0U
#define Adr_NX90_mtgy_mtgy_op_e104 0xFF083BA0U
#define Adr_NX90_mtgy_op_e104      0xFF083BA0U
#define DFLT_VAL_NX90_mtgy_op_e104 0x00000000U

#define MSK_NX90_mtgy_op_e104_val         0xffffffffU
#define SRT_NX90_mtgy_op_e104_val         0
#define DFLT_VAL_NX90_mtgy_op_e104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e104': */
#define MSK_USED_BITS_NX90_mtgy_op_e104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e105 */
/* => MWMM operand E register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e105  0x00001BA4U
#define Adr_NX90_mtgy_mtgy_op_e105 0xFF083BA4U
#define Adr_NX90_mtgy_op_e105      0xFF083BA4U
#define DFLT_VAL_NX90_mtgy_op_e105 0x00000000U

#define MSK_NX90_mtgy_op_e105_val         0xffffffffU
#define SRT_NX90_mtgy_op_e105_val         0
#define DFLT_VAL_NX90_mtgy_op_e105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e105': */
#define MSK_USED_BITS_NX90_mtgy_op_e105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e106 */
/* => MWMM operand E register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e106  0x00001BA8U
#define Adr_NX90_mtgy_mtgy_op_e106 0xFF083BA8U
#define Adr_NX90_mtgy_op_e106      0xFF083BA8U
#define DFLT_VAL_NX90_mtgy_op_e106 0x00000000U

#define MSK_NX90_mtgy_op_e106_val         0xffffffffU
#define SRT_NX90_mtgy_op_e106_val         0
#define DFLT_VAL_NX90_mtgy_op_e106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e106': */
#define MSK_USED_BITS_NX90_mtgy_op_e106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e107 */
/* => MWMM operand E register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e107  0x00001BACU
#define Adr_NX90_mtgy_mtgy_op_e107 0xFF083BACU
#define Adr_NX90_mtgy_op_e107      0xFF083BACU
#define DFLT_VAL_NX90_mtgy_op_e107 0x00000000U

#define MSK_NX90_mtgy_op_e107_val         0xffffffffU
#define SRT_NX90_mtgy_op_e107_val         0
#define DFLT_VAL_NX90_mtgy_op_e107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e107': */
#define MSK_USED_BITS_NX90_mtgy_op_e107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e108 */
/* => MWMM operand E register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e108  0x00001BB0U
#define Adr_NX90_mtgy_mtgy_op_e108 0xFF083BB0U
#define Adr_NX90_mtgy_op_e108      0xFF083BB0U
#define DFLT_VAL_NX90_mtgy_op_e108 0x00000000U

#define MSK_NX90_mtgy_op_e108_val         0xffffffffU
#define SRT_NX90_mtgy_op_e108_val         0
#define DFLT_VAL_NX90_mtgy_op_e108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e108': */
#define MSK_USED_BITS_NX90_mtgy_op_e108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e109 */
/* => MWMM operand E register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e109  0x00001BB4U
#define Adr_NX90_mtgy_mtgy_op_e109 0xFF083BB4U
#define Adr_NX90_mtgy_op_e109      0xFF083BB4U
#define DFLT_VAL_NX90_mtgy_op_e109 0x00000000U

#define MSK_NX90_mtgy_op_e109_val         0xffffffffU
#define SRT_NX90_mtgy_op_e109_val         0
#define DFLT_VAL_NX90_mtgy_op_e109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e109': */
#define MSK_USED_BITS_NX90_mtgy_op_e109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e110 */
/* => MWMM operand E register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e110  0x00001BB8U
#define Adr_NX90_mtgy_mtgy_op_e110 0xFF083BB8U
#define Adr_NX90_mtgy_op_e110      0xFF083BB8U
#define DFLT_VAL_NX90_mtgy_op_e110 0x00000000U

#define MSK_NX90_mtgy_op_e110_val         0xffffffffU
#define SRT_NX90_mtgy_op_e110_val         0
#define DFLT_VAL_NX90_mtgy_op_e110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e110': */
#define MSK_USED_BITS_NX90_mtgy_op_e110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e111 */
/* => MWMM operand E register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e111  0x00001BBCU
#define Adr_NX90_mtgy_mtgy_op_e111 0xFF083BBCU
#define Adr_NX90_mtgy_op_e111      0xFF083BBCU
#define DFLT_VAL_NX90_mtgy_op_e111 0x00000000U

#define MSK_NX90_mtgy_op_e111_val         0xffffffffU
#define SRT_NX90_mtgy_op_e111_val         0
#define DFLT_VAL_NX90_mtgy_op_e111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e111': */
#define MSK_USED_BITS_NX90_mtgy_op_e111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e112 */
/* => MWMM operand E register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e112  0x00001BC0U
#define Adr_NX90_mtgy_mtgy_op_e112 0xFF083BC0U
#define Adr_NX90_mtgy_op_e112      0xFF083BC0U
#define DFLT_VAL_NX90_mtgy_op_e112 0x00000000U

#define MSK_NX90_mtgy_op_e112_val         0xffffffffU
#define SRT_NX90_mtgy_op_e112_val         0
#define DFLT_VAL_NX90_mtgy_op_e112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e112': */
#define MSK_USED_BITS_NX90_mtgy_op_e112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e113 */
/* => MWMM operand E register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e113  0x00001BC4U
#define Adr_NX90_mtgy_mtgy_op_e113 0xFF083BC4U
#define Adr_NX90_mtgy_op_e113      0xFF083BC4U
#define DFLT_VAL_NX90_mtgy_op_e113 0x00000000U

#define MSK_NX90_mtgy_op_e113_val         0xffffffffU
#define SRT_NX90_mtgy_op_e113_val         0
#define DFLT_VAL_NX90_mtgy_op_e113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e113': */
#define MSK_USED_BITS_NX90_mtgy_op_e113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e114 */
/* => MWMM operand E register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e114  0x00001BC8U
#define Adr_NX90_mtgy_mtgy_op_e114 0xFF083BC8U
#define Adr_NX90_mtgy_op_e114      0xFF083BC8U
#define DFLT_VAL_NX90_mtgy_op_e114 0x00000000U

#define MSK_NX90_mtgy_op_e114_val         0xffffffffU
#define SRT_NX90_mtgy_op_e114_val         0
#define DFLT_VAL_NX90_mtgy_op_e114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e114': */
#define MSK_USED_BITS_NX90_mtgy_op_e114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e115 */
/* => MWMM operand E register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e115  0x00001BCCU
#define Adr_NX90_mtgy_mtgy_op_e115 0xFF083BCCU
#define Adr_NX90_mtgy_op_e115      0xFF083BCCU
#define DFLT_VAL_NX90_mtgy_op_e115 0x00000000U

#define MSK_NX90_mtgy_op_e115_val         0xffffffffU
#define SRT_NX90_mtgy_op_e115_val         0
#define DFLT_VAL_NX90_mtgy_op_e115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e115': */
#define MSK_USED_BITS_NX90_mtgy_op_e115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e116 */
/* => MWMM operand E register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e116  0x00001BD0U
#define Adr_NX90_mtgy_mtgy_op_e116 0xFF083BD0U
#define Adr_NX90_mtgy_op_e116      0xFF083BD0U
#define DFLT_VAL_NX90_mtgy_op_e116 0x00000000U

#define MSK_NX90_mtgy_op_e116_val         0xffffffffU
#define SRT_NX90_mtgy_op_e116_val         0
#define DFLT_VAL_NX90_mtgy_op_e116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e116': */
#define MSK_USED_BITS_NX90_mtgy_op_e116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e117 */
/* => MWMM operand E register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e117  0x00001BD4U
#define Adr_NX90_mtgy_mtgy_op_e117 0xFF083BD4U
#define Adr_NX90_mtgy_op_e117      0xFF083BD4U
#define DFLT_VAL_NX90_mtgy_op_e117 0x00000000U

#define MSK_NX90_mtgy_op_e117_val         0xffffffffU
#define SRT_NX90_mtgy_op_e117_val         0
#define DFLT_VAL_NX90_mtgy_op_e117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e117': */
#define MSK_USED_BITS_NX90_mtgy_op_e117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e118 */
/* => MWMM operand E register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e118  0x00001BD8U
#define Adr_NX90_mtgy_mtgy_op_e118 0xFF083BD8U
#define Adr_NX90_mtgy_op_e118      0xFF083BD8U
#define DFLT_VAL_NX90_mtgy_op_e118 0x00000000U

#define MSK_NX90_mtgy_op_e118_val         0xffffffffU
#define SRT_NX90_mtgy_op_e118_val         0
#define DFLT_VAL_NX90_mtgy_op_e118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e118': */
#define MSK_USED_BITS_NX90_mtgy_op_e118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e119 */
/* => MWMM operand E register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e119  0x00001BDCU
#define Adr_NX90_mtgy_mtgy_op_e119 0xFF083BDCU
#define Adr_NX90_mtgy_op_e119      0xFF083BDCU
#define DFLT_VAL_NX90_mtgy_op_e119 0x00000000U

#define MSK_NX90_mtgy_op_e119_val         0xffffffffU
#define SRT_NX90_mtgy_op_e119_val         0
#define DFLT_VAL_NX90_mtgy_op_e119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e119': */
#define MSK_USED_BITS_NX90_mtgy_op_e119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e120 */
/* => MWMM operand E register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e120  0x00001BE0U
#define Adr_NX90_mtgy_mtgy_op_e120 0xFF083BE0U
#define Adr_NX90_mtgy_op_e120      0xFF083BE0U
#define DFLT_VAL_NX90_mtgy_op_e120 0x00000000U

#define MSK_NX90_mtgy_op_e120_val         0xffffffffU
#define SRT_NX90_mtgy_op_e120_val         0
#define DFLT_VAL_NX90_mtgy_op_e120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e120': */
#define MSK_USED_BITS_NX90_mtgy_op_e120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e121 */
/* => MWMM operand E register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e121  0x00001BE4U
#define Adr_NX90_mtgy_mtgy_op_e121 0xFF083BE4U
#define Adr_NX90_mtgy_op_e121      0xFF083BE4U
#define DFLT_VAL_NX90_mtgy_op_e121 0x00000000U

#define MSK_NX90_mtgy_op_e121_val         0xffffffffU
#define SRT_NX90_mtgy_op_e121_val         0
#define DFLT_VAL_NX90_mtgy_op_e121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e121': */
#define MSK_USED_BITS_NX90_mtgy_op_e121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e122 */
/* => MWMM operand E register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e122  0x00001BE8U
#define Adr_NX90_mtgy_mtgy_op_e122 0xFF083BE8U
#define Adr_NX90_mtgy_op_e122      0xFF083BE8U
#define DFLT_VAL_NX90_mtgy_op_e122 0x00000000U

#define MSK_NX90_mtgy_op_e122_val         0xffffffffU
#define SRT_NX90_mtgy_op_e122_val         0
#define DFLT_VAL_NX90_mtgy_op_e122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e122': */
#define MSK_USED_BITS_NX90_mtgy_op_e122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e123 */
/* => MWMM operand E register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e123  0x00001BECU
#define Adr_NX90_mtgy_mtgy_op_e123 0xFF083BECU
#define Adr_NX90_mtgy_op_e123      0xFF083BECU
#define DFLT_VAL_NX90_mtgy_op_e123 0x00000000U

#define MSK_NX90_mtgy_op_e123_val         0xffffffffU
#define SRT_NX90_mtgy_op_e123_val         0
#define DFLT_VAL_NX90_mtgy_op_e123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e123': */
#define MSK_USED_BITS_NX90_mtgy_op_e123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e124 */
/* => MWMM operand E register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e124  0x00001BF0U
#define Adr_NX90_mtgy_mtgy_op_e124 0xFF083BF0U
#define Adr_NX90_mtgy_op_e124      0xFF083BF0U
#define DFLT_VAL_NX90_mtgy_op_e124 0x00000000U

#define MSK_NX90_mtgy_op_e124_val         0xffffffffU
#define SRT_NX90_mtgy_op_e124_val         0
#define DFLT_VAL_NX90_mtgy_op_e124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e124': */
#define MSK_USED_BITS_NX90_mtgy_op_e124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e125 */
/* => MWMM operand E register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e125  0x00001BF4U
#define Adr_NX90_mtgy_mtgy_op_e125 0xFF083BF4U
#define Adr_NX90_mtgy_op_e125      0xFF083BF4U
#define DFLT_VAL_NX90_mtgy_op_e125 0x00000000U

#define MSK_NX90_mtgy_op_e125_val         0xffffffffU
#define SRT_NX90_mtgy_op_e125_val         0
#define DFLT_VAL_NX90_mtgy_op_e125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e125': */
#define MSK_USED_BITS_NX90_mtgy_op_e125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e126 */
/* => MWMM operand E register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e126  0x00001BF8U
#define Adr_NX90_mtgy_mtgy_op_e126 0xFF083BF8U
#define Adr_NX90_mtgy_op_e126      0xFF083BF8U
#define DFLT_VAL_NX90_mtgy_op_e126 0x00000000U

#define MSK_NX90_mtgy_op_e126_val         0xffffffffU
#define SRT_NX90_mtgy_op_e126_val         0
#define DFLT_VAL_NX90_mtgy_op_e126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e126': */
#define MSK_USED_BITS_NX90_mtgy_op_e126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e127 */
/* => MWMM operand E register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e127  0x00001BFCU
#define Adr_NX90_mtgy_mtgy_op_e127 0xFF083BFCU
#define Adr_NX90_mtgy_op_e127      0xFF083BFCU
#define DFLT_VAL_NX90_mtgy_op_e127 0x00000000U

#define MSK_NX90_mtgy_op_e127_val         0xffffffffU
#define SRT_NX90_mtgy_op_e127_val         0
#define DFLT_VAL_NX90_mtgy_op_e127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_e127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_e127': */
#define MSK_USED_BITS_NX90_mtgy_op_e127 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x0 */
/* => MWMM operand X register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x0  0x00001C00U
#define Adr_NX90_mtgy_mtgy_op_x0 0xFF083C00U
#define Adr_NX90_mtgy_op_x0      0xFF083C00U
#define DFLT_VAL_NX90_mtgy_op_x0 0x00000000U

#define MSK_NX90_mtgy_op_x0_val         0xffffffffU
#define SRT_NX90_mtgy_op_x0_val         0
#define DFLT_VAL_NX90_mtgy_op_x0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x0_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x0': */
#define MSK_USED_BITS_NX90_mtgy_op_x0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x1 */
/* => MWMM operand X register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x1  0x00001C04U
#define Adr_NX90_mtgy_mtgy_op_x1 0xFF083C04U
#define Adr_NX90_mtgy_op_x1      0xFF083C04U
#define DFLT_VAL_NX90_mtgy_op_x1 0x00000000U

#define MSK_NX90_mtgy_op_x1_val         0xffffffffU
#define SRT_NX90_mtgy_op_x1_val         0
#define DFLT_VAL_NX90_mtgy_op_x1_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x1_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x1': */
#define MSK_USED_BITS_NX90_mtgy_op_x1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x2 */
/* => MWMM operand X register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x2  0x00001C08U
#define Adr_NX90_mtgy_mtgy_op_x2 0xFF083C08U
#define Adr_NX90_mtgy_op_x2      0xFF083C08U
#define DFLT_VAL_NX90_mtgy_op_x2 0x00000000U

#define MSK_NX90_mtgy_op_x2_val         0xffffffffU
#define SRT_NX90_mtgy_op_x2_val         0
#define DFLT_VAL_NX90_mtgy_op_x2_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x2_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x2': */
#define MSK_USED_BITS_NX90_mtgy_op_x2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x3 */
/* => MWMM operand X register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x3  0x00001C0CU
#define Adr_NX90_mtgy_mtgy_op_x3 0xFF083C0CU
#define Adr_NX90_mtgy_op_x3      0xFF083C0CU
#define DFLT_VAL_NX90_mtgy_op_x3 0x00000000U

#define MSK_NX90_mtgy_op_x3_val         0xffffffffU
#define SRT_NX90_mtgy_op_x3_val         0
#define DFLT_VAL_NX90_mtgy_op_x3_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x3_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x3': */
#define MSK_USED_BITS_NX90_mtgy_op_x3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x4 */
/* => MWMM operand X register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x4  0x00001C10U
#define Adr_NX90_mtgy_mtgy_op_x4 0xFF083C10U
#define Adr_NX90_mtgy_op_x4      0xFF083C10U
#define DFLT_VAL_NX90_mtgy_op_x4 0x00000000U

#define MSK_NX90_mtgy_op_x4_val         0xffffffffU
#define SRT_NX90_mtgy_op_x4_val         0
#define DFLT_VAL_NX90_mtgy_op_x4_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x4_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x4': */
#define MSK_USED_BITS_NX90_mtgy_op_x4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x5 */
/* => MWMM operand X register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x5  0x00001C14U
#define Adr_NX90_mtgy_mtgy_op_x5 0xFF083C14U
#define Adr_NX90_mtgy_op_x5      0xFF083C14U
#define DFLT_VAL_NX90_mtgy_op_x5 0x00000000U

#define MSK_NX90_mtgy_op_x5_val         0xffffffffU
#define SRT_NX90_mtgy_op_x5_val         0
#define DFLT_VAL_NX90_mtgy_op_x5_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x5_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x5': */
#define MSK_USED_BITS_NX90_mtgy_op_x5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x6 */
/* => MWMM operand X register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x6  0x00001C18U
#define Adr_NX90_mtgy_mtgy_op_x6 0xFF083C18U
#define Adr_NX90_mtgy_op_x6      0xFF083C18U
#define DFLT_VAL_NX90_mtgy_op_x6 0x00000000U

#define MSK_NX90_mtgy_op_x6_val         0xffffffffU
#define SRT_NX90_mtgy_op_x6_val         0
#define DFLT_VAL_NX90_mtgy_op_x6_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x6_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x6': */
#define MSK_USED_BITS_NX90_mtgy_op_x6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x7 */
/* => MWMM operand X register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x7  0x00001C1CU
#define Adr_NX90_mtgy_mtgy_op_x7 0xFF083C1CU
#define Adr_NX90_mtgy_op_x7      0xFF083C1CU
#define DFLT_VAL_NX90_mtgy_op_x7 0x00000000U

#define MSK_NX90_mtgy_op_x7_val         0xffffffffU
#define SRT_NX90_mtgy_op_x7_val         0
#define DFLT_VAL_NX90_mtgy_op_x7_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x7_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x7': */
#define MSK_USED_BITS_NX90_mtgy_op_x7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x8 */
/* => MWMM operand X register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x8  0x00001C20U
#define Adr_NX90_mtgy_mtgy_op_x8 0xFF083C20U
#define Adr_NX90_mtgy_op_x8      0xFF083C20U
#define DFLT_VAL_NX90_mtgy_op_x8 0x00000000U

#define MSK_NX90_mtgy_op_x8_val         0xffffffffU
#define SRT_NX90_mtgy_op_x8_val         0
#define DFLT_VAL_NX90_mtgy_op_x8_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x8_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x8': */
#define MSK_USED_BITS_NX90_mtgy_op_x8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x9 */
/* => MWMM operand X register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x9  0x00001C24U
#define Adr_NX90_mtgy_mtgy_op_x9 0xFF083C24U
#define Adr_NX90_mtgy_op_x9      0xFF083C24U
#define DFLT_VAL_NX90_mtgy_op_x9 0x00000000U

#define MSK_NX90_mtgy_op_x9_val         0xffffffffU
#define SRT_NX90_mtgy_op_x9_val         0
#define DFLT_VAL_NX90_mtgy_op_x9_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x9_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x9': */
#define MSK_USED_BITS_NX90_mtgy_op_x9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x10 */
/* => MWMM operand X register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x10  0x00001C28U
#define Adr_NX90_mtgy_mtgy_op_x10 0xFF083C28U
#define Adr_NX90_mtgy_op_x10      0xFF083C28U
#define DFLT_VAL_NX90_mtgy_op_x10 0x00000000U

#define MSK_NX90_mtgy_op_x10_val         0xffffffffU
#define SRT_NX90_mtgy_op_x10_val         0
#define DFLT_VAL_NX90_mtgy_op_x10_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x10_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x10': */
#define MSK_USED_BITS_NX90_mtgy_op_x10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x11 */
/* => MWMM operand X register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x11  0x00001C2CU
#define Adr_NX90_mtgy_mtgy_op_x11 0xFF083C2CU
#define Adr_NX90_mtgy_op_x11      0xFF083C2CU
#define DFLT_VAL_NX90_mtgy_op_x11 0x00000000U

#define MSK_NX90_mtgy_op_x11_val         0xffffffffU
#define SRT_NX90_mtgy_op_x11_val         0
#define DFLT_VAL_NX90_mtgy_op_x11_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x11_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x11': */
#define MSK_USED_BITS_NX90_mtgy_op_x11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x12 */
/* => MWMM operand X register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x12  0x00001C30U
#define Adr_NX90_mtgy_mtgy_op_x12 0xFF083C30U
#define Adr_NX90_mtgy_op_x12      0xFF083C30U
#define DFLT_VAL_NX90_mtgy_op_x12 0x00000000U

#define MSK_NX90_mtgy_op_x12_val         0xffffffffU
#define SRT_NX90_mtgy_op_x12_val         0
#define DFLT_VAL_NX90_mtgy_op_x12_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x12_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x12': */
#define MSK_USED_BITS_NX90_mtgy_op_x12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x13 */
/* => MWMM operand X register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x13  0x00001C34U
#define Adr_NX90_mtgy_mtgy_op_x13 0xFF083C34U
#define Adr_NX90_mtgy_op_x13      0xFF083C34U
#define DFLT_VAL_NX90_mtgy_op_x13 0x00000000U

#define MSK_NX90_mtgy_op_x13_val         0xffffffffU
#define SRT_NX90_mtgy_op_x13_val         0
#define DFLT_VAL_NX90_mtgy_op_x13_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x13_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x13': */
#define MSK_USED_BITS_NX90_mtgy_op_x13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x14 */
/* => MWMM operand X register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x14  0x00001C38U
#define Adr_NX90_mtgy_mtgy_op_x14 0xFF083C38U
#define Adr_NX90_mtgy_op_x14      0xFF083C38U
#define DFLT_VAL_NX90_mtgy_op_x14 0x00000000U

#define MSK_NX90_mtgy_op_x14_val         0xffffffffU
#define SRT_NX90_mtgy_op_x14_val         0
#define DFLT_VAL_NX90_mtgy_op_x14_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x14_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x14': */
#define MSK_USED_BITS_NX90_mtgy_op_x14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x15 */
/* => MWMM operand X register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x15  0x00001C3CU
#define Adr_NX90_mtgy_mtgy_op_x15 0xFF083C3CU
#define Adr_NX90_mtgy_op_x15      0xFF083C3CU
#define DFLT_VAL_NX90_mtgy_op_x15 0x00000000U

#define MSK_NX90_mtgy_op_x15_val         0xffffffffU
#define SRT_NX90_mtgy_op_x15_val         0
#define DFLT_VAL_NX90_mtgy_op_x15_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x15_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x15': */
#define MSK_USED_BITS_NX90_mtgy_op_x15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x16 */
/* => MWMM operand X register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x16  0x00001C40U
#define Adr_NX90_mtgy_mtgy_op_x16 0xFF083C40U
#define Adr_NX90_mtgy_op_x16      0xFF083C40U
#define DFLT_VAL_NX90_mtgy_op_x16 0x00000000U

#define MSK_NX90_mtgy_op_x16_val         0xffffffffU
#define SRT_NX90_mtgy_op_x16_val         0
#define DFLT_VAL_NX90_mtgy_op_x16_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x16_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x16': */
#define MSK_USED_BITS_NX90_mtgy_op_x16 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x17 */
/* => MWMM operand X register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x17  0x00001C44U
#define Adr_NX90_mtgy_mtgy_op_x17 0xFF083C44U
#define Adr_NX90_mtgy_op_x17      0xFF083C44U
#define DFLT_VAL_NX90_mtgy_op_x17 0x00000000U

#define MSK_NX90_mtgy_op_x17_val         0xffffffffU
#define SRT_NX90_mtgy_op_x17_val         0
#define DFLT_VAL_NX90_mtgy_op_x17_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x17_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x17': */
#define MSK_USED_BITS_NX90_mtgy_op_x17 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x18 */
/* => MWMM operand X register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x18  0x00001C48U
#define Adr_NX90_mtgy_mtgy_op_x18 0xFF083C48U
#define Adr_NX90_mtgy_op_x18      0xFF083C48U
#define DFLT_VAL_NX90_mtgy_op_x18 0x00000000U

#define MSK_NX90_mtgy_op_x18_val         0xffffffffU
#define SRT_NX90_mtgy_op_x18_val         0
#define DFLT_VAL_NX90_mtgy_op_x18_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x18_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x18': */
#define MSK_USED_BITS_NX90_mtgy_op_x18 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x19 */
/* => MWMM operand X register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x19  0x00001C4CU
#define Adr_NX90_mtgy_mtgy_op_x19 0xFF083C4CU
#define Adr_NX90_mtgy_op_x19      0xFF083C4CU
#define DFLT_VAL_NX90_mtgy_op_x19 0x00000000U

#define MSK_NX90_mtgy_op_x19_val         0xffffffffU
#define SRT_NX90_mtgy_op_x19_val         0
#define DFLT_VAL_NX90_mtgy_op_x19_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x19_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x19': */
#define MSK_USED_BITS_NX90_mtgy_op_x19 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x20 */
/* => MWMM operand X register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x20  0x00001C50U
#define Adr_NX90_mtgy_mtgy_op_x20 0xFF083C50U
#define Adr_NX90_mtgy_op_x20      0xFF083C50U
#define DFLT_VAL_NX90_mtgy_op_x20 0x00000000U

#define MSK_NX90_mtgy_op_x20_val         0xffffffffU
#define SRT_NX90_mtgy_op_x20_val         0
#define DFLT_VAL_NX90_mtgy_op_x20_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x20_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x20': */
#define MSK_USED_BITS_NX90_mtgy_op_x20 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x21 */
/* => MWMM operand X register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x21  0x00001C54U
#define Adr_NX90_mtgy_mtgy_op_x21 0xFF083C54U
#define Adr_NX90_mtgy_op_x21      0xFF083C54U
#define DFLT_VAL_NX90_mtgy_op_x21 0x00000000U

#define MSK_NX90_mtgy_op_x21_val         0xffffffffU
#define SRT_NX90_mtgy_op_x21_val         0
#define DFLT_VAL_NX90_mtgy_op_x21_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x21_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x21': */
#define MSK_USED_BITS_NX90_mtgy_op_x21 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x22 */
/* => MWMM operand X register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x22  0x00001C58U
#define Adr_NX90_mtgy_mtgy_op_x22 0xFF083C58U
#define Adr_NX90_mtgy_op_x22      0xFF083C58U
#define DFLT_VAL_NX90_mtgy_op_x22 0x00000000U

#define MSK_NX90_mtgy_op_x22_val         0xffffffffU
#define SRT_NX90_mtgy_op_x22_val         0
#define DFLT_VAL_NX90_mtgy_op_x22_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x22_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x22': */
#define MSK_USED_BITS_NX90_mtgy_op_x22 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x23 */
/* => MWMM operand X register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x23  0x00001C5CU
#define Adr_NX90_mtgy_mtgy_op_x23 0xFF083C5CU
#define Adr_NX90_mtgy_op_x23      0xFF083C5CU
#define DFLT_VAL_NX90_mtgy_op_x23 0x00000000U

#define MSK_NX90_mtgy_op_x23_val         0xffffffffU
#define SRT_NX90_mtgy_op_x23_val         0
#define DFLT_VAL_NX90_mtgy_op_x23_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x23_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x23': */
#define MSK_USED_BITS_NX90_mtgy_op_x23 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x24 */
/* => MWMM operand X register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x24  0x00001C60U
#define Adr_NX90_mtgy_mtgy_op_x24 0xFF083C60U
#define Adr_NX90_mtgy_op_x24      0xFF083C60U
#define DFLT_VAL_NX90_mtgy_op_x24 0x00000000U

#define MSK_NX90_mtgy_op_x24_val         0xffffffffU
#define SRT_NX90_mtgy_op_x24_val         0
#define DFLT_VAL_NX90_mtgy_op_x24_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x24_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x24': */
#define MSK_USED_BITS_NX90_mtgy_op_x24 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x25 */
/* => MWMM operand X register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x25  0x00001C64U
#define Adr_NX90_mtgy_mtgy_op_x25 0xFF083C64U
#define Adr_NX90_mtgy_op_x25      0xFF083C64U
#define DFLT_VAL_NX90_mtgy_op_x25 0x00000000U

#define MSK_NX90_mtgy_op_x25_val         0xffffffffU
#define SRT_NX90_mtgy_op_x25_val         0
#define DFLT_VAL_NX90_mtgy_op_x25_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x25_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x25': */
#define MSK_USED_BITS_NX90_mtgy_op_x25 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x26 */
/* => MWMM operand X register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x26  0x00001C68U
#define Adr_NX90_mtgy_mtgy_op_x26 0xFF083C68U
#define Adr_NX90_mtgy_op_x26      0xFF083C68U
#define DFLT_VAL_NX90_mtgy_op_x26 0x00000000U

#define MSK_NX90_mtgy_op_x26_val         0xffffffffU
#define SRT_NX90_mtgy_op_x26_val         0
#define DFLT_VAL_NX90_mtgy_op_x26_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x26_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x26': */
#define MSK_USED_BITS_NX90_mtgy_op_x26 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x27 */
/* => MWMM operand X register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x27  0x00001C6CU
#define Adr_NX90_mtgy_mtgy_op_x27 0xFF083C6CU
#define Adr_NX90_mtgy_op_x27      0xFF083C6CU
#define DFLT_VAL_NX90_mtgy_op_x27 0x00000000U

#define MSK_NX90_mtgy_op_x27_val         0xffffffffU
#define SRT_NX90_mtgy_op_x27_val         0
#define DFLT_VAL_NX90_mtgy_op_x27_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x27_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x27': */
#define MSK_USED_BITS_NX90_mtgy_op_x27 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x28 */
/* => MWMM operand X register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x28  0x00001C70U
#define Adr_NX90_mtgy_mtgy_op_x28 0xFF083C70U
#define Adr_NX90_mtgy_op_x28      0xFF083C70U
#define DFLT_VAL_NX90_mtgy_op_x28 0x00000000U

#define MSK_NX90_mtgy_op_x28_val         0xffffffffU
#define SRT_NX90_mtgy_op_x28_val         0
#define DFLT_VAL_NX90_mtgy_op_x28_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x28_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x28': */
#define MSK_USED_BITS_NX90_mtgy_op_x28 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x29 */
/* => MWMM operand X register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x29  0x00001C74U
#define Adr_NX90_mtgy_mtgy_op_x29 0xFF083C74U
#define Adr_NX90_mtgy_op_x29      0xFF083C74U
#define DFLT_VAL_NX90_mtgy_op_x29 0x00000000U

#define MSK_NX90_mtgy_op_x29_val         0xffffffffU
#define SRT_NX90_mtgy_op_x29_val         0
#define DFLT_VAL_NX90_mtgy_op_x29_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x29_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x29': */
#define MSK_USED_BITS_NX90_mtgy_op_x29 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x30 */
/* => MWMM operand X register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x30  0x00001C78U
#define Adr_NX90_mtgy_mtgy_op_x30 0xFF083C78U
#define Adr_NX90_mtgy_op_x30      0xFF083C78U
#define DFLT_VAL_NX90_mtgy_op_x30 0x00000000U

#define MSK_NX90_mtgy_op_x30_val         0xffffffffU
#define SRT_NX90_mtgy_op_x30_val         0
#define DFLT_VAL_NX90_mtgy_op_x30_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x30_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x30': */
#define MSK_USED_BITS_NX90_mtgy_op_x30 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x31 */
/* => MWMM operand X register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x31  0x00001C7CU
#define Adr_NX90_mtgy_mtgy_op_x31 0xFF083C7CU
#define Adr_NX90_mtgy_op_x31      0xFF083C7CU
#define DFLT_VAL_NX90_mtgy_op_x31 0x00000000U

#define MSK_NX90_mtgy_op_x31_val         0xffffffffU
#define SRT_NX90_mtgy_op_x31_val         0
#define DFLT_VAL_NX90_mtgy_op_x31_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x31_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x31': */
#define MSK_USED_BITS_NX90_mtgy_op_x31 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x32 */
/* => MWMM operand X register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x32  0x00001C80U
#define Adr_NX90_mtgy_mtgy_op_x32 0xFF083C80U
#define Adr_NX90_mtgy_op_x32      0xFF083C80U
#define DFLT_VAL_NX90_mtgy_op_x32 0x00000000U

#define MSK_NX90_mtgy_op_x32_val         0xffffffffU
#define SRT_NX90_mtgy_op_x32_val         0
#define DFLT_VAL_NX90_mtgy_op_x32_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x32_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x32': */
#define MSK_USED_BITS_NX90_mtgy_op_x32 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x33 */
/* => MWMM operand X register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x33  0x00001C84U
#define Adr_NX90_mtgy_mtgy_op_x33 0xFF083C84U
#define Adr_NX90_mtgy_op_x33      0xFF083C84U
#define DFLT_VAL_NX90_mtgy_op_x33 0x00000000U

#define MSK_NX90_mtgy_op_x33_val         0xffffffffU
#define SRT_NX90_mtgy_op_x33_val         0
#define DFLT_VAL_NX90_mtgy_op_x33_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x33_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x33': */
#define MSK_USED_BITS_NX90_mtgy_op_x33 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x34 */
/* => MWMM operand X register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x34  0x00001C88U
#define Adr_NX90_mtgy_mtgy_op_x34 0xFF083C88U
#define Adr_NX90_mtgy_op_x34      0xFF083C88U
#define DFLT_VAL_NX90_mtgy_op_x34 0x00000000U

#define MSK_NX90_mtgy_op_x34_val         0xffffffffU
#define SRT_NX90_mtgy_op_x34_val         0
#define DFLT_VAL_NX90_mtgy_op_x34_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x34_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x34': */
#define MSK_USED_BITS_NX90_mtgy_op_x34 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x35 */
/* => MWMM operand X register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x35  0x00001C8CU
#define Adr_NX90_mtgy_mtgy_op_x35 0xFF083C8CU
#define Adr_NX90_mtgy_op_x35      0xFF083C8CU
#define DFLT_VAL_NX90_mtgy_op_x35 0x00000000U

#define MSK_NX90_mtgy_op_x35_val         0xffffffffU
#define SRT_NX90_mtgy_op_x35_val         0
#define DFLT_VAL_NX90_mtgy_op_x35_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x35_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x35': */
#define MSK_USED_BITS_NX90_mtgy_op_x35 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x36 */
/* => MWMM operand X register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x36  0x00001C90U
#define Adr_NX90_mtgy_mtgy_op_x36 0xFF083C90U
#define Adr_NX90_mtgy_op_x36      0xFF083C90U
#define DFLT_VAL_NX90_mtgy_op_x36 0x00000000U

#define MSK_NX90_mtgy_op_x36_val         0xffffffffU
#define SRT_NX90_mtgy_op_x36_val         0
#define DFLT_VAL_NX90_mtgy_op_x36_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x36_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x36': */
#define MSK_USED_BITS_NX90_mtgy_op_x36 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x37 */
/* => MWMM operand X register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x37  0x00001C94U
#define Adr_NX90_mtgy_mtgy_op_x37 0xFF083C94U
#define Adr_NX90_mtgy_op_x37      0xFF083C94U
#define DFLT_VAL_NX90_mtgy_op_x37 0x00000000U

#define MSK_NX90_mtgy_op_x37_val         0xffffffffU
#define SRT_NX90_mtgy_op_x37_val         0
#define DFLT_VAL_NX90_mtgy_op_x37_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x37_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x37': */
#define MSK_USED_BITS_NX90_mtgy_op_x37 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x38 */
/* => MWMM operand X register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x38  0x00001C98U
#define Adr_NX90_mtgy_mtgy_op_x38 0xFF083C98U
#define Adr_NX90_mtgy_op_x38      0xFF083C98U
#define DFLT_VAL_NX90_mtgy_op_x38 0x00000000U

#define MSK_NX90_mtgy_op_x38_val         0xffffffffU
#define SRT_NX90_mtgy_op_x38_val         0
#define DFLT_VAL_NX90_mtgy_op_x38_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x38_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x38': */
#define MSK_USED_BITS_NX90_mtgy_op_x38 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x39 */
/* => MWMM operand X register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x39  0x00001C9CU
#define Adr_NX90_mtgy_mtgy_op_x39 0xFF083C9CU
#define Adr_NX90_mtgy_op_x39      0xFF083C9CU
#define DFLT_VAL_NX90_mtgy_op_x39 0x00000000U

#define MSK_NX90_mtgy_op_x39_val         0xffffffffU
#define SRT_NX90_mtgy_op_x39_val         0
#define DFLT_VAL_NX90_mtgy_op_x39_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x39_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x39': */
#define MSK_USED_BITS_NX90_mtgy_op_x39 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x40 */
/* => MWMM operand X register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x40  0x00001CA0U
#define Adr_NX90_mtgy_mtgy_op_x40 0xFF083CA0U
#define Adr_NX90_mtgy_op_x40      0xFF083CA0U
#define DFLT_VAL_NX90_mtgy_op_x40 0x00000000U

#define MSK_NX90_mtgy_op_x40_val         0xffffffffU
#define SRT_NX90_mtgy_op_x40_val         0
#define DFLT_VAL_NX90_mtgy_op_x40_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x40_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x40': */
#define MSK_USED_BITS_NX90_mtgy_op_x40 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x41 */
/* => MWMM operand X register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x41  0x00001CA4U
#define Adr_NX90_mtgy_mtgy_op_x41 0xFF083CA4U
#define Adr_NX90_mtgy_op_x41      0xFF083CA4U
#define DFLT_VAL_NX90_mtgy_op_x41 0x00000000U

#define MSK_NX90_mtgy_op_x41_val         0xffffffffU
#define SRT_NX90_mtgy_op_x41_val         0
#define DFLT_VAL_NX90_mtgy_op_x41_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x41_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x41': */
#define MSK_USED_BITS_NX90_mtgy_op_x41 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x42 */
/* => MWMM operand X register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x42  0x00001CA8U
#define Adr_NX90_mtgy_mtgy_op_x42 0xFF083CA8U
#define Adr_NX90_mtgy_op_x42      0xFF083CA8U
#define DFLT_VAL_NX90_mtgy_op_x42 0x00000000U

#define MSK_NX90_mtgy_op_x42_val         0xffffffffU
#define SRT_NX90_mtgy_op_x42_val         0
#define DFLT_VAL_NX90_mtgy_op_x42_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x42_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x42': */
#define MSK_USED_BITS_NX90_mtgy_op_x42 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x43 */
/* => MWMM operand X register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x43  0x00001CACU
#define Adr_NX90_mtgy_mtgy_op_x43 0xFF083CACU
#define Adr_NX90_mtgy_op_x43      0xFF083CACU
#define DFLT_VAL_NX90_mtgy_op_x43 0x00000000U

#define MSK_NX90_mtgy_op_x43_val         0xffffffffU
#define SRT_NX90_mtgy_op_x43_val         0
#define DFLT_VAL_NX90_mtgy_op_x43_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x43_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x43': */
#define MSK_USED_BITS_NX90_mtgy_op_x43 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x44 */
/* => MWMM operand X register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x44  0x00001CB0U
#define Adr_NX90_mtgy_mtgy_op_x44 0xFF083CB0U
#define Adr_NX90_mtgy_op_x44      0xFF083CB0U
#define DFLT_VAL_NX90_mtgy_op_x44 0x00000000U

#define MSK_NX90_mtgy_op_x44_val         0xffffffffU
#define SRT_NX90_mtgy_op_x44_val         0
#define DFLT_VAL_NX90_mtgy_op_x44_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x44_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x44': */
#define MSK_USED_BITS_NX90_mtgy_op_x44 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x45 */
/* => MWMM operand X register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x45  0x00001CB4U
#define Adr_NX90_mtgy_mtgy_op_x45 0xFF083CB4U
#define Adr_NX90_mtgy_op_x45      0xFF083CB4U
#define DFLT_VAL_NX90_mtgy_op_x45 0x00000000U

#define MSK_NX90_mtgy_op_x45_val         0xffffffffU
#define SRT_NX90_mtgy_op_x45_val         0
#define DFLT_VAL_NX90_mtgy_op_x45_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x45_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x45': */
#define MSK_USED_BITS_NX90_mtgy_op_x45 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x46 */
/* => MWMM operand X register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x46  0x00001CB8U
#define Adr_NX90_mtgy_mtgy_op_x46 0xFF083CB8U
#define Adr_NX90_mtgy_op_x46      0xFF083CB8U
#define DFLT_VAL_NX90_mtgy_op_x46 0x00000000U

#define MSK_NX90_mtgy_op_x46_val         0xffffffffU
#define SRT_NX90_mtgy_op_x46_val         0
#define DFLT_VAL_NX90_mtgy_op_x46_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x46_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x46': */
#define MSK_USED_BITS_NX90_mtgy_op_x46 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x47 */
/* => MWMM operand X register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x47  0x00001CBCU
#define Adr_NX90_mtgy_mtgy_op_x47 0xFF083CBCU
#define Adr_NX90_mtgy_op_x47      0xFF083CBCU
#define DFLT_VAL_NX90_mtgy_op_x47 0x00000000U

#define MSK_NX90_mtgy_op_x47_val         0xffffffffU
#define SRT_NX90_mtgy_op_x47_val         0
#define DFLT_VAL_NX90_mtgy_op_x47_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x47_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x47': */
#define MSK_USED_BITS_NX90_mtgy_op_x47 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x48 */
/* => MWMM operand X register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x48  0x00001CC0U
#define Adr_NX90_mtgy_mtgy_op_x48 0xFF083CC0U
#define Adr_NX90_mtgy_op_x48      0xFF083CC0U
#define DFLT_VAL_NX90_mtgy_op_x48 0x00000000U

#define MSK_NX90_mtgy_op_x48_val         0xffffffffU
#define SRT_NX90_mtgy_op_x48_val         0
#define DFLT_VAL_NX90_mtgy_op_x48_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x48_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x48': */
#define MSK_USED_BITS_NX90_mtgy_op_x48 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x49 */
/* => MWMM operand X register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x49  0x00001CC4U
#define Adr_NX90_mtgy_mtgy_op_x49 0xFF083CC4U
#define Adr_NX90_mtgy_op_x49      0xFF083CC4U
#define DFLT_VAL_NX90_mtgy_op_x49 0x00000000U

#define MSK_NX90_mtgy_op_x49_val         0xffffffffU
#define SRT_NX90_mtgy_op_x49_val         0
#define DFLT_VAL_NX90_mtgy_op_x49_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x49_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x49': */
#define MSK_USED_BITS_NX90_mtgy_op_x49 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x50 */
/* => MWMM operand X register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x50  0x00001CC8U
#define Adr_NX90_mtgy_mtgy_op_x50 0xFF083CC8U
#define Adr_NX90_mtgy_op_x50      0xFF083CC8U
#define DFLT_VAL_NX90_mtgy_op_x50 0x00000000U

#define MSK_NX90_mtgy_op_x50_val         0xffffffffU
#define SRT_NX90_mtgy_op_x50_val         0
#define DFLT_VAL_NX90_mtgy_op_x50_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x50_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x50': */
#define MSK_USED_BITS_NX90_mtgy_op_x50 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x51 */
/* => MWMM operand X register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x51  0x00001CCCU
#define Adr_NX90_mtgy_mtgy_op_x51 0xFF083CCCU
#define Adr_NX90_mtgy_op_x51      0xFF083CCCU
#define DFLT_VAL_NX90_mtgy_op_x51 0x00000000U

#define MSK_NX90_mtgy_op_x51_val         0xffffffffU
#define SRT_NX90_mtgy_op_x51_val         0
#define DFLT_VAL_NX90_mtgy_op_x51_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x51_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x51': */
#define MSK_USED_BITS_NX90_mtgy_op_x51 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x52 */
/* => MWMM operand X register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x52  0x00001CD0U
#define Adr_NX90_mtgy_mtgy_op_x52 0xFF083CD0U
#define Adr_NX90_mtgy_op_x52      0xFF083CD0U
#define DFLT_VAL_NX90_mtgy_op_x52 0x00000000U

#define MSK_NX90_mtgy_op_x52_val         0xffffffffU
#define SRT_NX90_mtgy_op_x52_val         0
#define DFLT_VAL_NX90_mtgy_op_x52_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x52_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x52': */
#define MSK_USED_BITS_NX90_mtgy_op_x52 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x53 */
/* => MWMM operand X register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x53  0x00001CD4U
#define Adr_NX90_mtgy_mtgy_op_x53 0xFF083CD4U
#define Adr_NX90_mtgy_op_x53      0xFF083CD4U
#define DFLT_VAL_NX90_mtgy_op_x53 0x00000000U

#define MSK_NX90_mtgy_op_x53_val         0xffffffffU
#define SRT_NX90_mtgy_op_x53_val         0
#define DFLT_VAL_NX90_mtgy_op_x53_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x53_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x53': */
#define MSK_USED_BITS_NX90_mtgy_op_x53 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x54 */
/* => MWMM operand X register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x54  0x00001CD8U
#define Adr_NX90_mtgy_mtgy_op_x54 0xFF083CD8U
#define Adr_NX90_mtgy_op_x54      0xFF083CD8U
#define DFLT_VAL_NX90_mtgy_op_x54 0x00000000U

#define MSK_NX90_mtgy_op_x54_val         0xffffffffU
#define SRT_NX90_mtgy_op_x54_val         0
#define DFLT_VAL_NX90_mtgy_op_x54_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x54_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x54': */
#define MSK_USED_BITS_NX90_mtgy_op_x54 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x55 */
/* => MWMM operand X register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x55  0x00001CDCU
#define Adr_NX90_mtgy_mtgy_op_x55 0xFF083CDCU
#define Adr_NX90_mtgy_op_x55      0xFF083CDCU
#define DFLT_VAL_NX90_mtgy_op_x55 0x00000000U

#define MSK_NX90_mtgy_op_x55_val         0xffffffffU
#define SRT_NX90_mtgy_op_x55_val         0
#define DFLT_VAL_NX90_mtgy_op_x55_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x55_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x55': */
#define MSK_USED_BITS_NX90_mtgy_op_x55 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x56 */
/* => MWMM operand X register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x56  0x00001CE0U
#define Adr_NX90_mtgy_mtgy_op_x56 0xFF083CE0U
#define Adr_NX90_mtgy_op_x56      0xFF083CE0U
#define DFLT_VAL_NX90_mtgy_op_x56 0x00000000U

#define MSK_NX90_mtgy_op_x56_val         0xffffffffU
#define SRT_NX90_mtgy_op_x56_val         0
#define DFLT_VAL_NX90_mtgy_op_x56_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x56_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x56': */
#define MSK_USED_BITS_NX90_mtgy_op_x56 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x57 */
/* => MWMM operand X register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x57  0x00001CE4U
#define Adr_NX90_mtgy_mtgy_op_x57 0xFF083CE4U
#define Adr_NX90_mtgy_op_x57      0xFF083CE4U
#define DFLT_VAL_NX90_mtgy_op_x57 0x00000000U

#define MSK_NX90_mtgy_op_x57_val         0xffffffffU
#define SRT_NX90_mtgy_op_x57_val         0
#define DFLT_VAL_NX90_mtgy_op_x57_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x57_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x57': */
#define MSK_USED_BITS_NX90_mtgy_op_x57 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x58 */
/* => MWMM operand X register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x58  0x00001CE8U
#define Adr_NX90_mtgy_mtgy_op_x58 0xFF083CE8U
#define Adr_NX90_mtgy_op_x58      0xFF083CE8U
#define DFLT_VAL_NX90_mtgy_op_x58 0x00000000U

#define MSK_NX90_mtgy_op_x58_val         0xffffffffU
#define SRT_NX90_mtgy_op_x58_val         0
#define DFLT_VAL_NX90_mtgy_op_x58_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x58_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x58': */
#define MSK_USED_BITS_NX90_mtgy_op_x58 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x59 */
/* => MWMM operand X register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x59  0x00001CECU
#define Adr_NX90_mtgy_mtgy_op_x59 0xFF083CECU
#define Adr_NX90_mtgy_op_x59      0xFF083CECU
#define DFLT_VAL_NX90_mtgy_op_x59 0x00000000U

#define MSK_NX90_mtgy_op_x59_val         0xffffffffU
#define SRT_NX90_mtgy_op_x59_val         0
#define DFLT_VAL_NX90_mtgy_op_x59_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x59_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x59': */
#define MSK_USED_BITS_NX90_mtgy_op_x59 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x60 */
/* => MWMM operand X register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x60  0x00001CF0U
#define Adr_NX90_mtgy_mtgy_op_x60 0xFF083CF0U
#define Adr_NX90_mtgy_op_x60      0xFF083CF0U
#define DFLT_VAL_NX90_mtgy_op_x60 0x00000000U

#define MSK_NX90_mtgy_op_x60_val         0xffffffffU
#define SRT_NX90_mtgy_op_x60_val         0
#define DFLT_VAL_NX90_mtgy_op_x60_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x60_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x60': */
#define MSK_USED_BITS_NX90_mtgy_op_x60 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x61 */
/* => MWMM operand X register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x61  0x00001CF4U
#define Adr_NX90_mtgy_mtgy_op_x61 0xFF083CF4U
#define Adr_NX90_mtgy_op_x61      0xFF083CF4U
#define DFLT_VAL_NX90_mtgy_op_x61 0x00000000U

#define MSK_NX90_mtgy_op_x61_val         0xffffffffU
#define SRT_NX90_mtgy_op_x61_val         0
#define DFLT_VAL_NX90_mtgy_op_x61_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x61_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x61': */
#define MSK_USED_BITS_NX90_mtgy_op_x61 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x62 */
/* => MWMM operand X register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x62  0x00001CF8U
#define Adr_NX90_mtgy_mtgy_op_x62 0xFF083CF8U
#define Adr_NX90_mtgy_op_x62      0xFF083CF8U
#define DFLT_VAL_NX90_mtgy_op_x62 0x00000000U

#define MSK_NX90_mtgy_op_x62_val         0xffffffffU
#define SRT_NX90_mtgy_op_x62_val         0
#define DFLT_VAL_NX90_mtgy_op_x62_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x62_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x62': */
#define MSK_USED_BITS_NX90_mtgy_op_x62 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x63 */
/* => MWMM operand X register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x63  0x00001CFCU
#define Adr_NX90_mtgy_mtgy_op_x63 0xFF083CFCU
#define Adr_NX90_mtgy_op_x63      0xFF083CFCU
#define DFLT_VAL_NX90_mtgy_op_x63 0x00000000U

#define MSK_NX90_mtgy_op_x63_val         0xffffffffU
#define SRT_NX90_mtgy_op_x63_val         0
#define DFLT_VAL_NX90_mtgy_op_x63_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x63_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x63': */
#define MSK_USED_BITS_NX90_mtgy_op_x63 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x64 */
/* => MWMM operand X register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x64  0x00001D00U
#define Adr_NX90_mtgy_mtgy_op_x64 0xFF083D00U
#define Adr_NX90_mtgy_op_x64      0xFF083D00U
#define DFLT_VAL_NX90_mtgy_op_x64 0x00000000U

#define MSK_NX90_mtgy_op_x64_val         0xffffffffU
#define SRT_NX90_mtgy_op_x64_val         0
#define DFLT_VAL_NX90_mtgy_op_x64_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x64_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x64': */
#define MSK_USED_BITS_NX90_mtgy_op_x64 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x65 */
/* => MWMM operand X register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x65  0x00001D04U
#define Adr_NX90_mtgy_mtgy_op_x65 0xFF083D04U
#define Adr_NX90_mtgy_op_x65      0xFF083D04U
#define DFLT_VAL_NX90_mtgy_op_x65 0x00000000U

#define MSK_NX90_mtgy_op_x65_val         0xffffffffU
#define SRT_NX90_mtgy_op_x65_val         0
#define DFLT_VAL_NX90_mtgy_op_x65_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x65_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x65': */
#define MSK_USED_BITS_NX90_mtgy_op_x65 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x66 */
/* => MWMM operand X register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x66  0x00001D08U
#define Adr_NX90_mtgy_mtgy_op_x66 0xFF083D08U
#define Adr_NX90_mtgy_op_x66      0xFF083D08U
#define DFLT_VAL_NX90_mtgy_op_x66 0x00000000U

#define MSK_NX90_mtgy_op_x66_val         0xffffffffU
#define SRT_NX90_mtgy_op_x66_val         0
#define DFLT_VAL_NX90_mtgy_op_x66_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x66_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x66': */
#define MSK_USED_BITS_NX90_mtgy_op_x66 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x67 */
/* => MWMM operand X register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x67  0x00001D0CU
#define Adr_NX90_mtgy_mtgy_op_x67 0xFF083D0CU
#define Adr_NX90_mtgy_op_x67      0xFF083D0CU
#define DFLT_VAL_NX90_mtgy_op_x67 0x00000000U

#define MSK_NX90_mtgy_op_x67_val         0xffffffffU
#define SRT_NX90_mtgy_op_x67_val         0
#define DFLT_VAL_NX90_mtgy_op_x67_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x67_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x67': */
#define MSK_USED_BITS_NX90_mtgy_op_x67 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x68 */
/* => MWMM operand X register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x68  0x00001D10U
#define Adr_NX90_mtgy_mtgy_op_x68 0xFF083D10U
#define Adr_NX90_mtgy_op_x68      0xFF083D10U
#define DFLT_VAL_NX90_mtgy_op_x68 0x00000000U

#define MSK_NX90_mtgy_op_x68_val         0xffffffffU
#define SRT_NX90_mtgy_op_x68_val         0
#define DFLT_VAL_NX90_mtgy_op_x68_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x68_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x68': */
#define MSK_USED_BITS_NX90_mtgy_op_x68 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x69 */
/* => MWMM operand X register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x69  0x00001D14U
#define Adr_NX90_mtgy_mtgy_op_x69 0xFF083D14U
#define Adr_NX90_mtgy_op_x69      0xFF083D14U
#define DFLT_VAL_NX90_mtgy_op_x69 0x00000000U

#define MSK_NX90_mtgy_op_x69_val         0xffffffffU
#define SRT_NX90_mtgy_op_x69_val         0
#define DFLT_VAL_NX90_mtgy_op_x69_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x69_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x69': */
#define MSK_USED_BITS_NX90_mtgy_op_x69 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x70 */
/* => MWMM operand X register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x70  0x00001D18U
#define Adr_NX90_mtgy_mtgy_op_x70 0xFF083D18U
#define Adr_NX90_mtgy_op_x70      0xFF083D18U
#define DFLT_VAL_NX90_mtgy_op_x70 0x00000000U

#define MSK_NX90_mtgy_op_x70_val         0xffffffffU
#define SRT_NX90_mtgy_op_x70_val         0
#define DFLT_VAL_NX90_mtgy_op_x70_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x70_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x70': */
#define MSK_USED_BITS_NX90_mtgy_op_x70 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x71 */
/* => MWMM operand X register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x71  0x00001D1CU
#define Adr_NX90_mtgy_mtgy_op_x71 0xFF083D1CU
#define Adr_NX90_mtgy_op_x71      0xFF083D1CU
#define DFLT_VAL_NX90_mtgy_op_x71 0x00000000U

#define MSK_NX90_mtgy_op_x71_val         0xffffffffU
#define SRT_NX90_mtgy_op_x71_val         0
#define DFLT_VAL_NX90_mtgy_op_x71_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x71_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x71': */
#define MSK_USED_BITS_NX90_mtgy_op_x71 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x72 */
/* => MWMM operand X register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x72  0x00001D20U
#define Adr_NX90_mtgy_mtgy_op_x72 0xFF083D20U
#define Adr_NX90_mtgy_op_x72      0xFF083D20U
#define DFLT_VAL_NX90_mtgy_op_x72 0x00000000U

#define MSK_NX90_mtgy_op_x72_val         0xffffffffU
#define SRT_NX90_mtgy_op_x72_val         0
#define DFLT_VAL_NX90_mtgy_op_x72_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x72_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x72': */
#define MSK_USED_BITS_NX90_mtgy_op_x72 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x73 */
/* => MWMM operand X register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x73  0x00001D24U
#define Adr_NX90_mtgy_mtgy_op_x73 0xFF083D24U
#define Adr_NX90_mtgy_op_x73      0xFF083D24U
#define DFLT_VAL_NX90_mtgy_op_x73 0x00000000U

#define MSK_NX90_mtgy_op_x73_val         0xffffffffU
#define SRT_NX90_mtgy_op_x73_val         0
#define DFLT_VAL_NX90_mtgy_op_x73_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x73_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x73': */
#define MSK_USED_BITS_NX90_mtgy_op_x73 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x74 */
/* => MWMM operand X register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x74  0x00001D28U
#define Adr_NX90_mtgy_mtgy_op_x74 0xFF083D28U
#define Adr_NX90_mtgy_op_x74      0xFF083D28U
#define DFLT_VAL_NX90_mtgy_op_x74 0x00000000U

#define MSK_NX90_mtgy_op_x74_val         0xffffffffU
#define SRT_NX90_mtgy_op_x74_val         0
#define DFLT_VAL_NX90_mtgy_op_x74_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x74_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x74': */
#define MSK_USED_BITS_NX90_mtgy_op_x74 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x75 */
/* => MWMM operand X register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x75  0x00001D2CU
#define Adr_NX90_mtgy_mtgy_op_x75 0xFF083D2CU
#define Adr_NX90_mtgy_op_x75      0xFF083D2CU
#define DFLT_VAL_NX90_mtgy_op_x75 0x00000000U

#define MSK_NX90_mtgy_op_x75_val         0xffffffffU
#define SRT_NX90_mtgy_op_x75_val         0
#define DFLT_VAL_NX90_mtgy_op_x75_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x75_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x75': */
#define MSK_USED_BITS_NX90_mtgy_op_x75 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x76 */
/* => MWMM operand X register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x76  0x00001D30U
#define Adr_NX90_mtgy_mtgy_op_x76 0xFF083D30U
#define Adr_NX90_mtgy_op_x76      0xFF083D30U
#define DFLT_VAL_NX90_mtgy_op_x76 0x00000000U

#define MSK_NX90_mtgy_op_x76_val         0xffffffffU
#define SRT_NX90_mtgy_op_x76_val         0
#define DFLT_VAL_NX90_mtgy_op_x76_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x76_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x76': */
#define MSK_USED_BITS_NX90_mtgy_op_x76 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x77 */
/* => MWMM operand X register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x77  0x00001D34U
#define Adr_NX90_mtgy_mtgy_op_x77 0xFF083D34U
#define Adr_NX90_mtgy_op_x77      0xFF083D34U
#define DFLT_VAL_NX90_mtgy_op_x77 0x00000000U

#define MSK_NX90_mtgy_op_x77_val         0xffffffffU
#define SRT_NX90_mtgy_op_x77_val         0
#define DFLT_VAL_NX90_mtgy_op_x77_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x77_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x77': */
#define MSK_USED_BITS_NX90_mtgy_op_x77 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x78 */
/* => MWMM operand X register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x78  0x00001D38U
#define Adr_NX90_mtgy_mtgy_op_x78 0xFF083D38U
#define Adr_NX90_mtgy_op_x78      0xFF083D38U
#define DFLT_VAL_NX90_mtgy_op_x78 0x00000000U

#define MSK_NX90_mtgy_op_x78_val         0xffffffffU
#define SRT_NX90_mtgy_op_x78_val         0
#define DFLT_VAL_NX90_mtgy_op_x78_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x78_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x78': */
#define MSK_USED_BITS_NX90_mtgy_op_x78 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x79 */
/* => MWMM operand X register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x79  0x00001D3CU
#define Adr_NX90_mtgy_mtgy_op_x79 0xFF083D3CU
#define Adr_NX90_mtgy_op_x79      0xFF083D3CU
#define DFLT_VAL_NX90_mtgy_op_x79 0x00000000U

#define MSK_NX90_mtgy_op_x79_val         0xffffffffU
#define SRT_NX90_mtgy_op_x79_val         0
#define DFLT_VAL_NX90_mtgy_op_x79_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x79_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x79': */
#define MSK_USED_BITS_NX90_mtgy_op_x79 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x80 */
/* => MWMM operand X register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x80  0x00001D40U
#define Adr_NX90_mtgy_mtgy_op_x80 0xFF083D40U
#define Adr_NX90_mtgy_op_x80      0xFF083D40U
#define DFLT_VAL_NX90_mtgy_op_x80 0x00000000U

#define MSK_NX90_mtgy_op_x80_val         0xffffffffU
#define SRT_NX90_mtgy_op_x80_val         0
#define DFLT_VAL_NX90_mtgy_op_x80_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x80_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x80': */
#define MSK_USED_BITS_NX90_mtgy_op_x80 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x81 */
/* => MWMM operand X register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x81  0x00001D44U
#define Adr_NX90_mtgy_mtgy_op_x81 0xFF083D44U
#define Adr_NX90_mtgy_op_x81      0xFF083D44U
#define DFLT_VAL_NX90_mtgy_op_x81 0x00000000U

#define MSK_NX90_mtgy_op_x81_val         0xffffffffU
#define SRT_NX90_mtgy_op_x81_val         0
#define DFLT_VAL_NX90_mtgy_op_x81_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x81_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x81': */
#define MSK_USED_BITS_NX90_mtgy_op_x81 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x82 */
/* => MWMM operand X register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x82  0x00001D48U
#define Adr_NX90_mtgy_mtgy_op_x82 0xFF083D48U
#define Adr_NX90_mtgy_op_x82      0xFF083D48U
#define DFLT_VAL_NX90_mtgy_op_x82 0x00000000U

#define MSK_NX90_mtgy_op_x82_val         0xffffffffU
#define SRT_NX90_mtgy_op_x82_val         0
#define DFLT_VAL_NX90_mtgy_op_x82_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x82_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x82': */
#define MSK_USED_BITS_NX90_mtgy_op_x82 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x83 */
/* => MWMM operand X register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x83  0x00001D4CU
#define Adr_NX90_mtgy_mtgy_op_x83 0xFF083D4CU
#define Adr_NX90_mtgy_op_x83      0xFF083D4CU
#define DFLT_VAL_NX90_mtgy_op_x83 0x00000000U

#define MSK_NX90_mtgy_op_x83_val         0xffffffffU
#define SRT_NX90_mtgy_op_x83_val         0
#define DFLT_VAL_NX90_mtgy_op_x83_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x83_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x83': */
#define MSK_USED_BITS_NX90_mtgy_op_x83 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x84 */
/* => MWMM operand X register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x84  0x00001D50U
#define Adr_NX90_mtgy_mtgy_op_x84 0xFF083D50U
#define Adr_NX90_mtgy_op_x84      0xFF083D50U
#define DFLT_VAL_NX90_mtgy_op_x84 0x00000000U

#define MSK_NX90_mtgy_op_x84_val         0xffffffffU
#define SRT_NX90_mtgy_op_x84_val         0
#define DFLT_VAL_NX90_mtgy_op_x84_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x84_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x84': */
#define MSK_USED_BITS_NX90_mtgy_op_x84 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x85 */
/* => MWMM operand X register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x85  0x00001D54U
#define Adr_NX90_mtgy_mtgy_op_x85 0xFF083D54U
#define Adr_NX90_mtgy_op_x85      0xFF083D54U
#define DFLT_VAL_NX90_mtgy_op_x85 0x00000000U

#define MSK_NX90_mtgy_op_x85_val         0xffffffffU
#define SRT_NX90_mtgy_op_x85_val         0
#define DFLT_VAL_NX90_mtgy_op_x85_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x85_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x85': */
#define MSK_USED_BITS_NX90_mtgy_op_x85 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x86 */
/* => MWMM operand X register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x86  0x00001D58U
#define Adr_NX90_mtgy_mtgy_op_x86 0xFF083D58U
#define Adr_NX90_mtgy_op_x86      0xFF083D58U
#define DFLT_VAL_NX90_mtgy_op_x86 0x00000000U

#define MSK_NX90_mtgy_op_x86_val         0xffffffffU
#define SRT_NX90_mtgy_op_x86_val         0
#define DFLT_VAL_NX90_mtgy_op_x86_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x86_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x86': */
#define MSK_USED_BITS_NX90_mtgy_op_x86 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x87 */
/* => MWMM operand X register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x87  0x00001D5CU
#define Adr_NX90_mtgy_mtgy_op_x87 0xFF083D5CU
#define Adr_NX90_mtgy_op_x87      0xFF083D5CU
#define DFLT_VAL_NX90_mtgy_op_x87 0x00000000U

#define MSK_NX90_mtgy_op_x87_val         0xffffffffU
#define SRT_NX90_mtgy_op_x87_val         0
#define DFLT_VAL_NX90_mtgy_op_x87_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x87_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x87': */
#define MSK_USED_BITS_NX90_mtgy_op_x87 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x88 */
/* => MWMM operand X register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x88  0x00001D60U
#define Adr_NX90_mtgy_mtgy_op_x88 0xFF083D60U
#define Adr_NX90_mtgy_op_x88      0xFF083D60U
#define DFLT_VAL_NX90_mtgy_op_x88 0x00000000U

#define MSK_NX90_mtgy_op_x88_val         0xffffffffU
#define SRT_NX90_mtgy_op_x88_val         0
#define DFLT_VAL_NX90_mtgy_op_x88_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x88_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x88': */
#define MSK_USED_BITS_NX90_mtgy_op_x88 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x89 */
/* => MWMM operand X register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x89  0x00001D64U
#define Adr_NX90_mtgy_mtgy_op_x89 0xFF083D64U
#define Adr_NX90_mtgy_op_x89      0xFF083D64U
#define DFLT_VAL_NX90_mtgy_op_x89 0x00000000U

#define MSK_NX90_mtgy_op_x89_val         0xffffffffU
#define SRT_NX90_mtgy_op_x89_val         0
#define DFLT_VAL_NX90_mtgy_op_x89_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x89_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x89': */
#define MSK_USED_BITS_NX90_mtgy_op_x89 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x90 */
/* => MWMM operand X register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x90  0x00001D68U
#define Adr_NX90_mtgy_mtgy_op_x90 0xFF083D68U
#define Adr_NX90_mtgy_op_x90      0xFF083D68U
#define DFLT_VAL_NX90_mtgy_op_x90 0x00000000U

#define MSK_NX90_mtgy_op_x90_val         0xffffffffU
#define SRT_NX90_mtgy_op_x90_val         0
#define DFLT_VAL_NX90_mtgy_op_x90_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x90_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x90': */
#define MSK_USED_BITS_NX90_mtgy_op_x90 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x91 */
/* => MWMM operand X register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x91  0x00001D6CU
#define Adr_NX90_mtgy_mtgy_op_x91 0xFF083D6CU
#define Adr_NX90_mtgy_op_x91      0xFF083D6CU
#define DFLT_VAL_NX90_mtgy_op_x91 0x00000000U

#define MSK_NX90_mtgy_op_x91_val         0xffffffffU
#define SRT_NX90_mtgy_op_x91_val         0
#define DFLT_VAL_NX90_mtgy_op_x91_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x91_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x91': */
#define MSK_USED_BITS_NX90_mtgy_op_x91 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x92 */
/* => MWMM operand X register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x92  0x00001D70U
#define Adr_NX90_mtgy_mtgy_op_x92 0xFF083D70U
#define Adr_NX90_mtgy_op_x92      0xFF083D70U
#define DFLT_VAL_NX90_mtgy_op_x92 0x00000000U

#define MSK_NX90_mtgy_op_x92_val         0xffffffffU
#define SRT_NX90_mtgy_op_x92_val         0
#define DFLT_VAL_NX90_mtgy_op_x92_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x92_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x92': */
#define MSK_USED_BITS_NX90_mtgy_op_x92 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x93 */
/* => MWMM operand X register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x93  0x00001D74U
#define Adr_NX90_mtgy_mtgy_op_x93 0xFF083D74U
#define Adr_NX90_mtgy_op_x93      0xFF083D74U
#define DFLT_VAL_NX90_mtgy_op_x93 0x00000000U

#define MSK_NX90_mtgy_op_x93_val         0xffffffffU
#define SRT_NX90_mtgy_op_x93_val         0
#define DFLT_VAL_NX90_mtgy_op_x93_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x93_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x93': */
#define MSK_USED_BITS_NX90_mtgy_op_x93 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x94 */
/* => MWMM operand X register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x94  0x00001D78U
#define Adr_NX90_mtgy_mtgy_op_x94 0xFF083D78U
#define Adr_NX90_mtgy_op_x94      0xFF083D78U
#define DFLT_VAL_NX90_mtgy_op_x94 0x00000000U

#define MSK_NX90_mtgy_op_x94_val         0xffffffffU
#define SRT_NX90_mtgy_op_x94_val         0
#define DFLT_VAL_NX90_mtgy_op_x94_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x94_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x94': */
#define MSK_USED_BITS_NX90_mtgy_op_x94 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x95 */
/* => MWMM operand X register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x95  0x00001D7CU
#define Adr_NX90_mtgy_mtgy_op_x95 0xFF083D7CU
#define Adr_NX90_mtgy_op_x95      0xFF083D7CU
#define DFLT_VAL_NX90_mtgy_op_x95 0x00000000U

#define MSK_NX90_mtgy_op_x95_val         0xffffffffU
#define SRT_NX90_mtgy_op_x95_val         0
#define DFLT_VAL_NX90_mtgy_op_x95_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x95_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x95': */
#define MSK_USED_BITS_NX90_mtgy_op_x95 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x96 */
/* => MWMM operand X register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x96  0x00001D80U
#define Adr_NX90_mtgy_mtgy_op_x96 0xFF083D80U
#define Adr_NX90_mtgy_op_x96      0xFF083D80U
#define DFLT_VAL_NX90_mtgy_op_x96 0x00000000U

#define MSK_NX90_mtgy_op_x96_val         0xffffffffU
#define SRT_NX90_mtgy_op_x96_val         0
#define DFLT_VAL_NX90_mtgy_op_x96_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x96_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x96': */
#define MSK_USED_BITS_NX90_mtgy_op_x96 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x97 */
/* => MWMM operand X register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x97  0x00001D84U
#define Adr_NX90_mtgy_mtgy_op_x97 0xFF083D84U
#define Adr_NX90_mtgy_op_x97      0xFF083D84U
#define DFLT_VAL_NX90_mtgy_op_x97 0x00000000U

#define MSK_NX90_mtgy_op_x97_val         0xffffffffU
#define SRT_NX90_mtgy_op_x97_val         0
#define DFLT_VAL_NX90_mtgy_op_x97_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x97_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x97': */
#define MSK_USED_BITS_NX90_mtgy_op_x97 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x98 */
/* => MWMM operand X register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x98  0x00001D88U
#define Adr_NX90_mtgy_mtgy_op_x98 0xFF083D88U
#define Adr_NX90_mtgy_op_x98      0xFF083D88U
#define DFLT_VAL_NX90_mtgy_op_x98 0x00000000U

#define MSK_NX90_mtgy_op_x98_val         0xffffffffU
#define SRT_NX90_mtgy_op_x98_val         0
#define DFLT_VAL_NX90_mtgy_op_x98_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x98_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x98': */
#define MSK_USED_BITS_NX90_mtgy_op_x98 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x99 */
/* => MWMM operand X register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x99  0x00001D8CU
#define Adr_NX90_mtgy_mtgy_op_x99 0xFF083D8CU
#define Adr_NX90_mtgy_op_x99      0xFF083D8CU
#define DFLT_VAL_NX90_mtgy_op_x99 0x00000000U

#define MSK_NX90_mtgy_op_x99_val         0xffffffffU
#define SRT_NX90_mtgy_op_x99_val         0
#define DFLT_VAL_NX90_mtgy_op_x99_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x99_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x99': */
#define MSK_USED_BITS_NX90_mtgy_op_x99 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x100 */
/* => MWMM operand X register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x100  0x00001D90U
#define Adr_NX90_mtgy_mtgy_op_x100 0xFF083D90U
#define Adr_NX90_mtgy_op_x100      0xFF083D90U
#define DFLT_VAL_NX90_mtgy_op_x100 0x00000000U

#define MSK_NX90_mtgy_op_x100_val         0xffffffffU
#define SRT_NX90_mtgy_op_x100_val         0
#define DFLT_VAL_NX90_mtgy_op_x100_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x100_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x100': */
#define MSK_USED_BITS_NX90_mtgy_op_x100 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x101 */
/* => MWMM operand X register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x101  0x00001D94U
#define Adr_NX90_mtgy_mtgy_op_x101 0xFF083D94U
#define Adr_NX90_mtgy_op_x101      0xFF083D94U
#define DFLT_VAL_NX90_mtgy_op_x101 0x00000000U

#define MSK_NX90_mtgy_op_x101_val         0xffffffffU
#define SRT_NX90_mtgy_op_x101_val         0
#define DFLT_VAL_NX90_mtgy_op_x101_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x101_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x101': */
#define MSK_USED_BITS_NX90_mtgy_op_x101 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x102 */
/* => MWMM operand X register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x102  0x00001D98U
#define Adr_NX90_mtgy_mtgy_op_x102 0xFF083D98U
#define Adr_NX90_mtgy_op_x102      0xFF083D98U
#define DFLT_VAL_NX90_mtgy_op_x102 0x00000000U

#define MSK_NX90_mtgy_op_x102_val         0xffffffffU
#define SRT_NX90_mtgy_op_x102_val         0
#define DFLT_VAL_NX90_mtgy_op_x102_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x102_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x102': */
#define MSK_USED_BITS_NX90_mtgy_op_x102 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x103 */
/* => MWMM operand X register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x103  0x00001D9CU
#define Adr_NX90_mtgy_mtgy_op_x103 0xFF083D9CU
#define Adr_NX90_mtgy_op_x103      0xFF083D9CU
#define DFLT_VAL_NX90_mtgy_op_x103 0x00000000U

#define MSK_NX90_mtgy_op_x103_val         0xffffffffU
#define SRT_NX90_mtgy_op_x103_val         0
#define DFLT_VAL_NX90_mtgy_op_x103_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x103_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x103': */
#define MSK_USED_BITS_NX90_mtgy_op_x103 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x104 */
/* => MWMM operand X register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x104  0x00001DA0U
#define Adr_NX90_mtgy_mtgy_op_x104 0xFF083DA0U
#define Adr_NX90_mtgy_op_x104      0xFF083DA0U
#define DFLT_VAL_NX90_mtgy_op_x104 0x00000000U

#define MSK_NX90_mtgy_op_x104_val         0xffffffffU
#define SRT_NX90_mtgy_op_x104_val         0
#define DFLT_VAL_NX90_mtgy_op_x104_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x104_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x104': */
#define MSK_USED_BITS_NX90_mtgy_op_x104 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x105 */
/* => MWMM operand X register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x105  0x00001DA4U
#define Adr_NX90_mtgy_mtgy_op_x105 0xFF083DA4U
#define Adr_NX90_mtgy_op_x105      0xFF083DA4U
#define DFLT_VAL_NX90_mtgy_op_x105 0x00000000U

#define MSK_NX90_mtgy_op_x105_val         0xffffffffU
#define SRT_NX90_mtgy_op_x105_val         0
#define DFLT_VAL_NX90_mtgy_op_x105_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x105_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x105': */
#define MSK_USED_BITS_NX90_mtgy_op_x105 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x106 */
/* => MWMM operand X register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x106  0x00001DA8U
#define Adr_NX90_mtgy_mtgy_op_x106 0xFF083DA8U
#define Adr_NX90_mtgy_op_x106      0xFF083DA8U
#define DFLT_VAL_NX90_mtgy_op_x106 0x00000000U

#define MSK_NX90_mtgy_op_x106_val         0xffffffffU
#define SRT_NX90_mtgy_op_x106_val         0
#define DFLT_VAL_NX90_mtgy_op_x106_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x106_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x106': */
#define MSK_USED_BITS_NX90_mtgy_op_x106 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x107 */
/* => MWMM operand X register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x107  0x00001DACU
#define Adr_NX90_mtgy_mtgy_op_x107 0xFF083DACU
#define Adr_NX90_mtgy_op_x107      0xFF083DACU
#define DFLT_VAL_NX90_mtgy_op_x107 0x00000000U

#define MSK_NX90_mtgy_op_x107_val         0xffffffffU
#define SRT_NX90_mtgy_op_x107_val         0
#define DFLT_VAL_NX90_mtgy_op_x107_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x107_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x107': */
#define MSK_USED_BITS_NX90_mtgy_op_x107 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x108 */
/* => MWMM operand X register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x108  0x00001DB0U
#define Adr_NX90_mtgy_mtgy_op_x108 0xFF083DB0U
#define Adr_NX90_mtgy_op_x108      0xFF083DB0U
#define DFLT_VAL_NX90_mtgy_op_x108 0x00000000U

#define MSK_NX90_mtgy_op_x108_val         0xffffffffU
#define SRT_NX90_mtgy_op_x108_val         0
#define DFLT_VAL_NX90_mtgy_op_x108_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x108_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x108': */
#define MSK_USED_BITS_NX90_mtgy_op_x108 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x109 */
/* => MWMM operand X register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x109  0x00001DB4U
#define Adr_NX90_mtgy_mtgy_op_x109 0xFF083DB4U
#define Adr_NX90_mtgy_op_x109      0xFF083DB4U
#define DFLT_VAL_NX90_mtgy_op_x109 0x00000000U

#define MSK_NX90_mtgy_op_x109_val         0xffffffffU
#define SRT_NX90_mtgy_op_x109_val         0
#define DFLT_VAL_NX90_mtgy_op_x109_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x109_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x109': */
#define MSK_USED_BITS_NX90_mtgy_op_x109 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x110 */
/* => MWMM operand X register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x110  0x00001DB8U
#define Adr_NX90_mtgy_mtgy_op_x110 0xFF083DB8U
#define Adr_NX90_mtgy_op_x110      0xFF083DB8U
#define DFLT_VAL_NX90_mtgy_op_x110 0x00000000U

#define MSK_NX90_mtgy_op_x110_val         0xffffffffU
#define SRT_NX90_mtgy_op_x110_val         0
#define DFLT_VAL_NX90_mtgy_op_x110_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x110_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x110': */
#define MSK_USED_BITS_NX90_mtgy_op_x110 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x111 */
/* => MWMM operand X register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x111  0x00001DBCU
#define Adr_NX90_mtgy_mtgy_op_x111 0xFF083DBCU
#define Adr_NX90_mtgy_op_x111      0xFF083DBCU
#define DFLT_VAL_NX90_mtgy_op_x111 0x00000000U

#define MSK_NX90_mtgy_op_x111_val         0xffffffffU
#define SRT_NX90_mtgy_op_x111_val         0
#define DFLT_VAL_NX90_mtgy_op_x111_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x111_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x111': */
#define MSK_USED_BITS_NX90_mtgy_op_x111 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x112 */
/* => MWMM operand X register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x112  0x00001DC0U
#define Adr_NX90_mtgy_mtgy_op_x112 0xFF083DC0U
#define Adr_NX90_mtgy_op_x112      0xFF083DC0U
#define DFLT_VAL_NX90_mtgy_op_x112 0x00000000U

#define MSK_NX90_mtgy_op_x112_val         0xffffffffU
#define SRT_NX90_mtgy_op_x112_val         0
#define DFLT_VAL_NX90_mtgy_op_x112_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x112_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x112': */
#define MSK_USED_BITS_NX90_mtgy_op_x112 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x113 */
/* => MWMM operand X register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x113  0x00001DC4U
#define Adr_NX90_mtgy_mtgy_op_x113 0xFF083DC4U
#define Adr_NX90_mtgy_op_x113      0xFF083DC4U
#define DFLT_VAL_NX90_mtgy_op_x113 0x00000000U

#define MSK_NX90_mtgy_op_x113_val         0xffffffffU
#define SRT_NX90_mtgy_op_x113_val         0
#define DFLT_VAL_NX90_mtgy_op_x113_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x113_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x113': */
#define MSK_USED_BITS_NX90_mtgy_op_x113 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x114 */
/* => MWMM operand X register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x114  0x00001DC8U
#define Adr_NX90_mtgy_mtgy_op_x114 0xFF083DC8U
#define Adr_NX90_mtgy_op_x114      0xFF083DC8U
#define DFLT_VAL_NX90_mtgy_op_x114 0x00000000U

#define MSK_NX90_mtgy_op_x114_val         0xffffffffU
#define SRT_NX90_mtgy_op_x114_val         0
#define DFLT_VAL_NX90_mtgy_op_x114_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x114_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x114': */
#define MSK_USED_BITS_NX90_mtgy_op_x114 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x115 */
/* => MWMM operand X register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x115  0x00001DCCU
#define Adr_NX90_mtgy_mtgy_op_x115 0xFF083DCCU
#define Adr_NX90_mtgy_op_x115      0xFF083DCCU
#define DFLT_VAL_NX90_mtgy_op_x115 0x00000000U

#define MSK_NX90_mtgy_op_x115_val         0xffffffffU
#define SRT_NX90_mtgy_op_x115_val         0
#define DFLT_VAL_NX90_mtgy_op_x115_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x115_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x115': */
#define MSK_USED_BITS_NX90_mtgy_op_x115 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x116 */
/* => MWMM operand X register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x116  0x00001DD0U
#define Adr_NX90_mtgy_mtgy_op_x116 0xFF083DD0U
#define Adr_NX90_mtgy_op_x116      0xFF083DD0U
#define DFLT_VAL_NX90_mtgy_op_x116 0x00000000U

#define MSK_NX90_mtgy_op_x116_val         0xffffffffU
#define SRT_NX90_mtgy_op_x116_val         0
#define DFLT_VAL_NX90_mtgy_op_x116_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x116_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x116': */
#define MSK_USED_BITS_NX90_mtgy_op_x116 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x117 */
/* => MWMM operand X register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x117  0x00001DD4U
#define Adr_NX90_mtgy_mtgy_op_x117 0xFF083DD4U
#define Adr_NX90_mtgy_op_x117      0xFF083DD4U
#define DFLT_VAL_NX90_mtgy_op_x117 0x00000000U

#define MSK_NX90_mtgy_op_x117_val         0xffffffffU
#define SRT_NX90_mtgy_op_x117_val         0
#define DFLT_VAL_NX90_mtgy_op_x117_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x117_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x117': */
#define MSK_USED_BITS_NX90_mtgy_op_x117 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x118 */
/* => MWMM operand X register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x118  0x00001DD8U
#define Adr_NX90_mtgy_mtgy_op_x118 0xFF083DD8U
#define Adr_NX90_mtgy_op_x118      0xFF083DD8U
#define DFLT_VAL_NX90_mtgy_op_x118 0x00000000U

#define MSK_NX90_mtgy_op_x118_val         0xffffffffU
#define SRT_NX90_mtgy_op_x118_val         0
#define DFLT_VAL_NX90_mtgy_op_x118_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x118_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x118': */
#define MSK_USED_BITS_NX90_mtgy_op_x118 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x119 */
/* => MWMM operand X register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x119  0x00001DDCU
#define Adr_NX90_mtgy_mtgy_op_x119 0xFF083DDCU
#define Adr_NX90_mtgy_op_x119      0xFF083DDCU
#define DFLT_VAL_NX90_mtgy_op_x119 0x00000000U

#define MSK_NX90_mtgy_op_x119_val         0xffffffffU
#define SRT_NX90_mtgy_op_x119_val         0
#define DFLT_VAL_NX90_mtgy_op_x119_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x119_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x119': */
#define MSK_USED_BITS_NX90_mtgy_op_x119 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x120 */
/* => MWMM operand X register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x120  0x00001DE0U
#define Adr_NX90_mtgy_mtgy_op_x120 0xFF083DE0U
#define Adr_NX90_mtgy_op_x120      0xFF083DE0U
#define DFLT_VAL_NX90_mtgy_op_x120 0x00000000U

#define MSK_NX90_mtgy_op_x120_val         0xffffffffU
#define SRT_NX90_mtgy_op_x120_val         0
#define DFLT_VAL_NX90_mtgy_op_x120_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x120_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x120': */
#define MSK_USED_BITS_NX90_mtgy_op_x120 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x121 */
/* => MWMM operand X register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x121  0x00001DE4U
#define Adr_NX90_mtgy_mtgy_op_x121 0xFF083DE4U
#define Adr_NX90_mtgy_op_x121      0xFF083DE4U
#define DFLT_VAL_NX90_mtgy_op_x121 0x00000000U

#define MSK_NX90_mtgy_op_x121_val         0xffffffffU
#define SRT_NX90_mtgy_op_x121_val         0
#define DFLT_VAL_NX90_mtgy_op_x121_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x121_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x121': */
#define MSK_USED_BITS_NX90_mtgy_op_x121 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x122 */
/* => MWMM operand X register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x122  0x00001DE8U
#define Adr_NX90_mtgy_mtgy_op_x122 0xFF083DE8U
#define Adr_NX90_mtgy_op_x122      0xFF083DE8U
#define DFLT_VAL_NX90_mtgy_op_x122 0x00000000U

#define MSK_NX90_mtgy_op_x122_val         0xffffffffU
#define SRT_NX90_mtgy_op_x122_val         0
#define DFLT_VAL_NX90_mtgy_op_x122_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x122_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x122': */
#define MSK_USED_BITS_NX90_mtgy_op_x122 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x123 */
/* => MWMM operand X register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x123  0x00001DECU
#define Adr_NX90_mtgy_mtgy_op_x123 0xFF083DECU
#define Adr_NX90_mtgy_op_x123      0xFF083DECU
#define DFLT_VAL_NX90_mtgy_op_x123 0x00000000U

#define MSK_NX90_mtgy_op_x123_val         0xffffffffU
#define SRT_NX90_mtgy_op_x123_val         0
#define DFLT_VAL_NX90_mtgy_op_x123_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x123_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x123': */
#define MSK_USED_BITS_NX90_mtgy_op_x123 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x124 */
/* => MWMM operand X register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x124  0x00001DF0U
#define Adr_NX90_mtgy_mtgy_op_x124 0xFF083DF0U
#define Adr_NX90_mtgy_op_x124      0xFF083DF0U
#define DFLT_VAL_NX90_mtgy_op_x124 0x00000000U

#define MSK_NX90_mtgy_op_x124_val         0xffffffffU
#define SRT_NX90_mtgy_op_x124_val         0
#define DFLT_VAL_NX90_mtgy_op_x124_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x124_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x124': */
#define MSK_USED_BITS_NX90_mtgy_op_x124 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x125 */
/* => MWMM operand X register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x125  0x00001DF4U
#define Adr_NX90_mtgy_mtgy_op_x125 0xFF083DF4U
#define Adr_NX90_mtgy_op_x125      0xFF083DF4U
#define DFLT_VAL_NX90_mtgy_op_x125 0x00000000U

#define MSK_NX90_mtgy_op_x125_val         0xffffffffU
#define SRT_NX90_mtgy_op_x125_val         0
#define DFLT_VAL_NX90_mtgy_op_x125_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x125_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x125': */
#define MSK_USED_BITS_NX90_mtgy_op_x125 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x126 */
/* => MWMM operand X register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x126  0x00001DF8U
#define Adr_NX90_mtgy_mtgy_op_x126 0xFF083DF8U
#define Adr_NX90_mtgy_op_x126      0xFF083DF8U
#define DFLT_VAL_NX90_mtgy_op_x126 0x00000000U

#define MSK_NX90_mtgy_op_x126_val         0xffffffffU
#define SRT_NX90_mtgy_op_x126_val         0
#define DFLT_VAL_NX90_mtgy_op_x126_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x126_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x126': */
#define MSK_USED_BITS_NX90_mtgy_op_x126 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x127 */
/* => MWMM operand X register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x127  0x00001DFCU
#define Adr_NX90_mtgy_mtgy_op_x127 0xFF083DFCU
#define Adr_NX90_mtgy_op_x127      0xFF083DFCU
#define DFLT_VAL_NX90_mtgy_op_x127 0x00000000U

#define MSK_NX90_mtgy_op_x127_val         0xffffffffU
#define SRT_NX90_mtgy_op_x127_val         0
#define DFLT_VAL_NX90_mtgy_op_x127_val    0x00000000U
#define DFLT_BF_VAL_NX90_mtgy_op_x127_val 0x00000000U

/* all used bits of 'NX90_mtgy_op_x127': */
#define MSK_USED_BITS_NX90_mtgy_op_x127 0xffffffffU


/* ===================================================================== */

/* Area of xc_config */

/* ===================================================================== */

#define Addr_NX90_xc_config 0xFF100000U

/* ===================================================================== */

/* AREA pec_ram */
/* Area of xc0_rpec0_dram, xc0_tpec0_dram, xc0_rpec1_dram, xc0_tpec1_dram, xc0_rpec0_pram, xc0_tpec0_pram, xc0_rpec1_pram, xc0_tpec1_pram */

/* ===================================================================== */

#define Addr_NX90_xc0_rpec0_dram 0xFF100000U
#define Addr_NX90_xc0_tpec0_dram 0xFF102000U
#define Addr_NX90_xc0_rpec1_dram 0xFF104000U
#define Addr_NX90_xc0_tpec1_dram 0xFF106000U
#define Addr_NX90_xc0_rpec0_pram 0xFF108000U
#define Addr_NX90_xc0_tpec0_pram 0xFF10A000U
#define Addr_NX90_xc0_rpec1_pram 0xFF10C000U
#define Addr_NX90_xc0_tpec1_pram 0xFF10E000U

/* --------------------------------------------------------------------- */
/* Register ram_start */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ram_start            0x00000000U
#define Adr_NX90_xc0_rpec0_dram_ram_start 0xFF100000U
#define Adr_NX90_xc0_tpec0_dram_ram_start 0xFF102000U
#define Adr_NX90_xc0_rpec1_dram_ram_start 0xFF104000U
#define Adr_NX90_xc0_tpec1_dram_ram_start 0xFF106000U
#define Adr_NX90_xc0_rpec0_pram_ram_start 0xFF108000U
#define Adr_NX90_xc0_tpec0_pram_ram_start 0xFF10A000U
#define Adr_NX90_xc0_rpec1_pram_ram_start 0xFF10C000U
#define Adr_NX90_xc0_tpec1_pram_ram_start 0xFF10E000U

/* --------------------------------------------------------------------- */
/* Register ram_end */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ram_end            0x00001FFCU
#define Adr_NX90_xc0_rpec0_dram_ram_end 0xFF101FFCU
#define Adr_NX90_xc0_tpec0_dram_ram_end 0xFF103FFCU
#define Adr_NX90_xc0_rpec1_dram_ram_end 0xFF105FFCU
#define Adr_NX90_xc0_tpec1_dram_ram_end 0xFF107FFCU
#define Adr_NX90_xc0_rpec0_pram_ram_end 0xFF109FFCU
#define Adr_NX90_xc0_tpec0_pram_ram_end 0xFF10BFFCU
#define Adr_NX90_xc0_rpec1_pram_ram_end 0xFF10DFFCU
#define Adr_NX90_xc0_tpec1_pram_ram_end 0xFF10FFFCU


/* ===================================================================== */

/* AREA xmac_ram */
/* Area of xc0_rpu0_ram, xc0_tpu0_ram, xc0_rpu1_ram, xc0_tpu1_ram */

/* ===================================================================== */

#define Addr_NX90_xc0_rpu0_ram 0xFF110000U
#define Addr_NX90_xc0_tpu0_ram 0xFF110400U
#define Addr_NX90_xc0_rpu1_ram 0xFF110800U
#define Addr_NX90_xc0_tpu1_ram 0xFF110C00U

/* --------------------------------------------------------------------- */
/* Register xmac_ram_start */
/* => xMAC RPU program-RAM start address. */
/*    The Program-RAM is not addressable for xMAC RPU and TPU ! */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_ram_start          0x00000000U
#define Adr_NX90_xc0_rpu0_ram_xmac_ram_start 0xFF110000U
#define Adr_NX90_xc0_tpu0_ram_xmac_ram_start 0xFF110400U
#define Adr_NX90_xc0_rpu1_ram_xmac_ram_start 0xFF110800U
#define Adr_NX90_xc0_tpu1_ram_xmac_ram_start 0xFF110C00U

/* --------------------------------------------------------------------- */
/* Register xmac_ram_end */
/* => xMAC RPU program-RAM end address. */
/*    This value is not used by design flow, only for documentation */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_ram_end          0x000003FCU
#define Adr_NX90_xc0_rpu0_ram_xmac_ram_end 0xFF1103FCU
#define Adr_NX90_xc0_tpu0_ram_xmac_ram_end 0xFF1107FCU
#define Adr_NX90_xc0_rpu1_ram_xmac_ram_end 0xFF110BFCU
#define Adr_NX90_xc0_tpu1_ram_xmac_ram_end 0xFF110FFCU


/* ===================================================================== */

/* AREA xpec */
/* Area of xc0_rpec0_regs, xc0_tpec0_regs, xc0_rpec1_regs, xc0_tpec1_regs */

/* ===================================================================== */

#define Addr_NX90_xc0_rpec0_regs 0xFF111000U
#define NX90_NETX_XC0_XRP0_BASE  0xFF111000U
#define Addr_NX90_xc0_tpec0_regs 0xFF111100U
#define NX90_NETX_XC0_XTP0_BASE  0xFF111100U
#define Addr_NX90_xc0_rpec1_regs 0xFF111200U
#define NX90_NETX_XC0_XRP1_BASE  0xFF111200U
#define Addr_NX90_xc0_tpec1_regs 0xFF111300U
#define NX90_NETX_XC0_XTP1_BASE  0xFF111300U

/* --------------------------------------------------------------------- */
/* Register xpec_r0 */
/* => xPEC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r0            0x00000000U
#define Adr_NX90_xc0_rpec0_regs_xpec_r0 0xFF111000U
#define Adr_NX90_xc0_tpec0_regs_xpec_r0 0xFF111100U
#define Adr_NX90_xc0_rpec1_regs_xpec_r0 0xFF111200U
#define Adr_NX90_xc0_tpec1_regs_xpec_r0 0xFF111300U
#define DFLT_VAL_NX90_xpec_r0           0x00000000U

#define MSK_NX90_xpec_r0_r0         0xffffffffU
#define SRT_NX90_xpec_r0_r0         0
#define DFLT_VAL_NX90_xpec_r0_r0    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r0_r0 0x00000000U

/* all used bits of 'NX90_xpec_r0': */
#define MSK_USED_BITS_NX90_xpec_r0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r1 */
/* => xPEC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r1            0x00000004U
#define Adr_NX90_xc0_rpec0_regs_xpec_r1 0xFF111004U
#define Adr_NX90_xc0_tpec0_regs_xpec_r1 0xFF111104U
#define Adr_NX90_xc0_rpec1_regs_xpec_r1 0xFF111204U
#define Adr_NX90_xc0_tpec1_regs_xpec_r1 0xFF111304U
#define DFLT_VAL_NX90_xpec_r1           0x00000000U

#define MSK_NX90_xpec_r1_r1         0xffffffffU
#define SRT_NX90_xpec_r1_r1         0
#define DFLT_VAL_NX90_xpec_r1_r1    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r1_r1 0x00000000U

/* all used bits of 'NX90_xpec_r1': */
#define MSK_USED_BITS_NX90_xpec_r1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r2 */
/* => xPEC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r2            0x00000008U
#define Adr_NX90_xc0_rpec0_regs_xpec_r2 0xFF111008U
#define Adr_NX90_xc0_tpec0_regs_xpec_r2 0xFF111108U
#define Adr_NX90_xc0_rpec1_regs_xpec_r2 0xFF111208U
#define Adr_NX90_xc0_tpec1_regs_xpec_r2 0xFF111308U
#define DFLT_VAL_NX90_xpec_r2           0x00000000U

#define MSK_NX90_xpec_r2_r2         0xffffffffU
#define SRT_NX90_xpec_r2_r2         0
#define DFLT_VAL_NX90_xpec_r2_r2    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r2_r2 0x00000000U

/* all used bits of 'NX90_xpec_r2': */
#define MSK_USED_BITS_NX90_xpec_r2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r3 */
/* => xPEC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r3            0x0000000CU
#define Adr_NX90_xc0_rpec0_regs_xpec_r3 0xFF11100CU
#define Adr_NX90_xc0_tpec0_regs_xpec_r3 0xFF11110CU
#define Adr_NX90_xc0_rpec1_regs_xpec_r3 0xFF11120CU
#define Adr_NX90_xc0_tpec1_regs_xpec_r3 0xFF11130CU
#define DFLT_VAL_NX90_xpec_r3           0x00000000U

#define MSK_NX90_xpec_r3_r3         0xffffffffU
#define SRT_NX90_xpec_r3_r3         0
#define DFLT_VAL_NX90_xpec_r3_r3    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r3_r3 0x00000000U

/* all used bits of 'NX90_xpec_r3': */
#define MSK_USED_BITS_NX90_xpec_r3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r4 */
/* => xPEC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r4            0x00000010U
#define Adr_NX90_xc0_rpec0_regs_xpec_r4 0xFF111010U
#define Adr_NX90_xc0_tpec0_regs_xpec_r4 0xFF111110U
#define Adr_NX90_xc0_rpec1_regs_xpec_r4 0xFF111210U
#define Adr_NX90_xc0_tpec1_regs_xpec_r4 0xFF111310U
#define DFLT_VAL_NX90_xpec_r4           0x00000000U

#define MSK_NX90_xpec_r4_r4         0xffffffffU
#define SRT_NX90_xpec_r4_r4         0
#define DFLT_VAL_NX90_xpec_r4_r4    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r4_r4 0x00000000U

/* all used bits of 'NX90_xpec_r4': */
#define MSK_USED_BITS_NX90_xpec_r4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r5 */
/* => xPEC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r5            0x00000014U
#define Adr_NX90_xc0_rpec0_regs_xpec_r5 0xFF111014U
#define Adr_NX90_xc0_tpec0_regs_xpec_r5 0xFF111114U
#define Adr_NX90_xc0_rpec1_regs_xpec_r5 0xFF111214U
#define Adr_NX90_xc0_tpec1_regs_xpec_r5 0xFF111314U
#define DFLT_VAL_NX90_xpec_r5           0x00000000U

#define MSK_NX90_xpec_r5_r5         0xffffffffU
#define SRT_NX90_xpec_r5_r5         0
#define DFLT_VAL_NX90_xpec_r5_r5    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r5_r5 0x00000000U

/* all used bits of 'NX90_xpec_r5': */
#define MSK_USED_BITS_NX90_xpec_r5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r6 */
/* => xPEC work register for indirect addressing */
/*    Shared in xPEC fmmusm mode with fmmusm_read_addr_in (w mode).Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC fmmusm mode with sm_read_addr_out (r mode).Register only accessible via rPEC0 and tPEC0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r6            0x00000018U
#define Adr_NX90_xc0_rpec0_regs_xpec_r6 0xFF111018U
#define Adr_NX90_xc0_tpec0_regs_xpec_r6 0xFF111118U
#define Adr_NX90_xc0_rpec1_regs_xpec_r6 0xFF111218U
#define Adr_NX90_xc0_tpec1_regs_xpec_r6 0xFF111318U
#define DFLT_VAL_NX90_xpec_r6           0x00000000U

#define MSK_NX90_xpec_r6_r6         0xffffffffU
#define SRT_NX90_xpec_r6_r6         0
#define DFLT_VAL_NX90_xpec_r6_r6    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r6_r6 0x00000000U

/* all used bits of 'NX90_xpec_r6': */
#define MSK_USED_BITS_NX90_xpec_r6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_r7 */
/* => xPEC work register for indirect addressing */
/*    Shared in xPEC fmmusm mode with fmmusm_write_addr_in (w mode).Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC fmmusm mode with sm_write_addr_out (r mode).Register only accessible via rPEC0 and tPEC0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_r7            0x0000001CU
#define Adr_NX90_xc0_rpec0_regs_xpec_r7 0xFF11101CU
#define Adr_NX90_xc0_tpec0_regs_xpec_r7 0xFF11111CU
#define Adr_NX90_xc0_rpec1_regs_xpec_r7 0xFF11121CU
#define Adr_NX90_xc0_tpec1_regs_xpec_r7 0xFF11131CU
#define DFLT_VAL_NX90_xpec_r7           0x00000000U

#define MSK_NX90_xpec_r7_r7         0xffffffffU
#define SRT_NX90_xpec_r7_r7         0
#define DFLT_VAL_NX90_xpec_r7_r7    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_r7_r7 0x00000000U

/* all used bits of 'NX90_xpec_r7': */
#define MSK_USED_BITS_NX90_xpec_r7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_stat_bits_shared */
/* => Shared stat register accessed by all xPECs and all xMACs (with 16 events). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_stat_bits_shared            0x00000020U
#define Adr_NX90_xc0_rpec0_regs_xpec_stat_bits_shared 0xFF111020U
#define Adr_NX90_xc0_tpec0_regs_xpec_stat_bits_shared 0xFF111120U
#define Adr_NX90_xc0_rpec1_regs_xpec_stat_bits_shared 0xFF111220U
#define Adr_NX90_xc0_tpec1_regs_xpec_stat_bits_shared 0xFF111320U
#define DFLT_VAL_NX90_xpec_stat_bits_shared           0x00000000U

#define MSK_NX90_xpec_stat_bits_shared_flags            0x0000ffffU
#define SRT_NX90_xpec_stat_bits_shared_flags            0
#define DFLT_VAL_NX90_xpec_stat_bits_shared_flags       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_stat_bits_shared_flags    0x00000000U
#define MSK_NX90_xpec_stat_bits_shared_set_mask         0xffff0000U
#define SRT_NX90_xpec_stat_bits_shared_set_mask         16
#define DFLT_VAL_NX90_xpec_stat_bits_shared_set_mask    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_stat_bits_shared_set_mask 0x00000000U

/* all used bits of 'NX90_xpec_stat_bits_shared': */
#define MSK_USED_BITS_NX90_xpec_stat_bits_shared 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register range_urtx_count */
/* => xPEC Overflow Underflow register to limit stack and fifo buffer. */
/*    Generates range events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_range_urtx_count            0x00000024U
#define Adr_NX90_xc0_rpec0_regs_range_urtx_count 0xFF111024U
#define Adr_NX90_xc0_tpec0_regs_range_urtx_count 0xFF111124U
#define Adr_NX90_xc0_rpec1_regs_range_urtx_count 0xFF111224U
#define Adr_NX90_xc0_tpec1_regs_range_urtx_count 0xFF111324U
#define DFLT_VAL_NX90_range_urtx_count           0x00000000U

#define MSK_NX90_range_urtx_count_range_urx_count         0x00001fffU
#define SRT_NX90_range_urtx_count_range_urx_count         0
#define DFLT_VAL_NX90_range_urtx_count_range_urx_count    0x00000000U
#define DFLT_BF_VAL_NX90_range_urtx_count_range_urx_count 0x00000000U
#define MSK_NX90_range_urtx_count_range_utx_count         0x1fff0000U
#define SRT_NX90_range_urtx_count_range_utx_count         16
#define DFLT_VAL_NX90_range_urtx_count_range_utx_count    0x00000000U
#define DFLT_BF_VAL_NX90_range_urtx_count_range_utx_count 0x00000000U

/* all used bits of 'NX90_range_urtx_count': */
#define MSK_USED_BITS_NX90_range_urtx_count 0x1fff1fffU

/* --------------------------------------------------------------------- */
/* Register range45 */
/* => xPEC Overflow Underflow register to limit stack and fifo buffer. */
/*    Generates range events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_range45            0x00000028U
#define Adr_NX90_xc0_rpec0_regs_range45 0xFF111028U
#define Adr_NX90_xc0_tpec0_regs_range45 0xFF111128U
#define Adr_NX90_xc0_rpec1_regs_range45 0xFF111228U
#define Adr_NX90_xc0_tpec1_regs_range45 0xFF111328U
#define DFLT_VAL_NX90_range45           0x00000000U

#define MSK_NX90_range45_range4         0x00001fffU
#define SRT_NX90_range45_range4         0
#define DFLT_VAL_NX90_range45_range4    0x00000000U
#define DFLT_BF_VAL_NX90_range45_range4 0x00000000U
#define MSK_NX90_range45_range5         0x1fff0000U
#define SRT_NX90_range45_range5         16
#define DFLT_VAL_NX90_range45_range5    0x00000000U
#define DFLT_BF_VAL_NX90_range45_range5 0x00000000U

/* all used bits of 'NX90_range45': */
#define MSK_USED_BITS_NX90_range45 0x1fff1fffU

/* --------------------------------------------------------------------- */
/* Register range67 */
/* => xPEC Overflow Underflow register to limit stack and fifo buffer. */
/*    Generates range events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_range67            0x0000002CU
#define Adr_NX90_xc0_rpec0_regs_range67 0xFF11102CU
#define Adr_NX90_xc0_tpec0_regs_range67 0xFF11112CU
#define Adr_NX90_xc0_rpec1_regs_range67 0xFF11122CU
#define Adr_NX90_xc0_tpec1_regs_range67 0xFF11132CU
#define DFLT_VAL_NX90_range67           0x00000000U

#define MSK_NX90_range67_range6         0x00001fffU
#define SRT_NX90_range67_range6         0
#define DFLT_VAL_NX90_range67_range6    0x00000000U
#define DFLT_BF_VAL_NX90_range67_range6 0x00000000U
#define MSK_NX90_range67_range7         0x1fff0000U
#define SRT_NX90_range67_range7         16
#define DFLT_VAL_NX90_range67_range7    0x00000000U
#define DFLT_BF_VAL_NX90_range67_range7 0x00000000U

/* all used bits of 'NX90_range67': */
#define MSK_USED_BITS_NX90_range67 0x1fff1fffU

/* --------------------------------------------------------------------- */
/* Register timer0 */
/* => xPEC Timer 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer0            0x00000030U
#define Adr_NX90_xc0_rpec0_regs_timer0 0xFF111030U
#define Adr_NX90_xc0_tpec0_regs_timer0 0xFF111130U
#define Adr_NX90_xc0_rpec1_regs_timer0 0xFF111230U
#define Adr_NX90_xc0_tpec1_regs_timer0 0xFF111330U
#define DFLT_VAL_NX90_timer0           0x00000000U

#define MSK_NX90_timer0_timer_preload0         0xffffffffU
#define SRT_NX90_timer0_timer_preload0         0
#define DFLT_VAL_NX90_timer0_timer_preload0    0x00000000U
#define DFLT_BF_VAL_NX90_timer0_timer_preload0 0x00000000U

/* all used bits of 'NX90_timer0': */
#define MSK_USED_BITS_NX90_timer0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer1 */
/* => xPEC Timer 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer1            0x00000034U
#define Adr_NX90_xc0_rpec0_regs_timer1 0xFF111034U
#define Adr_NX90_xc0_tpec0_regs_timer1 0xFF111134U
#define Adr_NX90_xc0_rpec1_regs_timer1 0xFF111234U
#define Adr_NX90_xc0_tpec1_regs_timer1 0xFF111334U
#define DFLT_VAL_NX90_timer1           0x00000000U

#define MSK_NX90_timer1_timer_preload1         0xffffffffU
#define SRT_NX90_timer1_timer_preload1         0
#define DFLT_VAL_NX90_timer1_timer_preload1    0x00000000U
#define DFLT_BF_VAL_NX90_timer1_timer_preload1 0x00000000U

/* all used bits of 'NX90_timer1': */
#define MSK_USED_BITS_NX90_timer1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer2 */
/* => xPEC Timer 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer2            0x00000038U
#define Adr_NX90_xc0_rpec0_regs_timer2 0xFF111038U
#define Adr_NX90_xc0_tpec0_regs_timer2 0xFF111138U
#define Adr_NX90_xc0_rpec1_regs_timer2 0xFF111238U
#define Adr_NX90_xc0_tpec1_regs_timer2 0xFF111338U
#define DFLT_VAL_NX90_timer2           0x00000000U

#define MSK_NX90_timer2_timer_preload2         0xffffffffU
#define SRT_NX90_timer2_timer_preload2         0
#define DFLT_VAL_NX90_timer2_timer_preload2    0x00000000U
#define DFLT_BF_VAL_NX90_timer2_timer_preload2 0x00000000U

/* all used bits of 'NX90_timer2': */
#define MSK_USED_BITS_NX90_timer2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer3 */
/* => xPEC Timer 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer3            0x0000003CU
#define Adr_NX90_xc0_rpec0_regs_timer3 0xFF11103CU
#define Adr_NX90_xc0_tpec0_regs_timer3 0xFF11113CU
#define Adr_NX90_xc0_rpec1_regs_timer3 0xFF11123CU
#define Adr_NX90_xc0_tpec1_regs_timer3 0xFF11133CU
#define DFLT_VAL_NX90_timer3           0x00000000U

#define MSK_NX90_timer3_timer_preload3         0xffffffffU
#define SRT_NX90_timer3_timer_preload3         0
#define DFLT_VAL_NX90_timer3_timer_preload3    0x00000000U
#define DFLT_BF_VAL_NX90_timer3_timer_preload3 0x00000000U

/* all used bits of 'NX90_timer3': */
#define MSK_USED_BITS_NX90_timer3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register urx_count */
/* => xPEC urx counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_urx_count            0x00000040U
#define Adr_NX90_xc0_rpec0_regs_urx_count 0xFF111040U
#define Adr_NX90_xc0_tpec0_regs_urx_count 0xFF111140U
#define Adr_NX90_xc0_rpec1_regs_urx_count 0xFF111240U
#define Adr_NX90_xc0_tpec1_regs_urx_count 0xFF111340U
#define DFLT_VAL_NX90_urx_count           0x00000000U

#define MSK_NX90_urx_count_urx_count         0xffffffffU
#define SRT_NX90_urx_count_urx_count         0
#define DFLT_VAL_NX90_urx_count_urx_count    0x00000000U
#define DFLT_BF_VAL_NX90_urx_count_urx_count 0x00000000U

/* all used bits of 'NX90_urx_count': */
#define MSK_USED_BITS_NX90_urx_count 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register utx_count */
/* => xPEC utx counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_utx_count            0x00000044U
#define Adr_NX90_xc0_rpec0_regs_utx_count 0xFF111044U
#define Adr_NX90_xc0_tpec0_regs_utx_count 0xFF111144U
#define Adr_NX90_xc0_rpec1_regs_utx_count 0xFF111244U
#define Adr_NX90_xc0_tpec1_regs_utx_count 0xFF111344U
#define DFLT_VAL_NX90_utx_count           0x00000000U

#define MSK_NX90_utx_count_utx_count         0xffffffffU
#define SRT_NX90_utx_count_utx_count         0
#define DFLT_VAL_NX90_utx_count_utx_count    0x00000000U
#define DFLT_BF_VAL_NX90_utx_count_utx_count 0x00000000U

/* all used bits of 'NX90_utx_count': */
#define MSK_USED_BITS_NX90_utx_count 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_pc */
/* => xPEC Program Counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_pc            0x00000048U
#define Adr_NX90_xc0_rpec0_regs_xpec_pc 0xFF111048U
#define Adr_NX90_xc0_tpec0_regs_xpec_pc 0xFF111148U
#define Adr_NX90_xc0_rpec1_regs_xpec_pc 0xFF111248U
#define Adr_NX90_xc0_tpec1_regs_xpec_pc 0xFF111348U
#define DFLT_VAL_NX90_xpec_pc           0x000007ffU

#define MSK_NX90_xpec_pc_pc         0x000007ffU
#define SRT_NX90_xpec_pc_pc         0
#define DFLT_VAL_NX90_xpec_pc_pc    0x000007ffU
#define DFLT_BF_VAL_NX90_xpec_pc_pc 0x000007ffU

/* all used bits of 'NX90_xpec_pc': */
#define MSK_USED_BITS_NX90_xpec_pc 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register zero */
/* => Zero Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_zero            0x0000004CU
#define Adr_NX90_xc0_rpec0_regs_zero 0xFF11104CU
#define Adr_NX90_xc0_tpec0_regs_zero 0xFF11114CU
#define Adr_NX90_xc0_rpec1_regs_zero 0xFF11124CU
#define Adr_NX90_xc0_tpec1_regs_zero 0xFF11134CU
#define DFLT_VAL_NX90_zero           0x00000000U

#define MSK_NX90_zero_zero         0xffffffffU
#define SRT_NX90_zero_zero         0
#define DFLT_VAL_NX90_zero_zero    0x00000000U
#define DFLT_BF_VAL_NX90_zero_zero 0x00000000U

/* all used bits of 'NX90_zero': */
#define MSK_USED_BITS_NX90_zero 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_config */
/* => xPEC Config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_config            0x00000050U
#define Adr_NX90_xc0_rpec0_regs_xpec_config 0xFF111050U
#define Adr_NX90_xc0_tpec0_regs_xpec_config 0xFF111150U
#define Adr_NX90_xc0_rpec1_regs_xpec_config 0xFF111250U
#define Adr_NX90_xc0_tpec1_regs_xpec_config 0xFF111350U
#define DFLT_VAL_NX90_xpec_config           0x00000000U

#define MSK_NX90_xpec_config_timer0                  0x00000007U
#define SRT_NX90_xpec_config_timer0                  0
#define DFLT_VAL_NX90_xpec_config_timer0             0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_timer0          0x00000000U
#define MSK_NX90_xpec_config_timer1                  0x00000038U
#define SRT_NX90_xpec_config_timer1                  3
#define DFLT_VAL_NX90_xpec_config_timer1             0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_timer1          0x00000000U
#define MSK_NX90_xpec_config_timer2                  0x000001c0U
#define SRT_NX90_xpec_config_timer2                  6
#define DFLT_VAL_NX90_xpec_config_timer2             0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_timer2          0x00000000U
#define MSK_NX90_xpec_config_timer3                  0x00000e00U
#define SRT_NX90_xpec_config_timer3                  9
#define DFLT_VAL_NX90_xpec_config_timer3             0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_timer3          0x00000000U
#define MSK_NX90_xpec_config_timer4                  0x00007000U
#define SRT_NX90_xpec_config_timer4                  12
#define DFLT_VAL_NX90_xpec_config_timer4             0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_timer4          0x00000000U
#define MSK_NX90_xpec_config_timer5                  0x00038000U
#define SRT_NX90_xpec_config_timer5                  15
#define DFLT_VAL_NX90_xpec_config_timer5             0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_timer5          0x00000000U
#define MSK_NX90_xpec_config_register_mode           0x00300000U
#define SRT_NX90_xpec_config_register_mode           20
#define DFLT_VAL_NX90_xpec_config_register_mode      0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_register_mode   0x00000000U
#define MSK_NX90_xpec_config_reset_urx_fifo0         0x01000000U
#define SRT_NX90_xpec_config_reset_urx_fifo0         24
#define DFLT_VAL_NX90_xpec_config_reset_urx_fifo0    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_reset_urx_fifo0 0x00000000U
#define MSK_NX90_xpec_config_reset_utx_fifo0         0x02000000U
#define SRT_NX90_xpec_config_reset_utx_fifo0         25
#define DFLT_VAL_NX90_xpec_config_reset_utx_fifo0    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_reset_utx_fifo0 0x00000000U
#define MSK_NX90_xpec_config_reset_urx_fifo1         0x04000000U
#define SRT_NX90_xpec_config_reset_urx_fifo1         26
#define DFLT_VAL_NX90_xpec_config_reset_urx_fifo1    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_reset_urx_fifo1 0x00000000U
#define MSK_NX90_xpec_config_reset_utx_fifo1         0x08000000U
#define SRT_NX90_xpec_config_reset_utx_fifo1         27
#define DFLT_VAL_NX90_xpec_config_reset_utx_fifo1    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_reset_utx_fifo1 0x00000000U
#define MSK_NX90_xpec_config_reset_eld0              0x10000000U
#define SRT_NX90_xpec_config_reset_eld0              28
#define DFLT_VAL_NX90_xpec_config_reset_eld0         0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_reset_eld0      0x00000000U
#define MSK_NX90_xpec_config_reset_eld1              0x20000000U
#define SRT_NX90_xpec_config_reset_eld1              29
#define DFLT_VAL_NX90_xpec_config_reset_eld1         0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_reset_eld1      0x00000000U
#define MSK_NX90_xpec_config_debug_mode              0x40000000U
#define SRT_NX90_xpec_config_debug_mode              30
#define DFLT_VAL_NX90_xpec_config_debug_mode         0x00000000U
#define DFLT_BF_VAL_NX90_xpec_config_debug_mode      0x00000000U

/* all used bits of 'NX90_xpec_config': */
#define MSK_USED_BITS_NX90_xpec_config 0x7f33ffffU

/* --------------------------------------------------------------------- */
/* Register ec_maska */
/* => JMP-Mask a */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_maska            0x00000054U
#define Adr_NX90_xc0_rpec0_regs_ec_maska 0xFF111054U
#define Adr_NX90_xc0_tpec0_regs_ec_maska 0xFF111154U
#define Adr_NX90_xc0_rpec1_regs_ec_maska 0xFF111254U
#define Adr_NX90_xc0_tpec1_regs_ec_maska 0xFF111354U
#define DFLT_VAL_NX90_ec_maska           0x0000ffffU

#define MSK_NX90_ec_maska_sel0                      0x000000ffU
#define SRT_NX90_ec_maska_sel0                      0
#define DFLT_VAL_NX90_ec_maska_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_maska_sel0              0x000000ffU
#define MSK_NX90_ec_maska_sel1                      0x0000ff00U
#define SRT_NX90_ec_maska_sel1                      8
#define DFLT_VAL_NX90_ec_maska_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_maska_sel1              0x000000ffU
#define MSK_NX90_ec_maska_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_maska_jmp_adr                   16
#define DFLT_VAL_NX90_ec_maska_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_maska_jmp_adr           0x00000000U
#define MSK_NX90_ec_maska_level_edge_event0         0x18000000U
#define SRT_NX90_ec_maska_level_edge_event0         27
#define DFLT_VAL_NX90_ec_maska_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_maska_level_edge_event0 0x00000000U
#define MSK_NX90_ec_maska_level_edge_event1         0x60000000U
#define SRT_NX90_ec_maska_level_edge_event1         29
#define DFLT_VAL_NX90_ec_maska_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_maska_level_edge_event1 0x00000000U
#define MSK_NX90_ec_maska_and_or                    0x80000000U
#define SRT_NX90_ec_maska_and_or                    31
#define DFLT_VAL_NX90_ec_maska_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_maska_and_or            0x00000000U

/* all used bits of 'NX90_ec_maska': */
#define MSK_USED_BITS_NX90_ec_maska 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_maskb */
/* => JMP-Mask b */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_maskb            0x00000058U
#define Adr_NX90_xc0_rpec0_regs_ec_maskb 0xFF111058U
#define Adr_NX90_xc0_tpec0_regs_ec_maskb 0xFF111158U
#define Adr_NX90_xc0_rpec1_regs_ec_maskb 0xFF111258U
#define Adr_NX90_xc0_tpec1_regs_ec_maskb 0xFF111358U
#define DFLT_VAL_NX90_ec_maskb           0x0000ffffU

#define MSK_NX90_ec_maskb_sel0                      0x000000ffU
#define SRT_NX90_ec_maskb_sel0                      0
#define DFLT_VAL_NX90_ec_maskb_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_maskb_sel0              0x000000ffU
#define MSK_NX90_ec_maskb_sel1                      0x0000ff00U
#define SRT_NX90_ec_maskb_sel1                      8
#define DFLT_VAL_NX90_ec_maskb_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_maskb_sel1              0x000000ffU
#define MSK_NX90_ec_maskb_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_maskb_jmp_adr                   16
#define DFLT_VAL_NX90_ec_maskb_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_maskb_jmp_adr           0x00000000U
#define MSK_NX90_ec_maskb_level_edge_event0         0x18000000U
#define SRT_NX90_ec_maskb_level_edge_event0         27
#define DFLT_VAL_NX90_ec_maskb_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_maskb_level_edge_event0 0x00000000U
#define MSK_NX90_ec_maskb_level_edge_event1         0x60000000U
#define SRT_NX90_ec_maskb_level_edge_event1         29
#define DFLT_VAL_NX90_ec_maskb_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_maskb_level_edge_event1 0x00000000U
#define MSK_NX90_ec_maskb_and_or                    0x80000000U
#define SRT_NX90_ec_maskb_and_or                    31
#define DFLT_VAL_NX90_ec_maskb_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_maskb_and_or            0x00000000U

/* all used bits of 'NX90_ec_maskb': */
#define MSK_USED_BITS_NX90_ec_maskb 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask0 */
/* => JMP-Mask 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask0            0x0000005CU
#define Adr_NX90_xc0_rpec0_regs_ec_mask0 0xFF11105CU
#define Adr_NX90_xc0_tpec0_regs_ec_mask0 0xFF11115CU
#define Adr_NX90_xc0_rpec1_regs_ec_mask0 0xFF11125CU
#define Adr_NX90_xc0_tpec1_regs_ec_mask0 0xFF11135CU
#define DFLT_VAL_NX90_ec_mask0           0x0000ffffU

#define MSK_NX90_ec_mask0_sel0                      0x000000ffU
#define SRT_NX90_ec_mask0_sel0                      0
#define DFLT_VAL_NX90_ec_mask0_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask0_sel0              0x000000ffU
#define MSK_NX90_ec_mask0_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask0_sel1                      8
#define DFLT_VAL_NX90_ec_mask0_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask0_sel1              0x000000ffU
#define MSK_NX90_ec_mask0_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask0_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask0_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask0_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask0_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask0_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask0_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask0_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask0_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask0_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask0_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask0_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask0_and_or                    0x80000000U
#define SRT_NX90_ec_mask0_and_or                    31
#define DFLT_VAL_NX90_ec_mask0_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask0_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask0': */
#define MSK_USED_BITS_NX90_ec_mask0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask1 */
/* => JMP-Mask 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask1            0x00000060U
#define Adr_NX90_xc0_rpec0_regs_ec_mask1 0xFF111060U
#define Adr_NX90_xc0_tpec0_regs_ec_mask1 0xFF111160U
#define Adr_NX90_xc0_rpec1_regs_ec_mask1 0xFF111260U
#define Adr_NX90_xc0_tpec1_regs_ec_mask1 0xFF111360U
#define DFLT_VAL_NX90_ec_mask1           0x0000ffffU

#define MSK_NX90_ec_mask1_sel0                      0x000000ffU
#define SRT_NX90_ec_mask1_sel0                      0
#define DFLT_VAL_NX90_ec_mask1_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask1_sel0              0x000000ffU
#define MSK_NX90_ec_mask1_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask1_sel1                      8
#define DFLT_VAL_NX90_ec_mask1_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask1_sel1              0x000000ffU
#define MSK_NX90_ec_mask1_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask1_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask1_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask1_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask1_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask1_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask1_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask1_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask1_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask1_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask1_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask1_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask1_and_or                    0x80000000U
#define SRT_NX90_ec_mask1_and_or                    31
#define DFLT_VAL_NX90_ec_mask1_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask1_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask1': */
#define MSK_USED_BITS_NX90_ec_mask1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask2 */
/* => JMP-Mask 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask2            0x00000064U
#define Adr_NX90_xc0_rpec0_regs_ec_mask2 0xFF111064U
#define Adr_NX90_xc0_tpec0_regs_ec_mask2 0xFF111164U
#define Adr_NX90_xc0_rpec1_regs_ec_mask2 0xFF111264U
#define Adr_NX90_xc0_tpec1_regs_ec_mask2 0xFF111364U
#define DFLT_VAL_NX90_ec_mask2           0x0000ffffU

#define MSK_NX90_ec_mask2_sel0                      0x000000ffU
#define SRT_NX90_ec_mask2_sel0                      0
#define DFLT_VAL_NX90_ec_mask2_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask2_sel0              0x000000ffU
#define MSK_NX90_ec_mask2_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask2_sel1                      8
#define DFLT_VAL_NX90_ec_mask2_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask2_sel1              0x000000ffU
#define MSK_NX90_ec_mask2_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask2_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask2_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask2_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask2_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask2_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask2_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask2_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask2_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask2_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask2_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask2_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask2_and_or                    0x80000000U
#define SRT_NX90_ec_mask2_and_or                    31
#define DFLT_VAL_NX90_ec_mask2_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask2_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask2': */
#define MSK_USED_BITS_NX90_ec_mask2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask3 */
/* => JMP-Mask 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask3            0x00000068U
#define Adr_NX90_xc0_rpec0_regs_ec_mask3 0xFF111068U
#define Adr_NX90_xc0_tpec0_regs_ec_mask3 0xFF111168U
#define Adr_NX90_xc0_rpec1_regs_ec_mask3 0xFF111268U
#define Adr_NX90_xc0_tpec1_regs_ec_mask3 0xFF111368U
#define DFLT_VAL_NX90_ec_mask3           0x0000ffffU

#define MSK_NX90_ec_mask3_sel0                      0x000000ffU
#define SRT_NX90_ec_mask3_sel0                      0
#define DFLT_VAL_NX90_ec_mask3_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask3_sel0              0x000000ffU
#define MSK_NX90_ec_mask3_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask3_sel1                      8
#define DFLT_VAL_NX90_ec_mask3_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask3_sel1              0x000000ffU
#define MSK_NX90_ec_mask3_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask3_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask3_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask3_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask3_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask3_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask3_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask3_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask3_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask3_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask3_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask3_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask3_and_or                    0x80000000U
#define SRT_NX90_ec_mask3_and_or                    31
#define DFLT_VAL_NX90_ec_mask3_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask3_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask3': */
#define MSK_USED_BITS_NX90_ec_mask3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask4 */
/* => JMP-Mask 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask4            0x0000006CU
#define Adr_NX90_xc0_rpec0_regs_ec_mask4 0xFF11106CU
#define Adr_NX90_xc0_tpec0_regs_ec_mask4 0xFF11116CU
#define Adr_NX90_xc0_rpec1_regs_ec_mask4 0xFF11126CU
#define Adr_NX90_xc0_tpec1_regs_ec_mask4 0xFF11136CU
#define DFLT_VAL_NX90_ec_mask4           0x0000ffffU

#define MSK_NX90_ec_mask4_sel0                      0x000000ffU
#define SRT_NX90_ec_mask4_sel0                      0
#define DFLT_VAL_NX90_ec_mask4_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask4_sel0              0x000000ffU
#define MSK_NX90_ec_mask4_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask4_sel1                      8
#define DFLT_VAL_NX90_ec_mask4_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask4_sel1              0x000000ffU
#define MSK_NX90_ec_mask4_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask4_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask4_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask4_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask4_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask4_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask4_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask4_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask4_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask4_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask4_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask4_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask4_and_or                    0x80000000U
#define SRT_NX90_ec_mask4_and_or                    31
#define DFLT_VAL_NX90_ec_mask4_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask4_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask4': */
#define MSK_USED_BITS_NX90_ec_mask4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask5 */
/* => JMP-Mask 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask5            0x00000070U
#define Adr_NX90_xc0_rpec0_regs_ec_mask5 0xFF111070U
#define Adr_NX90_xc0_tpec0_regs_ec_mask5 0xFF111170U
#define Adr_NX90_xc0_rpec1_regs_ec_mask5 0xFF111270U
#define Adr_NX90_xc0_tpec1_regs_ec_mask5 0xFF111370U
#define DFLT_VAL_NX90_ec_mask5           0x0000ffffU

#define MSK_NX90_ec_mask5_sel0                      0x000000ffU
#define SRT_NX90_ec_mask5_sel0                      0
#define DFLT_VAL_NX90_ec_mask5_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask5_sel0              0x000000ffU
#define MSK_NX90_ec_mask5_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask5_sel1                      8
#define DFLT_VAL_NX90_ec_mask5_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask5_sel1              0x000000ffU
#define MSK_NX90_ec_mask5_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask5_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask5_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask5_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask5_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask5_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask5_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask5_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask5_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask5_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask5_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask5_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask5_and_or                    0x80000000U
#define SRT_NX90_ec_mask5_and_or                    31
#define DFLT_VAL_NX90_ec_mask5_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask5_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask5': */
#define MSK_USED_BITS_NX90_ec_mask5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask6 */
/* => JMP-Mask 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask6            0x00000074U
#define Adr_NX90_xc0_rpec0_regs_ec_mask6 0xFF111074U
#define Adr_NX90_xc0_tpec0_regs_ec_mask6 0xFF111174U
#define Adr_NX90_xc0_rpec1_regs_ec_mask6 0xFF111274U
#define Adr_NX90_xc0_tpec1_regs_ec_mask6 0xFF111374U
#define DFLT_VAL_NX90_ec_mask6           0x0000ffffU

#define MSK_NX90_ec_mask6_sel0                      0x000000ffU
#define SRT_NX90_ec_mask6_sel0                      0
#define DFLT_VAL_NX90_ec_mask6_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask6_sel0              0x000000ffU
#define MSK_NX90_ec_mask6_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask6_sel1                      8
#define DFLT_VAL_NX90_ec_mask6_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask6_sel1              0x000000ffU
#define MSK_NX90_ec_mask6_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask6_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask6_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask6_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask6_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask6_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask6_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask6_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask6_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask6_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask6_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask6_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask6_and_or                    0x80000000U
#define SRT_NX90_ec_mask6_and_or                    31
#define DFLT_VAL_NX90_ec_mask6_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask6_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask6': */
#define MSK_USED_BITS_NX90_ec_mask6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask7 */
/* => JMP-Mask 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask7            0x00000078U
#define Adr_NX90_xc0_rpec0_regs_ec_mask7 0xFF111078U
#define Adr_NX90_xc0_tpec0_regs_ec_mask7 0xFF111178U
#define Adr_NX90_xc0_rpec1_regs_ec_mask7 0xFF111278U
#define Adr_NX90_xc0_tpec1_regs_ec_mask7 0xFF111378U
#define DFLT_VAL_NX90_ec_mask7           0x0000ffffU

#define MSK_NX90_ec_mask7_sel0                      0x000000ffU
#define SRT_NX90_ec_mask7_sel0                      0
#define DFLT_VAL_NX90_ec_mask7_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask7_sel0              0x000000ffU
#define MSK_NX90_ec_mask7_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask7_sel1                      8
#define DFLT_VAL_NX90_ec_mask7_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask7_sel1              0x000000ffU
#define MSK_NX90_ec_mask7_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask7_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask7_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask7_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask7_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask7_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask7_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask7_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask7_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask7_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask7_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask7_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask7_and_or                    0x80000000U
#define SRT_NX90_ec_mask7_and_or                    31
#define DFLT_VAL_NX90_ec_mask7_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask7_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask7': */
#define MSK_USED_BITS_NX90_ec_mask7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask8 */
/* => JMP-Mask 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask8            0x0000007CU
#define Adr_NX90_xc0_rpec0_regs_ec_mask8 0xFF11107CU
#define Adr_NX90_xc0_tpec0_regs_ec_mask8 0xFF11117CU
#define Adr_NX90_xc0_rpec1_regs_ec_mask8 0xFF11127CU
#define Adr_NX90_xc0_tpec1_regs_ec_mask8 0xFF11137CU
#define DFLT_VAL_NX90_ec_mask8           0x0000ffffU

#define MSK_NX90_ec_mask8_sel0                      0x000000ffU
#define SRT_NX90_ec_mask8_sel0                      0
#define DFLT_VAL_NX90_ec_mask8_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask8_sel0              0x000000ffU
#define MSK_NX90_ec_mask8_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask8_sel1                      8
#define DFLT_VAL_NX90_ec_mask8_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask8_sel1              0x000000ffU
#define MSK_NX90_ec_mask8_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask8_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask8_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask8_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask8_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask8_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask8_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask8_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask8_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask8_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask8_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask8_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask8_and_or                    0x80000000U
#define SRT_NX90_ec_mask8_and_or                    31
#define DFLT_VAL_NX90_ec_mask8_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask8_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask8': */
#define MSK_USED_BITS_NX90_ec_mask8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register ec_mask9 */
/* => JMP-Mask 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ec_mask9            0x00000080U
#define Adr_NX90_xc0_rpec0_regs_ec_mask9 0xFF111080U
#define Adr_NX90_xc0_tpec0_regs_ec_mask9 0xFF111180U
#define Adr_NX90_xc0_rpec1_regs_ec_mask9 0xFF111280U
#define Adr_NX90_xc0_tpec1_regs_ec_mask9 0xFF111380U
#define DFLT_VAL_NX90_ec_mask9           0x0000ffffU

#define MSK_NX90_ec_mask9_sel0                      0x000000ffU
#define SRT_NX90_ec_mask9_sel0                      0
#define DFLT_VAL_NX90_ec_mask9_sel0                 0x000000ffU
#define DFLT_BF_VAL_NX90_ec_mask9_sel0              0x000000ffU
#define MSK_NX90_ec_mask9_sel1                      0x0000ff00U
#define SRT_NX90_ec_mask9_sel1                      8
#define DFLT_VAL_NX90_ec_mask9_sel1                 0x0000ff00U
#define DFLT_BF_VAL_NX90_ec_mask9_sel1              0x000000ffU
#define MSK_NX90_ec_mask9_jmp_adr                   0x07ff0000U
#define SRT_NX90_ec_mask9_jmp_adr                   16
#define DFLT_VAL_NX90_ec_mask9_jmp_adr              0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask9_jmp_adr           0x00000000U
#define MSK_NX90_ec_mask9_level_edge_event0         0x18000000U
#define SRT_NX90_ec_mask9_level_edge_event0         27
#define DFLT_VAL_NX90_ec_mask9_level_edge_event0    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask9_level_edge_event0 0x00000000U
#define MSK_NX90_ec_mask9_level_edge_event1         0x60000000U
#define SRT_NX90_ec_mask9_level_edge_event1         29
#define DFLT_VAL_NX90_ec_mask9_level_edge_event1    0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask9_level_edge_event1 0x00000000U
#define MSK_NX90_ec_mask9_and_or                    0x80000000U
#define SRT_NX90_ec_mask9_and_or                    31
#define DFLT_VAL_NX90_ec_mask9_and_or               0x00000000U
#define DFLT_BF_VAL_NX90_ec_mask9_and_or            0x00000000U

/* all used bits of 'NX90_ec_mask9': */
#define MSK_USED_BITS_NX90_ec_mask9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer4 */
/* => xPEC Timer 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer4            0x00000084U
#define Adr_NX90_xc0_rpec0_regs_timer4 0xFF111084U
#define Adr_NX90_xc0_tpec0_regs_timer4 0xFF111184U
#define Adr_NX90_xc0_rpec1_regs_timer4 0xFF111284U
#define Adr_NX90_xc0_tpec1_regs_timer4 0xFF111384U
#define DFLT_VAL_NX90_timer4           0x00000000U

#define MSK_NX90_timer4_timer_preload4         0xffffffffU
#define SRT_NX90_timer4_timer_preload4         0
#define DFLT_VAL_NX90_timer4_timer_preload4    0x00000000U
#define DFLT_BF_VAL_NX90_timer4_timer_preload4 0x00000000U

/* all used bits of 'NX90_timer4': */
#define MSK_USED_BITS_NX90_timer4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register timer5 */
/* => xPEC Timer 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer5            0x00000088U
#define Adr_NX90_xc0_rpec0_regs_timer5 0xFF111088U
#define Adr_NX90_xc0_tpec0_regs_timer5 0xFF111188U
#define Adr_NX90_xc0_rpec1_regs_timer5 0xFF111288U
#define Adr_NX90_xc0_tpec1_regs_timer5 0xFF111388U
#define DFLT_VAL_NX90_timer5           0x00000000U

#define MSK_NX90_timer5_timer_preload5         0xffffffffU
#define SRT_NX90_timer5_timer_preload5         0
#define DFLT_VAL_NX90_timer5_timer_preload5    0x00000000U
#define DFLT_BF_VAL_NX90_timer5_timer_preload5 0x00000000U

/* all used bits of 'NX90_timer5': */
#define MSK_USED_BITS_NX90_timer5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register irq */
/* => xPEC IRQ Register */
/*    Shared Register accessed by rPEC and tPEC of 1 port */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_irq            0x0000008CU
#define Adr_NX90_xc0_rpec0_regs_irq 0xFF11108CU
#define Adr_NX90_xc0_tpec0_regs_irq 0xFF11118CU
#define Adr_NX90_xc0_rpec1_regs_irq 0xFF11128CU
#define Adr_NX90_xc0_tpec1_regs_irq 0xFF11138CU
#define DFLT_VAL_NX90_irq           0x00000000U

#define MSK_NX90_irq_xpec_irq         0x0000ffffU
#define SRT_NX90_irq_xpec_irq         0
#define DFLT_VAL_NX90_irq_xpec_irq    0x00000000U
#define DFLT_BF_VAL_NX90_irq_xpec_irq 0x00000000U
#define MSK_NX90_irq_arm_irq          0xffff0000U
#define SRT_NX90_irq_arm_irq          16
#define DFLT_VAL_NX90_irq_arm_irq     0x00000000U
#define DFLT_BF_VAL_NX90_irq_arm_irq  0x00000000U

/* all used bits of 'NX90_irq': */
#define MSK_USED_BITS_NX90_irq 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_systime_ns */
/* => Shared in xPEC intlogic mode with systime_uc_ns (r mode). */
/*    xPEC System time (for read) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_systime_ns            0x00000090U
#define Adr_NX90_xc0_rpec0_regs_xpec_systime_ns 0xFF111090U
#define Adr_NX90_xc0_tpec0_regs_xpec_systime_ns 0xFF111190U
#define Adr_NX90_xc0_rpec1_regs_xpec_systime_ns 0xFF111290U
#define Adr_NX90_xc0_tpec1_regs_xpec_systime_ns 0xFF111390U

#define MSK_NX90_xpec_systime_ns_systime_ns 0xffffffffU
#define SRT_NX90_xpec_systime_ns_systime_ns 0

/* all used bits of 'NX90_xpec_systime_ns': */
#define MSK_USED_BITS_NX90_xpec_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fifo_data */
/* => xPEC fifo_data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fifo_data            0x00000094U
#define Adr_NX90_xc0_rpec0_regs_fifo_data 0xFF111094U
#define Adr_NX90_xc0_tpec0_regs_fifo_data 0xFF111194U
#define Adr_NX90_xc0_rpec1_regs_fifo_data 0xFF111294U
#define Adr_NX90_xc0_tpec1_regs_fifo_data 0xFF111394U
#define DFLT_VAL_NX90_fifo_data           0x00000000U

#define MSK_NX90_fifo_data_fifo_data         0xffffffffU
#define SRT_NX90_fifo_data_fifo_data         0
#define DFLT_VAL_NX90_fifo_data_fifo_data    0x00000000U
#define DFLT_BF_VAL_NX90_fifo_data_fifo_data 0x00000000U

/* all used bits of 'NX90_fifo_data': */
#define MSK_USED_BITS_NX90_fifo_data 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_systime_s */
/* => Shared in xPEC intlogic mode with systime_uc_s (r mode). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_systime_s            0x00000098U
#define Adr_NX90_xc0_rpec0_regs_xpec_systime_s 0xFF111098U
#define Adr_NX90_xc0_tpec0_regs_xpec_systime_s 0xFF111198U
#define Adr_NX90_xc0_rpec1_regs_xpec_systime_s 0xFF111298U
#define Adr_NX90_xc0_tpec1_regs_xpec_systime_s 0xFF111398U

#define MSK_NX90_xpec_systime_s_systime_s 0xffffffffU
#define SRT_NX90_xpec_systime_s_systime_s 0

/* all used bits of 'NX90_xpec_systime_s': */
#define MSK_USED_BITS_NX90_xpec_systime_s 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register datach_data */
/* => Shared in xPEC fmmusm mode with buf_man (r/w mode).Register only accessible via rPEC0 and tPEC0 */
/*    xPEC data channel - data */
/*    becomes adr_buf_man of BUF_MAN */
/*    Buffer manager address for master xPEC: */
/*    16 buffer manager modules can be accessed, where each one handles buffer numbers between up to 4 procesors. */
/*    Each read request of a master will be answered by the most actual buffer number, */
/*    each write request of a master will be answered by the lowest free buffer number. */
/*    The buffer managers can be accessed in 2 different modes: 'normal mode' and 'parallel mode' (also known as EtherCAT mode): */
/*    In normal mode getting a new buffer happens with 2 command accesses: */
/*    1st: Write access: Tell the buf_manager channel (0..15) and wether you want read or write buffer. */
/*         Wait for 2 clockcycles, until new buffer number is calculated after any write access. */
/*    2nd: Read access: Read the buffer number (0..4). */
/*    In parallel mode all buffers are accessed in parallel but some functionality is limited. */
/*     3 -  0 : buf_nr         # write access: number of buf_manager channel (0..15) # default 7 */
/*            :                # read access: number of buffer (0..m+1), where m ist the number of masters using this buf_manager */
/*     6 -  5 : req_type       # Request type bits are write-only */
/*            :                # 00: request read buffer (or semaphore) */
/*            :                # 01: request write buffer (or release semaphore) */
/*            :                # 10: release write buffer (or release semaphore) */
/*            :                # 11: do not request new buffer or semaphore (used to only change channel) */
/*        7   : semaphore_mode # Activate 'semaphore mode' for this buf_nr by writing 1 to this bit. */
/*            :                # To return from semaphore-mode reset this channel */
/*            :                # In semaphore mode only buf_nr=0 (this master gets the semaphore) */
/*            :                # or buf_nr=7 (master does not get semphore) are returned. */
/*            :                # Requesting or releasing a semaphore (by req_type) is allowed while switching to semaphore mode */
/*        8   : parallel_mode  # activate parallel mode by writing 1 to this bit (other bits are ignored): */
/*            :                # In parallel mode, the behaviour of all bits of this register changes completely. */
/*            :                # To return to normal mode, write 0xffff0000 to this register. */
/*            :                # parallel mode write access: */
/*            :                #   15.. 0: Request bits of all 16 channels (1: request new buffer, 0: dont request buffer) */
/*            :                #   31..16: wr bits of all 16 channels: */
/*            :                #           0: request read buffer or request semaphore */
/*            :                #           1: request write buffer or release semaphore */
/*            :                # parallel mode read access: */
/*            :                #   1,0: Actual buffer number of channel 0. */
/*            :                #   ... */
/*            :                #   31,30: Actual buffer number of channel 15. */
/*            :                # In parallel mode the number of masters is limited to 2, resulting in 3 buffers per channel. */
/*            :                # In parallel mode buffers cannot be released without requesting new buffer numbers. */
/*        9   : reset          # reset channel */
/*       10   : sm_update_en   # activate SM_auto_update mode by writing 1 to this bit: */
/*            :                # In SM_auto_update mode the requested buffer numbers of buffer managers 0..7 will automatically */
/*            :                # be programmed to the FMMU_SM unit. */
/*       11   : sm_update_dis  # de-activate SM_auto_update mode by writing 1 to this bit: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_datach_data            0x0000009CU
#define Adr_NX90_xc0_rpec0_regs_datach_data 0xFF11109CU
#define Adr_NX90_xc0_tpec0_regs_datach_data 0xFF11119CU
#define Adr_NX90_xc0_rpec1_regs_datach_data 0xFF11129CU
#define Adr_NX90_xc0_tpec1_regs_datach_data 0xFF11139CU

/* --------------------------------------------------------------------- */
/* Register xpec_sr0 */
/* => Shared Work Register 0 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr0            0x000000A0U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr0 0xFF1110A0U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr0 0xFF1111A0U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr0 0xFF1112A0U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr0 0xFF1113A0U
#define DFLT_VAL_NX90_xpec_sr0           0x00000000U

#define MSK_NX90_xpec_sr0_SR0            0x0000ffffU
#define SRT_NX90_xpec_sr0_SR0            0
#define DFLT_VAL_NX90_xpec_sr0_SR0       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr0_SR0    0x00000000U
#define MSK_NX90_xpec_sr0_SR0_15         0xffff0000U
#define SRT_NX90_xpec_sr0_SR0_15         16
#define DFLT_VAL_NX90_xpec_sr0_SR0_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr0_SR0_15 0x00000000U

/* all used bits of 'NX90_xpec_sr0': */
#define MSK_USED_BITS_NX90_xpec_sr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr1 */
/* => Shared Work Register 1 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr1            0x000000A4U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr1 0xFF1110A4U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr1 0xFF1111A4U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr1 0xFF1112A4U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr1 0xFF1113A4U
#define DFLT_VAL_NX90_xpec_sr1           0x00000000U

#define MSK_NX90_xpec_sr1_SR1            0x0000ffffU
#define SRT_NX90_xpec_sr1_SR1            0
#define DFLT_VAL_NX90_xpec_sr1_SR1       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr1_SR1    0x00000000U
#define MSK_NX90_xpec_sr1_SR1_15         0xffff0000U
#define SRT_NX90_xpec_sr1_SR1_15         16
#define DFLT_VAL_NX90_xpec_sr1_SR1_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr1_SR1_15 0x00000000U

/* all used bits of 'NX90_xpec_sr1': */
#define MSK_USED_BITS_NX90_xpec_sr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr2 */
/* => Shared Work Register 2 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr2            0x000000A8U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr2 0xFF1110A8U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr2 0xFF1111A8U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr2 0xFF1112A8U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr2 0xFF1113A8U
#define DFLT_VAL_NX90_xpec_sr2           0x00000000U

#define MSK_NX90_xpec_sr2_SR2            0x0000ffffU
#define SRT_NX90_xpec_sr2_SR2            0
#define DFLT_VAL_NX90_xpec_sr2_SR2       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr2_SR2    0x00000000U
#define MSK_NX90_xpec_sr2_SR2_15         0xffff0000U
#define SRT_NX90_xpec_sr2_SR2_15         16
#define DFLT_VAL_NX90_xpec_sr2_SR2_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr2_SR2_15 0x00000000U

/* all used bits of 'NX90_xpec_sr2': */
#define MSK_USED_BITS_NX90_xpec_sr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr3 */
/* => Shared Work Register 3 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr3            0x000000ACU
#define Adr_NX90_xc0_rpec0_regs_xpec_sr3 0xFF1110ACU
#define Adr_NX90_xc0_tpec0_regs_xpec_sr3 0xFF1111ACU
#define Adr_NX90_xc0_rpec1_regs_xpec_sr3 0xFF1112ACU
#define Adr_NX90_xc0_tpec1_regs_xpec_sr3 0xFF1113ACU
#define DFLT_VAL_NX90_xpec_sr3           0x00000000U

#define MSK_NX90_xpec_sr3_SR3            0x0000ffffU
#define SRT_NX90_xpec_sr3_SR3            0
#define DFLT_VAL_NX90_xpec_sr3_SR3       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr3_SR3    0x00000000U
#define MSK_NX90_xpec_sr3_SR3_15         0xffff0000U
#define SRT_NX90_xpec_sr3_SR3_15         16
#define DFLT_VAL_NX90_xpec_sr3_SR3_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr3_SR3_15 0x00000000U

/* all used bits of 'NX90_xpec_sr3': */
#define MSK_USED_BITS_NX90_xpec_sr3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr4 */
/* => Shared Work Register 4 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr4            0x000000B0U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr4 0xFF1110B0U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr4 0xFF1111B0U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr4 0xFF1112B0U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr4 0xFF1113B0U
#define DFLT_VAL_NX90_xpec_sr4           0x00000000U

#define MSK_NX90_xpec_sr4_SR4            0x0000ffffU
#define SRT_NX90_xpec_sr4_SR4            0
#define DFLT_VAL_NX90_xpec_sr4_SR4       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr4_SR4    0x00000000U
#define MSK_NX90_xpec_sr4_SR4_15         0xffff0000U
#define SRT_NX90_xpec_sr4_SR4_15         16
#define DFLT_VAL_NX90_xpec_sr4_SR4_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr4_SR4_15 0x00000000U

/* all used bits of 'NX90_xpec_sr4': */
#define MSK_USED_BITS_NX90_xpec_sr4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr5 */
/* => Shared Work Register 5 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr5            0x000000B4U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr5 0xFF1110B4U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr5 0xFF1111B4U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr5 0xFF1112B4U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr5 0xFF1113B4U
#define DFLT_VAL_NX90_xpec_sr5           0x00000000U

#define MSK_NX90_xpec_sr5_SR5            0x0000ffffU
#define SRT_NX90_xpec_sr5_SR5            0
#define DFLT_VAL_NX90_xpec_sr5_SR5       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr5_SR5    0x00000000U
#define MSK_NX90_xpec_sr5_SR5_15         0xffff0000U
#define SRT_NX90_xpec_sr5_SR5_15         16
#define DFLT_VAL_NX90_xpec_sr5_SR5_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr5_SR5_15 0x00000000U

/* all used bits of 'NX90_xpec_sr5': */
#define MSK_USED_BITS_NX90_xpec_sr5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr6 */
/* => Shared Work Register 6 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr6            0x000000B8U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr6 0xFF1110B8U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr6 0xFF1111B8U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr6 0xFF1112B8U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr6 0xFF1113B8U
#define DFLT_VAL_NX90_xpec_sr6           0x00000000U

#define MSK_NX90_xpec_sr6_SR6            0x0000ffffU
#define SRT_NX90_xpec_sr6_SR6            0
#define DFLT_VAL_NX90_xpec_sr6_SR6       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr6_SR6    0x00000000U
#define MSK_NX90_xpec_sr6_SR6_15         0xffff0000U
#define SRT_NX90_xpec_sr6_SR6_15         16
#define DFLT_VAL_NX90_xpec_sr6_SR6_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr6_SR6_15 0x00000000U

/* all used bits of 'NX90_xpec_sr6': */
#define MSK_USED_BITS_NX90_xpec_sr6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr7 */
/* => Shared Work Register 7 accessed by all xPECs and all xMACs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr7            0x000000BCU
#define Adr_NX90_xc0_rpec0_regs_xpec_sr7 0xFF1110BCU
#define Adr_NX90_xc0_tpec0_regs_xpec_sr7 0xFF1111BCU
#define Adr_NX90_xc0_rpec1_regs_xpec_sr7 0xFF1112BCU
#define Adr_NX90_xc0_tpec1_regs_xpec_sr7 0xFF1113BCU
#define DFLT_VAL_NX90_xpec_sr7           0x00000000U

#define MSK_NX90_xpec_sr7_SR7            0x0000ffffU
#define SRT_NX90_xpec_sr7_SR7            0
#define DFLT_VAL_NX90_xpec_sr7_SR7       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr7_SR7    0x00000000U
#define MSK_NX90_xpec_sr7_SR7_15         0xffff0000U
#define SRT_NX90_xpec_sr7_SR7_15         16
#define DFLT_VAL_NX90_xpec_sr7_SR7_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr7_SR7_15 0x00000000U

/* all used bits of 'NX90_xpec_sr7': */
#define MSK_USED_BITS_NX90_xpec_sr7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr8 */
/* => Shared Work Register 8 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with fmmusm_len_en (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_sample_irq (r mode). */
/*    Shared in xPEC intlogic mode with xmac0_rpu_systime_uc (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr8            0x000000C0U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr8 0xFF1110C0U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr8 0xFF1111C0U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr8 0xFF1112C0U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr8 0xFF1113C0U
#define DFLT_VAL_NX90_xpec_sr8           0x00000000U

#define MSK_NX90_xpec_sr8_SR8            0x0000ffffU
#define SRT_NX90_xpec_sr8_SR8            0
#define DFLT_VAL_NX90_xpec_sr8_SR8       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr8_SR8    0x00000000U
#define MSK_NX90_xpec_sr8_SR8_15         0xffff0000U
#define SRT_NX90_xpec_sr8_SR8_15         16
#define DFLT_VAL_NX90_xpec_sr8_SR8_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr8_SR8_15 0x00000000U

/* all used bits of 'NX90_xpec_sr8': */
#define MSK_USED_BITS_NX90_xpec_sr8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr9 */
/* => Shared Work Register 9 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with fmmusm_status_out (r mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_activate (r mode). */
/*    Shared in xPEC intlogic mode with xmac1_rpu_systime_uc (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr9            0x000000C4U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr9 0xFF1110C4U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr9 0xFF1111C4U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr9 0xFF1112C4U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr9 0xFF1113C4U
#define DFLT_VAL_NX90_xpec_sr9           0x00000000U

#define MSK_NX90_xpec_sr9_SR9            0x0000ffffU
#define SRT_NX90_xpec_sr9_SR9            0
#define DFLT_VAL_NX90_xpec_sr9_SR9       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr9_SR9    0x00000000U
#define MSK_NX90_xpec_sr9_SR9_15         0xffff0000U
#define SRT_NX90_xpec_sr9_SR9_15         16
#define DFLT_VAL_NX90_xpec_sr9_SR9_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr9_SR9_15 0x00000000U

/* all used bits of 'NX90_xpec_sr9': */
#define MSK_USED_BITS_NX90_xpec_sr9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr10 */
/* => Shared Work Register 10 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with sm_buf_statcfg (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_impulse_length (r mode). */
/*    Shared in xPEC intlogic mode with xmac0_tpu_systime_uc (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr10            0x000000C8U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr10 0xFF1110C8U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr10 0xFF1111C8U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr10 0xFF1112C8U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr10 0xFF1113C8U
#define DFLT_VAL_NX90_xpec_sr10           0x00000000U

#define MSK_NX90_xpec_sr10_SR10            0x0000ffffU
#define SRT_NX90_xpec_sr10_SR10            0
#define DFLT_VAL_NX90_xpec_sr10_SR10       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr10_SR10    0x00000000U
#define MSK_NX90_xpec_sr10_SR10_15         0xffff0000U
#define SRT_NX90_xpec_sr10_SR10_15         16
#define DFLT_VAL_NX90_xpec_sr10_SR10_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr10_SR10_15 0x00000000U

/* all used bits of 'NX90_xpec_sr10': */
#define MSK_USED_BITS_NX90_xpec_sr10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr11 */
/* => Shared Work Register 11 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with sm_read_event (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_0_starttime_ns (r mode). */
/*    Shared in xPEC intlogic mode with xmac1_tpu_systime_uc (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr11            0x000000CCU
#define Adr_NX90_xc0_rpec0_regs_xpec_sr11 0xFF1110CCU
#define Adr_NX90_xc0_tpec0_regs_xpec_sr11 0xFF1111CCU
#define Adr_NX90_xc0_rpec1_regs_xpec_sr11 0xFF1112CCU
#define Adr_NX90_xc0_tpec1_regs_xpec_sr11 0xFF1113CCU
#define DFLT_VAL_NX90_xpec_sr11           0x00000000U

#define MSK_NX90_xpec_sr11_SR11            0x0000ffffU
#define SRT_NX90_xpec_sr11_SR11            0
#define DFLT_VAL_NX90_xpec_sr11_SR11       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr11_SR11    0x00000000U
#define MSK_NX90_xpec_sr11_SR11_15         0xffff0000U
#define SRT_NX90_xpec_sr11_SR11_15         16
#define DFLT_VAL_NX90_xpec_sr11_SR11_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr11_SR11_15 0x00000000U

/* all used bits of 'NX90_xpec_sr11': */
#define MSK_USED_BITS_NX90_xpec_sr11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr12 */
/* => Shared Work Register 12 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with sm_write_event (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_1_starttime_ns (r mode). */
/*    Shared in xPEC intlogic mode with xmac0_rpu_systime (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr12            0x000000D0U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr12 0xFF1110D0U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr12 0xFF1111D0U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr12 0xFF1112D0U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr12 0xFF1113D0U
#define DFLT_VAL_NX90_xpec_sr12           0x00000000U

#define MSK_NX90_xpec_sr12_SR12            0x0000ffffU
#define SRT_NX90_xpec_sr12_SR12            0
#define DFLT_VAL_NX90_xpec_sr12_SR12       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr12_SR12    0x00000000U
#define MSK_NX90_xpec_sr12_SR12_15         0xffff0000U
#define SRT_NX90_xpec_sr12_SR12_15         16
#define DFLT_VAL_NX90_xpec_sr12_SR12_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr12_SR12_15 0x00000000U

/* all used bits of 'NX90_xpec_sr12': */
#define MSK_USED_BITS_NX90_xpec_sr12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr13 */
/* => Shared Work Register 13 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with sm_first_byte_addressed (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_0_cyc_time (r mode). */
/*    Shared in xPEC intlogic mode with xmac1_rpu_systime (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr13            0x000000D4U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr13 0xFF1110D4U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr13 0xFF1111D4U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr13 0xFF1112D4U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr13 0xFF1113D4U
#define DFLT_VAL_NX90_xpec_sr13           0x00000000U

#define MSK_NX90_xpec_sr13_SR13            0x0000ffffU
#define SRT_NX90_xpec_sr13_SR13            0
#define DFLT_VAL_NX90_xpec_sr13_SR13       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr13_SR13    0x00000000U
#define MSK_NX90_xpec_sr13_SR13_15         0xffff0000U
#define SRT_NX90_xpec_sr13_SR13_15         16
#define DFLT_VAL_NX90_xpec_sr13_SR13_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr13_SR13_15 0x00000000U

/* all used bits of 'NX90_xpec_sr13': */
#define MSK_USED_BITS_NX90_xpec_sr13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr14 */
/* => Shared Work Register 14 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with sm_last_byte_addressed (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_trigger_1_cyc_time (r mode). */
/*    Shared in xPEC intlogic mode with xmac0_tpu_systime (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr14            0x000000D8U
#define Adr_NX90_xc0_rpec0_regs_xpec_sr14 0xFF1110D8U
#define Adr_NX90_xc0_tpec0_regs_xpec_sr14 0xFF1111D8U
#define Adr_NX90_xc0_rpec1_regs_xpec_sr14 0xFF1112D8U
#define Adr_NX90_xc0_tpec1_regs_xpec_sr14 0xFF1113D8U
#define DFLT_VAL_NX90_xpec_sr14           0x00000000U

#define MSK_NX90_xpec_sr14_SR14            0x0000ffffU
#define SRT_NX90_xpec_sr14_SR14            0
#define DFLT_VAL_NX90_xpec_sr14_SR14       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr14_SR14    0x00000000U
#define MSK_NX90_xpec_sr14_SR14_15         0xffff0000U
#define SRT_NX90_xpec_sr14_SR14_15         16
#define DFLT_VAL_NX90_xpec_sr14_SR14_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr14_SR14_15 0x00000000U

/* all used bits of 'NX90_xpec_sr14': */
#define MSK_USED_BITS_NX90_xpec_sr14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpec_sr15 */
/* => Shared Work Register 15 accessed by all xPECs and all xMACs. */
/*    Shared in xPEC fmmusm mode with sm_served (r/w mode). Register only accessible via rPEC0 and tPEC0 */
/*    Shared in xPEC trigger_sample mode with adr_sample_mode (r mode). */
/*    Shared in xPEC intlogic mode with xmac1_tpu_systime (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpec_sr15            0x000000DCU
#define Adr_NX90_xc0_rpec0_regs_xpec_sr15 0xFF1110DCU
#define Adr_NX90_xc0_tpec0_regs_xpec_sr15 0xFF1111DCU
#define Adr_NX90_xc0_rpec1_regs_xpec_sr15 0xFF1112DCU
#define Adr_NX90_xc0_tpec1_regs_xpec_sr15 0xFF1113DCU
#define DFLT_VAL_NX90_xpec_sr15           0x00000000U

#define MSK_NX90_xpec_sr15_SR15            0x0000ffffU
#define SRT_NX90_xpec_sr15_SR15            0
#define DFLT_VAL_NX90_xpec_sr15_SR15       0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr15_SR15    0x00000000U
#define MSK_NX90_xpec_sr15_SR15_15         0xffff0000U
#define SRT_NX90_xpec_sr15_SR15_15         16
#define DFLT_VAL_NX90_xpec_sr15_SR15_15    0x00000000U
#define DFLT_BF_VAL_NX90_xpec_sr15_SR15_15 0x00000000U

/* all used bits of 'NX90_xpec_sr15': */
#define MSK_USED_BITS_NX90_xpec_sr15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register statcfg0 */
/* => xMAC0 Shared Config/Status Register */
/*    for write mode the upper Bits [31:16] are mask bits for Bits [15:0] of shared_config (xMAC) register */
/*    Shared in xPEC trigger_sample mode with adr_sample_0_pos_systime_ns (r mode). */
/*    Shared in xPEC intlogic mode with crc_polynom (r/w mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_statcfg0            0x000000E0U
#define Adr_NX90_xc0_rpec0_regs_statcfg0 0xFF1110E0U
#define Adr_NX90_xc0_tpec0_regs_statcfg0 0xFF1111E0U
#define Adr_NX90_xc0_rpec1_regs_statcfg0 0xFF1112E0U
#define Adr_NX90_xc0_tpec1_regs_statcfg0 0xFF1113E0U
#define DFLT_VAL_NX90_statcfg0           0x00000000U

#define MSK_NX90_statcfg0_xmac0_config_shared0         0x000000ffU
#define SRT_NX90_statcfg0_xmac0_config_shared0         0
#define DFLT_VAL_NX90_statcfg0_xmac0_config_shared0    0x00000000U
#define DFLT_BF_VAL_NX90_statcfg0_xmac0_config_shared0 0x00000000U
#define MSK_NX90_statcfg0_xmac0_io_oe_shared0          0x0000ff00U
#define SRT_NX90_statcfg0_xmac0_io_oe_shared0          8
#define DFLT_VAL_NX90_statcfg0_xmac0_io_oe_shared0     0x00000000U
#define DFLT_BF_VAL_NX90_statcfg0_xmac0_io_oe_shared0  0x00000000U
#define MSK_NX90_statcfg0_xmac0_status_shared0         0xffff0000U
#define SRT_NX90_statcfg0_xmac0_status_shared0         16
#define DFLT_VAL_NX90_statcfg0_xmac0_status_shared0    0x00000000U
#define DFLT_BF_VAL_NX90_statcfg0_xmac0_status_shared0 0x00000000U

/* all used bits of 'NX90_statcfg0': */
#define MSK_USED_BITS_NX90_statcfg0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register statcfg1 */
/* => xMAC1 Shared Config/Status Register */
/*    for write mode the upper Bits [31:16] are mask bits for Bits [15:0] of shared_config (xMAC) register */
/*    Shared in xPEC trigger_sample mode with adr_sample_0_neg_systime_ns (r mode). */
/*    Shared in xPEC intlogic mode with crc_cfg (r/w mode). */
/*    crc_cfg[10]    = crc_invert */
/*    crc_cfg[9]     = crc_zero */
/*    crc_cfg[8]     = reserved */
/*    crc_cfg[7]     = crc_shift_right */
/*    crc_cfg[6]     = crc_swap_output */
/*    crc_cfg[5]     = crc_direct_div */
/*    crc_cfg[4:0]   = crc_length */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_statcfg1            0x000000E4U
#define Adr_NX90_xc0_rpec0_regs_statcfg1 0xFF1110E4U
#define Adr_NX90_xc0_tpec0_regs_statcfg1 0xFF1111E4U
#define Adr_NX90_xc0_rpec1_regs_statcfg1 0xFF1112E4U
#define Adr_NX90_xc0_tpec1_regs_statcfg1 0xFF1113E4U
#define DFLT_VAL_NX90_statcfg1           0x00000000U

#define MSK_NX90_statcfg1_xmac1_config_shared1         0x000000ffU
#define SRT_NX90_statcfg1_xmac1_config_shared1         0
#define DFLT_VAL_NX90_statcfg1_xmac1_config_shared1    0x00000000U
#define DFLT_BF_VAL_NX90_statcfg1_xmac1_config_shared1 0x00000000U
#define MSK_NX90_statcfg1_xmac1_io_oe_shared1          0x0000ff00U
#define SRT_NX90_statcfg1_xmac1_io_oe_shared1          8
#define DFLT_VAL_NX90_statcfg1_xmac1_io_oe_shared1     0x00000000U
#define DFLT_BF_VAL_NX90_statcfg1_xmac1_io_oe_shared1  0x00000000U
#define MSK_NX90_statcfg1_xmac1_status_shared1         0xffff0000U
#define SRT_NX90_statcfg1_xmac1_status_shared1         16
#define DFLT_VAL_NX90_statcfg1_xmac1_status_shared1    0x00000000U
#define DFLT_BF_VAL_NX90_statcfg1_xmac1_status_shared1 0x00000000U

/* all used bits of 'NX90_statcfg1': */
#define MSK_USED_BITS_NX90_statcfg1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register datach_wr_cfg */
/* => Shared in xPEC trigger_sample mode with adr_sample_1_pos_systime_ns (r mode). */
/*    Shared in xPEC fmmusm mode with fmmu_read_bit_rol_pos (r mode). */
/*    Shared in xPEC intlogic mode with xpec_config2 (r/w mode) */
/*      9 - 8    : wr4_range_sel        # Select range mode for wr4 # default 0 */
/*               :                      #       2'b00 : normal mode (range4 for wr4) */
/*               :                      #       2'b01 : select wr6 as range  for wr4 */
/*               :                      #       2'b10 : select wr7 as range  for wr4 */
/*               :                      #       2'b11 : reserved */
/*    11 - 10    : wr5_range_sel        # Select range mode for wr5 # default 0 */
/*               :                      #       2'b00 : normal mode (range5 for wr5) */
/*               :                      #       2'b01 : select wr6 as range  for wr5 */
/*               :                      #       2'b10 : select wr7 as range  for wr5 */
/*               :                      #       2'b11 : reserved */
/*    13 - 12    : wr6_range_sel        # Select range mode for wr6 # default 0 */
/*               :                      #       2'b00 : normal mode (range6 for wr6) */
/*               :                      #       2'b01 : select wr4 as range  for wr6 */
/*               :                      #       2'b10 : select wr5 as range  for wr6 */
/*               :                      #       2'b11 : reserved */
/*    15 - 14    : wr7_range_sel        # Select range mode for wr7 # default 0 */
/*               :                      #       2'b00 : normal mode (range7 for wr7) */
/*               :                      #       2'b01 : select wr4 as range  for wr7 */
/*               :                      #       2'b10 : select wr5 as range  for wr7 */
/*               :                      #       2'b11 : reserved */
/*    19 - 16    : datach_segment_addr_31_28 # bits 31..28 of data channel address # default 0 */
/*    21 - 20    : sysch_size                # access width of system channel access # default 0x2 */
/*               :                      #       2'b00 : byte access (8 bit) */
/*               :                      #       2'b01 : word access (16 bit) */
/*               :                      #       2'b10 : dword access (32 bit) # default */
/*               :                      #       2'b11 : reserved */
/*         22    : datach_rdy_timer2small # debug status, set to one if datach_rdy event goes up after datach_rdy timer expired; write one to reset flag. Recommended value: number of PICs using data_ch plus 2, netx56 worst case-value=6 */
/*         23    : pfifo_rdy_timer2small  # debug status, set to one if pfifo_rdy event goes up after pfifo_rdy timer expired; write one to reset flag */
/*    27 - 24    : datach_rdy_timer     #  0: datach_rdy signal generated after access finished: */
/*               :                      #  1..15: datach_rdy generated x cc after access started (set to worst case value; used to get determistic PEC program flow) */
/*    31 - 28    : pfifo_rdy_timer      #  0: pfifo_rdy signal generated after access finished */
/*               :                      #  1..15: pfifo_rdy generated x cc after access started (set to worst case value; used to get determistic PEC program flow, worst case value is number of pfifo accessing parties minus one) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_datach_wr_cfg            0x000000E8U
#define Adr_NX90_xc0_rpec0_regs_datach_wr_cfg 0xFF1110E8U
#define Adr_NX90_xc0_tpec0_regs_datach_wr_cfg 0xFF1111E8U
#define Adr_NX90_xc0_rpec1_regs_datach_wr_cfg 0xFF1112E8U
#define Adr_NX90_xc0_tpec1_regs_datach_wr_cfg 0xFF1113E8U
#define DFLT_VAL_NX90_datach_wr_cfg           0x00000000U

#define MSK_NX90_datach_wr_cfg_datach_wr_offset_addr         0x0fffffffU
#define SRT_NX90_datach_wr_cfg_datach_wr_offset_addr         0
#define DFLT_VAL_NX90_datach_wr_cfg_datach_wr_offset_addr    0x00000000U
#define DFLT_BF_VAL_NX90_datach_wr_cfg_datach_wr_offset_addr 0x00000000U
#define MSK_NX90_datach_wr_cfg_datach_wr_size                0x30000000U
#define SRT_NX90_datach_wr_cfg_datach_wr_size                28
#define DFLT_VAL_NX90_datach_wr_cfg_datach_wr_size           0x00000000U
#define DFLT_BF_VAL_NX90_datach_wr_cfg_datach_wr_size        0x00000000U
#define MSK_NX90_datach_wr_cfg_datach_wr_mode                0xc0000000U
#define SRT_NX90_datach_wr_cfg_datach_wr_mode                30
#define DFLT_VAL_NX90_datach_wr_cfg_datach_wr_mode           0x00000000U
#define DFLT_BF_VAL_NX90_datach_wr_cfg_datach_wr_mode        0x00000000U

/* all used bits of 'NX90_datach_wr_cfg': */
#define MSK_USED_BITS_NX90_datach_wr_cfg 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register datach_rd_cfg */
/* => Shared in xPEC trigger_sample mode with adr_sample_1_neg_systime_ns (r mode). */
/*    Shared in xPEC fmmusm mode with fmmu_write_bit_rol_pos (r mode). */
/*    Shared in xPEC intlogic mode with crc_data (r/w mode) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_datach_rd_cfg            0x000000ECU
#define Adr_NX90_xc0_rpec0_regs_datach_rd_cfg 0xFF1110ECU
#define Adr_NX90_xc0_tpec0_regs_datach_rd_cfg 0xFF1111ECU
#define Adr_NX90_xc0_rpec1_regs_datach_rd_cfg 0xFF1112ECU
#define Adr_NX90_xc0_tpec1_regs_datach_rd_cfg 0xFF1113ECU
#define DFLT_VAL_NX90_datach_rd_cfg           0x00000000U

#define MSK_NX90_datach_rd_cfg_datach_rd_offset_addr         0x0fffffffU
#define SRT_NX90_datach_rd_cfg_datach_rd_offset_addr         0
#define DFLT_VAL_NX90_datach_rd_cfg_datach_rd_offset_addr    0x00000000U
#define DFLT_BF_VAL_NX90_datach_rd_cfg_datach_rd_offset_addr 0x00000000U
#define MSK_NX90_datach_rd_cfg_datach_rd_size                0x30000000U
#define SRT_NX90_datach_rd_cfg_datach_rd_size                28
#define DFLT_VAL_NX90_datach_rd_cfg_datach_rd_size           0x00000000U
#define DFLT_BF_VAL_NX90_datach_rd_cfg_datach_rd_size        0x00000000U
#define MSK_NX90_datach_rd_cfg_datach_rd_mode                0xc0000000U
#define SRT_NX90_datach_rd_cfg_datach_rd_mode                30
#define DFLT_VAL_NX90_datach_rd_cfg_datach_rd_mode           0x00000000U
#define DFLT_BF_VAL_NX90_datach_rd_cfg_datach_rd_mode        0x00000000U

/* all used bits of 'NX90_datach_rd_cfg': */
#define MSK_USED_BITS_NX90_datach_rd_cfg 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register urtx0 */
/* => xMAC0 URX Shared Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_urtx0            0x000000F0U
#define Adr_NX90_xc0_rpec0_regs_urtx0 0xFF1110F0U
#define Adr_NX90_xc0_tpec0_regs_urtx0 0xFF1111F0U
#define Adr_NX90_xc0_rpec1_regs_urtx0 0xFF1112F0U
#define Adr_NX90_xc0_tpec1_regs_urtx0 0xFF1113F0U
#define DFLT_VAL_NX90_urtx0           0x00000000U

#define MSK_NX90_urtx0_urtx_xmac0         0x0000ffffU
#define SRT_NX90_urtx0_urtx_xmac0         0
#define DFLT_VAL_NX90_urtx0_urtx_xmac0    0x00000000U
#define DFLT_BF_VAL_NX90_urtx0_urtx_xmac0 0x00000000U

/* all used bits of 'NX90_urtx0': */
#define MSK_USED_BITS_NX90_urtx0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register urtx1 */
/* => xMAC1 URX Shared Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_urtx1            0x000000F4U
#define Adr_NX90_xc0_rpec0_regs_urtx1 0xFF1110F4U
#define Adr_NX90_xc0_tpec0_regs_urtx1 0xFF1111F4U
#define Adr_NX90_xc0_rpec1_regs_urtx1 0xFF1112F4U
#define Adr_NX90_xc0_tpec1_regs_urtx1 0xFF1113F4U
#define DFLT_VAL_NX90_urtx1           0x00000000U

#define MSK_NX90_urtx1_urtx_xmac1         0x0000ffffU
#define SRT_NX90_urtx1_urtx_xmac1         0
#define DFLT_VAL_NX90_urtx1_urtx_xmac1    0x00000000U
#define DFLT_BF_VAL_NX90_urtx1_urtx_xmac1 0x00000000U

/* all used bits of 'NX90_urtx1': */
#define MSK_USED_BITS_NX90_urtx1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sysch_data */
/* => Shared in xPEC trigger_sample mode with adr_trigger_sample_config (r mode). */
/*    Shared in xPEC fmmusm mode with fmmu_read_bit_mask (r mode). */
/*    Shared in xPEC intlogic mode with mii_clk_phase (r mode). */
/*    11 -  9 : xmac1_tpu_clk_phase # clock phase of xmac1 TPU */
/*     8 -  6 : xmac1_rpu_clk_phase # clock phase of xmac1 RPU */
/*     5 -  3 : xmac0_tpu_clk_phase # clock phase of xmac0 TPU */
/*     2 -  0 : xmac0_rpu_clk_phase # clock phase of xmac0 RPU */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sysch_data            0x000000F8U
#define Adr_NX90_xc0_rpec0_regs_sysch_data 0xFF1110F8U
#define Adr_NX90_xc0_tpec0_regs_sysch_data 0xFF1111F8U
#define Adr_NX90_xc0_rpec1_regs_sysch_data 0xFF1112F8U
#define Adr_NX90_xc0_tpec1_regs_sysch_data 0xFF1113F8U

/* --------------------------------------------------------------------- */
/* Register sysch_addr */
/* => Shared in xPEC trigger_sample mode with adr_trigger_sample_status (r mode). */
/*    Shared in xPEC fmmusm mode with fmmu_write_bit_mask (r mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sysch_addr            0x000000FCU
#define Adr_NX90_xc0_rpec0_regs_sysch_addr 0xFF1110FCU
#define Adr_NX90_xc0_tpec0_regs_sysch_addr 0xFF1111FCU
#define Adr_NX90_xc0_rpec1_regs_sysch_addr 0xFF1112FCU
#define Adr_NX90_xc0_tpec1_regs_sysch_addr 0xFF1113FCU


/* ===================================================================== */

/* AREA xmac */
/* Area of xc0_xmac0_regs, xc0_xmac1_regs */

/* ===================================================================== */

#define Addr_NX90_xc0_xmac0_regs 0xFF111400U
#define NX90_NETX_XC0_XM0_BASE   0xFF111400U
#define Addr_NX90_xc0_xmac1_regs 0xFF111600U
#define NX90_NETX_XC0_XM1_BASE   0xFF111600U

/* --------------------------------------------------------------------- */
/* Register xmac_sr0 */
/* => Shared Work Register 0 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr0            0x00000000U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr0 0xFF111400U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr0 0xFF111600U
#define DFLT_VAL_NX90_xmac_sr0           0x00000000U

#define MSK_NX90_xmac_sr0_sr0         0x0000ffffU
#define SRT_NX90_xmac_sr0_sr0         0
#define DFLT_VAL_NX90_xmac_sr0_sr0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr0_sr0 0x00000000U

/* all used bits of 'NX90_xmac_sr0': */
#define MSK_USED_BITS_NX90_xmac_sr0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr1 */
/* => Shared Work Register 1 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr1            0x00000004U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr1 0xFF111404U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr1 0xFF111604U
#define DFLT_VAL_NX90_xmac_sr1           0x00000000U

#define MSK_NX90_xmac_sr1_sr1         0x0000ffffU
#define SRT_NX90_xmac_sr1_sr1         0
#define DFLT_VAL_NX90_xmac_sr1_sr1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr1_sr1 0x00000000U

/* all used bits of 'NX90_xmac_sr1': */
#define MSK_USED_BITS_NX90_xmac_sr1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr2 */
/* => Shared Work Register 2 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr2            0x00000008U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr2 0xFF111408U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr2 0xFF111608U
#define DFLT_VAL_NX90_xmac_sr2           0x00000000U

#define MSK_NX90_xmac_sr2_sr2         0x0000ffffU
#define SRT_NX90_xmac_sr2_sr2         0
#define DFLT_VAL_NX90_xmac_sr2_sr2    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr2_sr2 0x00000000U

/* all used bits of 'NX90_xmac_sr2': */
#define MSK_USED_BITS_NX90_xmac_sr2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr3 */
/* => Shared Work Register 3 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr3            0x0000000CU
#define Adr_NX90_xc0_xmac0_regs_xmac_sr3 0xFF11140CU
#define Adr_NX90_xc0_xmac1_regs_xmac_sr3 0xFF11160CU
#define DFLT_VAL_NX90_xmac_sr3           0x00000000U

#define MSK_NX90_xmac_sr3_sr3         0x0000ffffU
#define SRT_NX90_xmac_sr3_sr3         0
#define DFLT_VAL_NX90_xmac_sr3_sr3    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr3_sr3 0x00000000U

/* all used bits of 'NX90_xmac_sr3': */
#define MSK_USED_BITS_NX90_xmac_sr3 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr4 */
/* => Shared Work Register 4 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr4            0x00000010U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr4 0xFF111410U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr4 0xFF111610U
#define DFLT_VAL_NX90_xmac_sr4           0x00000000U

#define MSK_NX90_xmac_sr4_sr4         0x0000ffffU
#define SRT_NX90_xmac_sr4_sr4         0
#define DFLT_VAL_NX90_xmac_sr4_sr4    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr4_sr4 0x00000000U

/* all used bits of 'NX90_xmac_sr4': */
#define MSK_USED_BITS_NX90_xmac_sr4 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr5 */
/* => Shared Work Register 5 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr5            0x00000014U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr5 0xFF111414U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr5 0xFF111614U
#define DFLT_VAL_NX90_xmac_sr5           0x00000000U

#define MSK_NX90_xmac_sr5_sr5         0x0000ffffU
#define SRT_NX90_xmac_sr5_sr5         0
#define DFLT_VAL_NX90_xmac_sr5_sr5    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr5_sr5 0x00000000U

/* all used bits of 'NX90_xmac_sr5': */
#define MSK_USED_BITS_NX90_xmac_sr5 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr6 */
/* => Shared Work Register 6 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr6            0x00000018U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr6 0xFF111418U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr6 0xFF111618U
#define DFLT_VAL_NX90_xmac_sr6           0x00000000U

#define MSK_NX90_xmac_sr6_sr6         0x0000ffffU
#define SRT_NX90_xmac_sr6_sr6         0
#define DFLT_VAL_NX90_xmac_sr6_sr6    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr6_sr6 0x00000000U

/* all used bits of 'NX90_xmac_sr6': */
#define MSK_USED_BITS_NX90_xmac_sr6 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr7 */
/* => Shared Work Register 7 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr7            0x0000001CU
#define Adr_NX90_xc0_xmac0_regs_xmac_sr7 0xFF11141CU
#define Adr_NX90_xc0_xmac1_regs_xmac_sr7 0xFF11161CU
#define DFLT_VAL_NX90_xmac_sr7           0x00000000U

#define MSK_NX90_xmac_sr7_sr7         0x0000ffffU
#define SRT_NX90_xmac_sr7_sr7         0
#define DFLT_VAL_NX90_xmac_sr7_sr7    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr7_sr7 0x00000000U

/* all used bits of 'NX90_xmac_sr7': */
#define MSK_USED_BITS_NX90_xmac_sr7 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr8 */
/* => Shared Work Register 8 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr8            0x00000020U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr8 0xFF111420U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr8 0xFF111620U
#define DFLT_VAL_NX90_xmac_sr8           0x00000000U

#define MSK_NX90_xmac_sr8_sr8         0x0000ffffU
#define SRT_NX90_xmac_sr8_sr8         0
#define DFLT_VAL_NX90_xmac_sr8_sr8    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr8_sr8 0x00000000U

/* all used bits of 'NX90_xmac_sr8': */
#define MSK_USED_BITS_NX90_xmac_sr8 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr9 */
/* => Shared Work Register 9 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr9            0x00000024U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr9 0xFF111424U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr9 0xFF111624U
#define DFLT_VAL_NX90_xmac_sr9           0x00000000U

#define MSK_NX90_xmac_sr9_sr9         0x0000ffffU
#define SRT_NX90_xmac_sr9_sr9         0
#define DFLT_VAL_NX90_xmac_sr9_sr9    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr9_sr9 0x00000000U

/* all used bits of 'NX90_xmac_sr9': */
#define MSK_USED_BITS_NX90_xmac_sr9 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr10 */
/* => Shared Work Register 10 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr10            0x00000028U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr10 0xFF111428U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr10 0xFF111628U
#define DFLT_VAL_NX90_xmac_sr10           0x00000000U

#define MSK_NX90_xmac_sr10_sr10         0x0000ffffU
#define SRT_NX90_xmac_sr10_sr10         0
#define DFLT_VAL_NX90_xmac_sr10_sr10    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr10_sr10 0x00000000U

/* all used bits of 'NX90_xmac_sr10': */
#define MSK_USED_BITS_NX90_xmac_sr10 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr11 */
/* => Shared Work Register 11 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr11            0x0000002CU
#define Adr_NX90_xc0_xmac0_regs_xmac_sr11 0xFF11142CU
#define Adr_NX90_xc0_xmac1_regs_xmac_sr11 0xFF11162CU
#define DFLT_VAL_NX90_xmac_sr11           0x00000000U

#define MSK_NX90_xmac_sr11_sr11         0x0000ffffU
#define SRT_NX90_xmac_sr11_sr11         0
#define DFLT_VAL_NX90_xmac_sr11_sr11    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr11_sr11 0x00000000U

/* all used bits of 'NX90_xmac_sr11': */
#define MSK_USED_BITS_NX90_xmac_sr11 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr12 */
/* => Shared Work Register 12 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr12            0x00000030U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr12 0xFF111430U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr12 0xFF111630U
#define DFLT_VAL_NX90_xmac_sr12           0x00000000U

#define MSK_NX90_xmac_sr12_sr12         0x0000ffffU
#define SRT_NX90_xmac_sr12_sr12         0
#define DFLT_VAL_NX90_xmac_sr12_sr12    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr12_sr12 0x00000000U

/* all used bits of 'NX90_xmac_sr12': */
#define MSK_USED_BITS_NX90_xmac_sr12 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr13 */
/* => Shared Work Register 13 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr13            0x00000034U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr13 0xFF111434U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr13 0xFF111634U
#define DFLT_VAL_NX90_xmac_sr13           0x00000000U

#define MSK_NX90_xmac_sr13_sr13         0x0000ffffU
#define SRT_NX90_xmac_sr13_sr13         0
#define DFLT_VAL_NX90_xmac_sr13_sr13    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr13_sr13 0x00000000U

/* all used bits of 'NX90_xmac_sr13': */
#define MSK_USED_BITS_NX90_xmac_sr13 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr14 */
/* => Shared Work Register 14 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr14            0x00000038U
#define Adr_NX90_xc0_xmac0_regs_xmac_sr14 0xFF111438U
#define Adr_NX90_xc0_xmac1_regs_xmac_sr14 0xFF111638U
#define DFLT_VAL_NX90_xmac_sr14           0x00000000U

#define MSK_NX90_xmac_sr14_sr14         0x0000ffffU
#define SRT_NX90_xmac_sr14_sr14         0
#define DFLT_VAL_NX90_xmac_sr14_sr14    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr14_sr14 0x00000000U

/* all used bits of 'NX90_xmac_sr14': */
#define MSK_USED_BITS_NX90_xmac_sr14 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sr15 */
/* => Shared Work Register 15 accessible by all xMACs and xPECs */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sr15            0x0000003CU
#define Adr_NX90_xc0_xmac0_regs_xmac_sr15 0xFF11143CU
#define Adr_NX90_xc0_xmac1_regs_xmac_sr15 0xFF11163CU
#define DFLT_VAL_NX90_xmac_sr15           0x00000000U

#define MSK_NX90_xmac_sr15_sr15         0x0000ffffU
#define SRT_NX90_xmac_sr15_sr15         0
#define DFLT_VAL_NX90_xmac_sr15_sr15    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sr15_sr15 0x00000000U

/* all used bits of 'NX90_xmac_sr15': */
#define MSK_USED_BITS_NX90_xmac_sr15 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_status_shared0 */
/* => xMAC0 Shared Status Register: */
/*    This register is read-only except bits rx_ovf, tx_ufl and eld_bad_link which can be written with 1 to reset the appropriate FIFO/function. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_status_shared0            0x00000040U
#define Adr_NX90_xc0_xmac0_regs_xmac_status_shared0 0xFF111440U
#define Adr_NX90_xc0_xmac1_regs_xmac_status_shared0 0xFF111640U
#define DFLT_VAL_NX90_xmac_status_shared0           0x00000000U

#define MSK_NX90_xmac_status_shared0_gpio0_in                  0x00000001U
#define SRT_NX90_xmac_status_shared0_gpio0_in                  0
#define DFLT_VAL_NX90_xmac_status_shared0_gpio0_in             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_gpio0_in          0x00000000U
#define MSK_NX90_xmac_status_shared0_gpio1_in                  0x00000002U
#define SRT_NX90_xmac_status_shared0_gpio1_in                  1
#define DFLT_VAL_NX90_xmac_status_shared0_gpio1_in             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_gpio1_in          0x00000000U
#define MSK_NX90_xmac_status_shared0_gpio2_in_phy_led0         0x00000004U
#define SRT_NX90_xmac_status_shared0_gpio2_in_phy_led0         2
#define DFLT_VAL_NX90_xmac_status_shared0_gpio2_in_phy_led0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_gpio2_in_phy_led0 0x00000000U
#define MSK_NX90_xmac_status_shared0_gpio3_in_phy_led1         0x00000008U
#define SRT_NX90_xmac_status_shared0_gpio3_in_phy_led1         3
#define DFLT_VAL_NX90_xmac_status_shared0_gpio3_in_phy_led1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_gpio3_in_phy_led1 0x00000000U
#define MSK_NX90_xmac_status_shared0_gpio4_in_phy_led2         0x00000010U
#define SRT_NX90_xmac_status_shared0_gpio4_in_phy_led2         4
#define DFLT_VAL_NX90_xmac_status_shared0_gpio4_in_phy_led2    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_gpio4_in_phy_led2 0x00000000U
#define MSK_NX90_xmac_status_shared0_gpio5_in_phy_led3         0x00000020U
#define SRT_NX90_xmac_status_shared0_gpio5_in_phy_led3         5
#define DFLT_VAL_NX90_xmac_status_shared0_gpio5_in_phy_led3    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_gpio5_in_phy_led3 0x00000000U
#define MSK_NX90_xmac_status_shared0_brec                      0x00000040U
#define SRT_NX90_xmac_status_shared0_brec                      6
#define DFLT_VAL_NX90_xmac_status_shared0_brec                 0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_brec              0x00000000U
#define MSK_NX90_xmac_status_shared0_btran                     0x00000080U
#define SRT_NX90_xmac_status_shared0_btran                     7
#define DFLT_VAL_NX90_xmac_status_shared0_btran                0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_btran             0x00000000U
#define MSK_NX90_xmac_status_shared0_stat_rpu                  0x00000100U
#define SRT_NX90_xmac_status_shared0_stat_rpu                  8
#define DFLT_VAL_NX90_xmac_status_shared0_stat_rpu             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_stat_rpu          0x00000000U
#define MSK_NX90_xmac_status_shared0_stat_tpu                  0x00000200U
#define SRT_NX90_xmac_status_shared0_stat_tpu                  9
#define DFLT_VAL_NX90_xmac_status_shared0_stat_tpu             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_stat_tpu          0x00000000U
#define MSK_NX90_xmac_status_shared0_rx_rdy                    0x00000400U
#define SRT_NX90_xmac_status_shared0_rx_rdy                    10
#define DFLT_VAL_NX90_xmac_status_shared0_rx_rdy               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_rx_rdy            0x00000000U
#define MSK_NX90_xmac_status_shared0_rx_ovf                    0x00000800U
#define SRT_NX90_xmac_status_shared0_rx_ovf                    11
#define DFLT_VAL_NX90_xmac_status_shared0_rx_ovf               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_rx_ovf            0x00000000U
#define MSK_NX90_xmac_status_shared0_tx_nxt                    0x00001000U
#define SRT_NX90_xmac_status_shared0_tx_nxt                    12
#define DFLT_VAL_NX90_xmac_status_shared0_tx_nxt               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_tx_nxt            0x00000000U
#define MSK_NX90_xmac_status_shared0_tx_ufl                    0x00002000U
#define SRT_NX90_xmac_status_shared0_tx_ufl                    13
#define DFLT_VAL_NX90_xmac_status_shared0_tx_ufl               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_tx_ufl            0x00000000U
#define MSK_NX90_xmac_status_shared0_utx_empty                 0x00004000U
#define SRT_NX90_xmac_status_shared0_utx_empty                 14
#define DFLT_VAL_NX90_xmac_status_shared0_utx_empty            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_utx_empty         0x00000000U
#define MSK_NX90_xmac_status_shared0_eld_bad_link              0x00008000U
#define SRT_NX90_xmac_status_shared0_eld_bad_link              15
#define DFLT_VAL_NX90_xmac_status_shared0_eld_bad_link         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared0_eld_bad_link      0x00000000U

/* all used bits of 'NX90_xmac_status_shared0': */
#define MSK_USED_BITS_NX90_xmac_status_shared0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_shared0 */
/* => xMAC0 Shared Config Register: */
/*    Upper bits 15..8 are write mask and thus not readable. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_shared0            0x00000044U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_shared0 0xFF111444U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_shared0 0xFF111644U
#define DFLT_VAL_NX90_xmac_config_shared0           0x00000000U

#define MSK_NX90_xmac_config_shared0_gpio0_out                0x00000001U
#define SRT_NX90_xmac_config_shared0_gpio0_out                0
#define DFLT_VAL_NX90_xmac_config_shared0_gpio0_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio0_out        0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio1_out                0x00000002U
#define SRT_NX90_xmac_config_shared0_gpio1_out                1
#define DFLT_VAL_NX90_xmac_config_shared0_gpio1_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio1_out        0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio2_out                0x00000004U
#define SRT_NX90_xmac_config_shared0_gpio2_out                2
#define DFLT_VAL_NX90_xmac_config_shared0_gpio2_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio2_out        0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio3_out                0x00000008U
#define SRT_NX90_xmac_config_shared0_gpio3_out                3
#define DFLT_VAL_NX90_xmac_config_shared0_gpio3_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio3_out        0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio4_out                0x00000010U
#define SRT_NX90_xmac_config_shared0_gpio4_out                4
#define DFLT_VAL_NX90_xmac_config_shared0_gpio4_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio4_out        0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio5_out                0x00000020U
#define SRT_NX90_xmac_config_shared0_gpio5_out                5
#define DFLT_VAL_NX90_xmac_config_shared0_gpio5_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio5_out        0x00000000U
#define MSK_NX90_xmac_config_shared0_reserved_stat            0x000000c0U
#define SRT_NX90_xmac_config_shared0_reserved_stat            6
#define DFLT_VAL_NX90_xmac_config_shared0_reserved_stat       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_reserved_stat    0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio0_out_wm             0x00000100U
#define SRT_NX90_xmac_config_shared0_gpio0_out_wm             8
#define DFLT_VAL_NX90_xmac_config_shared0_gpio0_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio0_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio1_out_wm             0x00000200U
#define SRT_NX90_xmac_config_shared0_gpio1_out_wm             9
#define DFLT_VAL_NX90_xmac_config_shared0_gpio1_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio1_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio2_out_wm             0x00000400U
#define SRT_NX90_xmac_config_shared0_gpio2_out_wm             10
#define DFLT_VAL_NX90_xmac_config_shared0_gpio2_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio2_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio3_out_wm             0x00000800U
#define SRT_NX90_xmac_config_shared0_gpio3_out_wm             11
#define DFLT_VAL_NX90_xmac_config_shared0_gpio3_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio3_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio4_out_wm             0x00001000U
#define SRT_NX90_xmac_config_shared0_gpio4_out_wm             12
#define DFLT_VAL_NX90_xmac_config_shared0_gpio4_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio4_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared0_gpio5_out_wm             0x00002000U
#define SRT_NX90_xmac_config_shared0_gpio5_out_wm             13
#define DFLT_VAL_NX90_xmac_config_shared0_gpio5_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_gpio5_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared0_reserved_stat_wm         0x0000c000U
#define SRT_NX90_xmac_config_shared0_reserved_stat_wm         14
#define DFLT_VAL_NX90_xmac_config_shared0_reserved_stat_wm    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared0_reserved_stat_wm 0x00000000U

/* all used bits of 'NX90_xmac_config_shared0': */
#define MSK_USED_BITS_NX90_xmac_config_shared0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_io_oe_shared0 */
/* => xMAC0 Shared GPIO Output Enable Register: */
/*    Upper bits 15..8 are write mask and thus not readable. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_io_oe_shared0            0x00000048U
#define Adr_NX90_xc0_xmac0_regs_xmac_io_oe_shared0 0xFF111448U
#define Adr_NX90_xc0_xmac1_regs_xmac_io_oe_shared0 0xFF111648U
#define DFLT_VAL_NX90_xmac_io_oe_shared0           0x00000000U

#define MSK_NX90_xmac_io_oe_shared0_gpio0_oe                 0x00000001U
#define SRT_NX90_xmac_io_oe_shared0_gpio0_oe                 0
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio0_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio0_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio1_oe                 0x00000002U
#define SRT_NX90_xmac_io_oe_shared0_gpio1_oe                 1
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio1_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio1_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio2_oe                 0x00000004U
#define SRT_NX90_xmac_io_oe_shared0_gpio2_oe                 2
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio2_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio2_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio3_oe                 0x00000008U
#define SRT_NX90_xmac_io_oe_shared0_gpio3_oe                 3
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio3_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio3_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio4_oe                 0x00000010U
#define SRT_NX90_xmac_io_oe_shared0_gpio4_oe                 4
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio4_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio4_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio5_oe                 0x00000020U
#define SRT_NX90_xmac_io_oe_shared0_gpio5_oe                 5
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio5_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio5_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_reserved_stat            0x000000c0U
#define SRT_NX90_xmac_io_oe_shared0_reserved_stat            6
#define DFLT_VAL_NX90_xmac_io_oe_shared0_reserved_stat       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_reserved_stat    0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio0_oe_wm              0x00000100U
#define SRT_NX90_xmac_io_oe_shared0_gpio0_oe_wm              8
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio0_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio0_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio1_oe_wm              0x00000200U
#define SRT_NX90_xmac_io_oe_shared0_gpio1_oe_wm              9
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio1_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio1_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio2_oe_wm              0x00000400U
#define SRT_NX90_xmac_io_oe_shared0_gpio2_oe_wm              10
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio2_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio2_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio3_oe_wm              0x00000800U
#define SRT_NX90_xmac_io_oe_shared0_gpio3_oe_wm              11
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio3_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio3_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio4_oe_wm              0x00001000U
#define SRT_NX90_xmac_io_oe_shared0_gpio4_oe_wm              12
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio4_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio4_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_gpio5_oe_wm              0x00002000U
#define SRT_NX90_xmac_io_oe_shared0_gpio5_oe_wm              13
#define DFLT_VAL_NX90_xmac_io_oe_shared0_gpio5_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_gpio5_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared0_reserved_stat_wm         0x0000c000U
#define SRT_NX90_xmac_io_oe_shared0_reserved_stat_wm         14
#define DFLT_VAL_NX90_xmac_io_oe_shared0_reserved_stat_wm    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared0_reserved_stat_wm 0x00000000U

/* all used bits of 'NX90_xmac_io_oe_shared0': */
#define MSK_USED_BITS_NX90_xmac_io_oe_shared0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_status_shared1 */
/* => xMAC1 Shared Status Register: */
/*    This register is read-only except bits rx_ovf, tx_ufl and eld_bad_link which can be written with 1 to reset the appropriate FIFO/function. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_status_shared1            0x0000004CU
#define Adr_NX90_xc0_xmac0_regs_xmac_status_shared1 0xFF11144CU
#define Adr_NX90_xc0_xmac1_regs_xmac_status_shared1 0xFF11164CU
#define DFLT_VAL_NX90_xmac_status_shared1           0x00000000U

#define MSK_NX90_xmac_status_shared1_gpio0_in                  0x00000001U
#define SRT_NX90_xmac_status_shared1_gpio0_in                  0
#define DFLT_VAL_NX90_xmac_status_shared1_gpio0_in             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_gpio0_in          0x00000000U
#define MSK_NX90_xmac_status_shared1_gpio1_in                  0x00000002U
#define SRT_NX90_xmac_status_shared1_gpio1_in                  1
#define DFLT_VAL_NX90_xmac_status_shared1_gpio1_in             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_gpio1_in          0x00000000U
#define MSK_NX90_xmac_status_shared1_gpio2_in_phy_led0         0x00000004U
#define SRT_NX90_xmac_status_shared1_gpio2_in_phy_led0         2
#define DFLT_VAL_NX90_xmac_status_shared1_gpio2_in_phy_led0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_gpio2_in_phy_led0 0x00000000U
#define MSK_NX90_xmac_status_shared1_gpio3_in_phy_led1         0x00000008U
#define SRT_NX90_xmac_status_shared1_gpio3_in_phy_led1         3
#define DFLT_VAL_NX90_xmac_status_shared1_gpio3_in_phy_led1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_gpio3_in_phy_led1 0x00000000U
#define MSK_NX90_xmac_status_shared1_gpio4_in_phy_led2         0x00000010U
#define SRT_NX90_xmac_status_shared1_gpio4_in_phy_led2         4
#define DFLT_VAL_NX90_xmac_status_shared1_gpio4_in_phy_led2    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_gpio4_in_phy_led2 0x00000000U
#define MSK_NX90_xmac_status_shared1_gpio5_in_phy_led3         0x00000020U
#define SRT_NX90_xmac_status_shared1_gpio5_in_phy_led3         5
#define DFLT_VAL_NX90_xmac_status_shared1_gpio5_in_phy_led3    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_gpio5_in_phy_led3 0x00000000U
#define MSK_NX90_xmac_status_shared1_brec                      0x00000040U
#define SRT_NX90_xmac_status_shared1_brec                      6
#define DFLT_VAL_NX90_xmac_status_shared1_brec                 0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_brec              0x00000000U
#define MSK_NX90_xmac_status_shared1_btran                     0x00000080U
#define SRT_NX90_xmac_status_shared1_btran                     7
#define DFLT_VAL_NX90_xmac_status_shared1_btran                0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_btran             0x00000000U
#define MSK_NX90_xmac_status_shared1_stat_rpu                  0x00000100U
#define SRT_NX90_xmac_status_shared1_stat_rpu                  8
#define DFLT_VAL_NX90_xmac_status_shared1_stat_rpu             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_stat_rpu          0x00000000U
#define MSK_NX90_xmac_status_shared1_stat_tpu                  0x00000200U
#define SRT_NX90_xmac_status_shared1_stat_tpu                  9
#define DFLT_VAL_NX90_xmac_status_shared1_stat_tpu             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_stat_tpu          0x00000000U
#define MSK_NX90_xmac_status_shared1_rx_rdy                    0x00000400U
#define SRT_NX90_xmac_status_shared1_rx_rdy                    10
#define DFLT_VAL_NX90_xmac_status_shared1_rx_rdy               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_rx_rdy            0x00000000U
#define MSK_NX90_xmac_status_shared1_rx_ovf                    0x00000800U
#define SRT_NX90_xmac_status_shared1_rx_ovf                    11
#define DFLT_VAL_NX90_xmac_status_shared1_rx_ovf               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_rx_ovf            0x00000000U
#define MSK_NX90_xmac_status_shared1_tx_nxt                    0x00001000U
#define SRT_NX90_xmac_status_shared1_tx_nxt                    12
#define DFLT_VAL_NX90_xmac_status_shared1_tx_nxt               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_tx_nxt            0x00000000U
#define MSK_NX90_xmac_status_shared1_tx_ufl                    0x00002000U
#define SRT_NX90_xmac_status_shared1_tx_ufl                    13
#define DFLT_VAL_NX90_xmac_status_shared1_tx_ufl               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_tx_ufl            0x00000000U
#define MSK_NX90_xmac_status_shared1_utx_empty                 0x00004000U
#define SRT_NX90_xmac_status_shared1_utx_empty                 14
#define DFLT_VAL_NX90_xmac_status_shared1_utx_empty            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_utx_empty         0x00000000U
#define MSK_NX90_xmac_status_shared1_eld_bad_link              0x00008000U
#define SRT_NX90_xmac_status_shared1_eld_bad_link              15
#define DFLT_VAL_NX90_xmac_status_shared1_eld_bad_link         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_shared1_eld_bad_link      0x00000000U

/* all used bits of 'NX90_xmac_status_shared1': */
#define MSK_USED_BITS_NX90_xmac_status_shared1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_shared1 */
/* => xMAC1 Shared Config Register: */
/*    Upper bits 15..8 are write mask and thus not readable. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_shared1            0x00000050U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_shared1 0xFF111450U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_shared1 0xFF111650U
#define DFLT_VAL_NX90_xmac_config_shared1           0x00000000U

#define MSK_NX90_xmac_config_shared1_gpio0_out                0x00000001U
#define SRT_NX90_xmac_config_shared1_gpio0_out                0
#define DFLT_VAL_NX90_xmac_config_shared1_gpio0_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio0_out        0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio1_out                0x00000002U
#define SRT_NX90_xmac_config_shared1_gpio1_out                1
#define DFLT_VAL_NX90_xmac_config_shared1_gpio1_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio1_out        0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio2_out                0x00000004U
#define SRT_NX90_xmac_config_shared1_gpio2_out                2
#define DFLT_VAL_NX90_xmac_config_shared1_gpio2_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio2_out        0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio3_out                0x00000008U
#define SRT_NX90_xmac_config_shared1_gpio3_out                3
#define DFLT_VAL_NX90_xmac_config_shared1_gpio3_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio3_out        0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio4_out                0x00000010U
#define SRT_NX90_xmac_config_shared1_gpio4_out                4
#define DFLT_VAL_NX90_xmac_config_shared1_gpio4_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio4_out        0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio5_out                0x00000020U
#define SRT_NX90_xmac_config_shared1_gpio5_out                5
#define DFLT_VAL_NX90_xmac_config_shared1_gpio5_out           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio5_out        0x00000000U
#define MSK_NX90_xmac_config_shared1_reserved_stat            0x000000c0U
#define SRT_NX90_xmac_config_shared1_reserved_stat            6
#define DFLT_VAL_NX90_xmac_config_shared1_reserved_stat       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_reserved_stat    0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio0_out_wm             0x00000100U
#define SRT_NX90_xmac_config_shared1_gpio0_out_wm             8
#define DFLT_VAL_NX90_xmac_config_shared1_gpio0_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio0_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio1_out_wm             0x00000200U
#define SRT_NX90_xmac_config_shared1_gpio1_out_wm             9
#define DFLT_VAL_NX90_xmac_config_shared1_gpio1_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio1_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio2_out_wm             0x00000400U
#define SRT_NX90_xmac_config_shared1_gpio2_out_wm             10
#define DFLT_VAL_NX90_xmac_config_shared1_gpio2_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio2_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio3_out_wm             0x00000800U
#define SRT_NX90_xmac_config_shared1_gpio3_out_wm             11
#define DFLT_VAL_NX90_xmac_config_shared1_gpio3_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio3_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio4_out_wm             0x00001000U
#define SRT_NX90_xmac_config_shared1_gpio4_out_wm             12
#define DFLT_VAL_NX90_xmac_config_shared1_gpio4_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio4_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared1_gpio5_out_wm             0x00002000U
#define SRT_NX90_xmac_config_shared1_gpio5_out_wm             13
#define DFLT_VAL_NX90_xmac_config_shared1_gpio5_out_wm        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_gpio5_out_wm     0x00000000U
#define MSK_NX90_xmac_config_shared1_reserved_stat_wm         0x0000c000U
#define SRT_NX90_xmac_config_shared1_reserved_stat_wm         14
#define DFLT_VAL_NX90_xmac_config_shared1_reserved_stat_wm    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_shared1_reserved_stat_wm 0x00000000U

/* all used bits of 'NX90_xmac_config_shared1': */
#define MSK_USED_BITS_NX90_xmac_config_shared1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_io_oe_shared1 */
/* => xMAC1 Shared GPIO Output Enable Register: */
/*    Upper bits 15..8 are write mask and thus not readable. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_io_oe_shared1            0x00000054U
#define Adr_NX90_xc0_xmac0_regs_xmac_io_oe_shared1 0xFF111454U
#define Adr_NX90_xc0_xmac1_regs_xmac_io_oe_shared1 0xFF111654U
#define DFLT_VAL_NX90_xmac_io_oe_shared1           0x00000000U

#define MSK_NX90_xmac_io_oe_shared1_gpio0_oe                 0x00000001U
#define SRT_NX90_xmac_io_oe_shared1_gpio0_oe                 0
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio0_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio0_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio1_oe                 0x00000002U
#define SRT_NX90_xmac_io_oe_shared1_gpio1_oe                 1
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio1_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio1_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio2_oe                 0x00000004U
#define SRT_NX90_xmac_io_oe_shared1_gpio2_oe                 2
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio2_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio2_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio3_oe                 0x00000008U
#define SRT_NX90_xmac_io_oe_shared1_gpio3_oe                 3
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio3_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio3_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio4_oe                 0x00000010U
#define SRT_NX90_xmac_io_oe_shared1_gpio4_oe                 4
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio4_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio4_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio5_oe                 0x00000020U
#define SRT_NX90_xmac_io_oe_shared1_gpio5_oe                 5
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio5_oe            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio5_oe         0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_reserved_stat            0x000000c0U
#define SRT_NX90_xmac_io_oe_shared1_reserved_stat            6
#define DFLT_VAL_NX90_xmac_io_oe_shared1_reserved_stat       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_reserved_stat    0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio0_oe_wm              0x00000100U
#define SRT_NX90_xmac_io_oe_shared1_gpio0_oe_wm              8
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio0_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio0_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio1_oe_wm              0x00000200U
#define SRT_NX90_xmac_io_oe_shared1_gpio1_oe_wm              9
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio1_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio1_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio2_oe_wm              0x00000400U
#define SRT_NX90_xmac_io_oe_shared1_gpio2_oe_wm              10
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio2_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio2_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio3_oe_wm              0x00000800U
#define SRT_NX90_xmac_io_oe_shared1_gpio3_oe_wm              11
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio3_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio3_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio4_oe_wm              0x00001000U
#define SRT_NX90_xmac_io_oe_shared1_gpio4_oe_wm              12
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio4_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio4_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_gpio5_oe_wm              0x00002000U
#define SRT_NX90_xmac_io_oe_shared1_gpio5_oe_wm              13
#define DFLT_VAL_NX90_xmac_io_oe_shared1_gpio5_oe_wm         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_gpio5_oe_wm      0x00000000U
#define MSK_NX90_xmac_io_oe_shared1_reserved_stat_wm         0x0000c000U
#define SRT_NX90_xmac_io_oe_shared1_reserved_stat_wm         14
#define DFLT_VAL_NX90_xmac_io_oe_shared1_reserved_stat_wm    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_io_oe_shared1_reserved_stat_wm 0x00000000U

/* all used bits of 'NX90_xmac_io_oe_shared1': */
#define MSK_USED_BITS_NX90_xmac_io_oe_shared1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_urx_utx0 */
/* => xMAC0 URX/UTX Shared Register FIFO */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_urx_utx0            0x00000070U
#define Adr_NX90_xc0_xmac0_regs_xmac_urx_utx0 0xFF111470U
#define Adr_NX90_xc0_xmac1_regs_xmac_urx_utx0 0xFF111670U
#define DFLT_VAL_NX90_xmac_urx_utx0           0x00000000U

#define MSK_NX90_xmac_urx_utx0_utrx_xmac0         0x0000ffffU
#define SRT_NX90_xmac_urx_utx0_utrx_xmac0         0
#define DFLT_VAL_NX90_xmac_urx_utx0_utrx_xmac0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_urx_utx0_utrx_xmac0 0x00000000U

/* all used bits of 'NX90_xmac_urx_utx0': */
#define MSK_USED_BITS_NX90_xmac_urx_utx0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_urx_utx1 */
/* => xMAC1 URX/UTX Shared Register FIFO */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_urx_utx1            0x00000074U
#define Adr_NX90_xc0_xmac0_regs_xmac_urx_utx1 0xFF111474U
#define Adr_NX90_xc0_xmac1_regs_xmac_urx_utx1 0xFF111674U
#define DFLT_VAL_NX90_xmac_urx_utx1           0x00000000U

#define MSK_NX90_xmac_urx_utx1_utrx_xmac1         0x0000ffffU
#define SRT_NX90_xmac_urx_utx1_utrx_xmac1         0
#define DFLT_VAL_NX90_xmac_urx_utx1_utrx_xmac1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_urx_utx1_utrx_xmac1 0x00000000U

/* all used bits of 'NX90_xmac_urx_utx1': */
#define MSK_USED_BITS_NX90_xmac_urx_utx1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_urx */
/* => xMAC URX FIFO input */
/*    URX FIFO is part of xMAC. It can be read (output) by all xMACs and xPECs, but only written (input) by the xMAC it belongs to. */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_urx            0x00000080U
#define Adr_NX90_xc0_xmac0_regs_xmac_urx 0xFF111480U
#define Adr_NX90_xc0_xmac1_regs_xmac_urx 0xFF111680U
#define DFLT_VAL_NX90_xmac_urx           0x00000000U

#define MSK_NX90_xmac_urx_urx         0x0000ffffU
#define SRT_NX90_xmac_urx_urx         0
#define DFLT_VAL_NX90_xmac_urx_urx    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_urx_urx 0x00000000U

/* all used bits of 'NX90_xmac_urx': */
#define MSK_USED_BITS_NX90_xmac_urx 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_utx */
/* => xMAC UTX FIFO output */
/*    UTX FIFO is part of xMAC. It can be written (input) by all xMACs and xPECs, but only read (output) by the xMAC it belongs to. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_utx            0x00000084U
#define Adr_NX90_xc0_xmac0_regs_xmac_utx 0xFF111484U
#define Adr_NX90_xc0_xmac1_regs_xmac_utx 0xFF111684U

#define MSK_NX90_xmac_utx_utx 0x0000ffffU
#define SRT_NX90_xmac_utx_utx 0

/* all used bits of 'NX90_xmac_utx': */
#define MSK_USED_BITS_NX90_xmac_utx 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx */
/* => xMAC RX Register */
/*    Sampled bits from SBU are collected in this register, \ */
/*    i.e. if a new bit arrives from SBU (sync), other bits are shifted (direction programmable). */
/*    Same behaviour in MII-Modes (4 bits arrive in parallel and the other bits are shifted by 4). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx            0x00000088U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx 0xFF111488U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx 0xFF111688U

#define MSK_NX90_xmac_rx_rx 0x0000ffffU
#define SRT_NX90_xmac_rx_rx 0

/* all used bits of 'NX90_xmac_rx': */
#define MSK_USED_BITS_NX90_xmac_rx 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_other_rx */
/* => RX Register of other xMAC. */
/*    Used for fast forward of data between 2 xMACs (specially in MII-HUB-mode) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_other_rx            0x0000008CU
#define Adr_NX90_xc0_xmac0_regs_xmac_other_rx 0xFF11148CU
#define Adr_NX90_xc0_xmac1_regs_xmac_other_rx 0xFF11168CU

#define MSK_NX90_xmac_other_rx_rx 0x0000ffffU
#define SRT_NX90_xmac_other_rx_rx 0

/* all used bits of 'NX90_xmac_other_rx': */
#define MSK_USED_BITS_NX90_xmac_other_rx 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_hw */
/* => xMAC RX_HW Register */
/*    rx_hw bit in RPU-code writes actually received bit from rx to this register. */
/*    Useful in case of bitwise format, to collect source bits from raw input bitstream (e.g. in HDLC-coding). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_hw            0x00000090U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_hw 0xFF111490U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_hw 0xFF111690U
#define DFLT_VAL_NX90_xmac_rx_hw           0x00000000U

#define MSK_NX90_xmac_rx_hw_rx_hw         0x0000ffffU
#define SRT_NX90_xmac_rx_hw_rx_hw         0
#define DFLT_VAL_NX90_xmac_rx_hw_rx_hw    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_hw_rx_hw 0x00000000U

/* all used bits of 'NX90_xmac_rx_hw': */
#define MSK_USED_BITS_NX90_xmac_rx_hw 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_hw_count */
/* => xMAC RX_HW_COUNT Register */
/*    Counts bits collected by rx_hw bit RPU-code. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_hw_count            0x00000094U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_hw_count 0xFF111494U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_hw_count 0xFF111694U
#define DFLT_VAL_NX90_xmac_rx_hw_count           0x00000000U

#define MSK_NX90_xmac_rx_hw_count_rx_hw_count         0x0000ffffU
#define SRT_NX90_xmac_rx_hw_count_rx_hw_count         0
#define DFLT_VAL_NX90_xmac_rx_hw_count_rx_hw_count    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_hw_count_rx_hw_count 0x00000000U

/* all used bits of 'NX90_xmac_rx_hw_count': */
#define MSK_USED_BITS_NX90_xmac_rx_hw_count 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx */
/* => xMAC TX Register */
/*    Transmitted bits read automatically by OBU from this register, \ */
/*    i.e. if a bit is send (sync), other bits are rotated accordingly (direction programmable). */
/*    Same behaviour in MII-Modes (4 bits arrive in parallel and the other bits are rotated by 4). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx            0x00000098U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx 0xFF111498U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx 0xFF111698U
#define DFLT_VAL_NX90_xmac_tx           0x00000000U

#define MSK_NX90_xmac_tx_tx         0x0000ffffU
#define SRT_NX90_xmac_tx_tx         0
#define DFLT_VAL_NX90_xmac_tx_tx    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_tx 0x00000000U

/* all used bits of 'NX90_xmac_tx': */
#define MSK_USED_BITS_NX90_xmac_tx 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_hw */
/* => xMAC TX_HW Register */
/*    tx_hw bit in TPU-code writes to be transmitted bit in tx register from this register */
/*    Useful in case of bitwise format, to insert source bits into output bitstream. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_hw            0x0000009CU
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_hw 0xFF11149CU
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_hw 0xFF11169CU
#define DFLT_VAL_NX90_xmac_tx_hw           0x00000000U

#define MSK_NX90_xmac_tx_hw_tx_hw         0x0000ffffU
#define SRT_NX90_xmac_tx_hw_tx_hw         0
#define DFLT_VAL_NX90_xmac_tx_hw_tx_hw    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_hw_tx_hw 0x00000000U

/* all used bits of 'NX90_xmac_tx_hw': */
#define MSK_USED_BITS_NX90_xmac_tx_hw 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_hw_count */
/* => xMAC TX_HW_COUNT Register */
/*    Counts bits transmitted by tx_hw bit in TPU-code. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_hw_count            0x000000A0U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_hw_count 0xFF1114A0U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_hw_count 0xFF1116A0U
#define DFLT_VAL_NX90_xmac_tx_hw_count           0x00000000U

#define MSK_NX90_xmac_tx_hw_count_tx_hw_count         0x0000ffffU
#define SRT_NX90_xmac_tx_hw_count_tx_hw_count         0
#define DFLT_VAL_NX90_xmac_tx_hw_count_tx_hw_count    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_hw_count_tx_hw_count 0x00000000U

/* all used bits of 'NX90_xmac_tx_hw_count': */
#define MSK_USED_BITS_NX90_xmac_tx_hw_count 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_sent */
/* => xMAC TX Sent Register */
/*    Collects already transmitted bits. */
/*    Useful for pattern match. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_sent            0x000000A4U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_sent 0xFF1114A4U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_sent 0xFF1116A4U
#define DFLT_VAL_NX90_xmac_tx_sent           0x00000000U

#define MSK_NX90_xmac_tx_sent_tx_sent         0x0000ffffU
#define SRT_NX90_xmac_tx_sent_tx_sent         0
#define DFLT_VAL_NX90_xmac_tx_sent_tx_sent    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_sent_tx_sent 0x00000000U

/* all used bits of 'NX90_xmac_tx_sent': */
#define MSK_USED_BITS_NX90_xmac_tx_sent 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpu_pc */
/* => RPU Progamm counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpu_pc            0x000000A8U
#define Adr_NX90_xc0_xmac0_regs_xmac_rpu_pc 0xFF1114A8U
#define Adr_NX90_xc0_xmac1_regs_xmac_rpu_pc 0xFF1116A8U
#define DFLT_VAL_NX90_xmac_rpu_pc           0x00000000U

#define MSK_NX90_xmac_rpu_pc_rpu_pc         0x0000007fU
#define SRT_NX90_xmac_rpu_pc_rpu_pc         0
#define DFLT_VAL_NX90_xmac_rpu_pc_rpu_pc    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpu_pc_rpu_pc 0x00000000U

/* all used bits of 'NX90_xmac_rpu_pc': */
#define MSK_USED_BITS_NX90_xmac_rpu_pc 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register xmac_rpu_jmp_latch */
/* => RPU Jump Latch: */
/*    Stores old PC at jump (via write to pc or via jump to address different from pc+1). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpu_jmp_latch            0x000000ACU
#define Adr_NX90_xc0_xmac0_regs_xmac_rpu_jmp_latch 0xFF1114ACU
#define Adr_NX90_xc0_xmac1_regs_xmac_rpu_jmp_latch 0xFF1116ACU

#define MSK_NX90_xmac_rpu_jmp_latch_old_pc 0x0000007fU
#define SRT_NX90_xmac_rpu_jmp_latch_old_pc 0

/* all used bits of 'NX90_xmac_rpu_jmp_latch': */
#define MSK_USED_BITS_NX90_xmac_rpu_jmp_latch 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register xmac_tpu_pc */
/* => TPU Progamm counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpu_pc            0x000000B0U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpu_pc 0xFF1114B0U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpu_pc 0xFF1116B0U
#define DFLT_VAL_NX90_xmac_tpu_pc           0x00000000U

#define MSK_NX90_xmac_tpu_pc_tpu_pc         0x0000007fU
#define SRT_NX90_xmac_tpu_pc_tpu_pc         0
#define DFLT_VAL_NX90_xmac_tpu_pc_tpu_pc    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpu_pc_tpu_pc 0x00000000U

/* all used bits of 'NX90_xmac_tpu_pc': */
#define MSK_USED_BITS_NX90_xmac_tpu_pc 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register xmac_tpu_jmp_latch */
/* => TPU Jump Latch: */
/*    Stores old PC at jump (via write to pc or via jump to address different from pc+1). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpu_jmp_latch            0x000000B4U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpu_jmp_latch 0xFF1114B4U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpu_jmp_latch 0xFF1116B4U

#define MSK_NX90_xmac_tpu_jmp_latch_old_pc 0x0000007fU
#define SRT_NX90_xmac_tpu_jmp_latch_old_pc 0

/* all used bits of 'NX90_xmac_tpu_jmp_latch': */
#define MSK_USED_BITS_NX90_xmac_tpu_jmp_latch 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register xmac_wr0 */
/* => xMAC internal Work Register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr0            0x000000B8U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr0 0xFF1114B8U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr0 0xFF1116B8U
#define DFLT_VAL_NX90_xmac_wr0           0x00000000U

#define MSK_NX90_xmac_wr0_wr0         0x0000ffffU
#define SRT_NX90_xmac_wr0_wr0         0
#define DFLT_VAL_NX90_xmac_wr0_wr0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr0_wr0 0x00000000U

/* all used bits of 'NX90_xmac_wr0': */
#define MSK_USED_BITS_NX90_xmac_wr0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr1 */
/* => xMAC internal Work Register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr1            0x000000BCU
#define Adr_NX90_xc0_xmac0_regs_xmac_wr1 0xFF1114BCU
#define Adr_NX90_xc0_xmac1_regs_xmac_wr1 0xFF1116BCU
#define DFLT_VAL_NX90_xmac_wr1           0x00000000U

#define MSK_NX90_xmac_wr1_wr1         0x0000ffffU
#define SRT_NX90_xmac_wr1_wr1         0
#define DFLT_VAL_NX90_xmac_wr1_wr1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr1_wr1 0x00000000U

/* all used bits of 'NX90_xmac_wr1': */
#define MSK_USED_BITS_NX90_xmac_wr1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr2 */
/* => xMAC internal Work Register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr2            0x000000C0U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr2 0xFF1114C0U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr2 0xFF1116C0U
#define DFLT_VAL_NX90_xmac_wr2           0x00000000U

#define MSK_NX90_xmac_wr2_wr2         0x0000ffffU
#define SRT_NX90_xmac_wr2_wr2         0
#define DFLT_VAL_NX90_xmac_wr2_wr2    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr2_wr2 0x00000000U

/* all used bits of 'NX90_xmac_wr2': */
#define MSK_USED_BITS_NX90_xmac_wr2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr3 */
/* => xMAC internal Work Register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr3            0x000000C4U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr3 0xFF1114C4U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr3 0xFF1116C4U
#define DFLT_VAL_NX90_xmac_wr3           0x00000000U

#define MSK_NX90_xmac_wr3_wr3         0x0000ffffU
#define SRT_NX90_xmac_wr3_wr3         0
#define DFLT_VAL_NX90_xmac_wr3_wr3    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr3_wr3 0x00000000U

/* all used bits of 'NX90_xmac_wr3': */
#define MSK_USED_BITS_NX90_xmac_wr3 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr4 */
/* => xMAC internal Work Register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr4            0x000000C8U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr4 0xFF1114C8U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr4 0xFF1116C8U
#define DFLT_VAL_NX90_xmac_wr4           0x00000000U

#define MSK_NX90_xmac_wr4_wr4         0x0000ffffU
#define SRT_NX90_xmac_wr4_wr4         0
#define DFLT_VAL_NX90_xmac_wr4_wr4    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr4_wr4 0x00000000U

/* all used bits of 'NX90_xmac_wr4': */
#define MSK_USED_BITS_NX90_xmac_wr4 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr5 */
/* => xMAC internal Work Register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr5            0x000000CCU
#define Adr_NX90_xc0_xmac0_regs_xmac_wr5 0xFF1114CCU
#define Adr_NX90_xc0_xmac1_regs_xmac_wr5 0xFF1116CCU
#define DFLT_VAL_NX90_xmac_wr5           0x00000000U

#define MSK_NX90_xmac_wr5_wr5         0x0000ffffU
#define SRT_NX90_xmac_wr5_wr5         0
#define DFLT_VAL_NX90_xmac_wr5_wr5    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr5_wr5 0x00000000U

/* all used bits of 'NX90_xmac_wr5': */
#define MSK_USED_BITS_NX90_xmac_wr5 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr6 */
/* => xMAC internal Work Register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr6            0x000000D0U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr6 0xFF1114D0U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr6 0xFF1116D0U
#define DFLT_VAL_NX90_xmac_wr6           0x00000000U

#define MSK_NX90_xmac_wr6_wr6         0x0000ffffU
#define SRT_NX90_xmac_wr6_wr6         0
#define DFLT_VAL_NX90_xmac_wr6_wr6    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr6_wr6 0x00000000U

/* all used bits of 'NX90_xmac_wr6': */
#define MSK_USED_BITS_NX90_xmac_wr6 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr7 */
/* => xMAC internal Work Register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr7            0x000000D4U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr7 0xFF1114D4U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr7 0xFF1116D4U
#define DFLT_VAL_NX90_xmac_wr7           0x00000000U

#define MSK_NX90_xmac_wr7_wr7         0x0000ffffU
#define SRT_NX90_xmac_wr7_wr7         0
#define DFLT_VAL_NX90_xmac_wr7_wr7    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr7_wr7 0x00000000U

/* all used bits of 'NX90_xmac_wr7': */
#define MSK_USED_BITS_NX90_xmac_wr7 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr8 */
/* => xMAC internal Work Register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr8            0x000000D8U
#define Adr_NX90_xc0_xmac0_regs_xmac_wr8 0xFF1114D8U
#define Adr_NX90_xc0_xmac1_regs_xmac_wr8 0xFF1116D8U
#define DFLT_VAL_NX90_xmac_wr8           0x00000000U

#define MSK_NX90_xmac_wr8_wr8         0x0000ffffU
#define SRT_NX90_xmac_wr8_wr8         0
#define DFLT_VAL_NX90_xmac_wr8_wr8    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr8_wr8 0x00000000U

/* all used bits of 'NX90_xmac_wr8': */
#define MSK_USED_BITS_NX90_xmac_wr8 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_wr9 */
/* => xMAC internal Work Register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_wr9            0x000000DCU
#define Adr_NX90_xc0_xmac0_regs_xmac_wr9 0xFF1114DCU
#define Adr_NX90_xc0_xmac1_regs_xmac_wr9 0xFF1116DCU
#define DFLT_VAL_NX90_xmac_wr9           0x00000000U

#define MSK_NX90_xmac_wr9_wr9         0x0000ffffU
#define SRT_NX90_xmac_wr9_wr9         0
#define DFLT_VAL_NX90_xmac_wr9_wr9    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_wr9_wr9 0x00000000U

/* all used bits of 'NX90_xmac_wr9': */
#define MSK_USED_BITS_NX90_xmac_wr9 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sys_time */
/* => xMAC System Time */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sys_time            0x000000E0U
#define Adr_NX90_xc0_xmac0_regs_xmac_sys_time 0xFF1114E0U
#define Adr_NX90_xc0_xmac1_regs_xmac_sys_time 0xFF1116E0U

#define MSK_NX90_xmac_sys_time_sys_time 0x0000ffffU
#define SRT_NX90_xmac_sys_time_sys_time 0

/* all used bits of 'NX90_xmac_sys_time': */
#define MSK_USED_BITS_NX90_xmac_sys_time 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sys_time_upper */
/* => xMAC System Time uppler bits, */
/*    latched at read access of xmac_sys_time. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sys_time_upper            0x000000E4U
#define Adr_NX90_xc0_xmac0_regs_xmac_sys_time_upper 0xFF1114E4U
#define Adr_NX90_xc0_xmac1_regs_xmac_sys_time_upper 0xFF1116E4U

#define MSK_NX90_xmac_sys_time_upper_val 0x0000ffffU
#define SRT_NX90_xmac_sys_time_upper_val 0

/* all used bits of 'NX90_xmac_sys_time_upper': */
#define MSK_USED_BITS_NX90_xmac_sys_time_upper 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sys_time_uc */
/* => xMAC System Time Uncontrolled */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sys_time_uc            0x000000E8U
#define Adr_NX90_xc0_xmac0_regs_xmac_sys_time_uc 0xFF1114E8U
#define Adr_NX90_xc0_xmac1_regs_xmac_sys_time_uc 0xFF1116E8U

#define MSK_NX90_xmac_sys_time_uc_val 0x0000ffffU
#define SRT_NX90_xmac_sys_time_uc_val 0

/* all used bits of 'NX90_xmac_sys_time_uc': */
#define MSK_USED_BITS_NX90_xmac_sys_time_uc 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sys_time_uc_upper */
/* => xMAC System Time uppler bits, */
/*    latched at read access of xmac_sys_time. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sys_time_uc_upper            0x000000ECU
#define Adr_NX90_xc0_xmac0_regs_xmac_sys_time_uc_upper 0xFF1114ECU
#define Adr_NX90_xc0_xmac1_regs_xmac_sys_time_uc_upper 0xFF1116ECU

#define MSK_NX90_xmac_sys_time_uc_upper_val 0x0000ffffU
#define SRT_NX90_xmac_sys_time_uc_upper_val 0

/* all used bits of 'NX90_xmac_sys_time_uc_upper': */
#define MSK_USED_BITS_NX90_xmac_sys_time_uc_upper 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_cmp0_status */
/* => xMAC Compare0 Status Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_cmp0_status            0x000000F0U
#define Adr_NX90_xc0_xmac0_regs_xmac_cmp0_status 0xFF1114F0U
#define Adr_NX90_xc0_xmac1_regs_xmac_cmp0_status 0xFF1116F0U

#define MSK_NX90_xmac_cmp0_status_sr0_z       0x00000001U
#define SRT_NX90_xmac_cmp0_status_sr0_z       0
#define MSK_NX90_xmac_cmp0_status_sr1_z       0x00000002U
#define SRT_NX90_xmac_cmp0_status_sr1_z       1
#define MSK_NX90_xmac_cmp0_status_sr2_z       0x00000004U
#define SRT_NX90_xmac_cmp0_status_sr2_z       2
#define MSK_NX90_xmac_cmp0_status_sr3_z       0x00000008U
#define SRT_NX90_xmac_cmp0_status_sr3_z       3
#define MSK_NX90_xmac_cmp0_status_sr4_z       0x00000010U
#define SRT_NX90_xmac_cmp0_status_sr4_z       4
#define MSK_NX90_xmac_cmp0_status_sr5_z       0x00000020U
#define SRT_NX90_xmac_cmp0_status_sr5_z       5
#define MSK_NX90_xmac_cmp0_status_sr6_z       0x00000040U
#define SRT_NX90_xmac_cmp0_status_sr6_z       6
#define MSK_NX90_xmac_cmp0_status_sr7_z       0x00000080U
#define SRT_NX90_xmac_cmp0_status_sr7_z       7
#define MSK_NX90_xmac_cmp0_status_cnt_rx_z    0x00000100U
#define SRT_NX90_xmac_cmp0_status_cnt_rx_z    8
#define MSK_NX90_xmac_cmp0_status_cnt_tx_z    0x00000200U
#define SRT_NX90_xmac_cmp0_status_cnt_tx_z    9
#define MSK_NX90_xmac_cmp0_status_cnt_rx_hw_z 0x00000400U
#define SRT_NX90_xmac_cmp0_status_cnt_rx_hw_z 10
#define MSK_NX90_xmac_cmp0_status_cnt_tx_hw_z 0x00000800U
#define SRT_NX90_xmac_cmp0_status_cnt_tx_hw_z 11
#define MSK_NX90_xmac_cmp0_status_cnt1_rpu_z  0x00001000U
#define SRT_NX90_xmac_cmp0_status_cnt1_rpu_z  12
#define MSK_NX90_xmac_cmp0_status_cnt2_rpu_z  0x00002000U
#define SRT_NX90_xmac_cmp0_status_cnt2_rpu_z  13
#define MSK_NX90_xmac_cmp0_status_cnt1_tpu_z  0x00004000U
#define SRT_NX90_xmac_cmp0_status_cnt1_tpu_z  14
#define MSK_NX90_xmac_cmp0_status_cnt2_tpu_z  0x00008000U
#define SRT_NX90_xmac_cmp0_status_cnt2_tpu_z  15

/* all used bits of 'NX90_xmac_cmp0_status': */
#define MSK_USED_BITS_NX90_xmac_cmp0_status 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_cmp1_status */
/* => xMAC Compare1 Status Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_cmp1_status            0x000000F4U
#define Adr_NX90_xc0_xmac0_regs_xmac_cmp1_status 0xFF1114F4U
#define Adr_NX90_xc0_xmac1_regs_xmac_cmp1_status 0xFF1116F4U

#define MSK_NX90_xmac_cmp1_status_wr0_z   0x00000001U
#define SRT_NX90_xmac_cmp1_status_wr0_z   0
#define MSK_NX90_xmac_cmp1_status_wr1_z   0x00000002U
#define SRT_NX90_xmac_cmp1_status_wr1_z   1
#define MSK_NX90_xmac_cmp1_status_wr2_z   0x00000004U
#define SRT_NX90_xmac_cmp1_status_wr2_z   2
#define MSK_NX90_xmac_cmp1_status_wr3_z   0x00000008U
#define SRT_NX90_xmac_cmp1_status_wr3_z   3
#define MSK_NX90_xmac_cmp1_status_wr4_z   0x00000010U
#define SRT_NX90_xmac_cmp1_status_wr4_z   4
#define MSK_NX90_xmac_cmp1_status_wr5_z   0x00000020U
#define SRT_NX90_xmac_cmp1_status_wr5_z   5
#define MSK_NX90_xmac_cmp1_status_wr6_z   0x00000040U
#define SRT_NX90_xmac_cmp1_status_wr6_z   6
#define MSK_NX90_xmac_cmp1_status_wr7_z   0x00000080U
#define SRT_NX90_xmac_cmp1_status_wr7_z   7
#define MSK_NX90_xmac_cmp1_status_wr8_z   0x00000100U
#define SRT_NX90_xmac_cmp1_status_wr8_z   8
#define MSK_NX90_xmac_cmp1_status_wr9_z   0x00000200U
#define SRT_NX90_xmac_cmp1_status_wr9_z   9
#define MSK_NX90_xmac_cmp1_status_wr0_wr1 0x00000400U
#define SRT_NX90_xmac_cmp1_status_wr0_wr1 10
#define MSK_NX90_xmac_cmp1_status_wr2_wr3 0x00000800U
#define SRT_NX90_xmac_cmp1_status_wr2_wr3 11
#define MSK_NX90_xmac_cmp1_status_wr4_wr5 0x00001000U
#define SRT_NX90_xmac_cmp1_status_wr4_wr5 12
#define MSK_NX90_xmac_cmp1_status_wr6_wr7 0x00002000U
#define SRT_NX90_xmac_cmp1_status_wr6_wr7 13
#define MSK_NX90_xmac_cmp1_status_wr8_wr9 0x00004000U
#define SRT_NX90_xmac_cmp1_status_wr8_wr9 14
#define MSK_NX90_xmac_cmp1_status_zero    0x00008000U
#define SRT_NX90_xmac_cmp1_status_zero    15

/* all used bits of 'NX90_xmac_cmp1_status': */
#define MSK_USED_BITS_NX90_xmac_cmp1_status 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_cmp2_status */
/* => xMAC Compare2 Status Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_cmp2_status            0x000000F8U
#define Adr_NX90_xc0_xmac0_regs_xmac_cmp2_status 0xFF1114F8U
#define Adr_NX90_xc0_xmac1_regs_xmac_cmp2_status 0xFF1116F8U

#define MSK_NX90_xmac_cmp2_status_wr0_sr0  0x00000001U
#define SRT_NX90_xmac_cmp2_status_wr0_sr0  0
#define MSK_NX90_xmac_cmp2_status_wr1_sr1  0x00000002U
#define SRT_NX90_xmac_cmp2_status_wr1_sr1  1
#define MSK_NX90_xmac_cmp2_status_wr2_sr2  0x00000004U
#define SRT_NX90_xmac_cmp2_status_wr2_sr2  2
#define MSK_NX90_xmac_cmp2_status_wr3_sr3  0x00000008U
#define SRT_NX90_xmac_cmp2_status_wr3_sr3  3
#define MSK_NX90_xmac_cmp2_status_wr4_sr4  0x00000010U
#define SRT_NX90_xmac_cmp2_status_wr4_sr4  4
#define MSK_NX90_xmac_cmp2_status_wr5_sr5  0x00000020U
#define SRT_NX90_xmac_cmp2_status_wr5_sr5  5
#define MSK_NX90_xmac_cmp2_status_wr6_sr6  0x00000040U
#define SRT_NX90_xmac_cmp2_status_wr6_sr6  6
#define MSK_NX90_xmac_cmp2_status_wr7_sr7  0x00000080U
#define SRT_NX90_xmac_cmp2_status_wr7_sr7  7
#define MSK_NX90_xmac_cmp2_status_wr8_sr8  0x00000100U
#define SRT_NX90_xmac_cmp2_status_wr8_sr8  8
#define MSK_NX90_xmac_cmp2_status_wr9_sr9  0x00000200U
#define SRT_NX90_xmac_cmp2_status_wr9_sr9  9
#define MSK_NX90_xmac_cmp2_status_wr5_sr10 0x00000400U
#define SRT_NX90_xmac_cmp2_status_wr5_sr10 10
#define MSK_NX90_xmac_cmp2_status_wr6_sr11 0x00000800U
#define SRT_NX90_xmac_cmp2_status_wr6_sr11 11
#define MSK_NX90_xmac_cmp2_status_wr5_sr12 0x00001000U
#define SRT_NX90_xmac_cmp2_status_wr5_sr12 12
#define MSK_NX90_xmac_cmp2_status_wr6_sr13 0x00002000U
#define SRT_NX90_xmac_cmp2_status_wr6_sr13 13
#define MSK_NX90_xmac_cmp2_status_wr5_sr14 0x00004000U
#define SRT_NX90_xmac_cmp2_status_wr5_sr14 14
#define MSK_NX90_xmac_cmp2_status_wr6_sr15 0x00008000U
#define SRT_NX90_xmac_cmp2_status_wr6_sr15 15

/* all used bits of 'NX90_xmac_cmp2_status': */
#define MSK_USED_BITS_NX90_xmac_cmp2_status 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_cmp3_status */
/* => xMAC Compare3 Status Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_cmp3_status            0x000000FCU
#define Adr_NX90_xc0_xmac0_regs_xmac_cmp3_status 0xFF1114FCU
#define Adr_NX90_xc0_xmac1_regs_xmac_cmp3_status 0xFF1116FCU

#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr0 0x00000001U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr0 0
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr1 0x00000002U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr1 1
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr2 0x00000004U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr2 2
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr3 0x00000008U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr3 3
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr4 0x00000010U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr4 4
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr5 0x00000020U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr5 5
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr6 0x00000040U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr6 6
#define MSK_NX90_xmac_cmp3_status_rpucnt1_wr7 0x00000080U
#define SRT_NX90_xmac_cmp3_status_rpucnt1_wr7 7
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr0 0x00000100U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr0 8
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr1 0x00000200U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr1 9
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr2 0x00000400U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr2 10
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr3 0x00000800U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr3 11
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr4 0x00001000U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr4 12
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr5 0x00002000U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr5 13
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr6 0x00004000U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr6 14
#define MSK_NX90_xmac_cmp3_status_tpucnt1_wr7 0x00008000U
#define SRT_NX90_xmac_cmp3_status_tpucnt1_wr7 15

/* all used bits of 'NX90_xmac_cmp3_status': */
#define MSK_USED_BITS_NX90_xmac_cmp3_status 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_cmp4_status */
/* => xMAC Compare4 Status Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_cmp4_status            0x00000100U
#define Adr_NX90_xc0_xmac0_regs_xmac_cmp4_status 0xFF111500U
#define Adr_NX90_xc0_xmac1_regs_xmac_cmp4_status 0xFF111700U

#define MSK_NX90_xmac_cmp4_status_rpm_hit0           0x00000001U
#define SRT_NX90_xmac_cmp4_status_rpm_hit0           0
#define MSK_NX90_xmac_cmp4_status_rpm_hit1           0x00000002U
#define SRT_NX90_xmac_cmp4_status_rpm_hit1           1
#define MSK_NX90_xmac_cmp4_status_rpm_hit0or1        0x00000004U
#define SRT_NX90_xmac_cmp4_status_rpm_hit0or1        2
#define MSK_NX90_xmac_cmp4_status_tpm_hit0           0x00000008U
#define SRT_NX90_xmac_cmp4_status_tpm_hit0           3
#define MSK_NX90_xmac_cmp4_status_tpm_hit1           0x00000010U
#define SRT_NX90_xmac_cmp4_status_tpm_hit1           4
#define MSK_NX90_xmac_cmp4_status_tpm_hit0or1        0x00000020U
#define SRT_NX90_xmac_cmp4_status_tpm_hit0or1        5
#define MSK_NX90_xmac_cmp4_status_rpm_hit0_tx        0x00000040U
#define SRT_NX90_xmac_cmp4_status_rpm_hit0_tx        6
#define MSK_NX90_xmac_cmp4_status_rpm_hit1_tx        0x00000080U
#define SRT_NX90_xmac_cmp4_status_rpm_hit1_tx        7
#define MSK_NX90_xmac_cmp4_status_rpm_hit0or1_tx     0x00000100U
#define SRT_NX90_xmac_cmp4_status_rpm_hit0or1_tx     8
#define MSK_NX90_xmac_cmp4_status_tpm_hit0_rx        0x00000200U
#define SRT_NX90_xmac_cmp4_status_tpm_hit0_rx        9
#define MSK_NX90_xmac_cmp4_status_tpm_hit1_rx        0x00000400U
#define SRT_NX90_xmac_cmp4_status_tpm_hit1_rx        10
#define MSK_NX90_xmac_cmp4_status_tpm_hit0or1_rx     0x00000800U
#define SRT_NX90_xmac_cmp4_status_tpm_hit0or1_rx     11
#define MSK_NX90_xmac_cmp4_status_tx_eq_wr45         0x00001000U
#define SRT_NX90_xmac_cmp4_status_tx_eq_wr45         12
#define MSK_NX90_xmac_cmp4_status_sys_time           0x00002000U
#define SRT_NX90_xmac_cmp4_status_sys_time           13
#define MSK_NX90_xmac_cmp4_status_sys_time_uc        0x00004000U
#define SRT_NX90_xmac_cmp4_status_sys_time_uc        14
#define MSK_NX90_xmac_cmp4_status_sys_time_uc_eq_wr2 0x00008000U
#define SRT_NX90_xmac_cmp4_status_sys_time_uc_eq_wr2 15

/* all used bits of 'NX90_xmac_cmp4_status': */
#define MSK_USED_BITS_NX90_xmac_cmp4_status 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_alu_flags */
/* => xMAC RPU and TPU ALU Flags: */
/*    ALU Flags are only influenced by combinatonal commands like add, sub, rotate, shift. */
/*    Bitwise commands (e.g. and, or, ...) do not influence ALU-Flags. */
/*    In case of bitwise commands, ALU-Flags keep their old value. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_alu_flags            0x00000104U
#define Adr_NX90_xc0_xmac0_regs_xmac_alu_flags 0xFF111504U
#define Adr_NX90_xc0_xmac1_regs_xmac_alu_flags 0xFF111704U

#define MSK_NX90_xmac_alu_flags_rpu_carry 0x00000001U
#define SRT_NX90_xmac_alu_flags_rpu_carry 0
#define MSK_NX90_xmac_alu_flags_rpu_zero  0x00000002U
#define SRT_NX90_xmac_alu_flags_rpu_zero  1
#define MSK_NX90_xmac_alu_flags_rpu_neg   0x00000004U
#define SRT_NX90_xmac_alu_flags_rpu_neg   2
#define MSK_NX90_xmac_alu_flags_rpu_ovf   0x00000008U
#define SRT_NX90_xmac_alu_flags_rpu_ovf   3
#define MSK_NX90_xmac_alu_flags_tpu_carry 0x00000010U
#define SRT_NX90_xmac_alu_flags_tpu_carry 4
#define MSK_NX90_xmac_alu_flags_tpu_zero  0x00000020U
#define SRT_NX90_xmac_alu_flags_tpu_zero  5
#define MSK_NX90_xmac_alu_flags_tpu_neg   0x00000040U
#define SRT_NX90_xmac_alu_flags_tpu_neg   6
#define MSK_NX90_xmac_alu_flags_tpu_ovf   0x00000080U
#define SRT_NX90_xmac_alu_flags_tpu_ovf   7
#define MSK_NX90_xmac_alu_flags_rxcnt_wr0 0x00000100U
#define SRT_NX90_xmac_alu_flags_rxcnt_wr0 8
#define MSK_NX90_xmac_alu_flags_rxcnt_wr1 0x00000200U
#define SRT_NX90_xmac_alu_flags_rxcnt_wr1 9
#define MSK_NX90_xmac_alu_flags_rxcnt_wr2 0x00000400U
#define SRT_NX90_xmac_alu_flags_rxcnt_wr2 10
#define MSK_NX90_xmac_alu_flags_rxcnt_wr3 0x00000800U
#define SRT_NX90_xmac_alu_flags_rxcnt_wr3 11
#define MSK_NX90_xmac_alu_flags_txcnt_wr4 0x00001000U
#define SRT_NX90_xmac_alu_flags_txcnt_wr4 12
#define MSK_NX90_xmac_alu_flags_txcnt_wr5 0x00002000U
#define SRT_NX90_xmac_alu_flags_txcnt_wr5 13
#define MSK_NX90_xmac_alu_flags_txcnt_wr6 0x00004000U
#define SRT_NX90_xmac_alu_flags_txcnt_wr6 14
#define MSK_NX90_xmac_alu_flags_txcnt_wr7 0x00008000U
#define SRT_NX90_xmac_alu_flags_txcnt_wr7 15

/* all used bits of 'NX90_xmac_alu_flags': */
#define MSK_USED_BITS_NX90_xmac_alu_flags 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_status_int */
/* => xMAC Status Internal Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_status_int            0x00000108U
#define Adr_NX90_xc0_xmac0_regs_xmac_status_int 0xFF111508U
#define Adr_NX90_xc0_xmac1_regs_xmac_status_int 0xFF111708U

#define MSK_NX90_xmac_status_int_rx_crc_ok             0x00000001U
#define SRT_NX90_xmac_status_int_rx_crc_ok             0
#define MSK_NX90_xmac_status_int_tx_crc_ok             0x00000002U
#define SRT_NX90_xmac_status_int_tx_crc_ok             1
#define MSK_NX90_xmac_status_int_rx_crc32_ok           0x00000004U
#define SRT_NX90_xmac_status_int_rx_crc32_ok           2
#define MSK_NX90_xmac_status_int_bitstream_in_filtered 0x00000008U
#define SRT_NX90_xmac_status_int_bitstream_in_filtered 3
#define MSK_NX90_xmac_status_int_lbit_eq_bit           0x00000010U
#define SRT_NX90_xmac_status_int_lbit_eq_bit           4
#define MSK_NX90_xmac_status_int_recbit                0x00000020U
#define SRT_NX90_xmac_status_int_recbit                5
#define MSK_NX90_xmac_status_int_brec                  0x00000040U
#define SRT_NX90_xmac_status_int_brec                  6
#define MSK_NX90_xmac_status_int_btran                 0x00000080U
#define SRT_NX90_xmac_status_int_btran                 7
#define MSK_NX90_xmac_status_int_rpucnt2_wr0           0x00000100U
#define SRT_NX90_xmac_status_int_rpucnt2_wr0           8
#define MSK_NX90_xmac_status_int_rpucnt2_wr1           0x00000200U
#define SRT_NX90_xmac_status_int_rpucnt2_wr1           9
#define MSK_NX90_xmac_status_int_rpucnt2_wr2           0x00000400U
#define SRT_NX90_xmac_status_int_rpucnt2_wr2           10
#define MSK_NX90_xmac_status_int_rpucnt2_wr3           0x00000800U
#define SRT_NX90_xmac_status_int_rpucnt2_wr3           11
#define MSK_NX90_xmac_status_int_tpucnt2_wr4           0x00001000U
#define SRT_NX90_xmac_status_int_tpucnt2_wr4           12
#define MSK_NX90_xmac_status_int_tpucnt2_wr5           0x00002000U
#define SRT_NX90_xmac_status_int_tpucnt2_wr5           13
#define MSK_NX90_xmac_status_int_tpucnt2_wr6           0x00004000U
#define SRT_NX90_xmac_status_int_tpucnt2_wr6           14
#define MSK_NX90_xmac_status_int_tpucnt2_wr7           0x00008000U
#define SRT_NX90_xmac_status_int_tpucnt2_wr7           15

/* all used bits of 'NX90_xmac_status_int': */
#define MSK_USED_BITS_NX90_xmac_status_int 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_stat_bits */
/* => xMAC stat_bits: */
/*    set and reset by hw_support bits (set_stat and reset_stat) and selected by src1_adr, */
/*    accessible by all RPUs and TPUs with higher set than reset priority */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_stat_bits            0x0000010CU
#define Adr_NX90_xc0_xmac0_regs_xmac_stat_bits 0xFF11150CU
#define Adr_NX90_xc0_xmac1_regs_xmac_stat_bits 0xFF11170CU

#define MSK_NX90_xmac_stat_bits_stat_bits 0x0000ffffU
#define SRT_NX90_xmac_stat_bits_stat_bits 0

/* all used bits of 'NX90_xmac_stat_bits': */
#define MSK_USED_BITS_NX90_xmac_stat_bits 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_stat_bits_shared_lower */
/* => stat_bits_shared (lower): */
/*    These bits can be accessed by all xMACs and xPECs in parallel, all accesses with write bit mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_stat_bits_shared_lower            0x00000110U
#define Adr_NX90_xc0_xmac0_regs_xmac_stat_bits_shared_lower 0xFF111510U
#define Adr_NX90_xc0_xmac1_regs_xmac_stat_bits_shared_lower 0xFF111710U
#define DFLT_VAL_NX90_xmac_stat_bits_shared_lower           0x00000000U

#define MSK_NX90_xmac_stat_bits_shared_lower_val                0x000000ffU
#define SRT_NX90_xmac_stat_bits_shared_lower_val                0
#define DFLT_VAL_NX90_xmac_stat_bits_shared_lower_val           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_stat_bits_shared_lower_val        0x00000000U
#define MSK_NX90_xmac_stat_bits_shared_lower_write_mask         0x0000ff00U
#define SRT_NX90_xmac_stat_bits_shared_lower_write_mask         8
#define DFLT_VAL_NX90_xmac_stat_bits_shared_lower_write_mask    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_stat_bits_shared_lower_write_mask 0x00000000U

/* all used bits of 'NX90_xmac_stat_bits_shared_lower': */
#define MSK_USED_BITS_NX90_xmac_stat_bits_shared_lower 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_stat_bits_shared_upper */
/* => stat_bits_shared (upper): */
/*    These bits can be accessed by all xMACs and xPECs in parallel, all accesses with write bit mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_stat_bits_shared_upper            0x00000114U
#define Adr_NX90_xc0_xmac0_regs_xmac_stat_bits_shared_upper 0xFF111514U
#define Adr_NX90_xc0_xmac1_regs_xmac_stat_bits_shared_upper 0xFF111714U
#define DFLT_VAL_NX90_xmac_stat_bits_shared_upper           0x00000000U

#define MSK_NX90_xmac_stat_bits_shared_upper_val                0x000000ffU
#define SRT_NX90_xmac_stat_bits_shared_upper_val                0
#define DFLT_VAL_NX90_xmac_stat_bits_shared_upper_val           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_stat_bits_shared_upper_val        0x00000000U
#define MSK_NX90_xmac_stat_bits_shared_upper_write_mask         0x0000ff00U
#define SRT_NX90_xmac_stat_bits_shared_upper_write_mask         8
#define DFLT_VAL_NX90_xmac_stat_bits_shared_upper_write_mask    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_stat_bits_shared_upper_write_mask 0x00000000U

/* all used bits of 'NX90_xmac_stat_bits_shared_upper': */
#define MSK_USED_BITS_NX90_xmac_stat_bits_shared_upper 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_status_mii */
/* => xMAC MII receive status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_status_mii            0x00000118U
#define Adr_NX90_xc0_xmac0_regs_xmac_status_mii 0xFF111518U
#define Adr_NX90_xc0_xmac1_regs_xmac_status_mii 0xFF111718U

#define MSK_NX90_xmac_status_mii_rx_dv       0x00000001U
#define SRT_NX90_xmac_status_mii_rx_dv       0
#define MSK_NX90_xmac_status_mii_rx_err      0x00000002U
#define SRT_NX90_xmac_status_mii_rx_err      1
#define MSK_NX90_xmac_status_mii_crs         0x00000004U
#define SRT_NX90_xmac_status_mii_crs         2
#define MSK_NX90_xmac_status_mii_col         0x00000008U
#define SRT_NX90_xmac_status_mii_col         3
#define MSK_NX90_xmac_status_mii_s_nc        0x00000010U
#define SRT_NX90_xmac_status_mii_s_nc        4
#define MSK_NX90_xmac_status_mii_v_ne_ns_nc  0x00000020U
#define SRT_NX90_xmac_status_mii_v_ne_ns_nc  5
#define MSK_NX90_xmac_status_mii_v_ne_nc     0x00000040U
#define SRT_NX90_xmac_status_mii_v_ne_nc     6
#define MSK_NX90_xmac_status_mii_v_ne_ns     0x00000080U
#define SRT_NX90_xmac_status_mii_v_ne_ns     7
#define MSK_NX90_xmac_status_mii_v_ne        0x00000100U
#define SRT_NX90_xmac_status_mii_v_ne        8
#define MSK_NX90_xmac_status_mii_v_ne_s_nc   0x00000200U
#define SRT_NX90_xmac_status_mii_v_ne_s_nc   9
#define MSK_NX90_xmac_status_mii_v_ne_s      0x00000400U
#define SRT_NX90_xmac_status_mii_v_ne_s      10
#define MSK_NX90_xmac_status_mii_v_ne_nc_p0  0x00000800U
#define SRT_NX90_xmac_status_mii_v_ne_nc_p0  11
#define MSK_NX90_xmac_status_mii_v_ne_nc_p1  0x00001000U
#define SRT_NX90_xmac_status_mii_v_ne_nc_p1  12
#define MSK_NX90_xmac_status_mii_v_ne_nc_p01 0x00002000U
#define SRT_NX90_xmac_status_mii_v_ne_nc_p01 13
#define MSK_NX90_xmac_status_mii_anycol      0x00004000U
#define SRT_NX90_xmac_status_mii_anycol      14

/* all used bits of 'NX90_xmac_status_mii': */
#define MSK_USED_BITS_NX90_xmac_status_mii 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register xmac_status_mii2 */
/* => xMAC 2nd MII receive status register: */
/*    All bits are read only, writing 1 to rx_err_was_here, col_was_here or crs_was_here resets these bits. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_status_mii2            0x0000011CU
#define Adr_NX90_xc0_xmac0_regs_xmac_status_mii2 0xFF11151CU
#define Adr_NX90_xc0_xmac1_regs_xmac_status_mii2 0xFF11171CU
#define DFLT_VAL_NX90_xmac_status_mii2           0x00000000U

#define MSK_NX90_xmac_status_mii2_dv                            0x00000001U
#define SRT_NX90_xmac_status_mii2_dv                            0
#define DFLT_VAL_NX90_xmac_status_mii2_dv                       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_dv                    0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_dv                         0x00000002U
#define SRT_NX90_xmac_status_mii2_rx_dv                         1
#define DFLT_VAL_NX90_xmac_status_mii2_rx_dv                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_dv                 0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_err                        0x00000004U
#define SRT_NX90_xmac_status_mii2_rx_err                        2
#define DFLT_VAL_NX90_xmac_status_mii2_rx_err                   0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_err                0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_crs                        0x00000008U
#define SRT_NX90_xmac_status_mii2_rx_crs                        3
#define DFLT_VAL_NX90_xmac_status_mii2_rx_crs                   0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_crs                0x00000000U
#define MSK_NX90_xmac_status_mii2_v_ne                          0x00000010U
#define SRT_NX90_xmac_status_mii2_v_ne                          4
#define DFLT_VAL_NX90_xmac_status_mii2_v_ne                     0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_v_ne                  0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_miif_error_ro              0x00000020U
#define SRT_NX90_xmac_status_mii2_rx_miif_error_ro              5
#define DFLT_VAL_NX90_xmac_status_mii2_rx_miif_error_ro         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_miif_error_ro      0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_miif_ovfl_ro               0x00000040U
#define SRT_NX90_xmac_status_mii2_rx_miif_ovfl_ro               6
#define DFLT_VAL_NX90_xmac_status_mii2_rx_miif_ovfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_miif_ovfl_ro       0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_miif_unfl_ro               0x00000080U
#define SRT_NX90_xmac_status_mii2_rx_miif_unfl_ro               7
#define DFLT_VAL_NX90_xmac_status_mii2_rx_miif_unfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_miif_unfl_ro       0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_miif_short_dv_ro           0x00000100U
#define SRT_NX90_xmac_status_mii2_rx_miif_short_dv_ro           8
#define DFLT_VAL_NX90_xmac_status_mii2_rx_miif_short_dv_ro      0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_miif_short_dv_ro   0x00000000U
#define MSK_NX90_xmac_status_mii2_tx_miif_error_ro              0x00000200U
#define SRT_NX90_xmac_status_mii2_tx_miif_error_ro              9
#define DFLT_VAL_NX90_xmac_status_mii2_tx_miif_error_ro         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_tx_miif_error_ro      0x00000000U
#define MSK_NX90_xmac_status_mii2_tx_miif_ovfl_ro               0x00000400U
#define SRT_NX90_xmac_status_mii2_tx_miif_ovfl_ro               10
#define DFLT_VAL_NX90_xmac_status_mii2_tx_miif_ovfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_tx_miif_ovfl_ro       0x00000000U
#define MSK_NX90_xmac_status_mii2_tx_miif_unfl_ro               0x00000800U
#define SRT_NX90_xmac_status_mii2_tx_miif_unfl_ro               11
#define DFLT_VAL_NX90_xmac_status_mii2_tx_miif_unfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_tx_miif_unfl_ro       0x00000000U
#define MSK_NX90_xmac_status_mii2_tx_miif_short_txen_ro         0x00001000U
#define SRT_NX90_xmac_status_mii2_tx_miif_short_txen_ro         12
#define DFLT_VAL_NX90_xmac_status_mii2_tx_miif_short_txen_ro    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_tx_miif_short_txen_ro 0x00000000U
#define MSK_NX90_xmac_status_mii2_rx_err_was_here               0x00002000U
#define SRT_NX90_xmac_status_mii2_rx_err_was_here               13
#define DFLT_VAL_NX90_xmac_status_mii2_rx_err_was_here          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_rx_err_was_here       0x00000000U
#define MSK_NX90_xmac_status_mii2_col_was_here                  0x00004000U
#define SRT_NX90_xmac_status_mii2_col_was_here                  14
#define DFLT_VAL_NX90_xmac_status_mii2_col_was_here             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_col_was_here          0x00000000U
#define MSK_NX90_xmac_status_mii2_crs_was_here                  0x00008000U
#define SRT_NX90_xmac_status_mii2_crs_was_here                  15
#define DFLT_VAL_NX90_xmac_status_mii2_crs_was_here             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_status_mii2_crs_was_here          0x00000000U

/* all used bits of 'NX90_xmac_status_mii2': */
#define MSK_USED_BITS_NX90_xmac_status_mii2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_other_status_mii2 */
/* => xMAC 2nd MII receive status register of other xMAC: */
/*    Used for fast forward of data between 2 xMACs (specially in MII-HUB-mode) */
/*    All bits are read only, writing 1 to rx_err_was_here, col_was_here or crs_was_here resets these bits. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_other_status_mii2            0x00000120U
#define Adr_NX90_xc0_xmac0_regs_xmac_other_status_mii2 0xFF111520U
#define Adr_NX90_xc0_xmac1_regs_xmac_other_status_mii2 0xFF111720U
#define DFLT_VAL_NX90_xmac_other_status_mii2           0x00000000U

#define MSK_NX90_xmac_other_status_mii2_dv                            0x00000001U
#define SRT_NX90_xmac_other_status_mii2_dv                            0
#define DFLT_VAL_NX90_xmac_other_status_mii2_dv                       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_dv                    0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_dv                         0x00000002U
#define SRT_NX90_xmac_other_status_mii2_rx_dv                         1
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_dv                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_dv                 0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_err                        0x00000004U
#define SRT_NX90_xmac_other_status_mii2_rx_err                        2
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_err                   0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_err                0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_crs                        0x00000008U
#define SRT_NX90_xmac_other_status_mii2_rx_crs                        3
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_crs                   0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_crs                0x00000000U
#define MSK_NX90_xmac_other_status_mii2_v_ne                          0x00000010U
#define SRT_NX90_xmac_other_status_mii2_v_ne                          4
#define DFLT_VAL_NX90_xmac_other_status_mii2_v_ne                     0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_v_ne                  0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_miif_error_ro              0x00000020U
#define SRT_NX90_xmac_other_status_mii2_rx_miif_error_ro              5
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_miif_error_ro         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_miif_error_ro      0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_miif_ovfl_ro               0x00000040U
#define SRT_NX90_xmac_other_status_mii2_rx_miif_ovfl_ro               6
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_miif_ovfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_miif_ovfl_ro       0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_miif_unfl_ro               0x00000080U
#define SRT_NX90_xmac_other_status_mii2_rx_miif_unfl_ro               7
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_miif_unfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_miif_unfl_ro       0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_miif_short_dv_ro           0x00000100U
#define SRT_NX90_xmac_other_status_mii2_rx_miif_short_dv_ro           8
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_miif_short_dv_ro      0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_miif_short_dv_ro   0x00000000U
#define MSK_NX90_xmac_other_status_mii2_tx_miif_error_ro              0x00000200U
#define SRT_NX90_xmac_other_status_mii2_tx_miif_error_ro              9
#define DFLT_VAL_NX90_xmac_other_status_mii2_tx_miif_error_ro         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_tx_miif_error_ro      0x00000000U
#define MSK_NX90_xmac_other_status_mii2_tx_miif_ovfl_ro               0x00000400U
#define SRT_NX90_xmac_other_status_mii2_tx_miif_ovfl_ro               10
#define DFLT_VAL_NX90_xmac_other_status_mii2_tx_miif_ovfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_tx_miif_ovfl_ro       0x00000000U
#define MSK_NX90_xmac_other_status_mii2_tx_miif_unfl_ro               0x00000800U
#define SRT_NX90_xmac_other_status_mii2_tx_miif_unfl_ro               11
#define DFLT_VAL_NX90_xmac_other_status_mii2_tx_miif_unfl_ro          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_tx_miif_unfl_ro       0x00000000U
#define MSK_NX90_xmac_other_status_mii2_tx_miif_short_txen_ro         0x00001000U
#define SRT_NX90_xmac_other_status_mii2_tx_miif_short_txen_ro         12
#define DFLT_VAL_NX90_xmac_other_status_mii2_tx_miif_short_txen_ro    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_tx_miif_short_txen_ro 0x00000000U
#define MSK_NX90_xmac_other_status_mii2_rx_err_was_here               0x00002000U
#define SRT_NX90_xmac_other_status_mii2_rx_err_was_here               13
#define DFLT_VAL_NX90_xmac_other_status_mii2_rx_err_was_here          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_rx_err_was_here       0x00000000U
#define MSK_NX90_xmac_other_status_mii2_col_was_here                  0x00004000U
#define SRT_NX90_xmac_other_status_mii2_col_was_here                  14
#define DFLT_VAL_NX90_xmac_other_status_mii2_col_was_here             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_col_was_here          0x00000000U
#define MSK_NX90_xmac_other_status_mii2_crs_was_here                  0x00008000U
#define SRT_NX90_xmac_other_status_mii2_crs_was_here                  15
#define DFLT_VAL_NX90_xmac_other_status_mii2_crs_was_here             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_other_status_mii2_crs_was_here          0x00000000U

/* all used bits of 'NX90_xmac_other_status_mii2': */
#define MSK_USED_BITS_NX90_xmac_other_status_mii2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_mii */
/* => xMAC MII transmit config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_mii            0x00000124U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_mii 0xFF111524U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_mii 0xFF111724U
#define DFLT_VAL_NX90_xmac_config_mii           0x00000000U

#define MSK_NX90_xmac_config_mii_tx_en                            0x00000001U
#define SRT_NX90_xmac_config_mii_tx_en                            0
#define DFLT_VAL_NX90_xmac_config_mii_tx_en                       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_mii_tx_en                    0x00000000U
#define MSK_NX90_xmac_config_mii_tx_err                           0x00000002U
#define SRT_NX90_xmac_config_mii_tx_err                           1
#define DFLT_VAL_NX90_xmac_config_mii_tx_err                      0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_mii_tx_err                   0x00000000U
#define MSK_NX90_xmac_config_mii_txd_oe_switch_with_tx_en         0x00000004U
#define SRT_NX90_xmac_config_mii_txd_oe_switch_with_tx_en         2
#define DFLT_VAL_NX90_xmac_config_mii_txd_oe_switch_with_tx_en    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_mii_txd_oe_switch_with_tx_en 0x00000000U
#define MSK_NX90_xmac_config_mii_data_reserved                    0x000000f8U
#define SRT_NX90_xmac_config_mii_data_reserved                    3
#define DFLT_VAL_NX90_xmac_config_mii_data_reserved               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_mii_data_reserved            0x00000000U

/* all used bits of 'NX90_xmac_config_mii': */
#define MSK_USED_BITS_NX90_xmac_config_mii 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_rx_nibble_fifo */
/* => xMAC RX MII Nibble FIFO config register */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_rx_nibble_fifo            0x00000128U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_rx_nibble_fifo 0xFF111528U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_rx_nibble_fifo 0xFF111728U
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo           0x00001000U

#define MSK_NX90_xmac_config_rx_nibble_fifo_sample_phase              0x00000007U
#define SRT_NX90_xmac_config_rx_nibble_fifo_sample_phase              0
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_sample_phase         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_sample_phase      0x00000000U
#define MSK_NX90_xmac_config_rx_nibble_fifo_delay_rx_data             0x00000008U
#define SRT_NX90_xmac_config_rx_nibble_fifo_delay_rx_data             3
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_delay_rx_data        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_delay_rx_data     0x00000000U
#define MSK_NX90_xmac_config_rx_nibble_fifo_fifo_depth_add            0x00000030U
#define SRT_NX90_xmac_config_rx_nibble_fifo_fifo_depth_add            4
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_fifo_depth_add       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_fifo_depth_add    0x00000000U
#define MSK_NX90_xmac_config_rx_nibble_fifo_fifo_depth                0x000003c0U
#define SRT_NX90_xmac_config_rx_nibble_fifo_fifo_depth                6
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_fifo_depth           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_fifo_depth        0x00000000U
#define MSK_NX90_xmac_config_rx_nibble_fifo_rx_write_phase            0x00000c00U
#define SRT_NX90_xmac_config_rx_nibble_fifo_rx_write_phase            10
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_rx_write_phase       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_rx_write_phase    0x00000000U
#define MSK_NX90_xmac_config_rx_nibble_fifo_rpu_sync_delay            0x00003000U
#define SRT_NX90_xmac_config_rx_nibble_fifo_rpu_sync_delay            12
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_rpu_sync_delay       0x00001000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_rpu_sync_delay    0x00000001U
#define MSK_NX90_xmac_config_rx_nibble_fifo_rx_err_low_active         0x00004000U
#define SRT_NX90_xmac_config_rx_nibble_fifo_rx_err_low_active         14
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_rx_err_low_active    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_rx_err_low_active 0x00000000U
#define MSK_NX90_xmac_config_rx_nibble_fifo_crs_low_active            0x00008000U
#define SRT_NX90_xmac_config_rx_nibble_fifo_crs_low_active            15
#define DFLT_VAL_NX90_xmac_config_rx_nibble_fifo_crs_low_active       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_rx_nibble_fifo_crs_low_active    0x00000000U

/* all used bits of 'NX90_xmac_config_rx_nibble_fifo': */
#define MSK_USED_BITS_NX90_xmac_config_rx_nibble_fifo 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_tx_nibble_fifo */
/* => xMAC TX NII Nibble FIFO config register */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_tx_nibble_fifo            0x0000012CU
#define Adr_NX90_xc0_xmac0_regs_xmac_config_tx_nibble_fifo 0xFF11152CU
#define Adr_NX90_xc0_xmac1_regs_xmac_config_tx_nibble_fifo 0xFF11172CU
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo           0x00000000U

#define MSK_NX90_xmac_config_tx_nibble_fifo_output_phase                 0x00000007U
#define SRT_NX90_xmac_config_tx_nibble_fifo_output_phase                 0
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_output_phase            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_output_phase         0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_fifo_depth_add               0x00000018U
#define SRT_NX90_xmac_config_tx_nibble_fifo_fifo_depth_add               3
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_fifo_depth_add          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_fifo_depth_add       0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_fifo_depth                   0x000001e0U
#define SRT_NX90_xmac_config_tx_nibble_fifo_fifo_depth                   5
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_fifo_depth              0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_fifo_depth           0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_tx_read_phase                0x00000600U
#define SRT_NX90_xmac_config_tx_nibble_fifo_tx_read_phase                9
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_tx_read_phase           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_tx_read_phase        0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_tpu_sync_delay               0x00001800U
#define SRT_NX90_xmac_config_tx_nibble_fifo_tpu_sync_delay               11
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_tpu_sync_delay          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_tpu_sync_delay       0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_outputedge_tx_clk            0x00002000U
#define SRT_NX90_xmac_config_tx_nibble_fifo_outputedge_tx_clk            13
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_outputedge_tx_clk       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_outputedge_tx_clk    0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_send_at_tx_count_pos         0x00004000U
#define SRT_NX90_xmac_config_tx_nibble_fifo_send_at_tx_count_pos         14
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_send_at_tx_count_pos    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_send_at_tx_count_pos 0x00000000U
#define MSK_NX90_xmac_config_tx_nibble_fifo_col_low_active               0x00008000U
#define SRT_NX90_xmac_config_tx_nibble_fifo_col_low_active               15
#define DFLT_VAL_NX90_xmac_config_tx_nibble_fifo_col_low_active          0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_tx_nibble_fifo_col_low_active       0x00000000U

/* all used bits of 'NX90_xmac_config_tx_nibble_fifo': */
#define MSK_USED_BITS_NX90_xmac_config_tx_nibble_fifo 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_sbu */
/* => xMAC Config Register for SBU */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_sbu            0x00000130U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_sbu 0xFF111530U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_sbu 0xFF111730U
#define DFLT_VAL_NX90_xmac_config_sbu           0x00000080U

#define MSK_NX90_xmac_config_sbu_sync_to_eclk                         0x00000001U
#define SRT_NX90_xmac_config_sbu_sync_to_eclk                         0
#define DFLT_VAL_NX90_xmac_config_sbu_sync_to_eclk                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_sync_to_eclk                 0x00000000U
#define MSK_NX90_xmac_config_sbu_sync_to_bitstream                    0x00000002U
#define SRT_NX90_xmac_config_sbu_sync_to_bitstream                    1
#define DFLT_VAL_NX90_xmac_config_sbu_sync_to_bitstream               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_sync_to_bitstream            0x00000000U
#define MSK_NX90_xmac_config_sbu_sync_to_posedge                      0x00000004U
#define SRT_NX90_xmac_config_sbu_sync_to_posedge                      2
#define DFLT_VAL_NX90_xmac_config_sbu_sync_to_posedge                 0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_sync_to_posedge              0x00000000U
#define MSK_NX90_xmac_config_sbu_sync_to_negedge                      0x00000008U
#define SRT_NX90_xmac_config_sbu_sync_to_negedge                      3
#define DFLT_VAL_NX90_xmac_config_sbu_sync_to_negedge                 0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_sync_to_negedge              0x00000000U
#define MSK_NX90_xmac_config_sbu_count_modulo                         0x00000010U
#define SRT_NX90_xmac_config_sbu_count_modulo                         4
#define DFLT_VAL_NX90_xmac_config_sbu_count_modulo                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_count_modulo                 0x00000000U
#define MSK_NX90_xmac_config_sbu_invert_bit                           0x00000020U
#define SRT_NX90_xmac_config_sbu_invert_bit                           5
#define DFLT_VAL_NX90_xmac_config_sbu_invert_bit                      0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_invert_bit                   0x00000000U
#define MSK_NX90_xmac_config_sbu_predivide_clk                        0x00000040U
#define SRT_NX90_xmac_config_sbu_predivide_clk                        6
#define DFLT_VAL_NX90_xmac_config_sbu_predivide_clk                   0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_predivide_clk                0x00000000U
#define MSK_NX90_xmac_config_sbu_phy_led_en                           0x00000080U
#define SRT_NX90_xmac_config_sbu_phy_led_en                           7
#define DFLT_VAL_NX90_xmac_config_sbu_phy_led_en                      0x00000080U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_phy_led_en                   0x00000001U
#define MSK_NX90_xmac_config_sbu_ext_mode                             0x00000300U
#define SRT_NX90_xmac_config_sbu_ext_mode                             8
#define DFLT_VAL_NX90_xmac_config_sbu_ext_mode                        0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_ext_mode                     0x00000000U
#define MSK_NX90_xmac_config_sbu_drop_bit_at_sync                     0x00000400U
#define SRT_NX90_xmac_config_sbu_drop_bit_at_sync                     10
#define DFLT_VAL_NX90_xmac_config_sbu_drop_bit_at_sync                0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_drop_bit_at_sync             0x00000000U
#define MSK_NX90_xmac_config_sbu_disable_sync_in_sample_phase         0x00000800U
#define SRT_NX90_xmac_config_sbu_disable_sync_in_sample_phase         11
#define DFLT_VAL_NX90_xmac_config_sbu_disable_sync_in_sample_phase    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_disable_sync_in_sample_phase 0x00000000U
#define MSK_NX90_xmac_config_sbu_filter_sample_rate                   0x00007000U
#define SRT_NX90_xmac_config_sbu_filter_sample_rate                   12
#define DFLT_VAL_NX90_xmac_config_sbu_filter_sample_rate              0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu_filter_sample_rate           0x00000000U

/* all used bits of 'NX90_xmac_config_sbu': */
#define MSK_USED_BITS_NX90_xmac_config_sbu 0x00007fffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_sbu2 */
/* => xMAC 2nd Config Register for SBU */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_sbu2            0x00000134U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_sbu2 0xFF111534U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_sbu2 0xFF111734U
#define DFLT_VAL_NX90_xmac_config_sbu2           0x00000008U

#define MSK_NX90_xmac_config_sbu2_rx_nof_bits                    0x0000000fU
#define SRT_NX90_xmac_config_sbu2_rx_nof_bits                    0
#define DFLT_VAL_NX90_xmac_config_sbu2_rx_nof_bits               0x00000008U
#define DFLT_BF_VAL_NX90_xmac_config_sbu2_rx_nof_bits            0x00000008U
#define MSK_NX90_xmac_config_sbu2_rx_shift_lr                    0x00000010U
#define SRT_NX90_xmac_config_sbu2_rx_shift_lr                    4
#define DFLT_VAL_NX90_xmac_config_sbu2_rx_shift_lr               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu2_rx_shift_lr            0x00000000U
#define MSK_NX90_xmac_config_sbu2_rx_count_stops_at_ovfl         0x00000020U
#define SRT_NX90_xmac_config_sbu2_rx_count_stops_at_ovfl         5
#define DFLT_VAL_NX90_xmac_config_sbu2_rx_count_stops_at_ovfl    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu2_rx_count_stops_at_ovfl 0x00000000U
#define MSK_NX90_xmac_config_sbu2_urx_write_odd                  0x00000040U
#define SRT_NX90_xmac_config_sbu2_urx_write_odd                  6
#define DFLT_VAL_NX90_xmac_config_sbu2_urx_write_odd             0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu2_urx_write_odd          0x00000000U
#define MSK_NX90_xmac_config_sbu2_rx_clk_phase                   0x00000380U
#define SRT_NX90_xmac_config_sbu2_rx_clk_phase                   7
#define DFLT_VAL_NX90_xmac_config_sbu2_rx_clk_phase              0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_sbu2_rx_clk_phase           0x00000000U

/* all used bits of 'NX90_xmac_config_sbu2': */
#define MSK_USED_BITS_NX90_xmac_config_sbu2 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register xmac_sbu_rate_mul_add */
/* => xMAC SBU rate_mul_add: */
/*    Value added each cc to Rate Multiplier. */
/*    rate_mul_add = eclk / clk * 65536 */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sbu_rate_mul_add            0x00000138U
#define Adr_NX90_xc0_xmac0_regs_xmac_sbu_rate_mul_add 0xFF111538U
#define Adr_NX90_xc0_xmac1_regs_xmac_sbu_rate_mul_add 0xFF111738U
#define DFLT_VAL_NX90_xmac_sbu_rate_mul_add           0x00000001U

#define MSK_NX90_xmac_sbu_rate_mul_add_rate_mul_add         0x0000ffffU
#define SRT_NX90_xmac_sbu_rate_mul_add_rate_mul_add         0
#define DFLT_VAL_NX90_xmac_sbu_rate_mul_add_rate_mul_add    0x00000001U
#define DFLT_BF_VAL_NX90_xmac_sbu_rate_mul_add_rate_mul_add 0x00000001U

/* all used bits of 'NX90_xmac_sbu_rate_mul_add': */
#define MSK_USED_BITS_NX90_xmac_sbu_rate_mul_add 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sbu_rate_mul_start */
/* => xMAC SBU rate_mul_start */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sbu_rate_mul_start            0x0000013CU
#define Adr_NX90_xc0_xmac0_regs_xmac_sbu_rate_mul_start 0xFF11153CU
#define Adr_NX90_xc0_xmac1_regs_xmac_sbu_rate_mul_start 0xFF11173CU
#define DFLT_VAL_NX90_xmac_sbu_rate_mul_start           0x00000000U

#define MSK_NX90_xmac_sbu_rate_mul_start_rate_mul_start         0x0000ffffU
#define SRT_NX90_xmac_sbu_rate_mul_start_rate_mul_start         0
#define DFLT_VAL_NX90_xmac_sbu_rate_mul_start_rate_mul_start    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_sbu_rate_mul_start_rate_mul_start 0x00000000U

/* all used bits of 'NX90_xmac_sbu_rate_mul_start': */
#define MSK_USED_BITS_NX90_xmac_sbu_rate_mul_start 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_sbu_rate_mul */
/* => xMAC SBU rate_mul */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_sbu_rate_mul            0x00000140U
#define Adr_NX90_xc0_xmac0_regs_xmac_sbu_rate_mul 0xFF111540U
#define Adr_NX90_xc0_xmac1_regs_xmac_sbu_rate_mul 0xFF111740U
#define DFLT_VAL_NX90_xmac_sbu_rate_mul           0x0000ffffU

#define MSK_NX90_xmac_sbu_rate_mul_rate_mul         0x0000ffffU
#define SRT_NX90_xmac_sbu_rate_mul_rate_mul         0
#define DFLT_VAL_NX90_xmac_sbu_rate_mul_rate_mul    0x0000ffffU
#define DFLT_BF_VAL_NX90_xmac_sbu_rate_mul_rate_mul 0x0000ffffU

/* all used bits of 'NX90_xmac_sbu_rate_mul': */
#define MSK_USED_BITS_NX90_xmac_sbu_rate_mul 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_start_sample_pos */
/* => xMAC SBU start_sample_pos */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_start_sample_pos            0x00000144U
#define Adr_NX90_xc0_xmac0_regs_xmac_start_sample_pos 0xFF111544U
#define Adr_NX90_xc0_xmac1_regs_xmac_start_sample_pos 0xFF111744U
#define DFLT_VAL_NX90_xmac_start_sample_pos           0x00000000U

#define MSK_NX90_xmac_start_sample_pos_start_sample_pos         0x0000ffffU
#define SRT_NX90_xmac_start_sample_pos_start_sample_pos         0
#define DFLT_VAL_NX90_xmac_start_sample_pos_start_sample_pos    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_start_sample_pos_start_sample_pos 0x00000000U

/* all used bits of 'NX90_xmac_start_sample_pos': */
#define MSK_USED_BITS_NX90_xmac_start_sample_pos 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_stop_sample_pos */
/* => xMAC SBU stop_sample_pos */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_stop_sample_pos            0x00000148U
#define Adr_NX90_xc0_xmac0_regs_xmac_stop_sample_pos 0xFF111548U
#define Adr_NX90_xc0_xmac1_regs_xmac_stop_sample_pos 0xFF111748U
#define DFLT_VAL_NX90_xmac_stop_sample_pos           0x00000000U

#define MSK_NX90_xmac_stop_sample_pos_stop_sample_pos         0x0000ffffU
#define SRT_NX90_xmac_stop_sample_pos_stop_sample_pos         0
#define DFLT_VAL_NX90_xmac_stop_sample_pos_stop_sample_pos    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_stop_sample_pos_stop_sample_pos 0x00000000U

/* all used bits of 'NX90_xmac_stop_sample_pos': */
#define MSK_USED_BITS_NX90_xmac_stop_sample_pos 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_obu */
/* => xMAC Config Register for OBU */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_obu            0x0000014CU
#define Adr_NX90_xc0_xmac0_regs_xmac_config_obu 0xFF11154CU
#define Adr_NX90_xc0_xmac1_regs_xmac_config_obu 0xFF11174CU
#define DFLT_VAL_NX90_xmac_config_obu           0x00000180U

#define MSK_NX90_xmac_config_obu_sync_to_eclk                         0x00000001U
#define SRT_NX90_xmac_config_obu_sync_to_eclk                         0
#define DFLT_VAL_NX90_xmac_config_obu_sync_to_eclk                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_sync_to_eclk                 0x00000000U
#define MSK_NX90_xmac_config_obu_sync_to_bitstream                    0x00000002U
#define SRT_NX90_xmac_config_obu_sync_to_bitstream                    1
#define DFLT_VAL_NX90_xmac_config_obu_sync_to_bitstream               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_sync_to_bitstream            0x00000000U
#define MSK_NX90_xmac_config_obu_sync_to_posedge                      0x00000004U
#define SRT_NX90_xmac_config_obu_sync_to_posedge                      2
#define DFLT_VAL_NX90_xmac_config_obu_sync_to_posedge                 0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_sync_to_posedge              0x00000000U
#define MSK_NX90_xmac_config_obu_sync_to_negedge                      0x00000008U
#define SRT_NX90_xmac_config_obu_sync_to_negedge                      3
#define DFLT_VAL_NX90_xmac_config_obu_sync_to_negedge                 0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_sync_to_negedge              0x00000000U
#define MSK_NX90_xmac_config_obu_count_modulo                         0x00000010U
#define SRT_NX90_xmac_config_obu_count_modulo                         4
#define DFLT_VAL_NX90_xmac_config_obu_count_modulo                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_count_modulo                 0x00000000U
#define MSK_NX90_xmac_config_obu_invert_tx_oe                         0x00000020U
#define SRT_NX90_xmac_config_obu_invert_tx_oe                         5
#define DFLT_VAL_NX90_xmac_config_obu_invert_tx_oe                    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_invert_tx_oe                 0x00000000U
#define MSK_NX90_xmac_config_obu_predivide_clk                        0x00000040U
#define SRT_NX90_xmac_config_obu_predivide_clk                        6
#define DFLT_VAL_NX90_xmac_config_obu_predivide_clk                   0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_predivide_clk                0x00000000U
#define MSK_NX90_xmac_config_obu_tx_three_state                       0x00000080U
#define SRT_NX90_xmac_config_obu_tx_three_state                       7
#define DFLT_VAL_NX90_xmac_config_obu_tx_three_state                  0x00000080U
#define DFLT_BF_VAL_NX90_xmac_config_obu_tx_three_state               0x00000001U
#define MSK_NX90_xmac_config_obu_eclk_noe                             0x00000100U
#define SRT_NX90_xmac_config_obu_eclk_noe                             8
#define DFLT_VAL_NX90_xmac_config_obu_eclk_noe                        0x00000100U
#define DFLT_BF_VAL_NX90_xmac_config_obu_eclk_noe                     0x00000001U
#define MSK_NX90_xmac_config_obu_sample_bitstream_eclk                0x00000200U
#define SRT_NX90_xmac_config_obu_sample_bitstream_eclk                9
#define DFLT_VAL_NX90_xmac_config_obu_sample_bitstream_eclk           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_sample_bitstream_eclk        0x00000000U
#define MSK_NX90_xmac_config_obu_repeat_bit_at_sync                   0x00000400U
#define SRT_NX90_xmac_config_obu_repeat_bit_at_sync                   10
#define DFLT_VAL_NX90_xmac_config_obu_repeat_bit_at_sync              0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_repeat_bit_at_sync           0x00000000U
#define MSK_NX90_xmac_config_obu_disable_sync_in_output_phase         0x00000800U
#define SRT_NX90_xmac_config_obu_disable_sync_in_output_phase         11
#define DFLT_VAL_NX90_xmac_config_obu_disable_sync_in_output_phase    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu_disable_sync_in_output_phase 0x00000000U

/* all used bits of 'NX90_xmac_config_obu': */
#define MSK_USED_BITS_NX90_xmac_config_obu 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register xmac_config_obu2 */
/* => xMAC 2nd Config Register for OBU */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_config_obu2            0x00000150U
#define Adr_NX90_xc0_xmac0_regs_xmac_config_obu2 0xFF111550U
#define Adr_NX90_xc0_xmac1_regs_xmac_config_obu2 0xFF111750U
#define DFLT_VAL_NX90_xmac_config_obu2           0x000007c8U

#define MSK_NX90_xmac_config_obu2_tx_nof_bits                    0x0000000fU
#define SRT_NX90_xmac_config_obu2_tx_nof_bits                    0
#define DFLT_VAL_NX90_xmac_config_obu2_tx_nof_bits               0x00000008U
#define DFLT_BF_VAL_NX90_xmac_config_obu2_tx_nof_bits            0x00000008U
#define MSK_NX90_xmac_config_obu2_tx_shift_lr                    0x00000010U
#define SRT_NX90_xmac_config_obu2_tx_shift_lr                    4
#define DFLT_VAL_NX90_xmac_config_obu2_tx_shift_lr               0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu2_tx_shift_lr            0x00000000U
#define MSK_NX90_xmac_config_obu2_tx_count_stops_at_ovfl         0x00000020U
#define SRT_NX90_xmac_config_obu2_tx_count_stops_at_ovfl         5
#define DFLT_VAL_NX90_xmac_config_obu2_tx_count_stops_at_ovfl    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu2_tx_count_stops_at_ovfl 0x00000000U
#define MSK_NX90_xmac_config_obu2_utx_watermark                  0x000007c0U
#define SRT_NX90_xmac_config_obu2_utx_watermark                  6
#define DFLT_VAL_NX90_xmac_config_obu2_utx_watermark             0x000007c0U
#define DFLT_BF_VAL_NX90_xmac_config_obu2_utx_watermark          0x0000001fU
#define MSK_NX90_xmac_config_obu2_tx_clk_phase                   0x00003800U
#define SRT_NX90_xmac_config_obu2_tx_clk_phase                   11
#define DFLT_VAL_NX90_xmac_config_obu2_tx_clk_phase              0x00000000U
#define DFLT_BF_VAL_NX90_xmac_config_obu2_tx_clk_phase           0x00000000U

/* all used bits of 'NX90_xmac_config_obu2': */
#define MSK_USED_BITS_NX90_xmac_config_obu2 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register xmac_obu_rate_mul_add */
/* => xMAC OBU rate_mul_add: */
/*    Value added each cc to Rate Multiplier. */
/*    rate_mul_add = eclk / clk * 65536 */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_obu_rate_mul_add            0x00000154U
#define Adr_NX90_xc0_xmac0_regs_xmac_obu_rate_mul_add 0xFF111554U
#define Adr_NX90_xc0_xmac1_regs_xmac_obu_rate_mul_add 0xFF111754U
#define DFLT_VAL_NX90_xmac_obu_rate_mul_add           0x00000001U

#define MSK_NX90_xmac_obu_rate_mul_add_rate_mul_add         0x0000ffffU
#define SRT_NX90_xmac_obu_rate_mul_add_rate_mul_add         0
#define DFLT_VAL_NX90_xmac_obu_rate_mul_add_rate_mul_add    0x00000001U
#define DFLT_BF_VAL_NX90_xmac_obu_rate_mul_add_rate_mul_add 0x00000001U

/* all used bits of 'NX90_xmac_obu_rate_mul_add': */
#define MSK_USED_BITS_NX90_xmac_obu_rate_mul_add 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_obu_rate_mul_start */
/* => xMAC OBU rate_mul_start */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_obu_rate_mul_start            0x00000158U
#define Adr_NX90_xc0_xmac0_regs_xmac_obu_rate_mul_start 0xFF111558U
#define Adr_NX90_xc0_xmac1_regs_xmac_obu_rate_mul_start 0xFF111758U
#define DFLT_VAL_NX90_xmac_obu_rate_mul_start           0x00000000U

#define MSK_NX90_xmac_obu_rate_mul_start_rate_mul_start         0x0000ffffU
#define SRT_NX90_xmac_obu_rate_mul_start_rate_mul_start         0
#define DFLT_VAL_NX90_xmac_obu_rate_mul_start_rate_mul_start    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_obu_rate_mul_start_rate_mul_start 0x00000000U

/* all used bits of 'NX90_xmac_obu_rate_mul_start': */
#define MSK_USED_BITS_NX90_xmac_obu_rate_mul_start 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_obu_rate_mul */
/* => xMAC OBU rate_mul */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_obu_rate_mul            0x0000015CU
#define Adr_NX90_xc0_xmac0_regs_xmac_obu_rate_mul 0xFF11155CU
#define Adr_NX90_xc0_xmac1_regs_xmac_obu_rate_mul 0xFF11175CU
#define DFLT_VAL_NX90_xmac_obu_rate_mul           0x0000ffffU

#define MSK_NX90_xmac_obu_rate_mul_rate_mul         0x0000ffffU
#define SRT_NX90_xmac_obu_rate_mul_rate_mul         0
#define DFLT_VAL_NX90_xmac_obu_rate_mul_rate_mul    0x0000ffffU
#define DFLT_BF_VAL_NX90_xmac_obu_rate_mul_rate_mul 0x0000ffffU

/* all used bits of 'NX90_xmac_obu_rate_mul': */
#define MSK_USED_BITS_NX90_xmac_obu_rate_mul 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_start_trans_pos */
/* => xMAC SBU start_trans_pos */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_start_trans_pos            0x00000160U
#define Adr_NX90_xc0_xmac0_regs_xmac_start_trans_pos 0xFF111560U
#define Adr_NX90_xc0_xmac1_regs_xmac_start_trans_pos 0xFF111760U
#define DFLT_VAL_NX90_xmac_start_trans_pos           0x00000000U

#define MSK_NX90_xmac_start_trans_pos_start_trans_pos         0x0000ffffU
#define SRT_NX90_xmac_start_trans_pos_start_trans_pos         0
#define DFLT_VAL_NX90_xmac_start_trans_pos_start_trans_pos    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_start_trans_pos_start_trans_pos 0x00000000U

/* all used bits of 'NX90_xmac_start_trans_pos': */
#define MSK_USED_BITS_NX90_xmac_start_trans_pos 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_stop_trans_pos */
/* => xMAC SBU stop_trans_pos */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_stop_trans_pos            0x00000164U
#define Adr_NX90_xc0_xmac0_regs_xmac_stop_trans_pos 0xFF111564U
#define Adr_NX90_xc0_xmac1_regs_xmac_stop_trans_pos 0xFF111764U
#define DFLT_VAL_NX90_xmac_stop_trans_pos           0x00000000U

#define MSK_NX90_xmac_stop_trans_pos_stop_trans_pos         0x0000ffffU
#define SRT_NX90_xmac_stop_trans_pos_stop_trans_pos         0
#define DFLT_VAL_NX90_xmac_stop_trans_pos_stop_trans_pos    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_stop_trans_pos_stop_trans_pos 0x00000000U

/* all used bits of 'NX90_xmac_stop_trans_pos': */
#define MSK_USED_BITS_NX90_xmac_stop_trans_pos 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpu_count1 */
/* => xMAC RPU Counter 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpu_count1            0x00000168U
#define Adr_NX90_xc0_xmac0_regs_xmac_rpu_count1 0xFF111568U
#define Adr_NX90_xc0_xmac1_regs_xmac_rpu_count1 0xFF111768U
#define DFLT_VAL_NX90_xmac_rpu_count1           0x00000000U

#define MSK_NX90_xmac_rpu_count1_rpu_count1         0x0000ffffU
#define SRT_NX90_xmac_rpu_count1_rpu_count1         0
#define DFLT_VAL_NX90_xmac_rpu_count1_rpu_count1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpu_count1_rpu_count1 0x00000000U

/* all used bits of 'NX90_xmac_rpu_count1': */
#define MSK_USED_BITS_NX90_xmac_rpu_count1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpu_count2 */
/* => xMAC RPU Counter 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpu_count2            0x0000016CU
#define Adr_NX90_xc0_xmac0_regs_xmac_rpu_count2 0xFF11156CU
#define Adr_NX90_xc0_xmac1_regs_xmac_rpu_count2 0xFF11176CU
#define DFLT_VAL_NX90_xmac_rpu_count2           0x00000000U

#define MSK_NX90_xmac_rpu_count2_rpu_count2         0x0000ffffU
#define SRT_NX90_xmac_rpu_count2_rpu_count2         0
#define DFLT_VAL_NX90_xmac_rpu_count2_rpu_count2    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpu_count2_rpu_count2 0x00000000U

/* all used bits of 'NX90_xmac_rpu_count2': */
#define MSK_USED_BITS_NX90_xmac_rpu_count2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tpu_count1 */
/* => xMAC TPU Counter 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpu_count1            0x00000170U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpu_count1 0xFF111570U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpu_count1 0xFF111770U
#define DFLT_VAL_NX90_xmac_tpu_count1           0x00000000U

#define MSK_NX90_xmac_tpu_count1_tpu_count1         0x0000ffffU
#define SRT_NX90_xmac_tpu_count1_tpu_count1         0
#define DFLT_VAL_NX90_xmac_tpu_count1_tpu_count1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpu_count1_tpu_count1 0x00000000U

/* all used bits of 'NX90_xmac_tpu_count1': */
#define MSK_USED_BITS_NX90_xmac_tpu_count1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tpu_count2 */
/* => xMAC TPU Counter 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpu_count2            0x00000174U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpu_count2 0xFF111574U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpu_count2 0xFF111774U
#define DFLT_VAL_NX90_xmac_tpu_count2           0x00000000U

#define MSK_NX90_xmac_tpu_count2_tpu_count2         0x0000ffffU
#define SRT_NX90_xmac_tpu_count2_tpu_count2         0
#define DFLT_VAL_NX90_xmac_tpu_count2_tpu_count2    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpu_count2_tpu_count2 0x00000000U

/* all used bits of 'NX90_xmac_tpu_count2': */
#define MSK_USED_BITS_NX90_xmac_tpu_count2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_count */
/* => xMAC RX Counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_count            0x00000178U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_count 0xFF111578U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_count 0xFF111778U
#define DFLT_VAL_NX90_xmac_rx_count           0x00000000U

#define MSK_NX90_xmac_rx_count_rx_count         0x0000ffffU
#define SRT_NX90_xmac_rx_count_rx_count         0
#define DFLT_VAL_NX90_xmac_rx_count_rx_count    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_count_rx_count 0x00000000U

/* all used bits of 'NX90_xmac_rx_count': */
#define MSK_USED_BITS_NX90_xmac_rx_count 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_count */
/* => xMAC TX Counter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_count            0x0000017CU
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_count 0xFF11157CU
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_count 0xFF11177CU
#define DFLT_VAL_NX90_xmac_tx_count           0x00000000U

#define MSK_NX90_xmac_tx_count_tx_count         0x0000ffffU
#define SRT_NX90_xmac_tx_count_tx_count         0
#define DFLT_VAL_NX90_xmac_tx_count_tx_count    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_count_tx_count 0x00000000U

/* all used bits of 'NX90_xmac_tx_count': */
#define MSK_USED_BITS_NX90_xmac_tx_count 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpm_mask0 */
/* => xMAC Receive Pattern Match Mask 0 Register: */
/*    Defines, which bits are compared between xmac_rpm_val0 and xmac_rx. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpm_mask0            0x00000180U
#define Adr_NX90_xc0_xmac0_regs_xmac_rpm_mask0 0xFF111580U
#define Adr_NX90_xc0_xmac1_regs_xmac_rpm_mask0 0xFF111780U
#define DFLT_VAL_NX90_xmac_rpm_mask0           0x00000000U

#define MSK_NX90_xmac_rpm_mask0_pm_mask0         0x0000ffffU
#define SRT_NX90_xmac_rpm_mask0_pm_mask0         0
#define DFLT_VAL_NX90_xmac_rpm_mask0_pm_mask0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpm_mask0_pm_mask0 0x00000000U

/* all used bits of 'NX90_xmac_rpm_mask0': */
#define MSK_USED_BITS_NX90_xmac_rpm_mask0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpm_val0 */
/* => xMAC Receive Pattern Match Value 0 Register: */
/*    Defines value of bits to be compared with xmac_rx. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpm_val0            0x00000184U
#define Adr_NX90_xc0_xmac0_regs_xmac_rpm_val0 0xFF111584U
#define Adr_NX90_xc0_xmac1_regs_xmac_rpm_val0 0xFF111784U
#define DFLT_VAL_NX90_xmac_rpm_val0           0x00000000U

#define MSK_NX90_xmac_rpm_val0_pm_val0         0x0000ffffU
#define SRT_NX90_xmac_rpm_val0_pm_val0         0
#define DFLT_VAL_NX90_xmac_rpm_val0_pm_val0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpm_val0_pm_val0 0x00000000U

/* all used bits of 'NX90_xmac_rpm_val0': */
#define MSK_USED_BITS_NX90_xmac_rpm_val0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpm_mask1 */
/* => xMAC Receive Pattern Match Mask 1 Register: */
/*    Defines, which bits are compared between xmac_rpm_val1 and xmac_rx */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpm_mask1            0x00000188U
#define Adr_NX90_xc0_xmac0_regs_xmac_rpm_mask1 0xFF111588U
#define Adr_NX90_xc0_xmac1_regs_xmac_rpm_mask1 0xFF111788U
#define DFLT_VAL_NX90_xmac_rpm_mask1           0x00000000U

#define MSK_NX90_xmac_rpm_mask1_pm_mask1         0x0000ffffU
#define SRT_NX90_xmac_rpm_mask1_pm_mask1         0
#define DFLT_VAL_NX90_xmac_rpm_mask1_pm_mask1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpm_mask1_pm_mask1 0x00000000U

/* all used bits of 'NX90_xmac_rpm_mask1': */
#define MSK_USED_BITS_NX90_xmac_rpm_mask1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rpm_val1 */
/* => xMAC Receive Pattern Match Value 1 Register: */
/*    Defines value of bits to be compared with xmac_rx. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rpm_val1            0x0000018CU
#define Adr_NX90_xc0_xmac0_regs_xmac_rpm_val1 0xFF11158CU
#define Adr_NX90_xc0_xmac1_regs_xmac_rpm_val1 0xFF11178CU
#define DFLT_VAL_NX90_xmac_rpm_val1           0x00000000U

#define MSK_NX90_xmac_rpm_val1_pm_val1         0x0000ffffU
#define SRT_NX90_xmac_rpm_val1_pm_val1         0
#define DFLT_VAL_NX90_xmac_rpm_val1_pm_val1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rpm_val1_pm_val1 0x00000000U

/* all used bits of 'NX90_xmac_rpm_val1': */
#define MSK_USED_BITS_NX90_xmac_rpm_val1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tpm_mask0 */
/* => xMAC Transmit Pattern Match Mask 0 Register: */
/*    Defines, which bits are compared between xmac_tpm_val0 and xmac_tx_sent. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpm_mask0            0x00000190U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpm_mask0 0xFF111590U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpm_mask0 0xFF111790U
#define DFLT_VAL_NX90_xmac_tpm_mask0           0x00000000U

#define MSK_NX90_xmac_tpm_mask0_pm_mask0         0x0000ffffU
#define SRT_NX90_xmac_tpm_mask0_pm_mask0         0
#define DFLT_VAL_NX90_xmac_tpm_mask0_pm_mask0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpm_mask0_pm_mask0 0x00000000U

/* all used bits of 'NX90_xmac_tpm_mask0': */
#define MSK_USED_BITS_NX90_xmac_tpm_mask0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tpm_val0 */
/* => xMAC Transmit Pattern Match Value 0 Register: */
/*    Defines value of bits to be compared with xmac_tx_sent. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpm_val0            0x00000194U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpm_val0 0xFF111594U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpm_val0 0xFF111794U
#define DFLT_VAL_NX90_xmac_tpm_val0           0x00000000U

#define MSK_NX90_xmac_tpm_val0_pm_val0         0x0000ffffU
#define SRT_NX90_xmac_tpm_val0_pm_val0         0
#define DFLT_VAL_NX90_xmac_tpm_val0_pm_val0    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpm_val0_pm_val0 0x00000000U

/* all used bits of 'NX90_xmac_tpm_val0': */
#define MSK_USED_BITS_NX90_xmac_tpm_val0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tpm_mask1 */
/* => xMAC Transmit Pattern Match Mask 1 Register: */
/*    Defines, which bits are compared between xmac_tpm_val1 and xmac_tx_sent. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpm_mask1            0x00000198U
#define Adr_NX90_xc0_xmac0_regs_xmac_tpm_mask1 0xFF111598U
#define Adr_NX90_xc0_xmac1_regs_xmac_tpm_mask1 0xFF111798U
#define DFLT_VAL_NX90_xmac_tpm_mask1           0x00000000U

#define MSK_NX90_xmac_tpm_mask1_pm_mask1         0x0000ffffU
#define SRT_NX90_xmac_tpm_mask1_pm_mask1         0
#define DFLT_VAL_NX90_xmac_tpm_mask1_pm_mask1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpm_mask1_pm_mask1 0x00000000U

/* all used bits of 'NX90_xmac_tpm_mask1': */
#define MSK_USED_BITS_NX90_xmac_tpm_mask1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tpm_val1 */
/* => xMAC Transmit Pattern Match Value 1 Register: */
/*    Defines value of bits to be compared with xmac_tx_sent. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tpm_val1            0x0000019CU
#define Adr_NX90_xc0_xmac0_regs_xmac_tpm_val1 0xFF11159CU
#define Adr_NX90_xc0_xmac1_regs_xmac_tpm_val1 0xFF11179CU
#define DFLT_VAL_NX90_xmac_tpm_val1           0x00000000U

#define MSK_NX90_xmac_tpm_val1_pm_val1         0x0000ffffU
#define SRT_NX90_xmac_tpm_val1_pm_val1         0
#define DFLT_VAL_NX90_xmac_tpm_val1_pm_val1    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tpm_val1_pm_val1 0x00000000U

/* all used bits of 'NX90_xmac_tpm_val1': */
#define MSK_USED_BITS_NX90_xmac_tpm_val1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc32_l */
/* => xMAC RX CRC32 lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc32_l            0x000001C0U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc32_l 0xFF1115C0U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc32_l 0xFF1117C0U
#define DFLT_VAL_NX90_xmac_rx_crc32_l           0x00000000U

#define MSK_NX90_xmac_rx_crc32_l_rx_crc32_l         0x0000ffffU
#define SRT_NX90_xmac_rx_crc32_l_rx_crc32_l         0
#define DFLT_VAL_NX90_xmac_rx_crc32_l_rx_crc32_l    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_l_rx_crc32_l 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc32_l': */
#define MSK_USED_BITS_NX90_xmac_rx_crc32_l 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc32_h */
/* => xMAC RX CRC32 upper part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc32_h            0x000001C4U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc32_h 0xFF1115C4U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc32_h 0xFF1117C4U
#define DFLT_VAL_NX90_xmac_rx_crc32_h           0x00000000U

#define MSK_NX90_xmac_rx_crc32_h_rx_crc32_h         0x0000ffffU
#define SRT_NX90_xmac_rx_crc32_h_rx_crc32_h         0
#define DFLT_VAL_NX90_xmac_rx_crc32_h_rx_crc32_h    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_h_rx_crc32_h 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc32_h': */
#define MSK_USED_BITS_NX90_xmac_rx_crc32_h 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc32_cfg */
/* => xMAC RX CRC32 Config Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc32_cfg            0x000001C8U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc32_cfg 0xFF1115C8U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc32_cfg 0xFF1117C8U
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg           0x00000000U

#define MSK_NX90_xmac_rx_crc32_cfg_shift_right         0x00000001U
#define SRT_NX90_xmac_rx_crc32_cfg_shift_right         0
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_shift_right    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_shift_right 0x00000000U
#define MSK_NX90_xmac_rx_crc32_cfg_zero                0x00000002U
#define SRT_NX90_xmac_rx_crc32_cfg_zero                1
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_zero           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_zero        0x00000000U
#define MSK_NX90_xmac_rx_crc32_cfg_invert              0x00000004U
#define SRT_NX90_xmac_rx_crc32_cfg_invert              2
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_invert         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_invert      0x00000000U
#define MSK_NX90_xmac_rx_crc32_cfg_nof_bits            0x00000300U
#define SRT_NX90_xmac_rx_crc32_cfg_nof_bits            8
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_nof_bits       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_nof_bits    0x00000000U
#define MSK_NX90_xmac_rx_crc32_cfg_direct_div          0x00000400U
#define SRT_NX90_xmac_rx_crc32_cfg_direct_div          10
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_direct_div     0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_direct_div  0x00000000U
#define MSK_NX90_xmac_rx_crc32_cfg_endian              0x00000800U
#define SRT_NX90_xmac_rx_crc32_cfg_endian              11
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_endian         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_endian      0x00000000U
#define MSK_NX90_xmac_rx_crc32_cfg_swap_output         0x00001000U
#define SRT_NX90_xmac_rx_crc32_cfg_swap_output         12
#define DFLT_VAL_NX90_xmac_rx_crc32_cfg_swap_output    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc32_cfg_swap_output 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc32_cfg': */
#define MSK_USED_BITS_NX90_xmac_rx_crc32_cfg 0x00001f07U

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc32_l */
/* => xMAC TX CRC32 lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc32_l            0x000001CCU
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc32_l 0xFF1115CCU
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc32_l 0xFF1117CCU
#define DFLT_VAL_NX90_xmac_tx_crc32_l           0x00000000U

#define MSK_NX90_xmac_tx_crc32_l_tx_crc32_l         0x0000ffffU
#define SRT_NX90_xmac_tx_crc32_l_tx_crc32_l         0
#define DFLT_VAL_NX90_xmac_tx_crc32_l_tx_crc32_l    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_l_tx_crc32_l 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc32_l': */
#define MSK_USED_BITS_NX90_xmac_tx_crc32_l 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc32_h */
/* => xMAC TX CRC32 upper part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc32_h            0x000001D0U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc32_h 0xFF1115D0U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc32_h 0xFF1117D0U
#define DFLT_VAL_NX90_xmac_tx_crc32_h           0x00000000U

#define MSK_NX90_xmac_tx_crc32_h_tx_crc32_h         0x0000ffffU
#define SRT_NX90_xmac_tx_crc32_h_tx_crc32_h         0
#define DFLT_VAL_NX90_xmac_tx_crc32_h_tx_crc32_h    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_h_tx_crc32_h 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc32_h': */
#define MSK_USED_BITS_NX90_xmac_tx_crc32_h 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc32_cfg */
/* => xMAC TX CRC32 Config Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc32_cfg            0x000001D4U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc32_cfg 0xFF1115D4U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc32_cfg 0xFF1117D4U
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg           0x00000000U

#define MSK_NX90_xmac_tx_crc32_cfg_shift_right         0x00000001U
#define SRT_NX90_xmac_tx_crc32_cfg_shift_right         0
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_shift_right    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_shift_right 0x00000000U
#define MSK_NX90_xmac_tx_crc32_cfg_zero                0x00000002U
#define SRT_NX90_xmac_tx_crc32_cfg_zero                1
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_zero           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_zero        0x00000000U
#define MSK_NX90_xmac_tx_crc32_cfg_invert              0x00000004U
#define SRT_NX90_xmac_tx_crc32_cfg_invert              2
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_invert         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_invert      0x00000000U
#define MSK_NX90_xmac_tx_crc32_cfg_nof_bits            0x00000300U
#define SRT_NX90_xmac_tx_crc32_cfg_nof_bits            8
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_nof_bits       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_nof_bits    0x00000000U
#define MSK_NX90_xmac_tx_crc32_cfg_direct_div          0x00000400U
#define SRT_NX90_xmac_tx_crc32_cfg_direct_div          10
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_direct_div     0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_direct_div  0x00000000U
#define MSK_NX90_xmac_tx_crc32_cfg_endian              0x00000800U
#define SRT_NX90_xmac_tx_crc32_cfg_endian              11
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_endian         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_endian      0x00000000U
#define MSK_NX90_xmac_tx_crc32_cfg_swap_output         0x00001000U
#define SRT_NX90_xmac_tx_crc32_cfg_swap_output         12
#define DFLT_VAL_NX90_xmac_tx_crc32_cfg_swap_output    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc32_cfg_swap_output 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc32_cfg': */
#define MSK_USED_BITS_NX90_xmac_tx_crc32_cfg 0x00001f07U

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc_polynomial_l */
/* => xMAC RX CRC Polynomial lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc_polynomial_l            0x000001D8U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc_polynomial_l 0xFF1115D8U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc_polynomial_l 0xFF1117D8U
#define DFLT_VAL_NX90_xmac_rx_crc_polynomial_l           0x00000000U

#define MSK_NX90_xmac_rx_crc_polynomial_l_rx_pol_l         0x0000ffffU
#define SRT_NX90_xmac_rx_crc_polynomial_l_rx_pol_l         0
#define DFLT_VAL_NX90_xmac_rx_crc_polynomial_l_rx_pol_l    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_polynomial_l_rx_pol_l 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc_polynomial_l': */
#define MSK_USED_BITS_NX90_xmac_rx_crc_polynomial_l 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc_polynomial_h */
/* => xMAC RX CRC Polynomial lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc_polynomial_h            0x000001DCU
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc_polynomial_h 0xFF1115DCU
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc_polynomial_h 0xFF1117DCU
#define DFLT_VAL_NX90_xmac_rx_crc_polynomial_h           0x00000000U

#define MSK_NX90_xmac_rx_crc_polynomial_h_rx_pol_h         0x0000ffffU
#define SRT_NX90_xmac_rx_crc_polynomial_h_rx_pol_h         0
#define DFLT_VAL_NX90_xmac_rx_crc_polynomial_h_rx_pol_h    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_polynomial_h_rx_pol_h 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc_polynomial_h': */
#define MSK_USED_BITS_NX90_xmac_rx_crc_polynomial_h 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc_l */
/* => xMAC RX CRC lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc_l            0x000001E0U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc_l 0xFF1115E0U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc_l 0xFF1117E0U
#define DFLT_VAL_NX90_xmac_rx_crc_l           0x00000000U

#define MSK_NX90_xmac_rx_crc_l_rx_crc_l         0x0000ffffU
#define SRT_NX90_xmac_rx_crc_l_rx_crc_l         0
#define DFLT_VAL_NX90_xmac_rx_crc_l_rx_crc_l    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_l_rx_crc_l 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc_l': */
#define MSK_USED_BITS_NX90_xmac_rx_crc_l 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc_h */
/* => xMAC RX CRC upper part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc_h            0x000001E4U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc_h 0xFF1115E4U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc_h 0xFF1117E4U
#define DFLT_VAL_NX90_xmac_rx_crc_h           0x00000000U

#define MSK_NX90_xmac_rx_crc_h_rx_crc_h         0x0000ffffU
#define SRT_NX90_xmac_rx_crc_h_rx_crc_h         0
#define DFLT_VAL_NX90_xmac_rx_crc_h_rx_crc_h    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_h_rx_crc_h 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc_h': */
#define MSK_USED_BITS_NX90_xmac_rx_crc_h 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_rx_crc_cfg */
/* => xMAC RX CRC Config Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_rx_crc_cfg            0x000001E8U
#define Adr_NX90_xc0_xmac0_regs_xmac_rx_crc_cfg 0xFF1115E8U
#define Adr_NX90_xc0_xmac1_regs_xmac_rx_crc_cfg 0xFF1117E8U
#define DFLT_VAL_NX90_xmac_rx_crc_cfg           0x00000000U

#define MSK_NX90_xmac_rx_crc_cfg_shift_right         0x00000001U
#define SRT_NX90_xmac_rx_crc_cfg_shift_right         0
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_shift_right    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_shift_right 0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_zero                0x00000002U
#define SRT_NX90_xmac_rx_crc_cfg_zero                1
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_zero           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_zero        0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_invert              0x00000004U
#define SRT_NX90_xmac_rx_crc_cfg_invert              2
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_invert         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_invert      0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_len                 0x000000f8U
#define SRT_NX90_xmac_rx_crc_cfg_len                 3
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_len            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_len         0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_nof_bits            0x00000300U
#define SRT_NX90_xmac_rx_crc_cfg_nof_bits            8
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_nof_bits       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_nof_bits    0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_direct_div          0x00000400U
#define SRT_NX90_xmac_rx_crc_cfg_direct_div          10
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_direct_div     0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_direct_div  0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_endian              0x00000800U
#define SRT_NX90_xmac_rx_crc_cfg_endian              11
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_endian         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_endian      0x00000000U
#define MSK_NX90_xmac_rx_crc_cfg_swap_output         0x00001000U
#define SRT_NX90_xmac_rx_crc_cfg_swap_output         12
#define DFLT_VAL_NX90_xmac_rx_crc_cfg_swap_output    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_rx_crc_cfg_swap_output 0x00000000U

/* all used bits of 'NX90_xmac_rx_crc_cfg': */
#define MSK_USED_BITS_NX90_xmac_rx_crc_cfg 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc_polynomial_l */
/* => xMAC TX CRC Polynomial lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc_polynomial_l            0x000001ECU
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc_polynomial_l 0xFF1115ECU
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc_polynomial_l 0xFF1117ECU
#define DFLT_VAL_NX90_xmac_tx_crc_polynomial_l           0x00000000U

#define MSK_NX90_xmac_tx_crc_polynomial_l_tx_pol_l         0x0000ffffU
#define SRT_NX90_xmac_tx_crc_polynomial_l_tx_pol_l         0
#define DFLT_VAL_NX90_xmac_tx_crc_polynomial_l_tx_pol_l    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_polynomial_l_tx_pol_l 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc_polynomial_l': */
#define MSK_USED_BITS_NX90_xmac_tx_crc_polynomial_l 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc_polynomial_h */
/* => xMAC TX CRC Polynomial lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc_polynomial_h            0x000001F0U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc_polynomial_h 0xFF1115F0U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc_polynomial_h 0xFF1117F0U
#define DFLT_VAL_NX90_xmac_tx_crc_polynomial_h           0x00000000U

#define MSK_NX90_xmac_tx_crc_polynomial_h_tx_pol_h         0x0000ffffU
#define SRT_NX90_xmac_tx_crc_polynomial_h_tx_pol_h         0
#define DFLT_VAL_NX90_xmac_tx_crc_polynomial_h_tx_pol_h    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_polynomial_h_tx_pol_h 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc_polynomial_h': */
#define MSK_USED_BITS_NX90_xmac_tx_crc_polynomial_h 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc_l */
/* => xMAC TX CRC lower part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc_l            0x000001F4U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc_l 0xFF1115F4U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc_l 0xFF1117F4U
#define DFLT_VAL_NX90_xmac_tx_crc_l           0x00000000U

#define MSK_NX90_xmac_tx_crc_l_tx_crc_l         0x0000ffffU
#define SRT_NX90_xmac_tx_crc_l_tx_crc_l         0
#define DFLT_VAL_NX90_xmac_tx_crc_l_tx_crc_l    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_l_tx_crc_l 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc_l': */
#define MSK_USED_BITS_NX90_xmac_tx_crc_l 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc_h */
/* => xMAC TX CRC upper part */
/*    This register has a write pipeline delay of 1 clock cycle. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc_h            0x000001F8U
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc_h 0xFF1115F8U
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc_h 0xFF1117F8U
#define DFLT_VAL_NX90_xmac_tx_crc_h           0x00000000U

#define MSK_NX90_xmac_tx_crc_h_tx_crc_h         0x0000ffffU
#define SRT_NX90_xmac_tx_crc_h_tx_crc_h         0
#define DFLT_VAL_NX90_xmac_tx_crc_h_tx_crc_h    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_h_tx_crc_h 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc_h': */
#define MSK_USED_BITS_NX90_xmac_tx_crc_h 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xmac_tx_crc_cfg */
/* => xMAC TX CRC Config Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xmac_tx_crc_cfg            0x000001FCU
#define Adr_NX90_xc0_xmac0_regs_xmac_tx_crc_cfg 0xFF1115FCU
#define Adr_NX90_xc0_xmac1_regs_xmac_tx_crc_cfg 0xFF1117FCU
#define DFLT_VAL_NX90_xmac_tx_crc_cfg           0x00000000U

#define MSK_NX90_xmac_tx_crc_cfg_shift_right         0x00000001U
#define SRT_NX90_xmac_tx_crc_cfg_shift_right         0
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_shift_right    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_shift_right 0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_zero                0x00000002U
#define SRT_NX90_xmac_tx_crc_cfg_zero                1
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_zero           0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_zero        0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_invert              0x00000004U
#define SRT_NX90_xmac_tx_crc_cfg_invert              2
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_invert         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_invert      0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_len                 0x000000f8U
#define SRT_NX90_xmac_tx_crc_cfg_len                 3
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_len            0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_len         0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_nof_bits            0x00000300U
#define SRT_NX90_xmac_tx_crc_cfg_nof_bits            8
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_nof_bits       0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_nof_bits    0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_direct_div          0x00000400U
#define SRT_NX90_xmac_tx_crc_cfg_direct_div          10
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_direct_div     0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_direct_div  0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_endian              0x00000800U
#define SRT_NX90_xmac_tx_crc_cfg_endian              11
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_endian         0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_endian      0x00000000U
#define MSK_NX90_xmac_tx_crc_cfg_swap_output         0x00001000U
#define SRT_NX90_xmac_tx_crc_cfg_swap_output         12
#define DFLT_VAL_NX90_xmac_tx_crc_cfg_swap_output    0x00000000U
#define DFLT_BF_VAL_NX90_xmac_tx_crc_cfg_swap_output 0x00000000U

/* all used bits of 'NX90_xmac_tx_crc_cfg': */
#define MSK_USED_BITS_NX90_xmac_tx_crc_cfg 0x00001fffU


/* ===================================================================== */

/* AREA pointer_fifo */
/* Area of xc0_pointer_fifo, xc0_pointer_fifo_xpic_com */

/* ===================================================================== */

#define Addr_NX90_xc0_pointer_fifo          0xFF111800U
#define Addr_NX90_xc0_pointer_fifo_xpic_com 0xFF200200U

/* --------------------------------------------------------------------- */
/* Register pfifo_start */
/* => Pointer FIFO table: */
/*    Each of the following 32 addresses accesses a FIFO. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_start                       0x00000000U
#define Adr_NX90_xc0_pointer_fifo_pfifo_start          0xFF111800U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_start 0xFF200200U
#define DFLT_VAL_NX90_pfifo_start                      0x00000000U

#define MSK_NX90_pfifo_start_fifo_data         0xffffffffU
#define SRT_NX90_pfifo_start_fifo_data         0
#define DFLT_VAL_NX90_pfifo_start_fifo_data    0x00000000U
#define DFLT_BF_VAL_NX90_pfifo_start_fifo_data 0x00000000U

/* all used bits of 'NX90_pfifo_start': */
#define MSK_USED_BITS_NX90_pfifo_start 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register pfifo_end */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_end                       0x0000007CU
#define Adr_NX90_xc0_pointer_fifo_pfifo_end          0xFF11187CU
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_end 0xFF20027CU

/* --------------------------------------------------------------------- */
/* Register pfifo_border_start */
/* => Pointer FIFO Upper Borders table: */
/*    The sizes of all FIFOs are programmable. The total size of all FIFOs must not exceed 3200 dwords. \ */
/*    Each of the following 32 addresses accesses the upper border of the appropriate FIFO in a 3200x32 bit RAM. \ */
/*    All upper borders should be rising with number of FIFO. \ */
/*    Each FIFO starts at the upper border + 1 of the preceding FIFO and ends at its upper border. */
/*    If a border between two FIFOs is moved, the adjacent FIFOs should be reset first. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_border_start                       0x00000080U
#define Adr_NX90_xc0_pointer_fifo_pfifo_border_start          0xFF111880U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_border_start 0xFF200280U
#define DFLT_VAL_NX90_pfifo_border_start                      0x00000000U

#define MSK_NX90_pfifo_border_start_border         0x00000fffU
#define SRT_NX90_pfifo_border_start_border         0
#define DFLT_VAL_NX90_pfifo_border_start_border    0x00000000U
#define DFLT_BF_VAL_NX90_pfifo_border_start_border 0x00000000U

/* all used bits of 'NX90_pfifo_border_start': */
#define MSK_USED_BITS_NX90_pfifo_border_start 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register pfifo_border_end */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_border_end                       0x000000FCU
#define Adr_NX90_xc0_pointer_fifo_pfifo_border_end          0xFF1118FCU
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_border_end 0xFF2002FCU

/* --------------------------------------------------------------------- */
/* Register pfifo_reset */
/* => Pointer FIFO Reset Vector: */
/*    This register allows to reset each of 32 FIFOs, \ */
/*    i.e. set read and write pointer to lower border of FIFO, reset full, overflow, underrun flag and set empty flag. */
/*    The reset flag of adjacent FIFOs should be set before resizing the FIFO. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_reset                       0x00000100U
#define Adr_NX90_xc0_pointer_fifo_pfifo_reset          0xFF111900U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_reset 0xFF200300U
#define DFLT_VAL_NX90_pfifo_reset                      0x00000000U

#define MSK_NX90_pfifo_reset_reset_fifo         0xffffffffU
#define SRT_NX90_pfifo_reset_reset_fifo         0
#define DFLT_VAL_NX90_pfifo_reset_reset_fifo    0x00000000U
#define DFLT_BF_VAL_NX90_pfifo_reset_reset_fifo 0x00000000U

/* all used bits of 'NX90_pfifo_reset': */
#define MSK_USED_BITS_NX90_pfifo_reset 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register pfifo_full */
/* => Pointer FIFO Full Vector: */
/*    This read only address shows the fifo_full flag of each FIFO. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_full                       0x00000104U
#define Adr_NX90_xc0_pointer_fifo_pfifo_full          0xFF111904U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_full 0xFF200304U

#define MSK_NX90_pfifo_full_fifo_full 0xffffffffU
#define SRT_NX90_pfifo_full_fifo_full 0

/* all used bits of 'NX90_pfifo_full': */
#define MSK_USED_BITS_NX90_pfifo_full 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register pfifo_empty */
/* => Pointer FIFO Empty Vector: */
/*    This read only address shows the fifo_empty flag of each FIFO. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_empty                       0x00000108U
#define Adr_NX90_xc0_pointer_fifo_pfifo_empty          0xFF111908U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_empty 0xFF200308U

#define MSK_NX90_pfifo_empty_fifo_empty 0xffffffffU
#define SRT_NX90_pfifo_empty_fifo_empty 0

/* all used bits of 'NX90_pfifo_empty': */
#define MSK_USED_BITS_NX90_pfifo_empty 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register pfifo_overflow */
/* => Pointer FIFO Overflow Vector: */
/*    This read only address shows the fifo_overflow flag of each FIFO. */
/*    If the FIFO had an overflow, it should be reset. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_overflow                       0x0000010CU
#define Adr_NX90_xc0_pointer_fifo_pfifo_overflow          0xFF11190CU
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_overflow 0xFF20030CU

#define MSK_NX90_pfifo_overflow_fifo_overflow 0xffffffffU
#define SRT_NX90_pfifo_overflow_fifo_overflow 0

/* all used bits of 'NX90_pfifo_overflow': */
#define MSK_USED_BITS_NX90_pfifo_overflow 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register pfifo_underrun */
/* => Pointer FIFO Underrun Vector: */
/*    This read only address shows the fifo_underrun flag of each FIFO. */
/*    If the FIFO had an underrun, it should be reset. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_underrun                       0x00000110U
#define Adr_NX90_xc0_pointer_fifo_pfifo_underrun          0xFF111910U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_underrun 0xFF200310U

#define MSK_NX90_pfifo_underrun_fifo_underrun 0xffffffffU
#define SRT_NX90_pfifo_underrun_fifo_underrun 0

/* all used bits of 'NX90_pfifo_underrun': */
#define MSK_USED_BITS_NX90_pfifo_underrun 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register pfifo_fill_level_start */
/* => Pointer FIFO Fill-Level table: */
/*    Each of the following 32 addresses reads the fill-level of the appropriate FIFO. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_fill_level_start                       0x00000180U
#define Adr_NX90_xc0_pointer_fifo_pfifo_fill_level_start          0xFF111980U
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_fill_level_start 0xFF200380U

#define MSK_NX90_pfifo_fill_level_start_fill_level 0x000003ffU
#define SRT_NX90_pfifo_fill_level_start_fill_level 0

/* all used bits of 'NX90_pfifo_fill_level_start': */
#define MSK_USED_BITS_NX90_pfifo_fill_level_start 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register pfifo_fill_level_end */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pfifo_fill_level_end                       0x000001FCU
#define Adr_NX90_xc0_pointer_fifo_pfifo_fill_level_end          0xFF1119FCU
#define Adr_NX90_xc0_pointer_fifo_xpic_com_pfifo_fill_level_end 0xFF2003FCU


/* ===================================================================== */

/* AREA fmmusm */
/* Area of xc0_fmmusm */

/* ===================================================================== */

#define Addr_NX90_xc0_fmmusm 0xFF111A00U

/* --------------------------------------------------------------------- */
/* Register fmmu0_cfg_log_startaddr */
/* => FMMU 0 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu0_cfg_log_startaddr        0x00000000U
#define Adr_NX90_xc0_fmmusm_fmmu0_cfg_log_startaddr 0xFF111A00U
#define Adr_NX90_fmmu0_cfg_log_startaddr            0xFF111A00U
#define DFLT_VAL_NX90_fmmu0_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu0_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu0_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu0_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu0_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu0_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu0_cfg_length */
/* => FMMU 0 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu0_cfg_length        0x00000004U
#define Adr_NX90_xc0_fmmusm_fmmu0_cfg_length 0xFF111A04U
#define Adr_NX90_fmmu0_cfg_length            0xFF111A04U
#define DFLT_VAL_NX90_fmmu0_cfg_length       0x07000000U

#define MSK_NX90_fmmu0_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu0_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu0_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu0_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu0_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu0_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu0_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu0_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu0_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu0_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu0_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu0_cfg_phys_startaddr */
/* => FMMU 0 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu0_cfg_phys_startaddr        0x00000008U
#define Adr_NX90_xc0_fmmusm_fmmu0_cfg_phys_startaddr 0xFF111A08U
#define Adr_NX90_fmmu0_cfg_phys_startaddr            0xFF111A08U
#define DFLT_VAL_NX90_fmmu0_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu0_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu0_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu0_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu0_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu0_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu0_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu0_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu0_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu0_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu0_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu0_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu0_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu0_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu0_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu0_cfg_enable */
/* => FMMU 0 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu0_cfg_enable        0x0000000CU
#define Adr_NX90_xc0_fmmusm_fmmu0_cfg_enable 0xFF111A0CU
#define Adr_NX90_fmmu0_cfg_enable            0xFF111A0CU
#define DFLT_VAL_NX90_fmmu0_cfg_enable       0x00000000U

#define MSK_NX90_fmmu0_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu0_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu0_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu0_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu0_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu0_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu1_cfg_log_startaddr */
/* => FMMU 1 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu1_cfg_log_startaddr        0x00000010U
#define Adr_NX90_xc0_fmmusm_fmmu1_cfg_log_startaddr 0xFF111A10U
#define Adr_NX90_fmmu1_cfg_log_startaddr            0xFF111A10U
#define DFLT_VAL_NX90_fmmu1_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu1_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu1_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu1_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu1_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu1_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu1_cfg_length */
/* => FMMU 1 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu1_cfg_length        0x00000014U
#define Adr_NX90_xc0_fmmusm_fmmu1_cfg_length 0xFF111A14U
#define Adr_NX90_fmmu1_cfg_length            0xFF111A14U
#define DFLT_VAL_NX90_fmmu1_cfg_length       0x07000000U

#define MSK_NX90_fmmu1_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu1_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu1_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu1_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu1_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu1_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu1_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu1_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu1_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu1_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu1_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu1_cfg_phys_startaddr */
/* => FMMU 1 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu1_cfg_phys_startaddr        0x00000018U
#define Adr_NX90_xc0_fmmusm_fmmu1_cfg_phys_startaddr 0xFF111A18U
#define Adr_NX90_fmmu1_cfg_phys_startaddr            0xFF111A18U
#define DFLT_VAL_NX90_fmmu1_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu1_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu1_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu1_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu1_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu1_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu1_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu1_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu1_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu1_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu1_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu1_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu1_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu1_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu1_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu1_cfg_enable */
/* => FMMU 1 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu1_cfg_enable        0x0000001CU
#define Adr_NX90_xc0_fmmusm_fmmu1_cfg_enable 0xFF111A1CU
#define Adr_NX90_fmmu1_cfg_enable            0xFF111A1CU
#define DFLT_VAL_NX90_fmmu1_cfg_enable       0x00000000U

#define MSK_NX90_fmmu1_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu1_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu1_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu1_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu1_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu1_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu2_cfg_log_startaddr */
/* => FMMU 2 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu2_cfg_log_startaddr        0x00000020U
#define Adr_NX90_xc0_fmmusm_fmmu2_cfg_log_startaddr 0xFF111A20U
#define Adr_NX90_fmmu2_cfg_log_startaddr            0xFF111A20U
#define DFLT_VAL_NX90_fmmu2_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu2_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu2_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu2_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu2_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu2_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu2_cfg_length */
/* => FMMU 2 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu2_cfg_length        0x00000024U
#define Adr_NX90_xc0_fmmusm_fmmu2_cfg_length 0xFF111A24U
#define Adr_NX90_fmmu2_cfg_length            0xFF111A24U
#define DFLT_VAL_NX90_fmmu2_cfg_length       0x07000000U

#define MSK_NX90_fmmu2_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu2_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu2_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu2_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu2_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu2_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu2_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu2_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu2_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu2_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu2_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu2_cfg_phys_startaddr */
/* => FMMU 2 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu2_cfg_phys_startaddr        0x00000028U
#define Adr_NX90_xc0_fmmusm_fmmu2_cfg_phys_startaddr 0xFF111A28U
#define Adr_NX90_fmmu2_cfg_phys_startaddr            0xFF111A28U
#define DFLT_VAL_NX90_fmmu2_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu2_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu2_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu2_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu2_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu2_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu2_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu2_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu2_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu2_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu2_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu2_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu2_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu2_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu2_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu2_cfg_enable */
/* => FMMU 2 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu2_cfg_enable        0x0000002CU
#define Adr_NX90_xc0_fmmusm_fmmu2_cfg_enable 0xFF111A2CU
#define Adr_NX90_fmmu2_cfg_enable            0xFF111A2CU
#define DFLT_VAL_NX90_fmmu2_cfg_enable       0x00000000U

#define MSK_NX90_fmmu2_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu2_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu2_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu2_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu2_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu2_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu3_cfg_log_startaddr */
/* => FMMU 3 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu3_cfg_log_startaddr        0x00000030U
#define Adr_NX90_xc0_fmmusm_fmmu3_cfg_log_startaddr 0xFF111A30U
#define Adr_NX90_fmmu3_cfg_log_startaddr            0xFF111A30U
#define DFLT_VAL_NX90_fmmu3_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu3_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu3_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu3_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu3_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu3_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu3_cfg_length */
/* => FMMU 3 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu3_cfg_length        0x00000034U
#define Adr_NX90_xc0_fmmusm_fmmu3_cfg_length 0xFF111A34U
#define Adr_NX90_fmmu3_cfg_length            0xFF111A34U
#define DFLT_VAL_NX90_fmmu3_cfg_length       0x07000000U

#define MSK_NX90_fmmu3_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu3_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu3_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu3_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu3_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu3_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu3_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu3_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu3_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu3_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu3_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu3_cfg_phys_startaddr */
/* => FMMU 3 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu3_cfg_phys_startaddr        0x00000038U
#define Adr_NX90_xc0_fmmusm_fmmu3_cfg_phys_startaddr 0xFF111A38U
#define Adr_NX90_fmmu3_cfg_phys_startaddr            0xFF111A38U
#define DFLT_VAL_NX90_fmmu3_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu3_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu3_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu3_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu3_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu3_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu3_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu3_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu3_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu3_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu3_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu3_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu3_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu3_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu3_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu3_cfg_enable */
/* => FMMU 3 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu3_cfg_enable        0x0000003CU
#define Adr_NX90_xc0_fmmusm_fmmu3_cfg_enable 0xFF111A3CU
#define Adr_NX90_fmmu3_cfg_enable            0xFF111A3CU
#define DFLT_VAL_NX90_fmmu3_cfg_enable       0x00000000U

#define MSK_NX90_fmmu3_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu3_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu3_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu3_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu3_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu3_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu4_cfg_log_startaddr */
/* => FMMU 4 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu4_cfg_log_startaddr        0x00000040U
#define Adr_NX90_xc0_fmmusm_fmmu4_cfg_log_startaddr 0xFF111A40U
#define Adr_NX90_fmmu4_cfg_log_startaddr            0xFF111A40U
#define DFLT_VAL_NX90_fmmu4_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu4_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu4_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu4_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu4_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu4_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu4_cfg_length */
/* => FMMU 4 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu4_cfg_length        0x00000044U
#define Adr_NX90_xc0_fmmusm_fmmu4_cfg_length 0xFF111A44U
#define Adr_NX90_fmmu4_cfg_length            0xFF111A44U
#define DFLT_VAL_NX90_fmmu4_cfg_length       0x07000000U

#define MSK_NX90_fmmu4_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu4_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu4_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu4_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu4_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu4_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu4_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu4_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu4_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu4_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu4_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu4_cfg_phys_startaddr */
/* => FMMU 4 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu4_cfg_phys_startaddr        0x00000048U
#define Adr_NX90_xc0_fmmusm_fmmu4_cfg_phys_startaddr 0xFF111A48U
#define Adr_NX90_fmmu4_cfg_phys_startaddr            0xFF111A48U
#define DFLT_VAL_NX90_fmmu4_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu4_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu4_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu4_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu4_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu4_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu4_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu4_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu4_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu4_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu4_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu4_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu4_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu4_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu4_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu4_cfg_enable */
/* => FMMU 4 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu4_cfg_enable        0x0000004CU
#define Adr_NX90_xc0_fmmusm_fmmu4_cfg_enable 0xFF111A4CU
#define Adr_NX90_fmmu4_cfg_enable            0xFF111A4CU
#define DFLT_VAL_NX90_fmmu4_cfg_enable       0x00000000U

#define MSK_NX90_fmmu4_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu4_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu4_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu4_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu4_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu4_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu5_cfg_log_startaddr */
/* => FMMU 5 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu5_cfg_log_startaddr        0x00000050U
#define Adr_NX90_xc0_fmmusm_fmmu5_cfg_log_startaddr 0xFF111A50U
#define Adr_NX90_fmmu5_cfg_log_startaddr            0xFF111A50U
#define DFLT_VAL_NX90_fmmu5_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu5_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu5_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu5_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu5_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu5_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu5_cfg_length */
/* => FMMU 5 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu5_cfg_length        0x00000054U
#define Adr_NX90_xc0_fmmusm_fmmu5_cfg_length 0xFF111A54U
#define Adr_NX90_fmmu5_cfg_length            0xFF111A54U
#define DFLT_VAL_NX90_fmmu5_cfg_length       0x07000000U

#define MSK_NX90_fmmu5_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu5_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu5_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu5_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu5_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu5_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu5_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu5_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu5_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu5_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu5_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu5_cfg_phys_startaddr */
/* => FMMU 5 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu5_cfg_phys_startaddr        0x00000058U
#define Adr_NX90_xc0_fmmusm_fmmu5_cfg_phys_startaddr 0xFF111A58U
#define Adr_NX90_fmmu5_cfg_phys_startaddr            0xFF111A58U
#define DFLT_VAL_NX90_fmmu5_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu5_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu5_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu5_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu5_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu5_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu5_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu5_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu5_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu5_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu5_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu5_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu5_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu5_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu5_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu5_cfg_enable */
/* => FMMU 5 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu5_cfg_enable        0x0000005CU
#define Adr_NX90_xc0_fmmusm_fmmu5_cfg_enable 0xFF111A5CU
#define Adr_NX90_fmmu5_cfg_enable            0xFF111A5CU
#define DFLT_VAL_NX90_fmmu5_cfg_enable       0x00000000U

#define MSK_NX90_fmmu5_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu5_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu5_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu5_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu5_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu5_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu6_cfg_log_startaddr */
/* => FMMU 6 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu6_cfg_log_startaddr        0x00000060U
#define Adr_NX90_xc0_fmmusm_fmmu6_cfg_log_startaddr 0xFF111A60U
#define Adr_NX90_fmmu6_cfg_log_startaddr            0xFF111A60U
#define DFLT_VAL_NX90_fmmu6_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu6_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu6_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu6_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu6_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu6_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu6_cfg_length */
/* => FMMU 6 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu6_cfg_length        0x00000064U
#define Adr_NX90_xc0_fmmusm_fmmu6_cfg_length 0xFF111A64U
#define Adr_NX90_fmmu6_cfg_length            0xFF111A64U
#define DFLT_VAL_NX90_fmmu6_cfg_length       0x07000000U

#define MSK_NX90_fmmu6_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu6_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu6_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu6_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu6_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu6_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu6_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu6_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu6_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu6_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu6_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu6_cfg_phys_startaddr */
/* => FMMU 6 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu6_cfg_phys_startaddr        0x00000068U
#define Adr_NX90_xc0_fmmusm_fmmu6_cfg_phys_startaddr 0xFF111A68U
#define Adr_NX90_fmmu6_cfg_phys_startaddr            0xFF111A68U
#define DFLT_VAL_NX90_fmmu6_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu6_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu6_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu6_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu6_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu6_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu6_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu6_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu6_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu6_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu6_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu6_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu6_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu6_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu6_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu6_cfg_enable */
/* => FMMU 6 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu6_cfg_enable        0x0000006CU
#define Adr_NX90_xc0_fmmusm_fmmu6_cfg_enable 0xFF111A6CU
#define Adr_NX90_fmmu6_cfg_enable            0xFF111A6CU
#define DFLT_VAL_NX90_fmmu6_cfg_enable       0x00000000U

#define MSK_NX90_fmmu6_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu6_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu6_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu6_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu6_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu6_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmu7_cfg_log_startaddr */
/* => FMMU 7 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu7_cfg_log_startaddr        0x00000070U
#define Adr_NX90_xc0_fmmusm_fmmu7_cfg_log_startaddr 0xFF111A70U
#define Adr_NX90_fmmu7_cfg_log_startaddr            0xFF111A70U
#define DFLT_VAL_NX90_fmmu7_cfg_log_startaddr       0x00000000U

#define MSK_NX90_fmmu7_cfg_log_startaddr_log_startaddr         0xffffffffU
#define SRT_NX90_fmmu7_cfg_log_startaddr_log_startaddr         0
#define DFLT_VAL_NX90_fmmu7_cfg_log_startaddr_log_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_log_startaddr_log_startaddr 0x00000000U

/* all used bits of 'NX90_fmmu7_cfg_log_startaddr': */
#define MSK_USED_BITS_NX90_fmmu7_cfg_log_startaddr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu7_cfg_length */
/* => FMMU 7 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu7_cfg_length        0x00000074U
#define Adr_NX90_xc0_fmmusm_fmmu7_cfg_length 0xFF111A74U
#define Adr_NX90_fmmu7_cfg_length            0xFF111A74U
#define DFLT_VAL_NX90_fmmu7_cfg_length       0x07000000U

#define MSK_NX90_fmmu7_cfg_length_length                0x00001fffU
#define SRT_NX90_fmmu7_cfg_length_length                0
#define DFLT_VAL_NX90_fmmu7_cfg_length_length           0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_length_length        0x00000000U
#define MSK_NX90_fmmu7_cfg_length_log_start_bit         0x00070000U
#define SRT_NX90_fmmu7_cfg_length_log_start_bit         16
#define DFLT_VAL_NX90_fmmu7_cfg_length_log_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_length_log_start_bit 0x00000000U
#define MSK_NX90_fmmu7_cfg_length_log_stop_bit          0x07000000U
#define SRT_NX90_fmmu7_cfg_length_log_stop_bit          24
#define DFLT_VAL_NX90_fmmu7_cfg_length_log_stop_bit     0x07000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_length_log_stop_bit  0x00000007U

/* all used bits of 'NX90_fmmu7_cfg_length': */
#define MSK_USED_BITS_NX90_fmmu7_cfg_length 0x07071fffU

/* --------------------------------------------------------------------- */
/* Register fmmu7_cfg_phys_startaddr */
/* => FMMU 7 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu7_cfg_phys_startaddr        0x00000078U
#define Adr_NX90_xc0_fmmusm_fmmu7_cfg_phys_startaddr 0xFF111A78U
#define Adr_NX90_fmmu7_cfg_phys_startaddr            0xFF111A78U
#define DFLT_VAL_NX90_fmmu7_cfg_phys_startaddr       0x00000000U

#define MSK_NX90_fmmu7_cfg_phys_startaddr_phys_startaddr         0x00003fffU
#define SRT_NX90_fmmu7_cfg_phys_startaddr_phys_startaddr         0
#define DFLT_VAL_NX90_fmmu7_cfg_phys_startaddr_phys_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_phys_startaddr_phys_startaddr 0x00000000U
#define MSK_NX90_fmmu7_cfg_phys_startaddr_phys_start_bit         0x00070000U
#define SRT_NX90_fmmu7_cfg_phys_startaddr_phys_start_bit         16
#define DFLT_VAL_NX90_fmmu7_cfg_phys_startaddr_phys_start_bit    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_phys_startaddr_phys_start_bit 0x00000000U
#define MSK_NX90_fmmu7_cfg_phys_startaddr_proc_rd_enable         0x01000000U
#define SRT_NX90_fmmu7_cfg_phys_startaddr_proc_rd_enable         24
#define DFLT_VAL_NX90_fmmu7_cfg_phys_startaddr_proc_rd_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_phys_startaddr_proc_rd_enable 0x00000000U
#define MSK_NX90_fmmu7_cfg_phys_startaddr_proc_wr_enable         0x02000000U
#define SRT_NX90_fmmu7_cfg_phys_startaddr_proc_wr_enable         25
#define DFLT_VAL_NX90_fmmu7_cfg_phys_startaddr_proc_wr_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_phys_startaddr_proc_wr_enable 0x00000000U

/* all used bits of 'NX90_fmmu7_cfg_phys_startaddr': */
#define MSK_USED_BITS_NX90_fmmu7_cfg_phys_startaddr 0x03073fffU

/* --------------------------------------------------------------------- */
/* Register fmmu7_cfg_enable */
/* => FMMU 7 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu7_cfg_enable        0x0000007CU
#define Adr_NX90_xc0_fmmusm_fmmu7_cfg_enable 0xFF111A7CU
#define Adr_NX90_fmmu7_cfg_enable            0xFF111A7CU
#define DFLT_VAL_NX90_fmmu7_cfg_enable       0x00000000U

#define MSK_NX90_fmmu7_cfg_enable_proc_enable         0x00000001U
#define SRT_NX90_fmmu7_cfg_enable_proc_enable         0
#define DFLT_VAL_NX90_fmmu7_cfg_enable_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_fmmu7_cfg_enable_proc_enable 0x00000000U

/* all used bits of 'NX90_fmmu7_cfg_enable': */
#define MSK_USED_BITS_NX90_fmmu7_cfg_enable 0x00000001U

/* --------------------------------------------------------------------- */
/* Register sm0_cfg_adr_len */
/* => SM 0 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm0_cfg_adr_len        0x00000080U
#define Adr_NX90_xc0_fmmusm_sm0_cfg_adr_len 0xFF111A80U
#define Adr_NX90_sm0_cfg_adr_len            0xFF111A80U
#define DFLT_VAL_NX90_sm0_cfg_adr_len       0x00000000U

#define MSK_NX90_sm0_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm0_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm0_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm0_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm0_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm0_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm0_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm0_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm0_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm0_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm0_cfg_mode */
/* => SM 0 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm0_cfg_mode        0x00000084U
#define Adr_NX90_xc0_fmmusm_sm0_cfg_mode 0xFF111A84U
#define Adr_NX90_sm0_cfg_mode            0xFF111A84U
#define DFLT_VAL_NX90_sm0_cfg_mode       0x00000000U

#define MSK_NX90_sm0_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm0_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm0_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm0_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm0_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm0_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm0_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm0_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm0_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm0_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm0_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm0_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm0_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm0_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm0_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm0_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm0_cfg_mode': */
#define MSK_USED_BITS_NX90_sm0_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm1_cfg_adr_len */
/* => SM 1 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm1_cfg_adr_len        0x00000088U
#define Adr_NX90_xc0_fmmusm_sm1_cfg_adr_len 0xFF111A88U
#define Adr_NX90_sm1_cfg_adr_len            0xFF111A88U
#define DFLT_VAL_NX90_sm1_cfg_adr_len       0x00000000U

#define MSK_NX90_sm1_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm1_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm1_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm1_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm1_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm1_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm1_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm1_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm1_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm1_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm1_cfg_mode */
/* => SM 1 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm1_cfg_mode        0x0000008CU
#define Adr_NX90_xc0_fmmusm_sm1_cfg_mode 0xFF111A8CU
#define Adr_NX90_sm1_cfg_mode            0xFF111A8CU
#define DFLT_VAL_NX90_sm1_cfg_mode       0x00000000U

#define MSK_NX90_sm1_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm1_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm1_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm1_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm1_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm1_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm1_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm1_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm1_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm1_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm1_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm1_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm1_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm1_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm1_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm1_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm1_cfg_mode': */
#define MSK_USED_BITS_NX90_sm1_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm2_cfg_adr_len */
/* => SM 2 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm2_cfg_adr_len        0x00000090U
#define Adr_NX90_xc0_fmmusm_sm2_cfg_adr_len 0xFF111A90U
#define Adr_NX90_sm2_cfg_adr_len            0xFF111A90U
#define DFLT_VAL_NX90_sm2_cfg_adr_len       0x00000000U

#define MSK_NX90_sm2_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm2_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm2_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm2_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm2_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm2_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm2_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm2_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm2_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm2_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm2_cfg_mode */
/* => SM 2 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm2_cfg_mode        0x00000094U
#define Adr_NX90_xc0_fmmusm_sm2_cfg_mode 0xFF111A94U
#define Adr_NX90_sm2_cfg_mode            0xFF111A94U
#define DFLT_VAL_NX90_sm2_cfg_mode       0x00000000U

#define MSK_NX90_sm2_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm2_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm2_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm2_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm2_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm2_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm2_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm2_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm2_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm2_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm2_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm2_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm2_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm2_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm2_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm2_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm2_cfg_mode': */
#define MSK_USED_BITS_NX90_sm2_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm3_cfg_adr_len */
/* => SM 3 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm3_cfg_adr_len        0x00000098U
#define Adr_NX90_xc0_fmmusm_sm3_cfg_adr_len 0xFF111A98U
#define Adr_NX90_sm3_cfg_adr_len            0xFF111A98U
#define DFLT_VAL_NX90_sm3_cfg_adr_len       0x00000000U

#define MSK_NX90_sm3_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm3_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm3_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm3_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm3_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm3_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm3_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm3_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm3_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm3_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm3_cfg_mode */
/* => SM 3 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm3_cfg_mode        0x0000009CU
#define Adr_NX90_xc0_fmmusm_sm3_cfg_mode 0xFF111A9CU
#define Adr_NX90_sm3_cfg_mode            0xFF111A9CU
#define DFLT_VAL_NX90_sm3_cfg_mode       0x00000000U

#define MSK_NX90_sm3_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm3_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm3_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm3_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm3_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm3_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm3_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm3_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm3_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm3_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm3_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm3_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm3_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm3_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm3_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm3_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm3_cfg_mode': */
#define MSK_USED_BITS_NX90_sm3_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm4_cfg_adr_len */
/* => SM 4 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm4_cfg_adr_len        0x000000A0U
#define Adr_NX90_xc0_fmmusm_sm4_cfg_adr_len 0xFF111AA0U
#define Adr_NX90_sm4_cfg_adr_len            0xFF111AA0U
#define DFLT_VAL_NX90_sm4_cfg_adr_len       0x00000000U

#define MSK_NX90_sm4_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm4_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm4_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm4_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm4_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm4_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm4_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm4_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm4_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm4_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm4_cfg_mode */
/* => SM 4 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm4_cfg_mode        0x000000A4U
#define Adr_NX90_xc0_fmmusm_sm4_cfg_mode 0xFF111AA4U
#define Adr_NX90_sm4_cfg_mode            0xFF111AA4U
#define DFLT_VAL_NX90_sm4_cfg_mode       0x00000000U

#define MSK_NX90_sm4_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm4_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm4_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm4_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm4_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm4_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm4_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm4_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm4_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm4_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm4_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm4_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm4_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm4_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm4_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm4_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm4_cfg_mode': */
#define MSK_USED_BITS_NX90_sm4_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm5_cfg_adr_len */
/* => SM 5 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm5_cfg_adr_len        0x000000A8U
#define Adr_NX90_xc0_fmmusm_sm5_cfg_adr_len 0xFF111AA8U
#define Adr_NX90_sm5_cfg_adr_len            0xFF111AA8U
#define DFLT_VAL_NX90_sm5_cfg_adr_len       0x00000000U

#define MSK_NX90_sm5_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm5_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm5_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm5_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm5_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm5_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm5_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm5_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm5_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm5_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm5_cfg_mode */
/* => SM 5 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm5_cfg_mode        0x000000ACU
#define Adr_NX90_xc0_fmmusm_sm5_cfg_mode 0xFF111AACU
#define Adr_NX90_sm5_cfg_mode            0xFF111AACU
#define DFLT_VAL_NX90_sm5_cfg_mode       0x00000000U

#define MSK_NX90_sm5_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm5_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm5_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm5_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm5_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm5_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm5_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm5_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm5_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm5_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm5_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm5_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm5_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm5_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm5_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm5_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm5_cfg_mode': */
#define MSK_USED_BITS_NX90_sm5_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm6_cfg_adr_len */
/* => SM 6 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm6_cfg_adr_len        0x000000B0U
#define Adr_NX90_xc0_fmmusm_sm6_cfg_adr_len 0xFF111AB0U
#define Adr_NX90_sm6_cfg_adr_len            0xFF111AB0U
#define DFLT_VAL_NX90_sm6_cfg_adr_len       0x00000000U

#define MSK_NX90_sm6_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm6_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm6_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm6_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm6_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm6_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm6_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm6_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm6_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm6_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm6_cfg_mode */
/* => SM 6 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm6_cfg_mode        0x000000B4U
#define Adr_NX90_xc0_fmmusm_sm6_cfg_mode 0xFF111AB4U
#define Adr_NX90_sm6_cfg_mode            0xFF111AB4U
#define DFLT_VAL_NX90_sm6_cfg_mode       0x00000000U

#define MSK_NX90_sm6_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm6_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm6_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm6_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm6_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm6_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm6_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm6_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm6_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm6_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm6_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm6_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm6_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm6_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm6_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm6_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm6_cfg_mode': */
#define MSK_USED_BITS_NX90_sm6_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register sm7_cfg_adr_len */
/* => SM 7 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm7_cfg_adr_len        0x000000B8U
#define Adr_NX90_xc0_fmmusm_sm7_cfg_adr_len 0xFF111AB8U
#define Adr_NX90_sm7_cfg_adr_len            0xFF111AB8U
#define DFLT_VAL_NX90_sm7_cfg_adr_len       0x00000000U

#define MSK_NX90_sm7_cfg_adr_len_startaddr         0x0000ffffU
#define SRT_NX90_sm7_cfg_adr_len_startaddr         0
#define DFLT_VAL_NX90_sm7_cfg_adr_len_startaddr    0x00000000U
#define DFLT_BF_VAL_NX90_sm7_cfg_adr_len_startaddr 0x00000000U
#define MSK_NX90_sm7_cfg_adr_len_length            0xffff0000U
#define SRT_NX90_sm7_cfg_adr_len_length            16
#define DFLT_VAL_NX90_sm7_cfg_adr_len_length       0x00000000U
#define DFLT_BF_VAL_NX90_sm7_cfg_adr_len_length    0x00000000U

/* all used bits of 'NX90_sm7_cfg_adr_len': */
#define MSK_USED_BITS_NX90_sm7_cfg_adr_len 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm7_cfg_mode */
/* => SM 7 config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm7_cfg_mode        0x000000BCU
#define Adr_NX90_xc0_fmmusm_sm7_cfg_mode 0xFF111ABCU
#define Adr_NX90_sm7_cfg_mode            0xFF111ABCU
#define DFLT_VAL_NX90_sm7_cfg_mode       0x00000000U

#define MSK_NX90_sm7_cfg_mode_buf_method          0x00000002U
#define SRT_NX90_sm7_cfg_mode_buf_method          1
#define DFLT_VAL_NX90_sm7_cfg_mode_buf_method     0x00000000U
#define DFLT_BF_VAL_NX90_sm7_cfg_mode_buf_method  0x00000000U
#define MSK_NX90_sm7_cfg_mode_write_read          0x00000004U
#define SRT_NX90_sm7_cfg_mode_write_read          2
#define DFLT_VAL_NX90_sm7_cfg_mode_write_read     0x00000000U
#define DFLT_BF_VAL_NX90_sm7_cfg_mode_write_read  0x00000000U
#define MSK_NX90_sm7_cfg_mode_proc_enable         0x00010000U
#define SRT_NX90_sm7_cfg_mode_proc_enable         16
#define DFLT_VAL_NX90_sm7_cfg_mode_proc_enable    0x00000000U
#define DFLT_BF_VAL_NX90_sm7_cfg_mode_proc_enable 0x00000000U
#define MSK_NX90_sm7_cfg_mode_dis_by_arm          0x01000000U
#define SRT_NX90_sm7_cfg_mode_dis_by_arm          24
#define DFLT_VAL_NX90_sm7_cfg_mode_dis_by_arm     0x00000000U
#define DFLT_BF_VAL_NX90_sm7_cfg_mode_dis_by_arm  0x00000000U

/* all used bits of 'NX90_sm7_cfg_mode': */
#define MSK_USED_BITS_NX90_sm7_cfg_mode 0x01010006U

/* --------------------------------------------------------------------- */
/* Register phys_addr_offset */
/* => Physical offset of phys. ECAT address and xPEC data ram address */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_phys_addr_offset        0x000000D0U
#define Adr_NX90_xc0_fmmusm_phys_addr_offset 0xFF111AD0U
#define Adr_NX90_phys_addr_offset            0xFF111AD0U
#define DFLT_VAL_NX90_phys_addr_offset       0x00000000U

#define MSK_NX90_phys_addr_offset_phys_addr_offset                       0x0000ffffU
#define SRT_NX90_phys_addr_offset_phys_addr_offset                       0
#define DFLT_VAL_NX90_phys_addr_offset_phys_addr_offset                  0x00000000U
#define DFLT_BF_VAL_NX90_phys_addr_offset_phys_addr_offset               0x00000000U
#define MSK_NX90_phys_addr_offset_phys_addr_offset_register_area         0xffff0000U
#define SRT_NX90_phys_addr_offset_phys_addr_offset_register_area         16
#define DFLT_VAL_NX90_phys_addr_offset_phys_addr_offset_register_area    0x00000000U
#define DFLT_BF_VAL_NX90_phys_addr_offset_phys_addr_offset_register_area 0x00000000U

/* all used bits of 'NX90_phys_addr_offset': */
#define MSK_USED_BITS_NX90_phys_addr_offset 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register phys_last_addr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_phys_last_addr        0x000000D4U
#define Adr_NX90_xc0_fmmusm_phys_last_addr 0xFF111AD4U
#define Adr_NX90_phys_last_addr            0xFF111AD4U
#define DFLT_VAL_NX90_phys_last_addr       0x00001fffU

#define MSK_NX90_phys_last_addr_phys_last_addr         0x0000ffffU
#define SRT_NX90_phys_last_addr_phys_last_addr         0
#define DFLT_VAL_NX90_phys_last_addr_phys_last_addr    0x00001fffU
#define DFLT_BF_VAL_NX90_phys_last_addr_phys_last_addr 0x00001fffU
#define MSK_NX90_phys_last_addr_sm0_cfg_add            0x00030000U
#define SRT_NX90_phys_last_addr_sm0_cfg_add            16
#define DFLT_VAL_NX90_phys_last_addr_sm0_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm0_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm1_cfg_add            0x000c0000U
#define SRT_NX90_phys_last_addr_sm1_cfg_add            18
#define DFLT_VAL_NX90_phys_last_addr_sm1_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm1_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm2_cfg_add            0x00300000U
#define SRT_NX90_phys_last_addr_sm2_cfg_add            20
#define DFLT_VAL_NX90_phys_last_addr_sm2_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm2_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm3_cfg_add            0x00c00000U
#define SRT_NX90_phys_last_addr_sm3_cfg_add            22
#define DFLT_VAL_NX90_phys_last_addr_sm3_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm3_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm4_cfg_add            0x03000000U
#define SRT_NX90_phys_last_addr_sm4_cfg_add            24
#define DFLT_VAL_NX90_phys_last_addr_sm4_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm4_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm5_cfg_add            0x0c000000U
#define SRT_NX90_phys_last_addr_sm5_cfg_add            26
#define DFLT_VAL_NX90_phys_last_addr_sm5_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm5_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm6_cfg_add            0x30000000U
#define SRT_NX90_phys_last_addr_sm6_cfg_add            28
#define DFLT_VAL_NX90_phys_last_addr_sm6_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm6_cfg_add    0x00000000U
#define MSK_NX90_phys_last_addr_sm7_cfg_add            0xc0000000U
#define SRT_NX90_phys_last_addr_sm7_cfg_add            30
#define DFLT_VAL_NX90_phys_last_addr_sm7_cfg_add       0x00000000U
#define DFLT_BF_VAL_NX90_phys_last_addr_sm7_cfg_add    0x00000000U

/* all used bits of 'NX90_phys_last_addr': */
#define MSK_USED_BITS_NX90_phys_last_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmusm_xpec_nr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmusm_xpec_nr        0x000000D8U
#define Adr_NX90_xc0_fmmusm_fmmusm_xpec_nr 0xFF111AD8U
#define Adr_NX90_fmmusm_xpec_nr            0xFF111AD8U
#define DFLT_VAL_NX90_fmmusm_xpec_nr       0x00000000U

#define MSK_NX90_fmmusm_xpec_nr_xpec_nr         0x00000001U
#define SRT_NX90_fmmusm_xpec_nr_xpec_nr         0
#define DFLT_VAL_NX90_fmmusm_xpec_nr_xpec_nr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_xpec_nr_xpec_nr 0x00000000U

/* all used bits of 'NX90_fmmusm_xpec_nr': */
#define MSK_USED_BITS_NX90_fmmusm_xpec_nr 0x00000001U

/* --------------------------------------------------------------------- */
/* Register fmmusm_read_addr_in */
/* => Read address from EtherCAT telegram */
/*    Write access by xPEC at adr_xpec_r6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmusm_read_addr_in        0x00000100U
#define Adr_NX90_xc0_fmmusm_fmmusm_read_addr_in 0xFF111B00U
#define Adr_NX90_fmmusm_read_addr_in            0xFF111B00U
#define DFLT_VAL_NX90_fmmusm_read_addr_in       0x00000000U

#define MSK_NX90_fmmusm_read_addr_in_read_adr         0xffffffffU
#define SRT_NX90_fmmusm_read_addr_in_read_adr         0
#define DFLT_VAL_NX90_fmmusm_read_addr_in_read_adr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_read_addr_in_read_adr 0x00000000U

/* all used bits of 'NX90_fmmusm_read_addr_in': */
#define MSK_USED_BITS_NX90_fmmusm_read_addr_in 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmusm_write_addr_in */
/* => Write address from EtherCAT telegram */
/*    Write access by xPEC at adr_xpec_r7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmusm_write_addr_in        0x00000104U
#define Adr_NX90_xc0_fmmusm_fmmusm_write_addr_in 0xFF111B04U
#define Adr_NX90_fmmusm_write_addr_in            0xFF111B04U
#define DFLT_VAL_NX90_fmmusm_write_addr_in       0x00000000U

#define MSK_NX90_fmmusm_write_addr_in_write_adr         0xffffffffU
#define SRT_NX90_fmmusm_write_addr_in_write_adr         0
#define DFLT_VAL_NX90_fmmusm_write_addr_in_write_adr    0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_write_addr_in_write_adr 0x00000000U

/* all used bits of 'NX90_fmmusm_write_addr_in': */
#define MSK_USED_BITS_NX90_fmmusm_write_addr_in 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm_read_addr_out */
/* => Physical read address in xPEC RAM */
/*    Read access by xPEC at adr_xpec_r6 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_read_addr_out        0x00000108U
#define Adr_NX90_xc0_fmmusm_sm_read_addr_out 0xFF111B08U
#define Adr_NX90_sm_read_addr_out            0xFF111B08U

#define MSK_NX90_sm_read_addr_out_sm_read_adr_out 0x00001fffU
#define SRT_NX90_sm_read_addr_out_sm_read_adr_out 0

/* all used bits of 'NX90_sm_read_addr_out': */
#define MSK_USED_BITS_NX90_sm_read_addr_out 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register sm_write_addr_out */
/* => Physical write address in xPEC RAM */
/*    Read access by xPEC at adr_xpec_r7 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_write_addr_out        0x0000010CU
#define Adr_NX90_xc0_fmmusm_sm_write_addr_out 0xFF111B0CU
#define Adr_NX90_sm_write_addr_out            0xFF111B0CU

#define MSK_NX90_sm_write_addr_out_sm_write_adr_out 0x00001fffU
#define SRT_NX90_sm_write_addr_out_sm_write_adr_out 0

/* all used bits of 'NX90_sm_write_addr_out': */
#define MSK_USED_BITS_NX90_sm_write_addr_out 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register fmmu_read_bit_rol_pos */
/* => Shift and mask value for bitwise read access */
/*    For direct use with combined rol-and command. */
/*    Read access by xPEC at adr_statcfg2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu_read_bit_rol_pos        0x00000110U
#define Adr_NX90_xc0_fmmusm_fmmu_read_bit_rol_pos 0xFF111B10U
#define Adr_NX90_fmmu_read_bit_rol_pos            0xFF111B10U

#define MSK_NX90_fmmu_read_bit_rol_pos_fmmu_read_bit_rol      0x0000001fU
#define SRT_NX90_fmmu_read_bit_rol_pos_fmmu_read_bit_rol      0
#define MSK_NX90_fmmu_read_bit_rol_pos_fmmu_read_bit_maskmode 0x000000e0U
#define SRT_NX90_fmmu_read_bit_rol_pos_fmmu_read_bit_maskmode 5
#define MSK_NX90_fmmu_read_bit_rol_pos_fmmu_read_bit_mask     0x0000ff00U
#define SRT_NX90_fmmu_read_bit_rol_pos_fmmu_read_bit_mask     8
#define MSK_NX90_fmmu_read_bit_rol_pos_zero                   0xffff0000U
#define SRT_NX90_fmmu_read_bit_rol_pos_zero                   16

/* all used bits of 'NX90_fmmu_read_bit_rol_pos': */
#define MSK_USED_BITS_NX90_fmmu_read_bit_rol_pos 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu_read_bit_mask */
/* => AND-mask for bitwise read access */
/*    In case of read_allowed==0, mask is set to 0. */
/*    Read access by xPEC at adr_statcfg3 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu_read_bit_mask        0x00000114U
#define Adr_NX90_xc0_fmmusm_fmmu_read_bit_mask 0xFF111B14U
#define Adr_NX90_fmmu_read_bit_mask            0xFF111B14U

#define MSK_NX90_fmmu_read_bit_mask_fmmu_read_bit_mask 0x000000ffU
#define SRT_NX90_fmmu_read_bit_mask_fmmu_read_bit_mask 0

/* all used bits of 'NX90_fmmu_read_bit_mask': */
#define MSK_USED_BITS_NX90_fmmu_read_bit_mask 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register fmmu_write_bit_rol_pos */
/* => Shift and mask value for bitwise write access. */
/*    For direct use with combined rol-and command. */
/*    Read access by xPEC at adr_urtx2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu_write_bit_rol_pos        0x00000118U
#define Adr_NX90_xc0_fmmusm_fmmu_write_bit_rol_pos 0xFF111B18U
#define Adr_NX90_fmmu_write_bit_rol_pos            0xFF111B18U

#define MSK_NX90_fmmu_write_bit_rol_pos_fmmu_write_bit_rol      0x0000001fU
#define SRT_NX90_fmmu_write_bit_rol_pos_fmmu_write_bit_rol      0
#define MSK_NX90_fmmu_write_bit_rol_pos_fmmu_write_bit_maskmode 0x000000e0U
#define SRT_NX90_fmmu_write_bit_rol_pos_fmmu_write_bit_maskmode 5
#define MSK_NX90_fmmu_write_bit_rol_pos_fmmu_write_bit_mask     0x0000ff00U
#define SRT_NX90_fmmu_write_bit_rol_pos_fmmu_write_bit_mask     8
#define MSK_NX90_fmmu_write_bit_rol_pos_zero                    0xffff0000U
#define SRT_NX90_fmmu_write_bit_rol_pos_zero                    16

/* all used bits of 'NX90_fmmu_write_bit_rol_pos': */
#define MSK_USED_BITS_NX90_fmmu_write_bit_rol_pos 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fmmu_write_bit_mask */
/* => AND-mask for bitwise write access */
/*    In case of write_allowed==0, mask is set to 0. */
/*    Read access by xPEC at adr_urtx3 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmu_write_bit_mask        0x0000011CU
#define Adr_NX90_xc0_fmmusm_fmmu_write_bit_mask 0xFF111B1CU
#define Adr_NX90_fmmu_write_bit_mask            0xFF111B1CU

#define MSK_NX90_fmmu_write_bit_mask_fmmu_write_bit_mask 0x000000ffU
#define SRT_NX90_fmmu_write_bit_mask_fmmu_write_bit_mask 0

/* all used bits of 'NX90_fmmu_write_bit_mask': */
#define MSK_USED_BITS_NX90_fmmu_write_bit_mask 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register fmmusm_len_en */
/* => Logical address enable from EtherCAT command */
/*    Read/Write access by xPEC at adr_xpec_sr8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmusm_len_en        0x00000120U
#define Adr_NX90_xc0_fmmusm_fmmusm_len_en 0xFF111B20U
#define Adr_NX90_fmmusm_len_en            0xFF111B20U
#define DFLT_VAL_NX90_fmmusm_len_en       0x00000000U

#define MSK_NX90_fmmusm_len_en_ecat_len            0x0000ffffU
#define SRT_NX90_fmmusm_len_en_ecat_len            0
#define DFLT_VAL_NX90_fmmusm_len_en_ecat_len       0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_len_en_ecat_len    0x00000000U
#define MSK_NX90_fmmusm_len_en_log_addr_en         0x00010000U
#define SRT_NX90_fmmusm_len_en_log_addr_en         16
#define DFLT_VAL_NX90_fmmusm_len_en_log_addr_en    0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_len_en_log_addr_en 0x00000000U
#define MSK_NX90_fmmusm_len_en_rd_en               0x00020000U
#define SRT_NX90_fmmusm_len_en_rd_en               17
#define DFLT_VAL_NX90_fmmusm_len_en_rd_en          0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_len_en_rd_en       0x00000000U
#define MSK_NX90_fmmusm_len_en_wr_en               0x00040000U
#define SRT_NX90_fmmusm_len_en_wr_en               18
#define DFLT_VAL_NX90_fmmusm_len_en_wr_en          0x00000000U
#define DFLT_BF_VAL_NX90_fmmusm_len_en_wr_en       0x00000000U

/* all used bits of 'NX90_fmmusm_len_en': */
#define MSK_USED_BITS_NX90_fmmusm_len_en 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register fmmusm_status_out */
/* => FMMU and SM match status: */
/*    Flags [31,30] are connected to event controller. */
/*    Read access by xPEC at adr_xpec_sr9 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fmmusm_status_out        0x00000124U
#define Adr_NX90_xc0_fmmusm_fmmusm_status_out 0xFF111B24U
#define Adr_NX90_fmmusm_status_out            0xFF111B24U

#define MSK_NX90_fmmusm_status_out_read_sm_nr               0x00000007U
#define SRT_NX90_fmmusm_status_out_read_sm_nr               0
#define MSK_NX90_fmmusm_status_out_read_sm_no_match         0x00000008U
#define SRT_NX90_fmmusm_status_out_read_sm_no_match         3
#define MSK_NX90_fmmusm_status_out_read_sm_fba              0x00000010U
#define SRT_NX90_fmmusm_status_out_read_sm_fba              4
#define MSK_NX90_fmmusm_status_out_read_sm_lba              0x00000020U
#define SRT_NX90_fmmusm_status_out_read_sm_lba              5
#define MSK_NX90_fmmusm_status_out_read_allowed             0x00000040U
#define SRT_NX90_fmmusm_status_out_read_allowed             6
#define MSK_NX90_fmmusm_status_out_read_allowed_bitwise     0x00000080U
#define SRT_NX90_fmmusm_status_out_read_allowed_bitwise     7
#define MSK_NX90_fmmusm_status_out_write_sm_nr              0x00000700U
#define SRT_NX90_fmmusm_status_out_write_sm_nr              8
#define MSK_NX90_fmmusm_status_out_write_sm_no_match        0x00000800U
#define SRT_NX90_fmmusm_status_out_write_sm_no_match        11
#define MSK_NX90_fmmusm_status_out_write_sm_fba             0x00001000U
#define SRT_NX90_fmmusm_status_out_write_sm_fba             12
#define MSK_NX90_fmmusm_status_out_write_sm_lba             0x00002000U
#define SRT_NX90_fmmusm_status_out_write_sm_lba             13
#define MSK_NX90_fmmusm_status_out_write_allowed            0x00004000U
#define SRT_NX90_fmmusm_status_out_write_allowed            14
#define MSK_NX90_fmmusm_status_out_write_allowed_bitwise    0x00008000U
#define SRT_NX90_fmmusm_status_out_write_allowed_bitwise    15
#define MSK_NX90_fmmusm_status_out_read_fmmu_match_nr       0x00070000U
#define SRT_NX90_fmmusm_status_out_read_fmmu_match_nr       16
#define MSK_NX90_fmmusm_status_out_read_fmmu_no_match       0x00080000U
#define SRT_NX90_fmmusm_status_out_read_fmmu_no_match       19
#define MSK_NX90_fmmusm_status_out_write_fmmu_match_nr      0x00700000U
#define SRT_NX90_fmmusm_status_out_write_fmmu_match_nr      20
#define MSK_NX90_fmmusm_status_out_write_fmmu_no_match      0x00800000U
#define SRT_NX90_fmmusm_status_out_write_fmmu_no_match      23
#define MSK_NX90_fmmusm_status_out_read_fmmu_match_bitwise  0x01000000U
#define SRT_NX90_fmmusm_status_out_read_fmmu_match_bitwise  24
#define MSK_NX90_fmmusm_status_out_write_fmmu_match_bitwise 0x02000000U
#define SRT_NX90_fmmusm_status_out_write_fmmu_match_bitwise 25
#define MSK_NX90_fmmusm_status_out_allowed_bitwise          0x20000000U
#define SRT_NX90_fmmusm_status_out_allowed_bitwise          29
#define MSK_NX90_fmmusm_status_out_allowed                  0x40000000U
#define SRT_NX90_fmmusm_status_out_allowed                  30
#define MSK_NX90_fmmusm_status_out_ecat_fin                 0x80000000U
#define SRT_NX90_fmmusm_status_out_ecat_fin                 31

/* all used bits of 'NX90_fmmusm_status_out': */
#define MSK_USED_BITS_NX90_fmmusm_status_out 0xe3ffffffU

/* --------------------------------------------------------------------- */
/* Register sm_buf_statcfg */
/* => Config bits set by xPEC, if any 3-buffer-SM gets new buffer. */
/*    Writable in parallel with mask by all xPECs, ARM and BUF_MAN. */
/*    Read/Write access by xPEC at adr_xpec_sr10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_buf_statcfg        0x00000128U
#define Adr_NX90_xc0_fmmusm_sm_buf_statcfg 0xFF111B28U
#define Adr_NX90_sm_buf_statcfg            0xFF111B28U
#define DFLT_VAL_NX90_sm_buf_statcfg       0x00ffff00U

#define MSK_NX90_sm_buf_statcfg_buf_full_0         0x00000001U
#define SRT_NX90_sm_buf_statcfg_buf_full_0         0
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_0    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_0 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_1         0x00000002U
#define SRT_NX90_sm_buf_statcfg_buf_full_1         1
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_1    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_1 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_2         0x00000004U
#define SRT_NX90_sm_buf_statcfg_buf_full_2         2
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_2    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_2 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_3         0x00000008U
#define SRT_NX90_sm_buf_statcfg_buf_full_3         3
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_3    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_3 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_4         0x00000010U
#define SRT_NX90_sm_buf_statcfg_buf_full_4         4
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_4    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_4 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_5         0x00000020U
#define SRT_NX90_sm_buf_statcfg_buf_full_5         5
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_5    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_5 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_6         0x00000040U
#define SRT_NX90_sm_buf_statcfg_buf_full_6         6
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_6    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_6 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_full_7         0x00000080U
#define SRT_NX90_sm_buf_statcfg_buf_full_7         7
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_full_7    0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_full_7 0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_nr_0           0x00000300U
#define SRT_NX90_sm_buf_statcfg_buf_nr_0           8
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_0      0x00000300U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_0   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_1           0x00000c00U
#define SRT_NX90_sm_buf_statcfg_buf_nr_1           10
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_1      0x00000c00U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_1   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_2           0x00003000U
#define SRT_NX90_sm_buf_statcfg_buf_nr_2           12
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_2      0x00003000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_2   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_3           0x0000c000U
#define SRT_NX90_sm_buf_statcfg_buf_nr_3           14
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_3      0x0000c000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_3   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_4           0x00030000U
#define SRT_NX90_sm_buf_statcfg_buf_nr_4           16
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_4      0x00030000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_4   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_5           0x000c0000U
#define SRT_NX90_sm_buf_statcfg_buf_nr_5           18
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_5      0x000c0000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_5   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_6           0x00300000U
#define SRT_NX90_sm_buf_statcfg_buf_nr_6           20
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_6      0x00300000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_6   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_nr_7           0x00c00000U
#define SRT_NX90_sm_buf_statcfg_buf_nr_7           22
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_nr_7      0x00c00000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_nr_7   0x00000003U
#define MSK_NX90_sm_buf_statcfg_buf_mask0          0x01000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask0          24
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask0     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask0  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask1          0x02000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask1          25
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask1     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask1  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask2          0x04000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask2          26
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask2     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask2  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask3          0x08000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask3          27
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask3     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask3  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask4          0x10000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask4          28
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask4     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask4  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask5          0x20000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask5          29
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask5     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask5  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask6          0x40000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask6          30
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask6     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask6  0x00000000U
#define MSK_NX90_sm_buf_statcfg_buf_mask7          0x80000000U
#define SRT_NX90_sm_buf_statcfg_buf_mask7          31
#define DFLT_VAL_NX90_sm_buf_statcfg_buf_mask7     0x00000000U
#define DFLT_BF_VAL_NX90_sm_buf_statcfg_buf_mask7  0x00000000U

/* all used bits of 'NX90_sm_buf_statcfg': */
#define MSK_USED_BITS_NX90_sm_buf_statcfg 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sm_read_event */
/* => Read Event status bits of all SM, process channel: */
/*    Writable in parallel with mask by all xPECs and ARM. */
/*    Reset by FMMUSM at first_byte_addressed and write_allowed. */
/*    Read/Write access by xPEC at adr_xpec_sr11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_read_event        0x0000012CU
#define Adr_NX90_xc0_fmmusm_sm_read_event 0xFF111B2CU
#define Adr_NX90_sm_read_event            0xFF111B2CU
#define DFLT_VAL_NX90_sm_read_event       0x00000000U

#define MSK_NX90_sm_read_event_read_event_0             0x00000001U
#define SRT_NX90_sm_read_event_read_event_0             0
#define DFLT_VAL_NX90_sm_read_event_read_event_0        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_0     0x00000000U
#define MSK_NX90_sm_read_event_read_event_1             0x00000002U
#define SRT_NX90_sm_read_event_read_event_1             1
#define DFLT_VAL_NX90_sm_read_event_read_event_1        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_1     0x00000000U
#define MSK_NX90_sm_read_event_read_event_2             0x00000004U
#define SRT_NX90_sm_read_event_read_event_2             2
#define DFLT_VAL_NX90_sm_read_event_read_event_2        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_2     0x00000000U
#define MSK_NX90_sm_read_event_read_event_3             0x00000008U
#define SRT_NX90_sm_read_event_read_event_3             3
#define DFLT_VAL_NX90_sm_read_event_read_event_3        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_3     0x00000000U
#define MSK_NX90_sm_read_event_read_event_4             0x00000010U
#define SRT_NX90_sm_read_event_read_event_4             4
#define DFLT_VAL_NX90_sm_read_event_read_event_4        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_4     0x00000000U
#define MSK_NX90_sm_read_event_read_event_5             0x00000020U
#define SRT_NX90_sm_read_event_read_event_5             5
#define DFLT_VAL_NX90_sm_read_event_read_event_5        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_5     0x00000000U
#define MSK_NX90_sm_read_event_read_event_6             0x00000040U
#define SRT_NX90_sm_read_event_read_event_6             6
#define DFLT_VAL_NX90_sm_read_event_read_event_6        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_6     0x00000000U
#define MSK_NX90_sm_read_event_read_event_7             0x00000080U
#define SRT_NX90_sm_read_event_read_event_7             7
#define DFLT_VAL_NX90_sm_read_event_read_event_7        0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_7     0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask0         0x00010000U
#define SRT_NX90_sm_read_event_read_event_mask0         16
#define DFLT_VAL_NX90_sm_read_event_read_event_mask0    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask0 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask1         0x00020000U
#define SRT_NX90_sm_read_event_read_event_mask1         17
#define DFLT_VAL_NX90_sm_read_event_read_event_mask1    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask1 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask2         0x00040000U
#define SRT_NX90_sm_read_event_read_event_mask2         18
#define DFLT_VAL_NX90_sm_read_event_read_event_mask2    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask2 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask3         0x00080000U
#define SRT_NX90_sm_read_event_read_event_mask3         19
#define DFLT_VAL_NX90_sm_read_event_read_event_mask3    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask3 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask4         0x00100000U
#define SRT_NX90_sm_read_event_read_event_mask4         20
#define DFLT_VAL_NX90_sm_read_event_read_event_mask4    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask4 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask5         0x00200000U
#define SRT_NX90_sm_read_event_read_event_mask5         21
#define DFLT_VAL_NX90_sm_read_event_read_event_mask5    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask5 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask6         0x00400000U
#define SRT_NX90_sm_read_event_read_event_mask6         22
#define DFLT_VAL_NX90_sm_read_event_read_event_mask6    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask6 0x00000000U
#define MSK_NX90_sm_read_event_read_event_mask7         0x00800000U
#define SRT_NX90_sm_read_event_read_event_mask7         23
#define DFLT_VAL_NX90_sm_read_event_read_event_mask7    0x00000000U
#define DFLT_BF_VAL_NX90_sm_read_event_read_event_mask7 0x00000000U

/* all used bits of 'NX90_sm_read_event': */
#define MSK_USED_BITS_NX90_sm_read_event 0x00ff00ffU

/* --------------------------------------------------------------------- */
/* Register sm_write_event */
/* => Write Event status bits of all SM, process channel */
/*    Writable in parallel with mask by all xPECs and ARM. */
/*    Reset by FMMUSM at first_byte_addressed and read_allowed. */
/*    Read/Write access by xPEC at adr_xpec_sr12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_write_event        0x00000130U
#define Adr_NX90_xc0_fmmusm_sm_write_event 0xFF111B30U
#define Adr_NX90_sm_write_event            0xFF111B30U
#define DFLT_VAL_NX90_sm_write_event       0x00000000U

#define MSK_NX90_sm_write_event_write_event_0             0x00000001U
#define SRT_NX90_sm_write_event_write_event_0             0
#define DFLT_VAL_NX90_sm_write_event_write_event_0        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_0     0x00000000U
#define MSK_NX90_sm_write_event_write_event_1             0x00000002U
#define SRT_NX90_sm_write_event_write_event_1             1
#define DFLT_VAL_NX90_sm_write_event_write_event_1        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_1     0x00000000U
#define MSK_NX90_sm_write_event_write_event_2             0x00000004U
#define SRT_NX90_sm_write_event_write_event_2             2
#define DFLT_VAL_NX90_sm_write_event_write_event_2        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_2     0x00000000U
#define MSK_NX90_sm_write_event_write_event_3             0x00000008U
#define SRT_NX90_sm_write_event_write_event_3             3
#define DFLT_VAL_NX90_sm_write_event_write_event_3        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_3     0x00000000U
#define MSK_NX90_sm_write_event_write_event_4             0x00000010U
#define SRT_NX90_sm_write_event_write_event_4             4
#define DFLT_VAL_NX90_sm_write_event_write_event_4        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_4     0x00000000U
#define MSK_NX90_sm_write_event_write_event_5             0x00000020U
#define SRT_NX90_sm_write_event_write_event_5             5
#define DFLT_VAL_NX90_sm_write_event_write_event_5        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_5     0x00000000U
#define MSK_NX90_sm_write_event_write_event_6             0x00000040U
#define SRT_NX90_sm_write_event_write_event_6             6
#define DFLT_VAL_NX90_sm_write_event_write_event_6        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_6     0x00000000U
#define MSK_NX90_sm_write_event_write_event_7             0x00000080U
#define SRT_NX90_sm_write_event_write_event_7             7
#define DFLT_VAL_NX90_sm_write_event_write_event_7        0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_7     0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask0         0x00010000U
#define SRT_NX90_sm_write_event_write_event_mask0         16
#define DFLT_VAL_NX90_sm_write_event_write_event_mask0    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask0 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask1         0x00020000U
#define SRT_NX90_sm_write_event_write_event_mask1         17
#define DFLT_VAL_NX90_sm_write_event_write_event_mask1    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask1 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask2         0x00040000U
#define SRT_NX90_sm_write_event_write_event_mask2         18
#define DFLT_VAL_NX90_sm_write_event_write_event_mask2    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask2 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask3         0x00080000U
#define SRT_NX90_sm_write_event_write_event_mask3         19
#define DFLT_VAL_NX90_sm_write_event_write_event_mask3    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask3 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask4         0x00100000U
#define SRT_NX90_sm_write_event_write_event_mask4         20
#define DFLT_VAL_NX90_sm_write_event_write_event_mask4    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask4 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask5         0x00200000U
#define SRT_NX90_sm_write_event_write_event_mask5         21
#define DFLT_VAL_NX90_sm_write_event_write_event_mask5    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask5 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask6         0x00400000U
#define SRT_NX90_sm_write_event_write_event_mask6         22
#define DFLT_VAL_NX90_sm_write_event_write_event_mask6    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask6 0x00000000U
#define MSK_NX90_sm_write_event_write_event_mask7         0x00800000U
#define SRT_NX90_sm_write_event_write_event_mask7         23
#define DFLT_VAL_NX90_sm_write_event_write_event_mask7    0x00000000U
#define DFLT_BF_VAL_NX90_sm_write_event_write_event_mask7 0x00000000U

/* all used bits of 'NX90_sm_write_event': */
#define MSK_USED_BITS_NX90_sm_write_event 0x00ff00ffU

/* --------------------------------------------------------------------- */
/* Register sm_first_byte_addressed */
/* => First byte addressed status bits of all SM, process channel: */
/*    Set by HW, if first byte was addressed. */
/*    Reset by SW (xPEC or ARM), by writing 1 on appropriate bit (usually after FCSok/fail). */
/*    Resetable in parallel by all xPECs and ARM. */
/*    Bits 31:8 are read only versions of other registers for faster update of register area. */
/*    Read/Write access by xPEC at adr_xpec_sr13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_first_byte_addressed        0x00000134U
#define Adr_NX90_xc0_fmmusm_sm_first_byte_addressed 0xFF111B34U
#define Adr_NX90_sm_first_byte_addressed            0xFF111B34U
#define DFLT_VAL_NX90_sm_first_byte_addressed       0x00000000U

#define MSK_NX90_sm_first_byte_addressed_fba_0                 0x00000001U
#define SRT_NX90_sm_first_byte_addressed_fba_0                 0
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_0            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_0         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_1                 0x00000002U
#define SRT_NX90_sm_first_byte_addressed_fba_1                 1
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_1            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_1         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_2                 0x00000004U
#define SRT_NX90_sm_first_byte_addressed_fba_2                 2
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_2            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_2         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_3                 0x00000008U
#define SRT_NX90_sm_first_byte_addressed_fba_3                 3
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_3            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_3         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_4                 0x00000010U
#define SRT_NX90_sm_first_byte_addressed_fba_4                 4
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_4            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_4         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_5                 0x00000020U
#define SRT_NX90_sm_first_byte_addressed_fba_5                 5
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_5            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_5         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_6                 0x00000040U
#define SRT_NX90_sm_first_byte_addressed_fba_6                 6
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_6            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_6         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_fba_7                 0x00000080U
#define SRT_NX90_sm_first_byte_addressed_fba_7                 7
#define DFLT_VAL_NX90_sm_first_byte_addressed_fba_7            0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_fba_7         0x00000000U
#define MSK_NX90_sm_first_byte_addressed_write_event_0         0x00000100U
#define SRT_NX90_sm_first_byte_addressed_write_event_0         8
#define DFLT_VAL_NX90_sm_first_byte_addressed_write_event_0    0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_write_event_0 0x00000000U
#define MSK_NX90_sm_first_byte_addressed_read_event_0          0x00000200U
#define SRT_NX90_sm_first_byte_addressed_read_event_0          9
#define DFLT_VAL_NX90_sm_first_byte_addressed_read_event_0     0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_read_event_0  0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_full_0            0x00000800U
#define SRT_NX90_sm_first_byte_addressed_buf_full_0            11
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_full_0       0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_full_0    0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_nr_0              0x00003000U
#define SRT_NX90_sm_first_byte_addressed_buf_nr_0              12
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_nr_0         0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_nr_0      0x00000000U
#define MSK_NX90_sm_first_byte_addressed_write_event_1         0x00004000U
#define SRT_NX90_sm_first_byte_addressed_write_event_1         14
#define DFLT_VAL_NX90_sm_first_byte_addressed_write_event_1    0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_write_event_1 0x00000000U
#define MSK_NX90_sm_first_byte_addressed_read_event_1          0x00008000U
#define SRT_NX90_sm_first_byte_addressed_read_event_1          15
#define DFLT_VAL_NX90_sm_first_byte_addressed_read_event_1     0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_read_event_1  0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_full_1            0x00020000U
#define SRT_NX90_sm_first_byte_addressed_buf_full_1            17
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_full_1       0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_full_1    0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_nr_1              0x000c0000U
#define SRT_NX90_sm_first_byte_addressed_buf_nr_1              18
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_nr_1         0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_nr_1      0x00000000U
#define MSK_NX90_sm_first_byte_addressed_write_event_2         0x00100000U
#define SRT_NX90_sm_first_byte_addressed_write_event_2         20
#define DFLT_VAL_NX90_sm_first_byte_addressed_write_event_2    0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_write_event_2 0x00000000U
#define MSK_NX90_sm_first_byte_addressed_read_event_2          0x00200000U
#define SRT_NX90_sm_first_byte_addressed_read_event_2          21
#define DFLT_VAL_NX90_sm_first_byte_addressed_read_event_2     0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_read_event_2  0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_full_2            0x00800000U
#define SRT_NX90_sm_first_byte_addressed_buf_full_2            23
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_full_2       0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_full_2    0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_nr_2              0x03000000U
#define SRT_NX90_sm_first_byte_addressed_buf_nr_2              24
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_nr_2         0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_nr_2      0x00000000U
#define MSK_NX90_sm_first_byte_addressed_write_event_3         0x04000000U
#define SRT_NX90_sm_first_byte_addressed_write_event_3         26
#define DFLT_VAL_NX90_sm_first_byte_addressed_write_event_3    0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_write_event_3 0x00000000U
#define MSK_NX90_sm_first_byte_addressed_read_event_3          0x08000000U
#define SRT_NX90_sm_first_byte_addressed_read_event_3          27
#define DFLT_VAL_NX90_sm_first_byte_addressed_read_event_3     0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_read_event_3  0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_full_3            0x20000000U
#define SRT_NX90_sm_first_byte_addressed_buf_full_3            29
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_full_3       0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_full_3    0x00000000U
#define MSK_NX90_sm_first_byte_addressed_buf_nr_3              0xc0000000U
#define SRT_NX90_sm_first_byte_addressed_buf_nr_3              30
#define DFLT_VAL_NX90_sm_first_byte_addressed_buf_nr_3         0x00000000U
#define DFLT_BF_VAL_NX90_sm_first_byte_addressed_buf_nr_3      0x00000000U

/* all used bits of 'NX90_sm_first_byte_addressed': */
#define MSK_USED_BITS_NX90_sm_first_byte_addressed 0xefbefbffU

/* --------------------------------------------------------------------- */
/* Register sm_last_byte_addressed */
/* => Last byte addressed status bits of all SM, process channel: */
/*    Set by HW, if last byte was addressed. */
/*    Reset by SW (xPEC or ARM), by writing 1 on appropriate bit (usually after FCSok/fail). */
/*    Resetable in parallel by all xPECs and ARM. */
/*    Bits 31:8 are read only versions of other registers for faster update of register area. */
/*    Read/Write access by xPEC at adr_xpec_sr14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_last_byte_addressed        0x00000138U
#define Adr_NX90_xc0_fmmusm_sm_last_byte_addressed 0xFF111B38U
#define Adr_NX90_sm_last_byte_addressed            0xFF111B38U
#define DFLT_VAL_NX90_sm_last_byte_addressed       0x00000000U

#define MSK_NX90_sm_last_byte_addressed_lba_0                 0x00000001U
#define SRT_NX90_sm_last_byte_addressed_lba_0                 0
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_0            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_0         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_1                 0x00000002U
#define SRT_NX90_sm_last_byte_addressed_lba_1                 1
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_1            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_1         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_2                 0x00000004U
#define SRT_NX90_sm_last_byte_addressed_lba_2                 2
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_2            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_2         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_3                 0x00000008U
#define SRT_NX90_sm_last_byte_addressed_lba_3                 3
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_3            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_3         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_4                 0x00000010U
#define SRT_NX90_sm_last_byte_addressed_lba_4                 4
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_4            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_4         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_5                 0x00000020U
#define SRT_NX90_sm_last_byte_addressed_lba_5                 5
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_5            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_5         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_6                 0x00000040U
#define SRT_NX90_sm_last_byte_addressed_lba_6                 6
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_6            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_6         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_lba_7                 0x00000080U
#define SRT_NX90_sm_last_byte_addressed_lba_7                 7
#define DFLT_VAL_NX90_sm_last_byte_addressed_lba_7            0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_lba_7         0x00000000U
#define MSK_NX90_sm_last_byte_addressed_write_event_4         0x00000100U
#define SRT_NX90_sm_last_byte_addressed_write_event_4         8
#define DFLT_VAL_NX90_sm_last_byte_addressed_write_event_4    0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_write_event_4 0x00000000U
#define MSK_NX90_sm_last_byte_addressed_read_event_4          0x00000200U
#define SRT_NX90_sm_last_byte_addressed_read_event_4          9
#define DFLT_VAL_NX90_sm_last_byte_addressed_read_event_4     0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_read_event_4  0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_full_4            0x00000800U
#define SRT_NX90_sm_last_byte_addressed_buf_full_4            11
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_full_4       0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_full_4    0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_nr_4              0x00003000U
#define SRT_NX90_sm_last_byte_addressed_buf_nr_4              12
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_nr_4         0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_nr_4      0x00000000U
#define MSK_NX90_sm_last_byte_addressed_write_event_5         0x00004000U
#define SRT_NX90_sm_last_byte_addressed_write_event_5         14
#define DFLT_VAL_NX90_sm_last_byte_addressed_write_event_5    0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_write_event_5 0x00000000U
#define MSK_NX90_sm_last_byte_addressed_read_event_5          0x00008000U
#define SRT_NX90_sm_last_byte_addressed_read_event_5          15
#define DFLT_VAL_NX90_sm_last_byte_addressed_read_event_5     0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_read_event_5  0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_full_5            0x00020000U
#define SRT_NX90_sm_last_byte_addressed_buf_full_5            17
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_full_5       0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_full_5    0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_nr_5              0x000c0000U
#define SRT_NX90_sm_last_byte_addressed_buf_nr_5              18
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_nr_5         0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_nr_5      0x00000000U
#define MSK_NX90_sm_last_byte_addressed_write_event_6         0x00100000U
#define SRT_NX90_sm_last_byte_addressed_write_event_6         20
#define DFLT_VAL_NX90_sm_last_byte_addressed_write_event_6    0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_write_event_6 0x00000000U
#define MSK_NX90_sm_last_byte_addressed_read_event_6          0x00200000U
#define SRT_NX90_sm_last_byte_addressed_read_event_6          21
#define DFLT_VAL_NX90_sm_last_byte_addressed_read_event_6     0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_read_event_6  0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_full_6            0x00800000U
#define SRT_NX90_sm_last_byte_addressed_buf_full_6            23
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_full_6       0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_full_6    0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_nr_6              0x03000000U
#define SRT_NX90_sm_last_byte_addressed_buf_nr_6              24
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_nr_6         0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_nr_6      0x00000000U
#define MSK_NX90_sm_last_byte_addressed_write_event_7         0x04000000U
#define SRT_NX90_sm_last_byte_addressed_write_event_7         26
#define DFLT_VAL_NX90_sm_last_byte_addressed_write_event_7    0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_write_event_7 0x00000000U
#define MSK_NX90_sm_last_byte_addressed_read_event_7          0x08000000U
#define SRT_NX90_sm_last_byte_addressed_read_event_7          27
#define DFLT_VAL_NX90_sm_last_byte_addressed_read_event_7     0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_read_event_7  0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_full_7            0x20000000U
#define SRT_NX90_sm_last_byte_addressed_buf_full_7            29
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_full_7       0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_full_7    0x00000000U
#define MSK_NX90_sm_last_byte_addressed_buf_nr_7              0xc0000000U
#define SRT_NX90_sm_last_byte_addressed_buf_nr_7              30
#define DFLT_VAL_NX90_sm_last_byte_addressed_buf_nr_7         0x00000000U
#define DFLT_BF_VAL_NX90_sm_last_byte_addressed_buf_nr_7      0x00000000U

/* all used bits of 'NX90_sm_last_byte_addressed': */
#define MSK_USED_BITS_NX90_sm_last_byte_addressed 0xefbefbffU

/* --------------------------------------------------------------------- */
/* Register sm_served */
/* => Served status bits of all SM, process channel: */
/*    Set by HW, if SM gives write_allowed or read_allowed. */
/*    Reset by SW (xPEC or ARM), by writing 1 on appropriate bit (usually after FCSok/fail). */
/*    Read/Write access by xPEC at adr_xpec_sr15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sm_served        0x0000013CU
#define Adr_NX90_xc0_fmmusm_sm_served 0xFF111B3CU
#define Adr_NX90_sm_served            0xFF111B3CU
#define DFLT_VAL_NX90_sm_served       0x00000000U

#define MSK_NX90_sm_served_srvd_0                       0x00000001U
#define SRT_NX90_sm_served_srvd_0                       0
#define DFLT_VAL_NX90_sm_served_srvd_0                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_0               0x00000000U
#define MSK_NX90_sm_served_srvd_1                       0x00000002U
#define SRT_NX90_sm_served_srvd_1                       1
#define DFLT_VAL_NX90_sm_served_srvd_1                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_1               0x00000000U
#define MSK_NX90_sm_served_srvd_2                       0x00000004U
#define SRT_NX90_sm_served_srvd_2                       2
#define DFLT_VAL_NX90_sm_served_srvd_2                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_2               0x00000000U
#define MSK_NX90_sm_served_srvd_3                       0x00000008U
#define SRT_NX90_sm_served_srvd_3                       3
#define DFLT_VAL_NX90_sm_served_srvd_3                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_3               0x00000000U
#define MSK_NX90_sm_served_srvd_4                       0x00000010U
#define SRT_NX90_sm_served_srvd_4                       4
#define DFLT_VAL_NX90_sm_served_srvd_4                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_4               0x00000000U
#define MSK_NX90_sm_served_srvd_5                       0x00000020U
#define SRT_NX90_sm_served_srvd_5                       5
#define DFLT_VAL_NX90_sm_served_srvd_5                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_5               0x00000000U
#define MSK_NX90_sm_served_srvd_6                       0x00000040U
#define SRT_NX90_sm_served_srvd_6                       6
#define DFLT_VAL_NX90_sm_served_srvd_6                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_6               0x00000000U
#define MSK_NX90_sm_served_srvd_7                       0x00000080U
#define SRT_NX90_sm_served_srvd_7                       7
#define DFLT_VAL_NX90_sm_served_srvd_7                  0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_srvd_7               0x00000000U
#define MSK_NX90_sm_served_any_proc_read_match          0x00000100U
#define SRT_NX90_sm_served_any_proc_read_match          8
#define DFLT_VAL_NX90_sm_served_any_proc_read_match     0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_any_proc_read_match  0x00000000U
#define MSK_NX90_sm_served_any_proc_write_match         0x00000200U
#define SRT_NX90_sm_served_any_proc_write_match         9
#define DFLT_VAL_NX90_sm_served_any_proc_write_match    0x00000000U
#define DFLT_BF_VAL_NX90_sm_served_any_proc_write_match 0x00000000U

/* all used bits of 'NX90_sm_served': */
#define MSK_USED_BITS_NX90_sm_served 0x000003ffU


/* ===================================================================== */

/* AREA trigger_sample_unit */
/* Area of xc0_trigger_sample_unit */

/* ===================================================================== */

#define Addr_NX90_xc0_trigger_sample_unit 0xFF111C00U

/* --------------------------------------------------------------------- */
/* Register trigger_sample_config */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_sample_config                     0x00000000U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_sample_config 0xFF111C00U
#define Adr_NX90_trigger_sample_config                         0xFF111C00U
#define DFLT_VAL_NX90_trigger_sample_config                    0x00000000U

#define MSK_NX90_trigger_sample_config_sync0_output_driver           0x00000001U
#define SRT_NX90_trigger_sample_config_sync0_output_driver           0
#define DFLT_VAL_NX90_trigger_sample_config_sync0_output_driver      0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync0_output_driver   0x00000000U
#define MSK_NX90_trigger_sample_config_sync0_polarity                0x00000002U
#define SRT_NX90_trigger_sample_config_sync0_polarity                1
#define DFLT_VAL_NX90_trigger_sample_config_sync0_polarity           0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync0_polarity        0x00000000U
#define MSK_NX90_trigger_sample_config_sync0_oe                      0x00000004U
#define SRT_NX90_trigger_sample_config_sync0_oe                      2
#define DFLT_VAL_NX90_trigger_sample_config_sync0_oe                 0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync0_oe              0x00000000U
#define MSK_NX90_trigger_sample_config_sync0_irq_en                  0x00000008U
#define SRT_NX90_trigger_sample_config_sync0_irq_en                  3
#define DFLT_VAL_NX90_trigger_sample_config_sync0_irq_en             0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync0_irq_en          0x00000000U
#define MSK_NX90_trigger_sample_config_sync1_output_driver           0x00000010U
#define SRT_NX90_trigger_sample_config_sync1_output_driver           4
#define DFLT_VAL_NX90_trigger_sample_config_sync1_output_driver      0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync1_output_driver   0x00000000U
#define MSK_NX90_trigger_sample_config_sync1_polarity                0x00000020U
#define SRT_NX90_trigger_sample_config_sync1_polarity                5
#define DFLT_VAL_NX90_trigger_sample_config_sync1_polarity           0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync1_polarity        0x00000000U
#define MSK_NX90_trigger_sample_config_sync1_oe                      0x00000040U
#define SRT_NX90_trigger_sample_config_sync1_oe                      6
#define DFLT_VAL_NX90_trigger_sample_config_sync1_oe                 0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync1_oe              0x00000000U
#define MSK_NX90_trigger_sample_config_sync1_irq_en                  0x00000080U
#define SRT_NX90_trigger_sample_config_sync1_irq_en                  7
#define DFLT_VAL_NX90_trigger_sample_config_sync1_irq_en             0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_sync1_irq_en          0x00000000U
#define MSK_NX90_trigger_sample_config_trigger_mode                  0x00000300U
#define SRT_NX90_trigger_sample_config_trigger_mode                  8
#define DFLT_VAL_NX90_trigger_sample_config_trigger_mode             0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_trigger_mode          0x00000000U
#define MSK_NX90_trigger_sample_config_cyc1_count                    0x0000f000U
#define SRT_NX90_trigger_sample_config_cyc1_count                    12
#define DFLT_VAL_NX90_trigger_sample_config_cyc1_count               0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_cyc1_count            0x00000000U
#define MSK_NX90_trigger_sample_config_latch_unit_activate           0x00010000U
#define SRT_NX90_trigger_sample_config_latch_unit_activate           16
#define DFLT_VAL_NX90_trigger_sample_config_latch_unit_activate      0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_latch_unit_activate   0x00000000U
#define MSK_NX90_trigger_sample_config_latch0_posedge_irq_en         0x01000000U
#define SRT_NX90_trigger_sample_config_latch0_posedge_irq_en         24
#define DFLT_VAL_NX90_trigger_sample_config_latch0_posedge_irq_en    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_latch0_posedge_irq_en 0x00000000U
#define MSK_NX90_trigger_sample_config_latch0_negedge_irq_en         0x02000000U
#define SRT_NX90_trigger_sample_config_latch0_negedge_irq_en         25
#define DFLT_VAL_NX90_trigger_sample_config_latch0_negedge_irq_en    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_latch0_negedge_irq_en 0x00000000U
#define MSK_NX90_trigger_sample_config_latch1_posedge_irq_en         0x04000000U
#define SRT_NX90_trigger_sample_config_latch1_posedge_irq_en         26
#define DFLT_VAL_NX90_trigger_sample_config_latch1_posedge_irq_en    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_latch1_posedge_irq_en 0x00000000U
#define MSK_NX90_trigger_sample_config_latch1_negedge_irq_en         0x08000000U
#define SRT_NX90_trigger_sample_config_latch1_negedge_irq_en         27
#define DFLT_VAL_NX90_trigger_sample_config_latch1_negedge_irq_en    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_config_latch1_negedge_irq_en 0x00000000U

/* all used bits of 'NX90_trigger_sample_config': */
#define MSK_USED_BITS_NX90_trigger_sample_config 0x0f01f3ffU

/* --------------------------------------------------------------------- */
/* Register trigger_sample_status */
/* => r/w access by xPEC and ARM, set by trigger_sample_unit, write access (1'b1) clears the events, all status signals are connected to the xPEC event controller of each xPEC */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_sample_status                     0x00000004U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_sample_status 0xFF111C04U
#define Adr_NX90_trigger_sample_status                         0xFF111C04U
#define DFLT_VAL_NX90_trigger_sample_status                    0x00000000U

#define MSK_NX90_trigger_sample_status_sync0_status                    0x00000001U
#define SRT_NX90_trigger_sample_status_sync0_status                    0
#define DFLT_VAL_NX90_trigger_sample_status_sync0_status               0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sync0_status            0x00000000U
#define MSK_NX90_trigger_sample_status_sync1_status                    0x00000100U
#define SRT_NX90_trigger_sample_status_sync1_status                    8
#define DFLT_VAL_NX90_trigger_sample_status_sync1_status               0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sync1_status            0x00000000U
#define MSK_NX90_trigger_sample_status_sample_0_posedge_status         0x00010000U
#define SRT_NX90_trigger_sample_status_sample_0_posedge_status         16
#define DFLT_VAL_NX90_trigger_sample_status_sample_0_posedge_status    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sample_0_posedge_status 0x00000000U
#define MSK_NX90_trigger_sample_status_sample_0_negedge_status         0x00020000U
#define SRT_NX90_trigger_sample_status_sample_0_negedge_status         17
#define DFLT_VAL_NX90_trigger_sample_status_sample_0_negedge_status    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sample_0_negedge_status 0x00000000U
#define MSK_NX90_trigger_sample_status_sample_0_in                     0x00040000U
#define SRT_NX90_trigger_sample_status_sample_0_in                     18
#define DFLT_VAL_NX90_trigger_sample_status_sample_0_in                0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sample_0_in             0x00000000U
#define MSK_NX90_trigger_sample_status_sample_1_posedge_status         0x01000000U
#define SRT_NX90_trigger_sample_status_sample_1_posedge_status         24
#define DFLT_VAL_NX90_trigger_sample_status_sample_1_posedge_status    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sample_1_posedge_status 0x00000000U
#define MSK_NX90_trigger_sample_status_sample_1_negedge_status         0x02000000U
#define SRT_NX90_trigger_sample_status_sample_1_negedge_status         25
#define DFLT_VAL_NX90_trigger_sample_status_sample_1_negedge_status    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sample_1_negedge_status 0x00000000U
#define MSK_NX90_trigger_sample_status_sample_1_in                     0x04000000U
#define SRT_NX90_trigger_sample_status_sample_1_in                     26
#define DFLT_VAL_NX90_trigger_sample_status_sample_1_in                0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_status_sample_1_in             0x00000000U

/* all used bits of 'NX90_trigger_sample_status': */
#define MSK_USED_BITS_NX90_trigger_sample_status 0x07070101U

/* --------------------------------------------------------------------- */
/* Register trigger_sample_irq */
/* => r/w by xPEC and ARM, one global irq register for trigger_sample unit (must be also visible for HIF); irq set by xPEC, reset by arm (always with writing a 1 at appropriate bit position) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_sample_irq                     0x00000008U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_sample_irq 0xFF111C08U
#define Adr_NX90_trigger_sample_irq                         0xFF111C08U
#define DFLT_VAL_NX90_trigger_sample_irq                    0x00000000U

#define MSK_NX90_trigger_sample_irq_sync0_irq                  0x00000001U
#define SRT_NX90_trigger_sample_irq_sync0_irq                  0
#define DFLT_VAL_NX90_trigger_sample_irq_sync0_irq             0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_irq_sync0_irq          0x00000000U
#define MSK_NX90_trigger_sample_irq_sync1_irq                  0x00000002U
#define SRT_NX90_trigger_sample_irq_sync1_irq                  1
#define DFLT_VAL_NX90_trigger_sample_irq_sync1_irq             0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_irq_sync1_irq          0x00000000U
#define MSK_NX90_trigger_sample_irq_latch0_posedge_irq         0x00000100U
#define SRT_NX90_trigger_sample_irq_latch0_posedge_irq         8
#define DFLT_VAL_NX90_trigger_sample_irq_latch0_posedge_irq    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_irq_latch0_posedge_irq 0x00000000U
#define MSK_NX90_trigger_sample_irq_latch0_negedge_irq         0x00000200U
#define SRT_NX90_trigger_sample_irq_latch0_negedge_irq         9
#define DFLT_VAL_NX90_trigger_sample_irq_latch0_negedge_irq    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_irq_latch0_negedge_irq 0x00000000U
#define MSK_NX90_trigger_sample_irq_latch1_posedge_irq         0x00000400U
#define SRT_NX90_trigger_sample_irq_latch1_posedge_irq         10
#define DFLT_VAL_NX90_trigger_sample_irq_latch1_posedge_irq    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_irq_latch1_posedge_irq 0x00000000U
#define MSK_NX90_trigger_sample_irq_latch1_negedge_irq         0x00000800U
#define SRT_NX90_trigger_sample_irq_latch1_negedge_irq         11
#define DFLT_VAL_NX90_trigger_sample_irq_latch1_negedge_irq    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_sample_irq_latch1_negedge_irq 0x00000000U

/* all used bits of 'NX90_trigger_sample_irq': */
#define MSK_USED_BITS_NX90_trigger_sample_irq 0x00000f03U

/* --------------------------------------------------------------------- */
/* Register trigger_activate */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_activate                     0x0000000CU
#define Adr_NX90_xc0_trigger_sample_unit_trigger_activate 0xFF111C0CU
#define Adr_NX90_trigger_activate                         0xFF111C0CU
#define DFLT_VAL_NX90_trigger_activate                    0x00000000U

#define MSK_NX90_trigger_activate_trigger_unit_activate         0x00000100U
#define SRT_NX90_trigger_activate_trigger_unit_activate         8
#define DFLT_VAL_NX90_trigger_activate_trigger_unit_activate    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_activate_trigger_unit_activate 0x00000000U
#define MSK_NX90_trigger_activate_sync0_activate                0x00000200U
#define SRT_NX90_trigger_activate_sync0_activate                9
#define DFLT_VAL_NX90_trigger_activate_sync0_activate           0x00000000U
#define DFLT_BF_VAL_NX90_trigger_activate_sync0_activate        0x00000000U
#define MSK_NX90_trigger_activate_sync1_activate                0x00000400U
#define SRT_NX90_trigger_activate_sync1_activate                10
#define DFLT_VAL_NX90_trigger_activate_sync1_activate           0x00000000U
#define DFLT_BF_VAL_NX90_trigger_activate_sync1_activate        0x00000000U

/* all used bits of 'NX90_trigger_activate': */
#define MSK_USED_BITS_NX90_trigger_activate 0x00000700U

/* --------------------------------------------------------------------- */
/* Register trigger_impulse_length */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_impulse_length                     0x00000010U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_impulse_length 0xFF111C10U
#define Adr_NX90_trigger_impulse_length                         0xFF111C10U
#define DFLT_VAL_NX90_trigger_impulse_length                    0x00000000U

#define MSK_NX90_trigger_impulse_length_sync0_impulse_length         0x0000ffffU
#define SRT_NX90_trigger_impulse_length_sync0_impulse_length         0
#define DFLT_VAL_NX90_trigger_impulse_length_sync0_impulse_length    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_impulse_length_sync0_impulse_length 0x00000000U
#define MSK_NX90_trigger_impulse_length_sync1_impulse_length         0xffff0000U
#define SRT_NX90_trigger_impulse_length_sync1_impulse_length         16
#define DFLT_VAL_NX90_trigger_impulse_length_sync1_impulse_length    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_impulse_length_sync1_impulse_length 0x00000000U

/* all used bits of 'NX90_trigger_impulse_length': */
#define MSK_USED_BITS_NX90_trigger_impulse_length 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register trigger_0_starttime_ns */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_0_starttime_ns                     0x00000014U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_0_starttime_ns 0xFF111C14U
#define Adr_NX90_trigger_0_starttime_ns                         0xFF111C14U
#define DFLT_VAL_NX90_trigger_0_starttime_ns                    0x00000000U

#define MSK_NX90_trigger_0_starttime_ns_systime_ns         0xffffffffU
#define SRT_NX90_trigger_0_starttime_ns_systime_ns         0
#define DFLT_VAL_NX90_trigger_0_starttime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_0_starttime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_trigger_0_starttime_ns': */
#define MSK_USED_BITS_NX90_trigger_0_starttime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register trigger_1_starttime_ns */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_1_starttime_ns                     0x00000018U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_1_starttime_ns 0xFF111C18U
#define Adr_NX90_trigger_1_starttime_ns                         0xFF111C18U
#define DFLT_VAL_NX90_trigger_1_starttime_ns                    0x00000000U

#define MSK_NX90_trigger_1_starttime_ns_systime_ns         0xffffffffU
#define SRT_NX90_trigger_1_starttime_ns_systime_ns         0
#define DFLT_VAL_NX90_trigger_1_starttime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_1_starttime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_trigger_1_starttime_ns': */
#define MSK_USED_BITS_NX90_trigger_1_starttime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register trigger_0_cyc_time */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_0_cyc_time                     0x0000001CU
#define Adr_NX90_xc0_trigger_sample_unit_trigger_0_cyc_time 0xFF111C1CU
#define Adr_NX90_trigger_0_cyc_time                         0xFF111C1CU
#define DFLT_VAL_NX90_trigger_0_cyc_time                    0x00000000U

#define MSK_NX90_trigger_0_cyc_time_systime_ns         0xffffffffU
#define SRT_NX90_trigger_0_cyc_time_systime_ns         0
#define DFLT_VAL_NX90_trigger_0_cyc_time_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_0_cyc_time_systime_ns 0x00000000U

/* all used bits of 'NX90_trigger_0_cyc_time': */
#define MSK_USED_BITS_NX90_trigger_0_cyc_time 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register trigger_1_cyc_time */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_1_cyc_time                     0x00000020U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_1_cyc_time 0xFF111C20U
#define Adr_NX90_trigger_1_cyc_time                         0xFF111C20U
#define DFLT_VAL_NX90_trigger_1_cyc_time                    0x00000000U

#define MSK_NX90_trigger_1_cyc_time_systime_ns         0xffffffffU
#define SRT_NX90_trigger_1_cyc_time_systime_ns         0
#define DFLT_VAL_NX90_trigger_1_cyc_time_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_1_cyc_time_systime_ns 0x00000000U

/* all used bits of 'NX90_trigger_1_cyc_time': */
#define MSK_USED_BITS_NX90_trigger_1_cyc_time 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sample_mode */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_mode                     0x00000024U
#define Adr_NX90_xc0_trigger_sample_unit_sample_mode 0xFF111C24U
#define Adr_NX90_sample_mode                         0xFF111C24U
#define DFLT_VAL_NX90_sample_mode                    0x00000000U

#define MSK_NX90_sample_mode_sample_0_posedge_mode         0x00000001U
#define SRT_NX90_sample_mode_sample_0_posedge_mode         0
#define DFLT_VAL_NX90_sample_mode_sample_0_posedge_mode    0x00000000U
#define DFLT_BF_VAL_NX90_sample_mode_sample_0_posedge_mode 0x00000000U
#define MSK_NX90_sample_mode_sample_0_negedge_mode         0x00000002U
#define SRT_NX90_sample_mode_sample_0_negedge_mode         1
#define DFLT_VAL_NX90_sample_mode_sample_0_negedge_mode    0x00000000U
#define DFLT_BF_VAL_NX90_sample_mode_sample_0_negedge_mode 0x00000000U
#define MSK_NX90_sample_mode_sample_1_posedge_mode         0x00000100U
#define SRT_NX90_sample_mode_sample_1_posedge_mode         8
#define DFLT_VAL_NX90_sample_mode_sample_1_posedge_mode    0x00000000U
#define DFLT_BF_VAL_NX90_sample_mode_sample_1_posedge_mode 0x00000000U
#define MSK_NX90_sample_mode_sample_1_negedge_mode         0x00000200U
#define SRT_NX90_sample_mode_sample_1_negedge_mode         9
#define DFLT_VAL_NX90_sample_mode_sample_1_negedge_mode    0x00000000U
#define DFLT_BF_VAL_NX90_sample_mode_sample_1_negedge_mode 0x00000000U

/* all used bits of 'NX90_sample_mode': */
#define MSK_USED_BITS_NX90_sample_mode 0x00000303U

/* --------------------------------------------------------------------- */
/* Register sample_0_pos_systime_ns */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_0_pos_systime_ns                     0x00000028U
#define Adr_NX90_xc0_trigger_sample_unit_sample_0_pos_systime_ns 0xFF111C28U
#define Adr_NX90_sample_0_pos_systime_ns                         0xFF111C28U
#define DFLT_VAL_NX90_sample_0_pos_systime_ns                    0x00000000U

#define MSK_NX90_sample_0_pos_systime_ns_systime_ns         0xffffffffU
#define SRT_NX90_sample_0_pos_systime_ns_systime_ns         0
#define DFLT_VAL_NX90_sample_0_pos_systime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_sample_0_pos_systime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_sample_0_pos_systime_ns': */
#define MSK_USED_BITS_NX90_sample_0_pos_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sample_0_neg_systime_ns */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_0_neg_systime_ns                     0x0000002CU
#define Adr_NX90_xc0_trigger_sample_unit_sample_0_neg_systime_ns 0xFF111C2CU
#define Adr_NX90_sample_0_neg_systime_ns                         0xFF111C2CU
#define DFLT_VAL_NX90_sample_0_neg_systime_ns                    0x00000000U

#define MSK_NX90_sample_0_neg_systime_ns_systime_ns         0xffffffffU
#define SRT_NX90_sample_0_neg_systime_ns_systime_ns         0
#define DFLT_VAL_NX90_sample_0_neg_systime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_sample_0_neg_systime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_sample_0_neg_systime_ns': */
#define MSK_USED_BITS_NX90_sample_0_neg_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sample_1_pos_systime_ns */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_1_pos_systime_ns                     0x00000030U
#define Adr_NX90_xc0_trigger_sample_unit_sample_1_pos_systime_ns 0xFF111C30U
#define Adr_NX90_sample_1_pos_systime_ns                         0xFF111C30U
#define DFLT_VAL_NX90_sample_1_pos_systime_ns                    0x00000000U

#define MSK_NX90_sample_1_pos_systime_ns_systime_ns         0xffffffffU
#define SRT_NX90_sample_1_pos_systime_ns_systime_ns         0
#define DFLT_VAL_NX90_sample_1_pos_systime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_sample_1_pos_systime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_sample_1_pos_systime_ns': */
#define MSK_USED_BITS_NX90_sample_1_pos_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sample_1_neg_systime_ns */
/* => r/w access by xPEC and ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_1_neg_systime_ns                     0x00000034U
#define Adr_NX90_xc0_trigger_sample_unit_sample_1_neg_systime_ns 0xFF111C34U
#define Adr_NX90_sample_1_neg_systime_ns                         0xFF111C34U
#define DFLT_VAL_NX90_sample_1_neg_systime_ns                    0x00000000U

#define MSK_NX90_sample_1_neg_systime_ns_systime_ns         0xffffffffU
#define SRT_NX90_sample_1_neg_systime_ns_systime_ns         0
#define DFLT_VAL_NX90_sample_1_neg_systime_ns_systime_ns    0x00000000U
#define DFLT_BF_VAL_NX90_sample_1_neg_systime_ns_systime_ns 0x00000000U

/* all used bits of 'NX90_sample_1_neg_systime_ns': */
#define MSK_USED_BITS_NX90_sample_1_neg_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register trigger_offset */
/* => r/w access by ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_offset                     0x00000038U
#define Adr_NX90_xc0_trigger_sample_unit_trigger_offset 0xFF111C38U
#define Adr_NX90_trigger_offset                         0xFF111C38U
#define DFLT_VAL_NX90_trigger_offset                    0x00000000U

#define MSK_NX90_trigger_offset_trigger_offset         0xffffffffU
#define SRT_NX90_trigger_offset_trigger_offset         0
#define DFLT_VAL_NX90_trigger_offset_trigger_offset    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_offset_trigger_offset 0x00000000U

/* all used bits of 'NX90_trigger_offset': */
#define MSK_USED_BITS_NX90_trigger_offset 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sync1_interval */
/* => r/w access by ARM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sync1_interval                     0x0000003CU
#define Adr_NX90_xc0_trigger_sample_unit_sync1_interval 0xFF111C3CU
#define Adr_NX90_sync1_interval                         0xFF111C3CU
#define DFLT_VAL_NX90_sync1_interval                    0x00000000U

#define MSK_NX90_sync1_interval_sync1_interval         0x03ffffffU
#define SRT_NX90_sync1_interval_sync1_interval         0
#define DFLT_VAL_NX90_sync1_interval_sync1_interval    0x00000000U
#define DFLT_BF_VAL_NX90_sync1_interval_sync1_interval 0x00000000U

/* all used bits of 'NX90_sync1_interval': */
#define MSK_USED_BITS_NX90_sync1_interval 0x03ffffffU


/* ===================================================================== */

/* Area of xc_external_config */

/* ===================================================================== */

#define Addr_NX90_xc_external_config 0xFF111D00U

/* --------------------------------------------------------------------- */
/* Register fb0clk_rate_mul_add */
/* => Rate Multiplier Add Value: */
/*    Fieldbus0 clock is generated by internal 40MHz rate multiplier. \ */
/*    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \ */
/*    xMAC fieldbus outputs (xm0_tx_out, xm0_tx_oe) can optionally (io_config-sel_xm0_eclk) be sampled by an extra register running on this clock, */
/*    resulting in jitter less fieldbus outputs. */
/*    Alternatively to this internally generated clock, an external clock (xm0_eclk) can be used to make xMAC outputs jitter free (clock_enable-fb0). \ */
/*    Using external clocks to resample xMAC outputs requires modified xMAC software. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fb0clk_rate_mul_add                0x00000000U
#define Adr_NX90_xc_external_config_fb0clk_rate_mul_add 0xFF111D00U
#define Adr_NX90_fb0clk_rate_mul_add                    0xFF111D00U
#define DFLT_VAL_NX90_fb0clk_rate_mul_add               0x00000000U

#define MSK_NX90_fb0clk_rate_mul_add_val         0xffffffffU
#define SRT_NX90_fb0clk_rate_mul_add_val         0
#define DFLT_VAL_NX90_fb0clk_rate_mul_add_val    0x00000000U
#define DFLT_BF_VAL_NX90_fb0clk_rate_mul_add_val 0x00000000U

/* all used bits of 'NX90_fb0clk_rate_mul_add': */
#define MSK_USED_BITS_NX90_fb0clk_rate_mul_add 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fb0clk_div */
/* => Rate Multiplier Predivider: */
/*    Fieldbus0 clock is generated from internal 40MHz by a predivider combined with a rate multiplier. \ */
/*    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \ */
/*    xMAC fieldbus output (xm0_tx_out) can optionally (io_config-sel_xm0_eclk) be sampled by an extra register running on this clock, */
/*    resulting in jitter less fieldbus outputs. */
/*    Alternatively to this internally generated clock, an external clock (xm0_eclk) can be used to make xMAC output jitter free (clock_enable-fb0). \ */
/*    Using external clocks to resample xMAC outputs requires modified xMAC software. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fb0clk_div                0x00000004U
#define Adr_NX90_xc_external_config_fb0clk_div 0xFF111D04U
#define Adr_NX90_fb0clk_div                    0xFF111D04U
#define DFLT_VAL_NX90_fb0clk_div               0x00000000U

#define MSK_NX90_fb0clk_div_val         0x000000ffU
#define SRT_NX90_fb0clk_div_val         0
#define DFLT_VAL_NX90_fb0clk_div_val    0x00000000U
#define DFLT_BF_VAL_NX90_fb0clk_div_val 0x00000000U

/* all used bits of 'NX90_fb0clk_div': */
#define MSK_USED_BITS_NX90_fb0clk_div 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register fb1clk_rate_mul_add */
/* => Rate Multiplier Add Value: */
/*    Fieldbus1 clock is generated by internal 400MHz rate multiplier. \ */
/*    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \ */
/*    xMAC fieldbus outputs (xm1_tx_out, xm1_tx_oe) can optionally (io_config-sel_xm1_eclk) be sampled by an extra register running on this clock, */
/*    resulting in jitter less fieldbus outputs. */
/*    Alternatively to this internally generated clock, an external clock (xm1_eclk) can be used to make xMAC outputs jitter free (clock_enable-fb1). \ */
/*    Using external clocks to resample xMAC outputs requires modified xMAC software. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fb1clk_rate_mul_add                0x00000008U
#define Adr_NX90_xc_external_config_fb1clk_rate_mul_add 0xFF111D08U
#define Adr_NX90_fb1clk_rate_mul_add                    0xFF111D08U
#define DFLT_VAL_NX90_fb1clk_rate_mul_add               0x00000000U

#define MSK_NX90_fb1clk_rate_mul_add_val         0xffffffffU
#define SRT_NX90_fb1clk_rate_mul_add_val         0
#define DFLT_VAL_NX90_fb1clk_rate_mul_add_val    0x00000000U
#define DFLT_BF_VAL_NX90_fb1clk_rate_mul_add_val 0x00000000U

/* all used bits of 'NX90_fb1clk_rate_mul_add': */
#define MSK_USED_BITS_NX90_fb1clk_rate_mul_add 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register fb1clk_div */
/* => Rate Multiplier Predivider: */
/*    Fieldbus1 clock is generated from internal 400MHz by a predivider combined with a rate multiplier. \ */
/*    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \ */
/*    xMAC fieldbus output (xm1_tx_out) can optionally (io_config-sel_xm1_eclk) be sampled by an extra register running on this clock, */
/*    resulting in jitter less fieldbus outputs. */
/*    Alternatively to this internally generated clock, an external clock (xm1_eclk) can be used to make xMAC output jitter free (clock_enable-fb1). \ */
/*    Using external clocks to resample xMAC outputs requires modified xMAC software. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_fb1clk_div                0x0000000CU
#define Adr_NX90_xc_external_config_fb1clk_div 0xFF111D0CU
#define Adr_NX90_fb1clk_div                    0xFF111D0CU
#define DFLT_VAL_NX90_fb1clk_div               0x00000000U

#define MSK_NX90_fb1clk_div_val         0x000000ffU
#define SRT_NX90_fb1clk_div_val         0
#define DFLT_VAL_NX90_fb1clk_div_val    0x00000000U
#define DFLT_BF_VAL_NX90_fb1clk_div_val 0x00000000U

/* all used bits of 'NX90_fb1clk_div': */
#define MSK_USED_BITS_NX90_fb1clk_div 0x000000ffU


/* ===================================================================== */

/* AREA buf_man */
/* Area of xc0_buf_man, xc0_buf_man_xpic_com */

/* ===================================================================== */

#define Addr_NX90_xc0_buf_man          0xFF111D40U
#define Addr_NX90_xc0_buf_man_xpic_com 0xFF200490U

/* --------------------------------------------------------------------- */
/* Register buf_man_rpec0 */
/* => BMU port of 1st master (xPEC0): */
/*    This register address allows to access 16 buffer controllers, where each one handles buffer numbers (0..4) between up */
/*    to four processors. Due to the complex functionality in one register address, bits have different meaning depending on */
/*    request type and mode. */
/*    Getting a new buffer always happens with two command accesses: */
/*    1st: Write access: Tell the buf_manager the channel(s) (0..15) and whether you request read or write buffer. */
/*         Wait for two clock cycles, until new buffer number is calculated after any write access. */
/*    2nd: Read access: Read the buffer number (0..4). */
/*    This register is also accessible directly by xPEC0 with higher priority. Do not use this address, if xPEC0 uses the buffer manager. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buf_man_rpec0                  0x00000000U
#define Adr_NX90_xc0_buf_man_buf_man_rpec0          0xFF111D40U
#define Adr_NX90_xc0_buf_man_xpic_com_buf_man_rpec0 0xFF200490U
#define DFLT_VAL_NX90_buf_man_rpec0                 0x00000007U

#define MSK_NX90_buf_man_rpec0_buf_nr                 0x0000000fU
#define SRT_NX90_buf_man_rpec0_buf_nr                 0
#define DFLT_VAL_NX90_buf_man_rpec0_buf_nr            0x00000007U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_buf_nr         0x00000007U
#define MSK_NX90_buf_man_rpec0_req_type               0x00000060U
#define SRT_NX90_buf_man_rpec0_req_type               5
#define DFLT_VAL_NX90_buf_man_rpec0_req_type          0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_req_type       0x00000000U
#define MSK_NX90_buf_man_rpec0_semaphore_mode         0x00000080U
#define SRT_NX90_buf_man_rpec0_semaphore_mode         7
#define DFLT_VAL_NX90_buf_man_rpec0_semaphore_mode    0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_semaphore_mode 0x00000000U
#define MSK_NX90_buf_man_rpec0_parallel_mode          0x00000100U
#define SRT_NX90_buf_man_rpec0_parallel_mode          8
#define DFLT_VAL_NX90_buf_man_rpec0_parallel_mode     0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_parallel_mode  0x00000000U
#define MSK_NX90_buf_man_rpec0_reset                  0x00000200U
#define SRT_NX90_buf_man_rpec0_reset                  9
#define DFLT_VAL_NX90_buf_man_rpec0_reset             0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_reset          0x00000000U
#define MSK_NX90_buf_man_rpec0_sm_update_en           0x00000400U
#define SRT_NX90_buf_man_rpec0_sm_update_en           10
#define DFLT_VAL_NX90_buf_man_rpec0_sm_update_en      0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_sm_update_en   0x00000000U
#define MSK_NX90_buf_man_rpec0_sm_update_dis          0x00000800U
#define SRT_NX90_buf_man_rpec0_sm_update_dis          11
#define DFLT_VAL_NX90_buf_man_rpec0_sm_update_dis     0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec0_sm_update_dis  0x00000000U

/* all used bits of 'NX90_buf_man_rpec0': */
#define MSK_USED_BITS_NX90_buf_man_rpec0 0x00000fefU

/* --------------------------------------------------------------------- */
/* Register buf_man_rpec1 */
/* => BMU port of 2nd master (xPEC1): */
/*    This register address allows to access 16 buffer controllers, where each one handles buffer numbers (0..4) between up */
/*    to four processors. Due to the complex functionality in one register address, bits have different meaning depending on */
/*    request type and mode. */
/*    Getting a new buffer always happens with two command accesses: */
/*    1st: Write access: Tell the buf_manager the channel(s) (0..15) and whether you request read or write buffer. */
/*         Wait for two clock cycles, until new buffer number is calculated after any write access. */
/*    2nd: Read access: Read the buffer number (0..4). */
/*    This register is also accessible directly by xPEC1 with higher priority. Do not use this address, if xPEC1 uses the buffer manager. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buf_man_rpec1                  0x00000004U
#define Adr_NX90_xc0_buf_man_buf_man_rpec1          0xFF111D44U
#define Adr_NX90_xc0_buf_man_xpic_com_buf_man_rpec1 0xFF200494U
#define DFLT_VAL_NX90_buf_man_rpec1                 0x00000007U

#define MSK_NX90_buf_man_rpec1_buf_nr                 0x0000000fU
#define SRT_NX90_buf_man_rpec1_buf_nr                 0
#define DFLT_VAL_NX90_buf_man_rpec1_buf_nr            0x00000007U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_buf_nr         0x00000007U
#define MSK_NX90_buf_man_rpec1_req_type               0x00000060U
#define SRT_NX90_buf_man_rpec1_req_type               5
#define DFLT_VAL_NX90_buf_man_rpec1_req_type          0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_req_type       0x00000000U
#define MSK_NX90_buf_man_rpec1_semaphore_mode         0x00000080U
#define SRT_NX90_buf_man_rpec1_semaphore_mode         7
#define DFLT_VAL_NX90_buf_man_rpec1_semaphore_mode    0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_semaphore_mode 0x00000000U
#define MSK_NX90_buf_man_rpec1_parallel_mode          0x00000100U
#define SRT_NX90_buf_man_rpec1_parallel_mode          8
#define DFLT_VAL_NX90_buf_man_rpec1_parallel_mode     0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_parallel_mode  0x00000000U
#define MSK_NX90_buf_man_rpec1_reset                  0x00000200U
#define SRT_NX90_buf_man_rpec1_reset                  9
#define DFLT_VAL_NX90_buf_man_rpec1_reset             0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_reset          0x00000000U
#define MSK_NX90_buf_man_rpec1_sm_update_en           0x00000400U
#define SRT_NX90_buf_man_rpec1_sm_update_en           10
#define DFLT_VAL_NX90_buf_man_rpec1_sm_update_en      0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_sm_update_en   0x00000000U
#define MSK_NX90_buf_man_rpec1_sm_update_dis          0x00000800U
#define SRT_NX90_buf_man_rpec1_sm_update_dis          11
#define DFLT_VAL_NX90_buf_man_rpec1_sm_update_dis     0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_rpec1_sm_update_dis  0x00000000U

/* all used bits of 'NX90_buf_man_rpec1': */
#define MSK_USED_BITS_NX90_buf_man_rpec1 0x00000fefU

/* --------------------------------------------------------------------- */
/* Register buf_man */
/* => BMU-port of 3rd master (intlogic address area) or 4th master (intlogic-motion address area): */
/*    This register address allows to access 16 buffer controllers, where each one handles buffer numbers (0..4) between up */
/*    to four processors. Due to the complex functionality in one register address, bits have different meaning depending on */
/*    request type and mode. */
/*    Getting a new buffer always happens with two command accesses: */
/*    1st: Write access: Tell the buf_manager the channel(s) (0..15) and whether you request read or write buffer. */
/*         Wait for two clock cycles, until new buffer number is calculated after any write access. */
/*    2nd: Read access: Read the buffer number (0..4). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buf_man                  0x00000008U
#define Adr_NX90_xc0_buf_man_buf_man          0xFF111D48U
#define Adr_NX90_xc0_buf_man_xpic_com_buf_man 0xFF200498U
#define DFLT_VAL_NX90_buf_man                 0x00000007U

#define MSK_NX90_buf_man_buf_nr                 0x0000000fU
#define SRT_NX90_buf_man_buf_nr                 0
#define DFLT_VAL_NX90_buf_man_buf_nr            0x00000007U
#define DFLT_BF_VAL_NX90_buf_man_buf_nr         0x00000007U
#define MSK_NX90_buf_man_req_type               0x00000060U
#define SRT_NX90_buf_man_req_type               5
#define DFLT_VAL_NX90_buf_man_req_type          0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_req_type       0x00000000U
#define MSK_NX90_buf_man_semaphore_mode         0x00000080U
#define SRT_NX90_buf_man_semaphore_mode         7
#define DFLT_VAL_NX90_buf_man_semaphore_mode    0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_semaphore_mode 0x00000000U
#define MSK_NX90_buf_man_parallel_mode          0x00000100U
#define SRT_NX90_buf_man_parallel_mode          8
#define DFLT_VAL_NX90_buf_man_parallel_mode     0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_parallel_mode  0x00000000U
#define MSK_NX90_buf_man_reset                  0x00000200U
#define SRT_NX90_buf_man_reset                  9
#define DFLT_VAL_NX90_buf_man_reset             0x00000000U
#define DFLT_BF_VAL_NX90_buf_man_reset          0x00000000U

/* all used bits of 'NX90_buf_man': */
#define MSK_USED_BITS_NX90_buf_man 0x000003efU


/* ===================================================================== */

/* AREA xpec_irq_registers */
/* Area of xc_xpec_irq_registers */

/* ===================================================================== */

#define Addr_NX90_xc_xpec_irq_registers 0xFF111D50U

/* --------------------------------------------------------------------- */
/* Register xc0_irq_xpec0 */
/* => IRQ_RPEC 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc0_irq_xpec0                   0x00000000U
#define Adr_NX90_xc_xpec_irq_registers_xc0_irq_xpec0 0xFF111D50U
#define Adr_NX90_xc0_irq_xpec0                       0xFF111D50U
#define DFLT_VAL_NX90_xc0_irq_xpec0                  0x00000000U

#define MSK_NX90_xc0_irq_xpec0_rtpec0_irq         0x0000ffffU
#define SRT_NX90_xc0_irq_xpec0_rtpec0_irq         0
#define DFLT_VAL_NX90_xc0_irq_xpec0_rtpec0_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xc0_irq_xpec0_rtpec0_irq 0x00000000U
#define MSK_NX90_xc0_irq_xpec0_arm_irq            0xffff0000U
#define SRT_NX90_xc0_irq_xpec0_arm_irq            16
#define DFLT_VAL_NX90_xc0_irq_xpec0_arm_irq       0x00000000U
#define DFLT_BF_VAL_NX90_xc0_irq_xpec0_arm_irq    0x00000000U

/* all used bits of 'NX90_xc0_irq_xpec0': */
#define MSK_USED_BITS_NX90_xc0_irq_xpec0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xc0_irq_xpec1 */
/* => IRQ_TPEC 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc0_irq_xpec1                   0x00000004U
#define Adr_NX90_xc_xpec_irq_registers_xc0_irq_xpec1 0xFF111D54U
#define Adr_NX90_xc0_irq_xpec1                       0xFF111D54U
#define DFLT_VAL_NX90_xc0_irq_xpec1                  0x00000000U

#define MSK_NX90_xc0_irq_xpec1_rtpec1_irq         0x0000ffffU
#define SRT_NX90_xc0_irq_xpec1_rtpec1_irq         0
#define DFLT_VAL_NX90_xc0_irq_xpec1_rtpec1_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xc0_irq_xpec1_rtpec1_irq 0x00000000U
#define MSK_NX90_xc0_irq_xpec1_arm_irq            0xffff0000U
#define SRT_NX90_xc0_irq_xpec1_arm_irq            16
#define DFLT_VAL_NX90_xc0_irq_xpec1_arm_irq       0x00000000U
#define DFLT_BF_VAL_NX90_xc0_irq_xpec1_arm_irq    0x00000000U

/* all used bits of 'NX90_xc0_irq_xpec1': */
#define MSK_USED_BITS_NX90_xc0_irq_xpec1 0xffffffffU


/* ===================================================================== */

/* Area of xc_debug */

/* ===================================================================== */

#define Addr_NX90_xc_debug 0xFF111D60U

/* --------------------------------------------------------------------- */
/* Register xc_debug_config */
/* => config XC debug module */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc_debug_config      0x00000000U
#define Adr_NX90_xc_debug_xc_debug_config 0xFF111D60U
#define Adr_NX90_xc_debug_config          0xFF111D60U
#define DFLT_VAL_NX90_xc_debug_config     0x00000000U

#define MSK_NX90_xc_debug_config_select_xpec          0x00000007U
#define SRT_NX90_xc_debug_config_select_xpec          0
#define DFLT_VAL_NX90_xc_debug_config_select_xpec     0x00000000U
#define DFLT_BF_VAL_NX90_xc_debug_config_select_xpec  0x00000000U
#define MSK_NX90_xc_debug_config_debug_enable         0x80000000U
#define SRT_NX90_xc_debug_config_debug_enable         31
#define DFLT_VAL_NX90_xc_debug_config_debug_enable    0x00000000U
#define DFLT_BF_VAL_NX90_xc_debug_config_debug_enable 0x00000000U

/* all used bits of 'NX90_xc_debug_config': */
#define MSK_USED_BITS_NX90_xc_debug_config 0x80000007U


/* ===================================================================== */

/* Area of xc_start_stop */

/* ===================================================================== */

#define Addr_NX90_xc_start_stop 0xFF111D70U

/* --------------------------------------------------------------------- */
/* Register xc_start_stop_ctrl */
/* => Start / Stop Register for XC CPUs (rPECs / tPECs / xMACs) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc_start_stop_ctrl           0x00000000U
#define Adr_NX90_xc_start_stop_xc_start_stop_ctrl 0xFF111D70U
#define Adr_NX90_xc_start_stop_ctrl               0xFF111D70U
#define DFLT_VAL_NX90_xc_start_stop_ctrl          0x00000000U

#define MSK_NX90_xc_start_stop_ctrl_xc0_start_rpec0         0x00000001U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_rpec0         0
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpec0    0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpec0 0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_tpec0         0x00000002U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_tpec0         1
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpec0    0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpec0 0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_rpu0          0x00000004U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_rpu0          2
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpu0     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpu0  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_tpu0          0x00000008U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_tpu0          3
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpu0     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpu0  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_rpec1         0x00000010U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_rpec1         4
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpec1    0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpec1 0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_tpec1         0x00000020U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_tpec1         5
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpec1    0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpec1 0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_rpu1          0x00000040U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_rpu1          6
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpu1     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_rpu1  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_start_tpu1          0x00000080U
#define SRT_NX90_xc_start_stop_ctrl_xc0_start_tpu1          7
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpu1     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_start_tpu1  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_rpec0          0x00010000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_rpec0          16
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpec0     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpec0  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_tpec0          0x00020000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_tpec0          17
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpec0     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpec0  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_rpu0           0x00040000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_rpu0           18
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpu0      0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpu0   0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_tpu0           0x00080000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_tpu0           19
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpu0      0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpu0   0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_rpec1          0x00100000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_rpec1          20
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpec1     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpec1  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_tpec1          0x00200000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_tpec1          21
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpec1     0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpec1  0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_rpu1           0x00400000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_rpu1           22
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpu1      0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_rpu1   0x00000000U
#define MSK_NX90_xc_start_stop_ctrl_xc0_stop_tpu1           0x00800000U
#define SRT_NX90_xc_start_stop_ctrl_xc0_stop_tpu1           23
#define DFLT_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpu1      0x00000000U
#define DFLT_BF_VAL_NX90_xc_start_stop_ctrl_xc0_stop_tpu1   0x00000000U

/* all used bits of 'NX90_xc_start_stop_ctrl': */
#define MSK_USED_BITS_NX90_xc_start_stop_ctrl 0x00ff00ffU

/* --------------------------------------------------------------------- */
/* Register xc_hold_status */
/* => Hold Status Register for XC CPUs (rPECs / tPECs / xMACs) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc_hold_status           0x00000004U
#define Adr_NX90_xc_start_stop_xc_hold_status 0xFF111D74U
#define Adr_NX90_xc_hold_status               0xFF111D74U

#define MSK_NX90_xc_hold_status_xc0_hold_rpec0 0x00000001U
#define SRT_NX90_xc_hold_status_xc0_hold_rpec0 0
#define MSK_NX90_xc_hold_status_xc0_hold_tpec0 0x00000002U
#define SRT_NX90_xc_hold_status_xc0_hold_tpec0 1
#define MSK_NX90_xc_hold_status_xc0_hold_rpu0  0x00000004U
#define SRT_NX90_xc_hold_status_xc0_hold_rpu0  2
#define MSK_NX90_xc_hold_status_xc0_hold_tpu0  0x00000008U
#define SRT_NX90_xc_hold_status_xc0_hold_tpu0  3
#define MSK_NX90_xc_hold_status_xc0_hold_rpec1 0x00000010U
#define SRT_NX90_xc_hold_status_xc0_hold_rpec1 4
#define MSK_NX90_xc_hold_status_xc0_hold_tpec1 0x00000020U
#define SRT_NX90_xc_hold_status_xc0_hold_tpec1 5
#define MSK_NX90_xc_hold_status_xc0_hold_rpu1  0x00000040U
#define SRT_NX90_xc_hold_status_xc0_hold_rpu1  6
#define MSK_NX90_xc_hold_status_xc0_hold_tpu1  0x00000080U
#define SRT_NX90_xc_hold_status_xc0_hold_tpu1  7

/* all used bits of 'NX90_xc_hold_status': */
#define MSK_USED_BITS_NX90_xc_hold_status 0x000000ffU


/* ===================================================================== */

/* AREA phy_ctrl */
/* Area of xc0_phy_ctrl0, xc0_phy_ctrl1 */

/* ===================================================================== */

#define Addr_NX90_xc0_phy_ctrl0 0xFF111D80U
#define Addr_NX90_xc0_phy_ctrl1 0xFF111D90U

/* --------------------------------------------------------------------- */
/* Register int_phy_ctrl_miimu */
/* => MDIO FSM interface controlling for netX internal PHY. */
/*    Note: */
/*       Function is similar to old MIIMU unit register 'miimu_reg'. */
/*    Note: */
/*       MDC period changed from 800/400ns to 400/220ns since netx56. */
/*    Note: */
/*       Loopback for purpose is provided by miimu_sw register and also performed */
/*       in non-software-mode when enabled. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_ctrl_miimu           0x00000000U
#define Adr_NX90_xc0_phy_ctrl0_int_phy_ctrl_miimu 0xFF111D80U
#define Adr_NX90_xc0_phy_ctrl1_int_phy_ctrl_miimu 0xFF111D90U
#define DFLT_VAL_NX90_int_phy_ctrl_miimu          0x00000000U

#define MSK_NX90_int_phy_ctrl_miimu_snrdy              0x00000001U
#define SRT_NX90_int_phy_ctrl_miimu_snrdy              0
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_snrdy         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_snrdy      0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_preamble           0x00000002U
#define SRT_NX90_int_phy_ctrl_miimu_preamble           1
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_preamble      0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_preamble   0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_opmode             0x00000004U
#define SRT_NX90_int_phy_ctrl_miimu_opmode             2
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_opmode        0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_opmode     0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_mdc_period         0x00000008U
#define SRT_NX90_int_phy_ctrl_miimu_mdc_period         3
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_mdc_period    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_mdc_period 0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_rta                0x00000020U
#define SRT_NX90_int_phy_ctrl_miimu_rta                5
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_rta           0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_rta        0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_regaddr            0x000007c0U
#define SRT_NX90_int_phy_ctrl_miimu_regaddr            6
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_regaddr       0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_regaddr    0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_phyaddr            0x0000f800U
#define SRT_NX90_int_phy_ctrl_miimu_phyaddr            11
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_phyaddr       0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_phyaddr    0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_data               0xffff0000U
#define SRT_NX90_int_phy_ctrl_miimu_data               16
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_data          0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_data       0x00000000U

/* all used bits of 'NX90_int_phy_ctrl_miimu': */
#define MSK_USED_BITS_NX90_int_phy_ctrl_miimu 0xffffffefU

/* --------------------------------------------------------------------- */
/* Register int_phy_ctrl_miimu_sw */
/* => MDIO software interface controlling for netX internal PHY. */
/*    Note: */
/*      Data output enable (mdoe) is not used at internal PHY (XC0), only at external PHYs(XC1). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_ctrl_miimu_sw           0x00000004U
#define Adr_NX90_xc0_phy_ctrl0_int_phy_ctrl_miimu_sw 0xFF111D84U
#define Adr_NX90_xc0_phy_ctrl1_int_phy_ctrl_miimu_sw 0xFF111D94U
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw          0x00000000U

#define MSK_NX90_int_phy_ctrl_miimu_sw_enable           0x00000001U
#define SRT_NX90_int_phy_ctrl_miimu_sw_enable           0
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw_enable      0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_sw_enable   0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_sw_mdc              0x00000010U
#define SRT_NX90_int_phy_ctrl_miimu_sw_mdc              4
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw_mdc         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_sw_mdc      0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_sw_mdo              0x00000020U
#define SRT_NX90_int_phy_ctrl_miimu_sw_mdo              5
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw_mdo         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_sw_mdo      0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_sw_mdoe             0x00000040U
#define SRT_NX90_int_phy_ctrl_miimu_sw_mdoe             6
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw_mdoe        0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_sw_mdoe     0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_sw_mdi_ro           0x00000080U
#define SRT_NX90_int_phy_ctrl_miimu_sw_mdi_ro           7
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw_mdi_ro      0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_sw_mdi_ro   0x00000000U
#define MSK_NX90_int_phy_ctrl_miimu_sw_loopback         0x00000100U
#define SRT_NX90_int_phy_ctrl_miimu_sw_loopback         8
#define DFLT_VAL_NX90_int_phy_ctrl_miimu_sw_loopback    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_miimu_sw_loopback 0x00000000U

/* all used bits of 'NX90_int_phy_ctrl_miimu_sw': */
#define MSK_USED_BITS_NX90_int_phy_ctrl_miimu_sw 0x000001f1U

/* --------------------------------------------------------------------- */
/* Register int_phy_ctrl_led */
/* => PHY0 LED config and status register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_ctrl_led           0x00000008U
#define Adr_NX90_xc0_phy_ctrl0_int_phy_ctrl_led 0xFF111D88U
#define Adr_NX90_xc0_phy_ctrl1_int_phy_ctrl_led 0xFF111D98U
#define DFLT_VAL_NX90_int_phy_ctrl_led          0x00004000U

#define MSK_NX90_int_phy_ctrl_led_rx_active_ro         0x00000001U
#define SRT_NX90_int_phy_ctrl_led_rx_active_ro         0
#define DFLT_VAL_NX90_int_phy_ctrl_led_rx_active_ro    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_rx_active_ro 0x00000000U
#define MSK_NX90_int_phy_ctrl_led_tx_active_ro         0x00000002U
#define SRT_NX90_int_phy_ctrl_led_tx_active_ro         1
#define DFLT_VAL_NX90_int_phy_ctrl_led_tx_active_ro    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_tx_active_ro 0x00000000U
#define MSK_NX90_int_phy_ctrl_led_duplex_ro            0x00000004U
#define SRT_NX90_int_phy_ctrl_led_duplex_ro            2
#define DFLT_VAL_NX90_int_phy_ctrl_led_duplex_ro       0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_duplex_ro    0x00000000U
#define MSK_NX90_int_phy_ctrl_led_link_ro              0x00000008U
#define SRT_NX90_int_phy_ctrl_led_link_ro              3
#define DFLT_VAL_NX90_int_phy_ctrl_led_link_ro         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_link_ro      0x00000000U
#define MSK_NX90_int_phy_ctrl_led_speed10_ro           0x00000010U
#define SRT_NX90_int_phy_ctrl_led_speed10_ro           4
#define DFLT_VAL_NX90_int_phy_ctrl_led_speed10_ro      0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_speed10_ro   0x00000000U
#define MSK_NX90_int_phy_ctrl_led_speed100_ro          0x00000020U
#define SRT_NX90_int_phy_ctrl_led_speed100_ro          5
#define DFLT_VAL_NX90_int_phy_ctrl_led_speed100_ro     0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_speed100_ro  0x00000000U
#define MSK_NX90_int_phy_ctrl_led_led0                 0x00000040U
#define SRT_NX90_int_phy_ctrl_led_led0                 6
#define DFLT_VAL_NX90_int_phy_ctrl_led_led0            0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_led0         0x00000000U
#define MSK_NX90_int_phy_ctrl_led_led1                 0x00000080U
#define SRT_NX90_int_phy_ctrl_led_led1                 7
#define DFLT_VAL_NX90_int_phy_ctrl_led_led1            0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_led1         0x00000000U
#define MSK_NX90_int_phy_ctrl_led_mode                 0x00000300U
#define SRT_NX90_int_phy_ctrl_led_mode                 8
#define DFLT_VAL_NX90_int_phy_ctrl_led_mode            0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_mode         0x00000000U
#define MSK_NX90_int_phy_ctrl_led_interval             0x0000f000U
#define SRT_NX90_int_phy_ctrl_led_interval             12
#define DFLT_VAL_NX90_int_phy_ctrl_led_interval        0x00004000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_led_interval     0x00000004U

/* all used bits of 'NX90_int_phy_ctrl_led': */
#define MSK_USED_BITS_NX90_int_phy_ctrl_led 0x0000f3ffU

/* --------------------------------------------------------------------- */
/* Register int_phy_ctrl_enhanced_link_detection */
/* => Enhanced link detection config register: */
/*    Enhanced link detection is necessary with old PHYs, that do not support proper link down detection. */
/*    At these PHYs a broken link can be detected according to mii_rxerr signal. */
/*    New Renesas PHYs (Nephrite) should already support proper link detection. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_int_phy_ctrl_enhanced_link_detection           0x0000000CU
#define Adr_NX90_xc0_phy_ctrl0_int_phy_ctrl_enhanced_link_detection 0xFF111D8CU
#define Adr_NX90_xc0_phy_ctrl1_int_phy_ctrl_enhanced_link_detection 0xFF111D9CU
#define DFLT_VAL_NX90_int_phy_ctrl_enhanced_link_detection          0x00040030U

#define MSK_NX90_int_phy_ctrl_enhanced_link_detection_add                     0x0000001fU
#define SRT_NX90_int_phy_ctrl_enhanced_link_detection_add                     0
#define DFLT_VAL_NX90_int_phy_ctrl_enhanced_link_detection_add                0x00000010U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_enhanced_link_detection_add             0x00000010U
#define MSK_NX90_int_phy_ctrl_enhanced_link_detection_sub                     0x00000060U
#define SRT_NX90_int_phy_ctrl_enhanced_link_detection_sub                     5
#define DFLT_VAL_NX90_int_phy_ctrl_enhanced_link_detection_sub                0x00000020U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_enhanced_link_detection_sub             0x00000001U
#define MSK_NX90_int_phy_ctrl_enhanced_link_detection_threshold               0x0007ff80U
#define SRT_NX90_int_phy_ctrl_enhanced_link_detection_threshold               7
#define DFLT_VAL_NX90_int_phy_ctrl_enhanced_link_detection_threshold          0x00040000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_enhanced_link_detection_threshold       0x00000800U
#define MSK_NX90_int_phy_ctrl_enhanced_link_detection_counter_ro              0x7ff80000U
#define SRT_NX90_int_phy_ctrl_enhanced_link_detection_counter_ro              19
#define DFLT_VAL_NX90_int_phy_ctrl_enhanced_link_detection_counter_ro         0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_enhanced_link_detection_counter_ro      0x00000000U
#define MSK_NX90_int_phy_ctrl_enhanced_link_detection_eld_bad_link_ro         0x80000000U
#define SRT_NX90_int_phy_ctrl_enhanced_link_detection_eld_bad_link_ro         31
#define DFLT_VAL_NX90_int_phy_ctrl_enhanced_link_detection_eld_bad_link_ro    0x00000000U
#define DFLT_BF_VAL_NX90_int_phy_ctrl_enhanced_link_detection_eld_bad_link_ro 0x00000000U

/* all used bits of 'NX90_int_phy_ctrl_enhanced_link_detection': */
#define MSK_USED_BITS_NX90_int_phy_ctrl_enhanced_link_detection 0xffffffffU


/* ===================================================================== */

/* Area of xc_systime_config */

/* ===================================================================== */

#define Addr_NX90_xc_systime_config 0xFF111DA0U

/* --------------------------------------------------------------------- */
/* Register xc_systime_config */
/* => configure the systime for XC0 and XC 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc_systime_config               0x00000000U
#define Adr_NX90_xc_systime_config_xc_systime_config 0xFF111DA0U
#define Adr_NX90_xc_systime_config                   0xFF111DA0U
#define DFLT_VAL_NX90_xc_systime_config              0x00000000U

#define MSK_NX90_xc_systime_config_xc0_systime_config         0x00000003U
#define SRT_NX90_xc_systime_config_xc0_systime_config         0
#define DFLT_VAL_NX90_xc_systime_config_xc0_systime_config    0x00000000U
#define DFLT_BF_VAL_NX90_xc_systime_config_xc0_systime_config 0x00000000U

/* all used bits of 'NX90_xc_systime_config': */
#define MSK_USED_BITS_NX90_xc_systime_config 0x00000003U


/* ===================================================================== */

/* AREA xpic_config */
/* Area of xpic_com_config, xpic_app_config */

/* ===================================================================== */

#define Addr_NX90_xpic_com_config 0xFF180000U
#define Addr_NX90_xpic_app_config 0xFF880000U

/* ===================================================================== */

/* AREA xpic_ram */
/* Area of xpic_com_dram, xpic_com_pram, xpic_app_dram, xpic_app_pram */

/* ===================================================================== */

#define Addr_NX90_xpic_com_dram 0xFF180000U
#define Addr_NX90_xpic_com_pram 0xFF182000U
#define Addr_NX90_xpic_app_dram 0xFF880000U
#define Addr_NX90_xpic_app_pram 0xFF882000U

/* --------------------------------------------------------------------- */
/* Register xpic_ram_start */
/* => xPIC program or data RAM (xPIC TCM) start address: */
/*    Both xPIC TCMs (program and data) are only accessible by other system masters, \ */
/*    if xPIC is not running (xpic_debug-xpic_hold_pc-hold=0). */
/*    xPIC TCMs are only accessible for configuration and setup of xPIC processor. */
/*    xPIC TCMs should never be used for data exchange between xPIC and other system-masters. */
/*    Attention: Accessing xPIC_dram (data-TCM) while xPIC is running might seem to work but \ */
/*    influences communication tasks and HIF acesses and leads to instable system behaviour! */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_ram_start           0x00000000U
#define Adr_NX90_xpic_com_dram_xpic_ram_start 0xFF180000U
#define Adr_NX90_xpic_com_pram_xpic_ram_start 0xFF182000U
#define Adr_NX90_xpic_app_dram_xpic_ram_start 0xFF880000U
#define Adr_NX90_xpic_app_pram_xpic_ram_start 0xFF882000U

/* --------------------------------------------------------------------- */
/* Register xpic_ram_end */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_ram_end           0x00001FFCU
#define Adr_NX90_xpic_com_dram_xpic_ram_end 0xFF181FFCU
#define Adr_NX90_xpic_com_pram_xpic_ram_end 0xFF183FFCU
#define Adr_NX90_xpic_app_dram_xpic_ram_end 0xFF881FFCU
#define Adr_NX90_xpic_app_pram_xpic_ram_end 0xFF883FFCU


/* ===================================================================== */

/* AREA xpic */
/* Area of xpic_com_regs, xpic_app_regs */

/* ===================================================================== */

#define Addr_NX90_xpic_com_regs 0xFF184000U
#define Addr_NX90_xpic_app_regs 0xFF884000U

/* --------------------------------------------------------------------- */
/* Register xpic_r0 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r0           0x00000000U
#define Adr_NX90_xpic_com_regs_xpic_r0 0xFF184000U
#define Adr_NX90_xpic_app_regs_xpic_r0 0xFF884000U
#define DFLT_VAL_NX90_xpic_r0          0x00000000U

#define MSK_NX90_xpic_r0_r0         0xffffffffU
#define SRT_NX90_xpic_r0_r0         0
#define DFLT_VAL_NX90_xpic_r0_r0    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r0_r0 0x00000000U

/* all used bits of 'NX90_xpic_r0': */
#define MSK_USED_BITS_NX90_xpic_r0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r1 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r1           0x00000004U
#define Adr_NX90_xpic_com_regs_xpic_r1 0xFF184004U
#define Adr_NX90_xpic_app_regs_xpic_r1 0xFF884004U
#define DFLT_VAL_NX90_xpic_r1          0x00000000U

#define MSK_NX90_xpic_r1_r1         0xffffffffU
#define SRT_NX90_xpic_r1_r1         0
#define DFLT_VAL_NX90_xpic_r1_r1    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r1_r1 0x00000000U

/* all used bits of 'NX90_xpic_r1': */
#define MSK_USED_BITS_NX90_xpic_r1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r2 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r2           0x00000008U
#define Adr_NX90_xpic_com_regs_xpic_r2 0xFF184008U
#define Adr_NX90_xpic_app_regs_xpic_r2 0xFF884008U
#define DFLT_VAL_NX90_xpic_r2          0x00000000U

#define MSK_NX90_xpic_r2_r2         0xffffffffU
#define SRT_NX90_xpic_r2_r2         0
#define DFLT_VAL_NX90_xpic_r2_r2    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r2_r2 0x00000000U

/* all used bits of 'NX90_xpic_r2': */
#define MSK_USED_BITS_NX90_xpic_r2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r3 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r3           0x0000000CU
#define Adr_NX90_xpic_com_regs_xpic_r3 0xFF18400CU
#define Adr_NX90_xpic_app_regs_xpic_r3 0xFF88400CU
#define DFLT_VAL_NX90_xpic_r3          0x00000000U

#define MSK_NX90_xpic_r3_r3         0xffffffffU
#define SRT_NX90_xpic_r3_r3         0
#define DFLT_VAL_NX90_xpic_r3_r3    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r3_r3 0x00000000U

/* all used bits of 'NX90_xpic_r3': */
#define MSK_USED_BITS_NX90_xpic_r3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r4 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r4           0x00000010U
#define Adr_NX90_xpic_com_regs_xpic_r4 0xFF184010U
#define Adr_NX90_xpic_app_regs_xpic_r4 0xFF884010U
#define DFLT_VAL_NX90_xpic_r4          0x00000000U

#define MSK_NX90_xpic_r4_r4         0xffffffffU
#define SRT_NX90_xpic_r4_r4         0
#define DFLT_VAL_NX90_xpic_r4_r4    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r4_r4 0x00000000U

/* all used bits of 'NX90_xpic_r4': */
#define MSK_USED_BITS_NX90_xpic_r4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r5 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r5           0x00000014U
#define Adr_NX90_xpic_com_regs_xpic_r5 0xFF184014U
#define Adr_NX90_xpic_app_regs_xpic_r5 0xFF884014U
#define DFLT_VAL_NX90_xpic_r5          0x00000000U

#define MSK_NX90_xpic_r5_r5         0xffffffffU
#define SRT_NX90_xpic_r5_r5         0
#define DFLT_VAL_NX90_xpic_r5_r5    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r5_r5 0x00000000U

/* all used bits of 'NX90_xpic_r5': */
#define MSK_USED_BITS_NX90_xpic_r5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r6 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r6           0x00000018U
#define Adr_NX90_xpic_com_regs_xpic_r6 0xFF184018U
#define Adr_NX90_xpic_app_regs_xpic_r6 0xFF884018U
#define DFLT_VAL_NX90_xpic_r6          0x00000000U

#define MSK_NX90_xpic_r6_r6         0xffffffffU
#define SRT_NX90_xpic_r6_r6         0
#define DFLT_VAL_NX90_xpic_r6_r6    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r6_r6 0x00000000U

/* all used bits of 'NX90_xpic_r6': */
#define MSK_USED_BITS_NX90_xpic_r6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_r7 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r7           0x0000001CU
#define Adr_NX90_xpic_com_regs_xpic_r7 0xFF18401CU
#define Adr_NX90_xpic_app_regs_xpic_r7 0xFF88401CU
#define DFLT_VAL_NX90_xpic_r7          0x00000000U

#define MSK_NX90_xpic_r7_r7         0xffffffffU
#define SRT_NX90_xpic_r7_r7         0
#define DFLT_VAL_NX90_xpic_r7_r7    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_r7_r7 0x00000000U

/* all used bits of 'NX90_xpic_r7': */
#define MSK_USED_BITS_NX90_xpic_r7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_usr0 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr0           0x00000020U
#define Adr_NX90_xpic_com_regs_xpic_usr0 0xFF184020U
#define Adr_NX90_xpic_app_regs_xpic_usr0 0xFF884020U
#define DFLT_VAL_NX90_xpic_usr0          0x00000000U

#define MSK_NX90_xpic_usr0_usr0         0xffffffffU
#define SRT_NX90_xpic_usr0_usr0         0
#define DFLT_VAL_NX90_xpic_usr0_usr0    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_usr0_usr0 0x00000000U

/* all used bits of 'NX90_xpic_usr0': */
#define MSK_USED_BITS_NX90_xpic_usr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_usr1 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr1           0x00000024U
#define Adr_NX90_xpic_com_regs_xpic_usr1 0xFF184024U
#define Adr_NX90_xpic_app_regs_xpic_usr1 0xFF884024U
#define DFLT_VAL_NX90_xpic_usr1          0x00000000U

#define MSK_NX90_xpic_usr1_usr1         0xffffffffU
#define SRT_NX90_xpic_usr1_usr1         0
#define DFLT_VAL_NX90_xpic_usr1_usr1    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_usr1_usr1 0x00000000U

/* all used bits of 'NX90_xpic_usr1': */
#define MSK_USED_BITS_NX90_xpic_usr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_usr2 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr2           0x00000028U
#define Adr_NX90_xpic_com_regs_xpic_usr2 0xFF184028U
#define Adr_NX90_xpic_app_regs_xpic_usr2 0xFF884028U
#define DFLT_VAL_NX90_xpic_usr2          0x00000000U

#define MSK_NX90_xpic_usr2_usr2         0xffffffffU
#define SRT_NX90_xpic_usr2_usr2         0
#define DFLT_VAL_NX90_xpic_usr2_usr2    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_usr2_usr2 0x00000000U

/* all used bits of 'NX90_xpic_usr2': */
#define MSK_USED_BITS_NX90_xpic_usr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_usr3 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr3           0x0000002CU
#define Adr_NX90_xpic_com_regs_xpic_usr3 0xFF18402CU
#define Adr_NX90_xpic_app_regs_xpic_usr3 0xFF88402CU
#define DFLT_VAL_NX90_xpic_usr3          0x00000000U

#define MSK_NX90_xpic_usr3_usr3         0xffffffffU
#define SRT_NX90_xpic_usr3_usr3         0
#define DFLT_VAL_NX90_xpic_usr3_usr3    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_usr3_usr3 0x00000000U

/* all used bits of 'NX90_xpic_usr3': */
#define MSK_USED_BITS_NX90_xpic_usr3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_usr4 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr4           0x00000030U
#define Adr_NX90_xpic_com_regs_xpic_usr4 0xFF184030U
#define Adr_NX90_xpic_app_regs_xpic_usr4 0xFF884030U
#define DFLT_VAL_NX90_xpic_usr4          0x00000000U

#define MSK_NX90_xpic_usr4_usr4         0xffffffffU
#define SRT_NX90_xpic_usr4_usr4         0
#define DFLT_VAL_NX90_xpic_usr4_usr4    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_usr4_usr4 0x00000000U

/* all used bits of 'NX90_xpic_usr4': */
#define MSK_USED_BITS_NX90_xpic_usr4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_pc */
/* => xPIC Program Counter */
/*    Shared in xPIC 64_BIT_MUL_TARGET mode with usr32 (w mode) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_pc           0x00000034U
#define Adr_NX90_xpic_com_regs_xpic_pc 0xFF184034U
#define Adr_NX90_xpic_app_regs_xpic_pc 0xFF884034U
#define DFLT_VAL_NX90_xpic_pc          0xfffffffcU

#define MSK_NX90_xpic_pc_pc         0xffffffffU
#define SRT_NX90_xpic_pc_pc         0
#define DFLT_VAL_NX90_xpic_pc_pc    0xfffffffcU
#define DFLT_BF_VAL_NX90_xpic_pc_pc 0xfffffffcU

/* all used bits of 'NX90_xpic_pc': */
#define MSK_USED_BITS_NX90_xpic_pc 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_stat */
/* => Processor Status Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_stat           0x00000038U
#define Adr_NX90_xpic_com_regs_xpic_stat 0xFF184038U
#define Adr_NX90_xpic_app_regs_xpic_stat 0xFF884038U
#define DFLT_VAL_NX90_xpic_stat          0x00000000U

#define MSK_NX90_xpic_stat_stat         0xffffffffU
#define SRT_NX90_xpic_stat_stat         0
#define DFLT_VAL_NX90_xpic_stat_stat    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_stat_stat 0x00000000U

/* all used bits of 'NX90_xpic_stat': */
#define MSK_USED_BITS_NX90_xpic_stat 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_zero */
/* => Zero Register */
/*    Shared in xPIC 64_BIT_MUL_TARGET mode with usr10 (w mode) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_zero           0x0000003CU
#define Adr_NX90_xpic_com_regs_xpic_zero 0xFF18403CU
#define Adr_NX90_xpic_app_regs_xpic_zero 0xFF88403CU
#define DFLT_VAL_NX90_xpic_zero          0x00000000U

#define MSK_NX90_xpic_zero_zero         0xffffffffU
#define SRT_NX90_xpic_zero_zero         0
#define DFLT_VAL_NX90_xpic_zero_zero    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_zero_zero 0x00000000U

/* all used bits of 'NX90_xpic_zero': */
#define MSK_USED_BITS_NX90_xpic_zero 0xffffffffU


/* ===================================================================== */

/* AREA xpic_debug */
/* Area of xpic_com_debug, xpic_app_debug */

/* ===================================================================== */

#define Addr_NX90_xpic_com_debug 0xFF184080U
#define Addr_NX90_xpic_app_debug 0xFF884080U

/* --------------------------------------------------------------------- */
/* Register xpic_hold_pc */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_hold_pc            0x00000000U
#define Adr_NX90_xpic_com_debug_xpic_hold_pc 0xFF184080U
#define Adr_NX90_xpic_app_debug_xpic_hold_pc 0xFF884080U
#define DFLT_VAL_NX90_xpic_hold_pc           0x00000001U

#define MSK_NX90_xpic_hold_pc_hold                      0x00000001U
#define SRT_NX90_xpic_hold_pc_hold                      0
#define DFLT_VAL_NX90_xpic_hold_pc_hold                 0x00000001U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_hold              0x00000001U
#define MSK_NX90_xpic_hold_pc_single_step               0x00000002U
#define SRT_NX90_xpic_hold_pc_single_step               1
#define DFLT_VAL_NX90_xpic_hold_pc_single_step          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_single_step       0x00000000U
#define MSK_NX90_xpic_hold_pc_monitor_mode              0x00000004U
#define SRT_NX90_xpic_hold_pc_monitor_mode              2
#define DFLT_VAL_NX90_xpic_hold_pc_monitor_mode         0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_monitor_mode      0x00000000U
#define MSK_NX90_xpic_hold_pc_disable_int               0x00000008U
#define SRT_NX90_xpic_hold_pc_disable_int               3
#define DFLT_VAL_NX90_xpic_hold_pc_disable_int          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_disable_int       0x00000000U
#define MSK_NX90_xpic_hold_pc_misalignment_hold         0x00000010U
#define SRT_NX90_xpic_hold_pc_misalignment_hold         4
#define DFLT_VAL_NX90_xpic_hold_pc_misalignment_hold    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_misalignment_hold 0x00000000U
#define MSK_NX90_xpic_hold_pc_bank_select               0x00000020U
#define SRT_NX90_xpic_hold_pc_bank_select               5
#define DFLT_VAL_NX90_xpic_hold_pc_bank_select          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_bank_select       0x00000000U
#define MSK_NX90_xpic_hold_pc_bank_control              0x00000040U
#define SRT_NX90_xpic_hold_pc_bank_control              6
#define DFLT_VAL_NX90_xpic_hold_pc_bank_control         0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_bank_control      0x00000000U
#define MSK_NX90_xpic_hold_pc_reset_xpic                0x00000080U
#define SRT_NX90_xpic_hold_pc_reset_xpic                7
#define DFLT_VAL_NX90_xpic_hold_pc_reset_xpic           0x00000000U
#define DFLT_BF_VAL_NX90_xpic_hold_pc_reset_xpic        0x00000000U

/* all used bits of 'NX90_xpic_hold_pc': */
#define MSK_USED_BITS_NX90_xpic_hold_pc 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register xpic_break0_addr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_addr            0x00000004U
#define Adr_NX90_xpic_com_debug_xpic_break0_addr 0xFF184084U
#define Adr_NX90_xpic_app_debug_xpic_break0_addr 0xFF884084U
#define DFLT_VAL_NX90_xpic_break0_addr           0x00000000U

#define MSK_NX90_xpic_break0_addr_val         0xffffffffU
#define SRT_NX90_xpic_break0_addr_val         0
#define DFLT_VAL_NX90_xpic_break0_addr_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_addr_val 0x00000000U

/* all used bits of 'NX90_xpic_break0_addr': */
#define MSK_USED_BITS_NX90_xpic_break0_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break0_addr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_addr_mask            0x00000008U
#define Adr_NX90_xpic_com_debug_xpic_break0_addr_mask 0xFF184088U
#define Adr_NX90_xpic_app_debug_xpic_break0_addr_mask 0xFF884088U
#define DFLT_VAL_NX90_xpic_break0_addr_mask           0x00000000U

#define MSK_NX90_xpic_break0_addr_mask_val         0xffffffffU
#define SRT_NX90_xpic_break0_addr_mask_val         0
#define DFLT_VAL_NX90_xpic_break0_addr_mask_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_addr_mask_val 0x00000000U

/* all used bits of 'NX90_xpic_break0_addr_mask': */
#define MSK_USED_BITS_NX90_xpic_break0_addr_mask 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break0_data */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_data            0x0000000CU
#define Adr_NX90_xpic_com_debug_xpic_break0_data 0xFF18408CU
#define Adr_NX90_xpic_app_debug_xpic_break0_data 0xFF88408CU
#define DFLT_VAL_NX90_xpic_break0_data           0x00000000U

#define MSK_NX90_xpic_break0_data_val         0xffffffffU
#define SRT_NX90_xpic_break0_data_val         0
#define DFLT_VAL_NX90_xpic_break0_data_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_data_val 0x00000000U

/* all used bits of 'NX90_xpic_break0_data': */
#define MSK_USED_BITS_NX90_xpic_break0_data 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break0_data_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_data_mask            0x00000010U
#define Adr_NX90_xpic_com_debug_xpic_break0_data_mask 0xFF184090U
#define Adr_NX90_xpic_app_debug_xpic_break0_data_mask 0xFF884090U
#define DFLT_VAL_NX90_xpic_break0_data_mask           0x00000000U

#define MSK_NX90_xpic_break0_data_mask_val         0xffffffffU
#define SRT_NX90_xpic_break0_data_mask_val         0
#define DFLT_VAL_NX90_xpic_break0_data_mask_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_data_mask_val 0x00000000U

/* all used bits of 'NX90_xpic_break0_data_mask': */
#define MSK_USED_BITS_NX90_xpic_break0_data_mask 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break0_contr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_contr            0x00000014U
#define Adr_NX90_xpic_com_debug_xpic_break0_contr 0xFF184094U
#define Adr_NX90_xpic_app_debug_xpic_break0_contr 0xFF884094U
#define DFLT_VAL_NX90_xpic_break0_contr           0x00000000U

#define MSK_NX90_xpic_break0_contr_write               0x00000001U
#define SRT_NX90_xpic_break0_contr_write               0
#define DFLT_VAL_NX90_xpic_break0_contr_write          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_write       0x00000000U
#define MSK_NX90_xpic_break0_contr_mas                 0x00000006U
#define SRT_NX90_xpic_break0_contr_mas                 1
#define DFLT_VAL_NX90_xpic_break0_contr_mas            0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_mas         0x00000000U
#define MSK_NX90_xpic_break0_contr_data_access         0x00000008U
#define SRT_NX90_xpic_break0_contr_data_access         3
#define DFLT_VAL_NX90_xpic_break0_contr_data_access    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_data_access 0x00000000U
#define MSK_NX90_xpic_break0_contr_fiq_mode            0x00000010U
#define SRT_NX90_xpic_break0_contr_fiq_mode            4
#define DFLT_VAL_NX90_xpic_break0_contr_fiq_mode       0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_fiq_mode    0x00000000U
#define MSK_NX90_xpic_break0_contr_irq_mode            0x00000020U
#define SRT_NX90_xpic_break0_contr_irq_mode            5
#define DFLT_VAL_NX90_xpic_break0_contr_irq_mode       0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_irq_mode    0x00000000U
#define MSK_NX90_xpic_break0_contr_chain               0x00000040U
#define SRT_NX90_xpic_break0_contr_chain               6
#define DFLT_VAL_NX90_xpic_break0_contr_chain          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_chain       0x00000000U
#define MSK_NX90_xpic_break0_contr_range               0x00000080U
#define SRT_NX90_xpic_break0_contr_range               7
#define DFLT_VAL_NX90_xpic_break0_contr_range          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_range       0x00000000U
#define MSK_NX90_xpic_break0_contr_enable              0x00000100U
#define SRT_NX90_xpic_break0_contr_enable              8
#define DFLT_VAL_NX90_xpic_break0_contr_enable         0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_enable      0x00000000U

/* all used bits of 'NX90_xpic_break0_contr': */
#define MSK_USED_BITS_NX90_xpic_break0_contr 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register xpic_break0_contr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_contr_mask            0x00000018U
#define Adr_NX90_xpic_com_debug_xpic_break0_contr_mask 0xFF184098U
#define Adr_NX90_xpic_app_debug_xpic_break0_contr_mask 0xFF884098U
#define DFLT_VAL_NX90_xpic_break0_contr_mask           0x00000000U

#define MSK_NX90_xpic_break0_contr_mask_val         0x000000ffU
#define SRT_NX90_xpic_break0_contr_mask_val         0
#define DFLT_VAL_NX90_xpic_break0_contr_mask_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break0_contr_mask_val 0x00000000U

/* all used bits of 'NX90_xpic_break0_contr_mask': */
#define MSK_USED_BITS_NX90_xpic_break0_contr_mask 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register xpic_break1_addr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_addr            0x0000001CU
#define Adr_NX90_xpic_com_debug_xpic_break1_addr 0xFF18409CU
#define Adr_NX90_xpic_app_debug_xpic_break1_addr 0xFF88409CU
#define DFLT_VAL_NX90_xpic_break1_addr           0x00000000U

#define MSK_NX90_xpic_break1_addr_val         0xffffffffU
#define SRT_NX90_xpic_break1_addr_val         0
#define DFLT_VAL_NX90_xpic_break1_addr_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_addr_val 0x00000000U

/* all used bits of 'NX90_xpic_break1_addr': */
#define MSK_USED_BITS_NX90_xpic_break1_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break1_addr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_addr_mask            0x00000020U
#define Adr_NX90_xpic_com_debug_xpic_break1_addr_mask 0xFF1840A0U
#define Adr_NX90_xpic_app_debug_xpic_break1_addr_mask 0xFF8840A0U
#define DFLT_VAL_NX90_xpic_break1_addr_mask           0x00000000U

#define MSK_NX90_xpic_break1_addr_mask_val         0xffffffffU
#define SRT_NX90_xpic_break1_addr_mask_val         0
#define DFLT_VAL_NX90_xpic_break1_addr_mask_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_addr_mask_val 0x00000000U

/* all used bits of 'NX90_xpic_break1_addr_mask': */
#define MSK_USED_BITS_NX90_xpic_break1_addr_mask 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break1_data */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_data            0x00000024U
#define Adr_NX90_xpic_com_debug_xpic_break1_data 0xFF1840A4U
#define Adr_NX90_xpic_app_debug_xpic_break1_data 0xFF8840A4U
#define DFLT_VAL_NX90_xpic_break1_data           0x00000000U

#define MSK_NX90_xpic_break1_data_val         0xffffffffU
#define SRT_NX90_xpic_break1_data_val         0
#define DFLT_VAL_NX90_xpic_break1_data_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_data_val 0x00000000U

/* all used bits of 'NX90_xpic_break1_data': */
#define MSK_USED_BITS_NX90_xpic_break1_data 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break1_data_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_data_mask            0x00000028U
#define Adr_NX90_xpic_com_debug_xpic_break1_data_mask 0xFF1840A8U
#define Adr_NX90_xpic_app_debug_xpic_break1_data_mask 0xFF8840A8U
#define DFLT_VAL_NX90_xpic_break1_data_mask           0x00000000U

#define MSK_NX90_xpic_break1_data_mask_val         0xffffffffU
#define SRT_NX90_xpic_break1_data_mask_val         0
#define DFLT_VAL_NX90_xpic_break1_data_mask_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_data_mask_val 0x00000000U

/* all used bits of 'NX90_xpic_break1_data_mask': */
#define MSK_USED_BITS_NX90_xpic_break1_data_mask 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break1_contr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_contr            0x0000002CU
#define Adr_NX90_xpic_com_debug_xpic_break1_contr 0xFF1840ACU
#define Adr_NX90_xpic_app_debug_xpic_break1_contr 0xFF8840ACU
#define DFLT_VAL_NX90_xpic_break1_contr           0x00000000U

#define MSK_NX90_xpic_break1_contr_write               0x00000001U
#define SRT_NX90_xpic_break1_contr_write               0
#define DFLT_VAL_NX90_xpic_break1_contr_write          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_write       0x00000000U
#define MSK_NX90_xpic_break1_contr_mas                 0x00000006U
#define SRT_NX90_xpic_break1_contr_mas                 1
#define DFLT_VAL_NX90_xpic_break1_contr_mas            0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_mas         0x00000000U
#define MSK_NX90_xpic_break1_contr_data_access         0x00000008U
#define SRT_NX90_xpic_break1_contr_data_access         3
#define DFLT_VAL_NX90_xpic_break1_contr_data_access    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_data_access 0x00000000U
#define MSK_NX90_xpic_break1_contr_fiq_mode            0x00000010U
#define SRT_NX90_xpic_break1_contr_fiq_mode            4
#define DFLT_VAL_NX90_xpic_break1_contr_fiq_mode       0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_fiq_mode    0x00000000U
#define MSK_NX90_xpic_break1_contr_irq_mode            0x00000020U
#define SRT_NX90_xpic_break1_contr_irq_mode            5
#define DFLT_VAL_NX90_xpic_break1_contr_irq_mode       0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_irq_mode    0x00000000U
#define MSK_NX90_xpic_break1_contr_chain               0x00000040U
#define SRT_NX90_xpic_break1_contr_chain               6
#define DFLT_VAL_NX90_xpic_break1_contr_chain          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_chain       0x00000000U
#define MSK_NX90_xpic_break1_contr_range               0x00000080U
#define SRT_NX90_xpic_break1_contr_range               7
#define DFLT_VAL_NX90_xpic_break1_contr_range          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_range       0x00000000U
#define MSK_NX90_xpic_break1_contr_enable              0x00000100U
#define SRT_NX90_xpic_break1_contr_enable              8
#define DFLT_VAL_NX90_xpic_break1_contr_enable         0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_enable      0x00000000U

/* all used bits of 'NX90_xpic_break1_contr': */
#define MSK_USED_BITS_NX90_xpic_break1_contr 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register xpic_break1_contr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_contr_mask            0x00000030U
#define Adr_NX90_xpic_com_debug_xpic_break1_contr_mask 0xFF1840B0U
#define Adr_NX90_xpic_app_debug_xpic_break1_contr_mask 0xFF8840B0U
#define DFLT_VAL_NX90_xpic_break1_contr_mask           0x00000000U

#define MSK_NX90_xpic_break1_contr_mask_val         0x000000ffU
#define SRT_NX90_xpic_break1_contr_mask_val         0
#define DFLT_VAL_NX90_xpic_break1_contr_mask_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break1_contr_mask_val 0x00000000U

/* all used bits of 'NX90_xpic_break1_contr_mask': */
#define MSK_USED_BITS_NX90_xpic_break1_contr_mask 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register xpic_break_last_pc */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_last_pc            0x00000034U
#define Adr_NX90_xpic_com_debug_xpic_break_last_pc 0xFF1840B4U
#define Adr_NX90_xpic_app_debug_xpic_break_last_pc 0xFF8840B4U

#define MSK_NX90_xpic_break_last_pc_val 0xffffffffU
#define SRT_NX90_xpic_break_last_pc_val 0

/* all used bits of 'NX90_xpic_break_last_pc': */
#define MSK_USED_BITS_NX90_xpic_break_last_pc 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break_status */
/* => Read access shows the reason why xPIC is in HOLD / BREAK */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_status            0x00000038U
#define Adr_NX90_xpic_com_debug_xpic_break_status 0xFF1840B8U
#define Adr_NX90_xpic_app_debug_xpic_break_status 0xFF8840B8U

#define MSK_NX90_xpic_break_status_xpic_in_hold      0x00000001U
#define SRT_NX90_xpic_break_status_xpic_in_hold      0
#define MSK_NX90_xpic_break_status_hold              0x00000002U
#define SRT_NX90_xpic_break_status_hold              1
#define MSK_NX90_xpic_break_status_break0            0x00000004U
#define SRT_NX90_xpic_break_status_break0            2
#define MSK_NX90_xpic_break_status_break1            0x00000008U
#define SRT_NX90_xpic_break_status_break1            3
#define MSK_NX90_xpic_break_status_soft_break        0x00000010U
#define SRT_NX90_xpic_break_status_soft_break        4
#define MSK_NX90_xpic_break_status_single_step       0x00000020U
#define SRT_NX90_xpic_break_status_single_step       5
#define MSK_NX90_xpic_break_status_data_misalignment 0x00000040U
#define SRT_NX90_xpic_break_status_data_misalignment 6
#define MSK_NX90_xpic_break_status_break0_read_data  0x00000080U
#define SRT_NX90_xpic_break_status_break0_read_data  7
#define MSK_NX90_xpic_break_status_break1_read_data  0x00000100U
#define SRT_NX90_xpic_break_status_break1_read_data  8
#define MSK_NX90_xpic_break_status_xpic_reset_status 0x00000200U
#define SRT_NX90_xpic_break_status_xpic_reset_status 9

/* all used bits of 'NX90_xpic_break_status': */
#define MSK_USED_BITS_NX90_xpic_break_status 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_raw */
/* => xPIC_DEBUG Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_raw            0x0000003CU
#define Adr_NX90_xpic_com_debug_xpic_break_irq_raw 0xFF1840BCU
#define Adr_NX90_xpic_app_debug_xpic_break_irq_raw 0xFF8840BCU
#define DFLT_VAL_NX90_xpic_break_irq_raw           0x00000000U

#define MSK_NX90_xpic_break_irq_raw_break0_irq               0x00000001U
#define SRT_NX90_xpic_break_irq_raw_break0_irq               0
#define DFLT_VAL_NX90_xpic_break_irq_raw_break0_irq          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_break0_irq       0x00000000U
#define MSK_NX90_xpic_break_irq_raw_break1_irq               0x00000002U
#define SRT_NX90_xpic_break_irq_raw_break1_irq               1
#define DFLT_VAL_NX90_xpic_break_irq_raw_break1_irq          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_break1_irq       0x00000000U
#define MSK_NX90_xpic_break_irq_raw_soft_break_irq           0x00000004U
#define SRT_NX90_xpic_break_irq_raw_soft_break_irq           2
#define DFLT_VAL_NX90_xpic_break_irq_raw_soft_break_irq      0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_soft_break_irq   0x00000000U
#define MSK_NX90_xpic_break_irq_raw_single_step_irq          0x00000008U
#define SRT_NX90_xpic_break_irq_raw_single_step_irq          3
#define DFLT_VAL_NX90_xpic_break_irq_raw_single_step_irq     0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_single_step_irq  0x00000000U
#define MSK_NX90_xpic_break_irq_raw_misalignment_irq         0x00000010U
#define SRT_NX90_xpic_break_irq_raw_misalignment_irq         4
#define DFLT_VAL_NX90_xpic_break_irq_raw_misalignment_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_misalignment_irq 0x00000000U

/* all used bits of 'NX90_xpic_break_irq_raw': */
#define MSK_USED_BITS_NX90_xpic_break_irq_raw 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_masked */
/* => xPIC_DEBUG Masked IRQ register for other CPU (ARM): */
/*    Shows status of masked IRQs (as connected to ARM) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_masked            0x00000040U
#define Adr_NX90_xpic_com_debug_xpic_break_irq_masked 0xFF1840C0U
#define Adr_NX90_xpic_app_debug_xpic_break_irq_masked 0xFF8840C0U

#define MSK_NX90_xpic_break_irq_masked_break0_irq       0x00000001U
#define SRT_NX90_xpic_break_irq_masked_break0_irq       0
#define MSK_NX90_xpic_break_irq_masked_break1_irq       0x00000002U
#define SRT_NX90_xpic_break_irq_masked_break1_irq       1
#define MSK_NX90_xpic_break_irq_masked_soft_break_irq   0x00000004U
#define SRT_NX90_xpic_break_irq_masked_soft_break_irq   2
#define MSK_NX90_xpic_break_irq_masked_single_step_irq  0x00000008U
#define SRT_NX90_xpic_break_irq_masked_single_step_irq  3
#define MSK_NX90_xpic_break_irq_masked_misalignment_irq 0x00000010U
#define SRT_NX90_xpic_break_irq_masked_misalignment_irq 4

/* all used bits of 'NX90_xpic_break_irq_masked': */
#define MSK_USED_BITS_NX90_xpic_break_irq_masked 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_msk_set */
/* => xPIC_DEBUG interrupt mask set for other CPU (ARM): */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to xpic_break_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_msk_set            0x00000044U
#define Adr_NX90_xpic_com_debug_xpic_break_irq_msk_set 0xFF1840C4U
#define Adr_NX90_xpic_app_debug_xpic_break_irq_msk_set 0xFF8840C4U
#define DFLT_VAL_NX90_xpic_break_irq_msk_set           0x00000000U

#define MSK_NX90_xpic_break_irq_msk_set_break0_irq               0x00000001U
#define SRT_NX90_xpic_break_irq_msk_set_break0_irq               0
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_break0_irq          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_break0_irq       0x00000000U
#define MSK_NX90_xpic_break_irq_msk_set_break1_irq               0x00000002U
#define SRT_NX90_xpic_break_irq_msk_set_break1_irq               1
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_break1_irq          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_break1_irq       0x00000000U
#define MSK_NX90_xpic_break_irq_msk_set_soft_break_irq           0x00000004U
#define SRT_NX90_xpic_break_irq_msk_set_soft_break_irq           2
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_soft_break_irq      0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_soft_break_irq   0x00000000U
#define MSK_NX90_xpic_break_irq_msk_set_single_step_irq          0x00000008U
#define SRT_NX90_xpic_break_irq_msk_set_single_step_irq          3
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_single_step_irq     0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_single_step_irq  0x00000000U
#define MSK_NX90_xpic_break_irq_msk_set_misalignment_irq         0x00000010U
#define SRT_NX90_xpic_break_irq_msk_set_misalignment_irq         4
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_misalignment_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_misalignment_irq 0x00000000U

/* all used bits of 'NX90_xpic_break_irq_msk_set': */
#define MSK_USED_BITS_NX90_xpic_break_irq_msk_set 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_msk_reset */
/* => xPIC_DEBUG interrupt mask reset for other CPU (ARM): */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_msk_reset            0x00000048U
#define Adr_NX90_xpic_com_debug_xpic_break_irq_msk_reset 0xFF1840C8U
#define Adr_NX90_xpic_app_debug_xpic_break_irq_msk_reset 0xFF8840C8U
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset           0x00000000U

#define MSK_NX90_xpic_break_irq_msk_reset_break0_irq               0x00000001U
#define SRT_NX90_xpic_break_irq_msk_reset_break0_irq               0
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_break0_irq          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_break0_irq       0x00000000U
#define MSK_NX90_xpic_break_irq_msk_reset_break1_irq               0x00000002U
#define SRT_NX90_xpic_break_irq_msk_reset_break1_irq               1
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_break1_irq          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_break1_irq       0x00000000U
#define MSK_NX90_xpic_break_irq_msk_reset_soft_break_irq           0x00000004U
#define SRT_NX90_xpic_break_irq_msk_reset_soft_break_irq           2
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_soft_break_irq      0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_soft_break_irq   0x00000000U
#define MSK_NX90_xpic_break_irq_msk_reset_single_step_irq          0x00000008U
#define SRT_NX90_xpic_break_irq_msk_reset_single_step_irq          3
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_single_step_irq     0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_single_step_irq  0x00000000U
#define MSK_NX90_xpic_break_irq_msk_reset_misalignment_irq         0x00000010U
#define SRT_NX90_xpic_break_irq_msk_reset_misalignment_irq         4
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_misalignment_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_misalignment_irq 0x00000000U

/* all used bits of 'NX90_xpic_break_irq_msk_reset': */
#define MSK_USED_BITS_NX90_xpic_break_irq_msk_reset 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register xpic_break_own_irq_masked */
/* => xPIC_DEBUG own Masked IRQ register (for xPIC): */
/*    Shows status of masked IRQs (as connected to xPIC) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_own_irq_masked            0x0000004CU
#define Adr_NX90_xpic_com_debug_xpic_break_own_irq_masked 0xFF1840CCU
#define Adr_NX90_xpic_app_debug_xpic_break_own_irq_masked 0xFF8840CCU

#define MSK_NX90_xpic_break_own_irq_masked_misalignment_irq 0x00000001U
#define SRT_NX90_xpic_break_own_irq_masked_misalignment_irq 0

/* all used bits of 'NX90_xpic_break_own_irq_masked': */
#define MSK_USED_BITS_NX90_xpic_break_own_irq_masked 0x00000001U

/* --------------------------------------------------------------------- */
/* Register xpic_break_own_irq_msk_set */
/* => xPIC_DEBUG own interrupt mask set (for xPIC): */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to xpic_break_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_own_irq_msk_set            0x00000050U
#define Adr_NX90_xpic_com_debug_xpic_break_own_irq_msk_set 0xFF1840D0U
#define Adr_NX90_xpic_app_debug_xpic_break_own_irq_msk_set 0xFF8840D0U
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_set           0x00000000U

#define MSK_NX90_xpic_break_own_irq_msk_set_misalignment_irq         0x00000001U
#define SRT_NX90_xpic_break_own_irq_msk_set_misalignment_irq         0
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_set_misalignment_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_own_irq_msk_set_misalignment_irq 0x00000000U

/* all used bits of 'NX90_xpic_break_own_irq_msk_set': */
#define MSK_USED_BITS_NX90_xpic_break_own_irq_msk_set 0x00000001U

/* --------------------------------------------------------------------- */
/* Register xpic_break_own_irq_msk_reset */
/* => xPIC_DEBUG own interrupt mask reset (for XPIC): */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_own_irq_msk_reset            0x00000054U
#define Adr_NX90_xpic_com_debug_xpic_break_own_irq_msk_reset 0xFF1840D4U
#define Adr_NX90_xpic_app_debug_xpic_break_own_irq_msk_reset 0xFF8840D4U
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_reset           0x00000000U

#define MSK_NX90_xpic_break_own_irq_msk_reset_misalignment_irq         0x00000001U
#define SRT_NX90_xpic_break_own_irq_msk_reset_misalignment_irq         0
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_reset_misalignment_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_break_own_irq_msk_reset_misalignment_irq 0x00000000U

/* all used bits of 'NX90_xpic_break_own_irq_msk_reset': */
#define MSK_USED_BITS_NX90_xpic_break_own_irq_msk_reset 0x00000001U

/* --------------------------------------------------------------------- */
/* Register xpic_break_return_fiq_pc */
/* => xPIC_DEBUG information FIQ return PC value */
/*    valid if xPIC is in FIQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_return_fiq_pc            0x00000058U
#define Adr_NX90_xpic_com_debug_xpic_break_return_fiq_pc 0xFF1840D8U
#define Adr_NX90_xpic_app_debug_xpic_break_return_fiq_pc 0xFF8840D8U

#define MSK_NX90_xpic_break_return_fiq_pc_val 0xffffffffU
#define SRT_NX90_xpic_break_return_fiq_pc_val 0

/* all used bits of 'NX90_xpic_break_return_fiq_pc': */
#define MSK_USED_BITS_NX90_xpic_break_return_fiq_pc 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_break_return_irq_pc */
/* => xPIC_DEBUG information last IRQ return PC value */
/*    valid if xPIC is in IRQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_return_irq_pc            0x0000005CU
#define Adr_NX90_xpic_com_debug_xpic_break_return_irq_pc 0xFF1840DCU
#define Adr_NX90_xpic_app_debug_xpic_break_return_irq_pc 0xFF8840DCU

#define MSK_NX90_xpic_break_return_irq_pc_val 0xffffffffU
#define SRT_NX90_xpic_break_return_irq_pc_val 0

/* all used bits of 'NX90_xpic_break_return_irq_pc': */
#define MSK_USED_BITS_NX90_xpic_break_return_irq_pc 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_irq_status */
/* => Read access shows the xpic irq status and the xpic irq enable bits */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_irq_status            0x00000060U
#define Adr_NX90_xpic_com_debug_xpic_irq_status 0xFF1840E0U
#define Adr_NX90_xpic_app_debug_xpic_irq_status 0xFF8840E0U

#define MSK_NX90_xpic_irq_status_irq_status 0x00000001U
#define SRT_NX90_xpic_irq_status_irq_status 0
#define MSK_NX90_xpic_irq_status_fiq_status 0x00000002U
#define SRT_NX90_xpic_irq_status_fiq_status 1
#define MSK_NX90_xpic_irq_status_irq_enable 0x00000004U
#define SRT_NX90_xpic_irq_status_irq_enable 2
#define MSK_NX90_xpic_irq_status_fiq_enable 0x00000008U
#define SRT_NX90_xpic_irq_status_fiq_enable 3

/* all used bits of 'NX90_xpic_irq_status': */
#define MSK_USED_BITS_NX90_xpic_irq_status 0x0000000fU


/* ===================================================================== */

/* AREA system_xpic */
/* Area of xpic_com_system, xpic_app_system */

/* ===================================================================== */

#define Addr_NX90_xpic_com_system 0xFF200000U
#define Addr_NX90_xpic_app_system 0xFF900000U

/* ===================================================================== */

/* AREA xpic_vic */
/* Area of vic_xpic_com, vic_xpic_app */

/* ===================================================================== */

#define Addr_NX90_vic_xpic_com 0xFF200000U
#define Addr_NX90_vic_xpic_app 0xFF900000U

/* --------------------------------------------------------------------- */
/* Register xpic_vic_config */
/* => XPIC VIC Configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_config          0x00000000U
#define Adr_NX90_vic_xpic_com_xpic_vic_config 0xFF200000U
#define Adr_NX90_vic_xpic_app_xpic_vic_config 0xFF900000U
#define DFLT_VAL_NX90_xpic_vic_config         0x00000000U

#define MSK_NX90_xpic_vic_config_enable         0x00000001U
#define SRT_NX90_xpic_vic_config_enable         0
#define DFLT_VAL_NX90_xpic_vic_config_enable    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_config_enable 0x00000000U
#define MSK_NX90_xpic_vic_config_table          0x00000002U
#define SRT_NX90_xpic_vic_config_table          1
#define DFLT_VAL_NX90_xpic_vic_config_table     0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_config_table  0x00000000U

/* all used bits of 'NX90_xpic_vic_config': */
#define MSK_USED_BITS_NX90_xpic_vic_config 0x00000003U

/* --------------------------------------------------------------------- */
/* Register xpic_vic_raw_intr0 */
/* => XPIC VIC Raw0 interrupt status register */
/*    see netx4000_irq doc */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_raw_intr0          0x00000004U
#define Adr_NX90_vic_xpic_com_xpic_vic_raw_intr0 0xFF200004U
#define Adr_NX90_vic_xpic_app_xpic_vic_raw_intr0 0xFF900004U

#define MSK_NX90_xpic_vic_raw_intr0_irqs 0xffffffffU
#define SRT_NX90_xpic_vic_raw_intr0_irqs 0

/* all used bits of 'NX90_xpic_vic_raw_intr0': */
#define MSK_USED_BITS_NX90_xpic_vic_raw_intr0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_raw_intr1 */
/* => XPIC VIC Raw1 interrupt status register */
/*    see netx4000_irq doc */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_raw_intr1          0x00000008U
#define Adr_NX90_vic_xpic_com_xpic_vic_raw_intr1 0xFF200008U
#define Adr_NX90_vic_xpic_app_xpic_vic_raw_intr1 0xFF900008U

#define MSK_NX90_xpic_vic_raw_intr1_irqs 0xffffffffU
#define SRT_NX90_xpic_vic_raw_intr1_irqs 0

/* all used bits of 'NX90_xpic_vic_raw_intr1': */
#define MSK_USED_BITS_NX90_xpic_vic_raw_intr1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_raw_intr2 */
/* => XPIC VIC Raw2 interrupt status register */
/*    see netx4000_irq doc */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_raw_intr2          0x0000000CU
#define Adr_NX90_vic_xpic_com_xpic_vic_raw_intr2 0xFF20000CU
#define Adr_NX90_vic_xpic_app_xpic_vic_raw_intr2 0xFF90000CU

#define MSK_NX90_xpic_vic_raw_intr2_irqs 0xffffffffU
#define SRT_NX90_xpic_vic_raw_intr2_irqs 0

/* all used bits of 'NX90_xpic_vic_raw_intr2': */
#define MSK_USED_BITS_NX90_xpic_vic_raw_intr2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint0_set */
/* => XPIC VIC Software0 interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint0_set          0x00000010U
#define Adr_NX90_vic_xpic_com_xpic_vic_softint0_set 0xFF200010U
#define Adr_NX90_vic_xpic_app_xpic_vic_softint0_set 0xFF900010U
#define DFLT_VAL_NX90_xpic_vic_softint0_set         0x00000000U

#define MSK_NX90_xpic_vic_softint0_set_irqs         0xffffffffU
#define SRT_NX90_xpic_vic_softint0_set_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint0_set_irqs    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_softint0_set_irqs 0x00000000U

/* all used bits of 'NX90_xpic_vic_softint0_set': */
#define MSK_USED_BITS_NX90_xpic_vic_softint0_set 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint1_set */
/* => XPIC VIC Software1 interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint1_set          0x00000014U
#define Adr_NX90_vic_xpic_com_xpic_vic_softint1_set 0xFF200014U
#define Adr_NX90_vic_xpic_app_xpic_vic_softint1_set 0xFF900014U
#define DFLT_VAL_NX90_xpic_vic_softint1_set         0x00000000U

#define MSK_NX90_xpic_vic_softint1_set_irqs         0xffffffffU
#define SRT_NX90_xpic_vic_softint1_set_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint1_set_irqs    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_softint1_set_irqs 0x00000000U

/* all used bits of 'NX90_xpic_vic_softint1_set': */
#define MSK_USED_BITS_NX90_xpic_vic_softint1_set 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint2_set */
/* => XPIC VIC Software2 interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint2_set          0x00000018U
#define Adr_NX90_vic_xpic_com_xpic_vic_softint2_set 0xFF200018U
#define Adr_NX90_vic_xpic_app_xpic_vic_softint2_set 0xFF900018U
#define DFLT_VAL_NX90_xpic_vic_softint2_set         0x00000000U

#define MSK_NX90_xpic_vic_softint2_set_irqs         0xffffffffU
#define SRT_NX90_xpic_vic_softint2_set_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint2_set_irqs    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_softint2_set_irqs 0x00000000U

/* all used bits of 'NX90_xpic_vic_softint2_set': */
#define MSK_USED_BITS_NX90_xpic_vic_softint2_set 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint0_reset */
/* => XPIC VIC Software0 interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint0_reset          0x0000001CU
#define Adr_NX90_vic_xpic_com_xpic_vic_softint0_reset 0xFF20001CU
#define Adr_NX90_vic_xpic_app_xpic_vic_softint0_reset 0xFF90001CU
#define DFLT_VAL_NX90_xpic_vic_softint0_reset         0x00000000U

#define MSK_NX90_xpic_vic_softint0_reset_irqs         0xffffffffU
#define SRT_NX90_xpic_vic_softint0_reset_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint0_reset_irqs    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_softint0_reset_irqs 0x00000000U

/* all used bits of 'NX90_xpic_vic_softint0_reset': */
#define MSK_USED_BITS_NX90_xpic_vic_softint0_reset 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint1_reset */
/* => XPIC VIC Software1 interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint1_reset          0x00000020U
#define Adr_NX90_vic_xpic_com_xpic_vic_softint1_reset 0xFF200020U
#define Adr_NX90_vic_xpic_app_xpic_vic_softint1_reset 0xFF900020U
#define DFLT_VAL_NX90_xpic_vic_softint1_reset         0x00000000U

#define MSK_NX90_xpic_vic_softint1_reset_irqs         0xffffffffU
#define SRT_NX90_xpic_vic_softint1_reset_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint1_reset_irqs    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_softint1_reset_irqs 0x00000000U

/* all used bits of 'NX90_xpic_vic_softint1_reset': */
#define MSK_USED_BITS_NX90_xpic_vic_softint1_reset 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint2_reset */
/* => XPIC VIC Software2 interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint2_reset          0x00000024U
#define Adr_NX90_vic_xpic_com_xpic_vic_softint2_reset 0xFF200024U
#define Adr_NX90_vic_xpic_app_xpic_vic_softint2_reset 0xFF900024U
#define DFLT_VAL_NX90_xpic_vic_softint2_reset         0x00000000U

#define MSK_NX90_xpic_vic_softint2_reset_irqs         0xffffffffU
#define SRT_NX90_xpic_vic_softint2_reset_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint2_reset_irqs    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_softint2_reset_irqs 0x00000000U

/* all used bits of 'NX90_xpic_vic_softint2_reset': */
#define MSK_USED_BITS_NX90_xpic_vic_softint2_reset 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_addr */
/* => XPIC VIC FIQ Vector address 0 register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_addr          0x00000028U
#define Adr_NX90_vic_xpic_com_xpic_vic_fiq_addr 0xFF200028U
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_addr 0xFF900028U
#define DFLT_VAL_NX90_xpic_vic_fiq_addr         0x00000000U

#define MSK_NX90_xpic_vic_fiq_addr_val         0xffffffffU
#define SRT_NX90_xpic_vic_fiq_addr_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_addr_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_addr_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_fiq_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_irq_addr */
/* => XPIC VIC normal IRQ address register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_irq_addr          0x0000002CU
#define Adr_NX90_vic_xpic_com_xpic_vic_irq_addr 0xFF20002CU
#define Adr_NX90_vic_xpic_app_xpic_vic_irq_addr 0xFF90002CU
#define DFLT_VAL_NX90_xpic_vic_irq_addr         0x00000000U

#define MSK_NX90_xpic_vic_irq_addr_val         0xffffffffU
#define SRT_NX90_xpic_vic_irq_addr_val         0
#define DFLT_VAL_NX90_xpic_vic_irq_addr_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_irq_addr_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_irq_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_irq_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vector_addr */
/* => XPIC VIC IRQ Vector address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vector_addr          0x00000030U
#define Adr_NX90_vic_xpic_com_xpic_vic_vector_addr 0xFF200030U
#define Adr_NX90_vic_xpic_app_xpic_vic_vector_addr 0xFF900030U

#define MSK_NX90_xpic_vic_vector_addr_val 0xffffffffU
#define SRT_NX90_xpic_vic_vector_addr_val 0

/* all used bits of 'NX90_xpic_vic_vector_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_vector_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_table_base_addr */
/* => XPIC VIC IRQ TABLE ADDRESS BASE POINTER */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_table_base_addr          0x00000034U
#define Adr_NX90_vic_xpic_com_xpic_vic_table_base_addr 0xFF200034U
#define Adr_NX90_vic_xpic_app_xpic_vic_table_base_addr 0xFF900034U
#define DFLT_VAL_NX90_xpic_vic_table_base_addr         0x00000000U

#define MSK_NX90_xpic_vic_table_base_addr_val         0xffffffffU
#define SRT_NX90_xpic_vic_table_base_addr_val         0
#define DFLT_VAL_NX90_xpic_vic_table_base_addr_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_table_base_addr_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_table_base_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_table_base_addr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_vect_config */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_vect_config          0x00000038U
#define Adr_NX90_vic_xpic_com_xpic_vic_fiq_vect_config 0xFF200038U
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_vect_config 0xFF900038U
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config         0x00000000U

#define MSK_NX90_xpic_vic_fiq_vect_config_int_source                 0x0000007fU
#define SRT_NX90_xpic_vic_fiq_vect_config_int_source                 0
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config_int_source            0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_vect_config_int_source         0x00000000U
#define MSK_NX90_xpic_vic_fiq_vect_config_select_fiq_default         0x40000000U
#define SRT_NX90_xpic_vic_fiq_vect_config_select_fiq_default         30
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config_select_fiq_default    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_vect_config_select_fiq_default 0x00000000U
#define MSK_NX90_xpic_vic_fiq_vect_config_enable                     0x80000000U
#define SRT_NX90_xpic_vic_fiq_vect_config_enable                     31
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config_enable                0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_vect_config_enable             0x00000000U

/* all used bits of 'NX90_xpic_vic_fiq_vect_config': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_vect_config 0xc000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config0 */
/* => highest priority */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config0          0x0000003CU
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config0 0xFF20003CU
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config0 0xFF90003CU
#define DFLT_VAL_NX90_xpic_vic_vect_config0         0x00000000U

#define MSK_NX90_xpic_vic_vect_config0_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config0_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config0_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config0_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config0_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config0_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config0_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config0_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config0': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config0 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config1          0x00000040U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config1 0xFF200040U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config1 0xFF900040U
#define DFLT_VAL_NX90_xpic_vic_vect_config1         0x00000000U

#define MSK_NX90_xpic_vic_vect_config1_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config1_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config1_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config1_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config1_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config1_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config1_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config1_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config1': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config1 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config2          0x00000044U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config2 0xFF200044U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config2 0xFF900044U
#define DFLT_VAL_NX90_xpic_vic_vect_config2         0x00000000U

#define MSK_NX90_xpic_vic_vect_config2_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config2_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config2_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config2_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config2_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config2_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config2_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config2_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config2': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config2 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config3          0x00000048U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config3 0xFF200048U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config3 0xFF900048U
#define DFLT_VAL_NX90_xpic_vic_vect_config3         0x00000000U

#define MSK_NX90_xpic_vic_vect_config3_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config3_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config3_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config3_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config3_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config3_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config3_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config3_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config3': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config3 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config4 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config4          0x0000004CU
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config4 0xFF20004CU
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config4 0xFF90004CU
#define DFLT_VAL_NX90_xpic_vic_vect_config4         0x00000000U

#define MSK_NX90_xpic_vic_vect_config4_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config4_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config4_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config4_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config4_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config4_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config4_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config4_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config4': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config4 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config5 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config5          0x00000050U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config5 0xFF200050U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config5 0xFF900050U
#define DFLT_VAL_NX90_xpic_vic_vect_config5         0x00000000U

#define MSK_NX90_xpic_vic_vect_config5_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config5_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config5_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config5_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config5_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config5_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config5_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config5_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config5': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config5 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config6 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config6          0x00000054U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config6 0xFF200054U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config6 0xFF900054U
#define DFLT_VAL_NX90_xpic_vic_vect_config6         0x00000000U

#define MSK_NX90_xpic_vic_vect_config6_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config6_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config6_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config6_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config6_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config6_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config6_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config6_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config6': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config6 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config7 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config7          0x00000058U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config7 0xFF200058U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config7 0xFF900058U
#define DFLT_VAL_NX90_xpic_vic_vect_config7         0x00000000U

#define MSK_NX90_xpic_vic_vect_config7_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config7_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config7_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config7_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config7_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config7_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config7_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config7_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config7': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config7 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config8 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config8          0x0000005CU
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config8 0xFF20005CU
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config8 0xFF90005CU
#define DFLT_VAL_NX90_xpic_vic_vect_config8         0x00000000U

#define MSK_NX90_xpic_vic_vect_config8_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config8_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config8_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config8_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config8_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config8_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config8_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config8_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config8': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config8 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config9 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config9          0x00000060U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config9 0xFF200060U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config9 0xFF900060U
#define DFLT_VAL_NX90_xpic_vic_vect_config9         0x00000000U

#define MSK_NX90_xpic_vic_vect_config9_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config9_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config9_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config9_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config9_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config9_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config9_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config9_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config9': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config9 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config10 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config10          0x00000064U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config10 0xFF200064U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config10 0xFF900064U
#define DFLT_VAL_NX90_xpic_vic_vect_config10         0x00000000U

#define MSK_NX90_xpic_vic_vect_config10_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config10_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config10_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config10_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config10_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config10_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config10_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config10_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config10': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config10 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config11 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config11          0x00000068U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config11 0xFF200068U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config11 0xFF900068U
#define DFLT_VAL_NX90_xpic_vic_vect_config11         0x00000000U

#define MSK_NX90_xpic_vic_vect_config11_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config11_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config11_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config11_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config11_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config11_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config11_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config11_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config11': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config11 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config12 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config12          0x0000006CU
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config12 0xFF20006CU
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config12 0xFF90006CU
#define DFLT_VAL_NX90_xpic_vic_vect_config12         0x00000000U

#define MSK_NX90_xpic_vic_vect_config12_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config12_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config12_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config12_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config12_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config12_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config12_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config12_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config12': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config12 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config13 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config13          0x00000070U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config13 0xFF200070U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config13 0xFF900070U
#define DFLT_VAL_NX90_xpic_vic_vect_config13         0x00000000U

#define MSK_NX90_xpic_vic_vect_config13_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config13_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config13_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config13_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config13_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config13_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config13_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config13_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config13': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config13 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config14 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config14          0x00000074U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config14 0xFF200074U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config14 0xFF900074U
#define DFLT_VAL_NX90_xpic_vic_vect_config14         0x00000000U

#define MSK_NX90_xpic_vic_vect_config14_int_source         0x0000007fU
#define SRT_NX90_xpic_vic_vect_config14_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config14_int_source    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config14_int_source 0x00000000U
#define MSK_NX90_xpic_vic_vect_config14_enable             0x80000000U
#define SRT_NX90_xpic_vic_vect_config14_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config14_enable        0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config14_enable     0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config14': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config14 0x8000007fU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config15 */
/* => XPIC default interrupt vector, all interrupt sources (wired-OR) */
/*    select with default interrupt vector register */
/*    lowest priority */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config15          0x00000078U
#define Adr_NX90_vic_xpic_com_xpic_vic_vect_config15 0xFF200078U
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config15 0xFF900078U
#define DFLT_VAL_NX90_xpic_vic_vect_config15         0x00000000U

#define MSK_NX90_xpic_vic_vect_config15_enable         0x80000000U
#define SRT_NX90_xpic_vic_vect_config15_enable         31
#define DFLT_VAL_NX90_xpic_vic_vect_config15_enable    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config15_enable 0x00000000U

/* all used bits of 'NX90_xpic_vic_vect_config15': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config15 0x80000000U

/* --------------------------------------------------------------------- */
/* Register xpic_vic_default0 */
/* => XPIC default interrupt vector select0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_default0          0x0000007CU
#define Adr_NX90_vic_xpic_com_xpic_vic_default0 0xFF20007CU
#define Adr_NX90_vic_xpic_app_xpic_vic_default0 0xFF90007CU
#define DFLT_VAL_NX90_xpic_vic_default0         0x00000000U

#define MSK_NX90_xpic_vic_default0_val         0xffffffffU
#define SRT_NX90_xpic_vic_default0_val         0
#define DFLT_VAL_NX90_xpic_vic_default0_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_default0_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_default0': */
#define MSK_USED_BITS_NX90_xpic_vic_default0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_default1 */
/* => XPIC default interrupt vector select1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_default1          0x00000080U
#define Adr_NX90_vic_xpic_com_xpic_vic_default1 0xFF200080U
#define Adr_NX90_vic_xpic_app_xpic_vic_default1 0xFF900080U
#define DFLT_VAL_NX90_xpic_vic_default1         0x00000000U

#define MSK_NX90_xpic_vic_default1_val         0xffffffffU
#define SRT_NX90_xpic_vic_default1_val         0
#define DFLT_VAL_NX90_xpic_vic_default1_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_default1_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_default1': */
#define MSK_USED_BITS_NX90_xpic_vic_default1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_default2 */
/* => XPIC default interrupt vector select1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_default2          0x00000084U
#define Adr_NX90_vic_xpic_com_xpic_vic_default2 0xFF200084U
#define Adr_NX90_vic_xpic_app_xpic_vic_default2 0xFF900084U
#define DFLT_VAL_NX90_xpic_vic_default2         0x00000000U

#define MSK_NX90_xpic_vic_default2_val         0xffffffffU
#define SRT_NX90_xpic_vic_default2_val         0
#define DFLT_VAL_NX90_xpic_vic_default2_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_default2_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_default2': */
#define MSK_USED_BITS_NX90_xpic_vic_default2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_default0 */
/* => XPIC default interrupt vector select0 for fiq */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_default0          0x00000088U
#define Adr_NX90_vic_xpic_com_xpic_vic_fiq_default0 0xFF200088U
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_default0 0xFF900088U
#define DFLT_VAL_NX90_xpic_vic_fiq_default0         0x00000000U

#define MSK_NX90_xpic_vic_fiq_default0_val         0xffffffffU
#define SRT_NX90_xpic_vic_fiq_default0_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_default0_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_default0_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_fiq_default0': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_default0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_default1 */
/* => XPIC default interrupt vector select1 for fiq */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_default1          0x0000008CU
#define Adr_NX90_vic_xpic_com_xpic_vic_fiq_default1 0xFF20008CU
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_default1 0xFF90008CU
#define DFLT_VAL_NX90_xpic_vic_fiq_default1         0x00000000U

#define MSK_NX90_xpic_vic_fiq_default1_val         0xffffffffU
#define SRT_NX90_xpic_vic_fiq_default1_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_default1_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_default1_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_fiq_default1': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_default1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_default2 */
/* => XPIC default interrupt vector select1 for fiq */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_default2          0x00000090U
#define Adr_NX90_vic_xpic_com_xpic_vic_fiq_default2 0xFF200090U
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_default2 0xFF900090U
#define DFLT_VAL_NX90_xpic_vic_fiq_default2         0x00000000U

#define MSK_NX90_xpic_vic_fiq_default2_val         0xffffffffU
#define SRT_NX90_xpic_vic_fiq_default2_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_default2_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_default2_val 0x00000000U

/* all used bits of 'NX90_xpic_vic_fiq_default2': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_default2 0xffffffffU


/* ===================================================================== */

/* AREA xpic_wdg */
/* Area of wdg_xpic_com, wdg_xpic_app */

/* ===================================================================== */

#define Addr_NX90_wdg_xpic_com 0xFF200180U
#define Addr_NX90_wdg_xpic_app 0xFF900180U

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_trig */
/* => netX xPIC Watchdog Trigger Register. */
/*    The watchdog access code is generated by a pseudo random generator. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_trig          0x00000000U
#define Adr_NX90_wdg_xpic_com_xpic_wdg_trig 0xFF200180U
#define Adr_NX90_wdg_xpic_app_xpic_wdg_trig 0xFF900180U
#define DFLT_VAL_NX90_xpic_wdg_trig         0x00000000U

#define MSK_NX90_xpic_wdg_trig_wdg_access_code               0x000fffffU
#define SRT_NX90_xpic_wdg_trig_wdg_access_code               0
#define DFLT_VAL_NX90_xpic_wdg_trig_wdg_access_code          0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_wdg_access_code       0x00000000U
#define MSK_NX90_xpic_wdg_trig_irq_req_watchdog              0x01000000U
#define SRT_NX90_xpic_wdg_trig_irq_req_watchdog              24
#define DFLT_VAL_NX90_xpic_wdg_trig_irq_req_watchdog         0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_irq_req_watchdog      0x00000000U
#define MSK_NX90_xpic_wdg_trig_wdg_counter_trigger_w         0x10000000U
#define SRT_NX90_xpic_wdg_trig_wdg_counter_trigger_w         28
#define DFLT_VAL_NX90_xpic_wdg_trig_wdg_counter_trigger_w    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_wdg_counter_trigger_w 0x00000000U
#define MSK_NX90_xpic_wdg_trig_write_enable                  0x80000000U
#define SRT_NX90_xpic_wdg_trig_write_enable                  31
#define DFLT_VAL_NX90_xpic_wdg_trig_write_enable             0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_write_enable          0x00000000U

/* all used bits of 'NX90_xpic_wdg_trig': */
#define MSK_USED_BITS_NX90_xpic_wdg_trig 0x910fffffU

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_counter */
/* => netX xPIC Watchdog Counter Register */
/*    The counter value is decremented each 10000 system clock cycles. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_counter          0x00000004U
#define Adr_NX90_wdg_xpic_com_xpic_wdg_counter 0xFF200184U
#define Adr_NX90_wdg_xpic_app_xpic_wdg_counter 0xFF900184U

#define MSK_NX90_xpic_wdg_counter_val 0x0001ffffU
#define SRT_NX90_xpic_wdg_counter_val 0

/* all used bits of 'NX90_xpic_wdg_counter': */
#define MSK_USED_BITS_NX90_xpic_wdg_counter 0x0001ffffU

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_xpic_irq_timeout */
/* => netX xPIC Watchdog xPIC interrupt timout register: */
/*    xpic_irq_timeout or arm_irq_timeout must be nonzero to enable watchdog */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_xpic_irq_timeout          0x00000008U
#define Adr_NX90_wdg_xpic_com_xpic_wdg_xpic_irq_timeout 0xFF200188U
#define Adr_NX90_wdg_xpic_app_xpic_wdg_xpic_irq_timeout 0xFF900188U
#define DFLT_VAL_NX90_xpic_wdg_xpic_irq_timeout         0x00000000U

#define MSK_NX90_xpic_wdg_xpic_irq_timeout_val         0x0000ffffU
#define SRT_NX90_xpic_wdg_xpic_irq_timeout_val         0
#define DFLT_VAL_NX90_xpic_wdg_xpic_irq_timeout_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_xpic_irq_timeout_val 0x00000000U

/* all used bits of 'NX90_xpic_wdg_xpic_irq_timeout': */
#define MSK_USED_BITS_NX90_xpic_wdg_xpic_irq_timeout 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_arm_irq_timeout */
/* => netX xPIC Watchdog ARM interrupt timout register: */
/*    xpic_irq_timeout or arm_irq_timeout must be nonzero to enable watchdog */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_arm_irq_timeout          0x0000000CU
#define Adr_NX90_wdg_xpic_com_xpic_wdg_arm_irq_timeout 0xFF20018CU
#define Adr_NX90_wdg_xpic_app_xpic_wdg_arm_irq_timeout 0xFF90018CU
#define DFLT_VAL_NX90_xpic_wdg_arm_irq_timeout         0x00000000U

#define MSK_NX90_xpic_wdg_arm_irq_timeout_val         0x0000ffffU
#define SRT_NX90_xpic_wdg_arm_irq_timeout_val         0
#define DFLT_VAL_NX90_xpic_wdg_arm_irq_timeout_val    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_arm_irq_timeout_val 0x00000000U

/* all used bits of 'NX90_xpic_wdg_arm_irq_timeout': */
#define MSK_USED_BITS_NX90_xpic_wdg_arm_irq_timeout 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_raw */
/* => Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_raw          0x00000010U
#define Adr_NX90_wdg_xpic_com_xpic_wdg_irq_raw 0xFF200190U
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_raw 0xFF900190U
#define DFLT_VAL_NX90_xpic_wdg_irq_raw         0x00000000U

#define MSK_NX90_xpic_wdg_irq_raw_wdg_arm_irq         0x00000001U
#define SRT_NX90_xpic_wdg_irq_raw_wdg_arm_irq         0
#define DFLT_VAL_NX90_xpic_wdg_irq_raw_wdg_arm_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_irq_raw_wdg_arm_irq 0x00000000U

/* all used bits of 'NX90_xpic_wdg_irq_raw': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_raw 0x00000001U

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_masked */
/* => xpic_wdg Masked IRQ register: */
/*    Shows status of masked IRQs (as connected to xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_masked          0x00000014U
#define Adr_NX90_wdg_xpic_com_xpic_wdg_irq_masked 0xFF200194U
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_masked 0xFF900194U

#define MSK_NX90_xpic_wdg_irq_masked_wdg_arm_irq 0x00000001U
#define SRT_NX90_xpic_wdg_irq_masked_wdg_arm_irq 0

/* all used bits of 'NX90_xpic_wdg_irq_masked': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_masked 0x00000001U

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_msk_set */
/* => xpic_wdg interrupt mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to wdg_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_msk_set          0x00000018U
#define Adr_NX90_wdg_xpic_com_xpic_wdg_irq_msk_set 0xFF200198U
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_msk_set 0xFF900198U
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_set         0x00000000U

#define MSK_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq         0x00000001U
#define SRT_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq         0
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq 0x00000000U

/* all used bits of 'NX90_xpic_wdg_irq_msk_set': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_msk_set 0x00000001U

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_msk_reset */
/* => xpic_wdg interrupt mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_msk_reset          0x0000001CU
#define Adr_NX90_wdg_xpic_com_xpic_wdg_irq_msk_reset 0xFF20019CU
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_msk_reset 0xFF90019CU
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_reset         0x00000000U

#define MSK_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq         0x00000001U
#define SRT_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq         0
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq    0x00000000U
#define DFLT_BF_VAL_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq 0x00000000U

/* all used bits of 'NX90_xpic_wdg_irq_msk_reset': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_msk_reset 0x00000001U


/* ===================================================================== */

/* AREA sr */
/* Area of xc0_sr_xpic_com */

/* ===================================================================== */

#define Addr_NX90_xc0_sr_xpic_com 0xFF200400U

/* --------------------------------------------------------------------- */
/* Register sr_sr0 */
/* => Shared Work Register 0 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr0             0x00000000U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr0 0xFF200400U
#define Adr_NX90_sr_sr0                 0xFF200400U
#define DFLT_VAL_NX90_sr_sr0            0x00000000U

#define MSK_NX90_sr_sr0_val         0x0000ffffU
#define SRT_NX90_sr_sr0_val         0
#define DFLT_VAL_NX90_sr_sr0_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr0_val 0x00000000U

/* all used bits of 'NX90_sr_sr0': */
#define MSK_USED_BITS_NX90_sr_sr0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr1 */
/* => Shared Work Register 1 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr1             0x00000004U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr1 0xFF200404U
#define Adr_NX90_sr_sr1                 0xFF200404U
#define DFLT_VAL_NX90_sr_sr1            0x00000000U

#define MSK_NX90_sr_sr1_val         0x0000ffffU
#define SRT_NX90_sr_sr1_val         0
#define DFLT_VAL_NX90_sr_sr1_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr1_val 0x00000000U

/* all used bits of 'NX90_sr_sr1': */
#define MSK_USED_BITS_NX90_sr_sr1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr2 */
/* => Shared Work Register 2 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr2             0x00000008U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr2 0xFF200408U
#define Adr_NX90_sr_sr2                 0xFF200408U
#define DFLT_VAL_NX90_sr_sr2            0x00000000U

#define MSK_NX90_sr_sr2_val         0x0000ffffU
#define SRT_NX90_sr_sr2_val         0
#define DFLT_VAL_NX90_sr_sr2_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr2_val 0x00000000U

/* all used bits of 'NX90_sr_sr2': */
#define MSK_USED_BITS_NX90_sr_sr2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr3 */
/* => Shared Work Register 3 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr3             0x0000000CU
#define Adr_NX90_xc0_sr_xpic_com_sr_sr3 0xFF20040CU
#define Adr_NX90_sr_sr3                 0xFF20040CU
#define DFLT_VAL_NX90_sr_sr3            0x00000000U

#define MSK_NX90_sr_sr3_val         0x0000ffffU
#define SRT_NX90_sr_sr3_val         0
#define DFLT_VAL_NX90_sr_sr3_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr3_val 0x00000000U

/* all used bits of 'NX90_sr_sr3': */
#define MSK_USED_BITS_NX90_sr_sr3 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr4 */
/* => Shared Work Register 4 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr4             0x00000010U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr4 0xFF200410U
#define Adr_NX90_sr_sr4                 0xFF200410U
#define DFLT_VAL_NX90_sr_sr4            0x00000000U

#define MSK_NX90_sr_sr4_val         0x0000ffffU
#define SRT_NX90_sr_sr4_val         0
#define DFLT_VAL_NX90_sr_sr4_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr4_val 0x00000000U

/* all used bits of 'NX90_sr_sr4': */
#define MSK_USED_BITS_NX90_sr_sr4 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr5 */
/* => Shared Work Register 5 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr5             0x00000014U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr5 0xFF200414U
#define Adr_NX90_sr_sr5                 0xFF200414U
#define DFLT_VAL_NX90_sr_sr5            0x00000000U

#define MSK_NX90_sr_sr5_val         0x0000ffffU
#define SRT_NX90_sr_sr5_val         0
#define DFLT_VAL_NX90_sr_sr5_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr5_val 0x00000000U

/* all used bits of 'NX90_sr_sr5': */
#define MSK_USED_BITS_NX90_sr_sr5 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr6 */
/* => Shared Work Register 6 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr6             0x00000018U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr6 0xFF200418U
#define Adr_NX90_sr_sr6                 0xFF200418U
#define DFLT_VAL_NX90_sr_sr6            0x00000000U

#define MSK_NX90_sr_sr6_val         0x0000ffffU
#define SRT_NX90_sr_sr6_val         0
#define DFLT_VAL_NX90_sr_sr6_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr6_val 0x00000000U

/* all used bits of 'NX90_sr_sr6': */
#define MSK_USED_BITS_NX90_sr_sr6 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr7 */
/* => Shared Work Register 7 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr7             0x0000001CU
#define Adr_NX90_xc0_sr_xpic_com_sr_sr7 0xFF20041CU
#define Adr_NX90_sr_sr7                 0xFF20041CU
#define DFLT_VAL_NX90_sr_sr7            0x00000000U

#define MSK_NX90_sr_sr7_val         0x0000ffffU
#define SRT_NX90_sr_sr7_val         0
#define DFLT_VAL_NX90_sr_sr7_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr7_val 0x00000000U

/* all used bits of 'NX90_sr_sr7': */
#define MSK_USED_BITS_NX90_sr_sr7 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr8 */
/* => Shared Work Register 8 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr8             0x00000020U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr8 0xFF200420U
#define Adr_NX90_sr_sr8                 0xFF200420U
#define DFLT_VAL_NX90_sr_sr8            0x00000000U

#define MSK_NX90_sr_sr8_val         0x0000ffffU
#define SRT_NX90_sr_sr8_val         0
#define DFLT_VAL_NX90_sr_sr8_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr8_val 0x00000000U

/* all used bits of 'NX90_sr_sr8': */
#define MSK_USED_BITS_NX90_sr_sr8 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr9 */
/* => Shared Work Register 9 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr9             0x00000024U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr9 0xFF200424U
#define Adr_NX90_sr_sr9                 0xFF200424U
#define DFLT_VAL_NX90_sr_sr9            0x00000000U

#define MSK_NX90_sr_sr9_val         0x0000ffffU
#define SRT_NX90_sr_sr9_val         0
#define DFLT_VAL_NX90_sr_sr9_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr9_val 0x00000000U

/* all used bits of 'NX90_sr_sr9': */
#define MSK_USED_BITS_NX90_sr_sr9 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr10 */
/* => Shared Work Register 10 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr10             0x00000028U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr10 0xFF200428U
#define Adr_NX90_sr_sr10                 0xFF200428U
#define DFLT_VAL_NX90_sr_sr10            0x00000000U

#define MSK_NX90_sr_sr10_val         0x0000ffffU
#define SRT_NX90_sr_sr10_val         0
#define DFLT_VAL_NX90_sr_sr10_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr10_val 0x00000000U

/* all used bits of 'NX90_sr_sr10': */
#define MSK_USED_BITS_NX90_sr_sr10 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr11 */
/* => Shared Work Register 11 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr11             0x0000002CU
#define Adr_NX90_xc0_sr_xpic_com_sr_sr11 0xFF20042CU
#define Adr_NX90_sr_sr11                 0xFF20042CU
#define DFLT_VAL_NX90_sr_sr11            0x00000000U

#define MSK_NX90_sr_sr11_val         0x0000ffffU
#define SRT_NX90_sr_sr11_val         0
#define DFLT_VAL_NX90_sr_sr11_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr11_val 0x00000000U

/* all used bits of 'NX90_sr_sr11': */
#define MSK_USED_BITS_NX90_sr_sr11 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr12 */
/* => Shared Work Register 12 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr12             0x00000030U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr12 0xFF200430U
#define Adr_NX90_sr_sr12                 0xFF200430U
#define DFLT_VAL_NX90_sr_sr12            0x00000000U

#define MSK_NX90_sr_sr12_val         0x0000ffffU
#define SRT_NX90_sr_sr12_val         0
#define DFLT_VAL_NX90_sr_sr12_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr12_val 0x00000000U

/* all used bits of 'NX90_sr_sr12': */
#define MSK_USED_BITS_NX90_sr_sr12 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr13 */
/* => Shared Work Register 13 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr13             0x00000034U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr13 0xFF200434U
#define Adr_NX90_sr_sr13                 0xFF200434U
#define DFLT_VAL_NX90_sr_sr13            0x00000000U

#define MSK_NX90_sr_sr13_val         0x0000ffffU
#define SRT_NX90_sr_sr13_val         0
#define DFLT_VAL_NX90_sr_sr13_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr13_val 0x00000000U

/* all used bits of 'NX90_sr_sr13': */
#define MSK_USED_BITS_NX90_sr_sr13 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr14 */
/* => Shared Work Register 14 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr14             0x00000038U
#define Adr_NX90_xc0_sr_xpic_com_sr_sr14 0xFF200438U
#define Adr_NX90_sr_sr14                 0xFF200438U
#define DFLT_VAL_NX90_sr_sr14            0x00000000U

#define MSK_NX90_sr_sr14_val         0x0000ffffU
#define SRT_NX90_sr_sr14_val         0
#define DFLT_VAL_NX90_sr_sr14_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr14_val 0x00000000U

/* all used bits of 'NX90_sr_sr14': */
#define MSK_USED_BITS_NX90_sr_sr14 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_sr15 */
/* => Shared Work Register 15 accessed over motion intlogic. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_sr15             0x0000003CU
#define Adr_NX90_xc0_sr_xpic_com_sr_sr15 0xFF20043CU
#define Adr_NX90_sr_sr15                 0xFF20043CU
#define DFLT_VAL_NX90_sr_sr15            0x00000000U

#define MSK_NX90_sr_sr15_val         0x0000ffffU
#define SRT_NX90_sr_sr15_val         0
#define DFLT_VAL_NX90_sr_sr15_val    0x00000000U
#define DFLT_BF_VAL_NX90_sr_sr15_val 0x00000000U

/* all used bits of 'NX90_sr_sr15': */
#define MSK_USED_BITS_NX90_sr_sr15 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register sr_statcfg0 */
/* => XPEC Shared Config/Status Register 0 */
/*    This register is writable but can also be changed by hardware. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_statcfg0             0x00000040U
#define Adr_NX90_xc0_sr_xpic_com_sr_statcfg0 0xFF200440U
#define Adr_NX90_sr_statcfg0                 0xFF200440U
#define DFLT_VAL_NX90_sr_statcfg0            0x00000000U

#define MSK_NX90_sr_statcfg0_xmac0_config_shared0         0x000000ffU
#define SRT_NX90_sr_statcfg0_xmac0_config_shared0         0
#define DFLT_VAL_NX90_sr_statcfg0_xmac0_config_shared0    0x00000000U
#define DFLT_BF_VAL_NX90_sr_statcfg0_xmac0_config_shared0 0x00000000U
#define MSK_NX90_sr_statcfg0_xmac0_io_oe_shared0          0x0000ff00U
#define SRT_NX90_sr_statcfg0_xmac0_io_oe_shared0          8
#define DFLT_VAL_NX90_sr_statcfg0_xmac0_io_oe_shared0     0x00000000U
#define DFLT_BF_VAL_NX90_sr_statcfg0_xmac0_io_oe_shared0  0x00000000U
#define MSK_NX90_sr_statcfg0_xmac0_status_shared0         0xffff0000U
#define SRT_NX90_sr_statcfg0_xmac0_status_shared0         16
#define DFLT_VAL_NX90_sr_statcfg0_xmac0_status_shared0    0x00000000U
#define DFLT_BF_VAL_NX90_sr_statcfg0_xmac0_status_shared0 0x00000000U

/* all used bits of 'NX90_sr_statcfg0': */
#define MSK_USED_BITS_NX90_sr_statcfg0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sr_statcfg1 */
/* => XPEC Shared Config/Status Register 1 */
/*    This register is writable but can also be changed by hardware. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_statcfg1             0x00000044U
#define Adr_NX90_xc0_sr_xpic_com_sr_statcfg1 0xFF200444U
#define Adr_NX90_sr_statcfg1                 0xFF200444U
#define DFLT_VAL_NX90_sr_statcfg1            0x00000000U

#define MSK_NX90_sr_statcfg1_xmac1_config_shared1         0x000000ffU
#define SRT_NX90_sr_statcfg1_xmac1_config_shared1         0
#define DFLT_VAL_NX90_sr_statcfg1_xmac1_config_shared1    0x00000000U
#define DFLT_BF_VAL_NX90_sr_statcfg1_xmac1_config_shared1 0x00000000U
#define MSK_NX90_sr_statcfg1_xmac1_io_oe_shared1          0x0000ff00U
#define SRT_NX90_sr_statcfg1_xmac1_io_oe_shared1          8
#define DFLT_VAL_NX90_sr_statcfg1_xmac1_io_oe_shared1     0x00000000U
#define DFLT_BF_VAL_NX90_sr_statcfg1_xmac1_io_oe_shared1  0x00000000U
#define MSK_NX90_sr_statcfg1_xmac1_status_shared1         0xffff0000U
#define SRT_NX90_sr_statcfg1_xmac1_status_shared1         16
#define DFLT_VAL_NX90_sr_statcfg1_xmac1_status_shared1    0x00000000U
#define DFLT_BF_VAL_NX90_sr_statcfg1_xmac1_status_shared1 0x00000000U

/* all used bits of 'NX90_sr_statcfg1': */
#define MSK_USED_BITS_NX90_sr_statcfg1 0xffffffffU


/* ===================================================================== */

/* AREA xc_statcfg_shared */
/* Area of xc0_statbits_shared_xpic_com */

/* ===================================================================== */

#define Addr_NX90_xc0_statbits_shared_xpic_com 0xFF200480U

/* --------------------------------------------------------------------- */
/* Register sr_stat_bits_shared */
/* => Shared stat register accessed by all xPECs and all xMACs (with 16 events). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sr_stat_bits_shared                          0x00000000U
#define Adr_NX90_xc0_statbits_shared_xpic_com_sr_stat_bits_shared 0xFF200480U
#define Adr_NX90_sr_stat_bits_shared                              0xFF200480U
#define DFLT_VAL_NX90_sr_stat_bits_shared                         0x00000000U

#define MSK_NX90_sr_stat_bits_shared_flags            0x0000ffffU
#define SRT_NX90_sr_stat_bits_shared_flags            0
#define DFLT_VAL_NX90_sr_stat_bits_shared_flags       0x00000000U
#define DFLT_BF_VAL_NX90_sr_stat_bits_shared_flags    0x00000000U
#define MSK_NX90_sr_stat_bits_shared_set_mask         0xffff0000U
#define SRT_NX90_sr_stat_bits_shared_set_mask         16
#define DFLT_VAL_NX90_sr_stat_bits_shared_set_mask    0x00000000U
#define DFLT_BF_VAL_NX90_sr_stat_bits_shared_set_mask 0x00000000U

/* all used bits of 'NX90_sr_stat_bits_shared': */
#define MSK_USED_BITS_NX90_sr_stat_bits_shared 0xffffffffU


/* ===================================================================== */

/* Area of intlogic_shd */

/* ===================================================================== */

#define Addr_NX90_intlogic_shd 0xFF400000U

/* ===================================================================== */

/* Area of nfifo */

/* ===================================================================== */

#define Addr_NX90_nfifo 0xFF400000U

/* --------------------------------------------------------------------- */
/* Register nfifo_config */
/* => NFIFO config register */
/*    'base_config' is a pointer to start of NFIFO configuration area in memory. */
/*    The configuration area must be setup by software, before using a FIFO. */
/*    Each FIFO-configuration entry consists of 3 DW and contains the following: */
/*    {       | */
/*    mem-DW0: base(31:2),mas(1:0) */
/*    mem-DW1: watm(28:16),bottom(12:0) */
/*    mem-DW2: undr(31),emw(30),empty(29),write(28:16),ovfl(15),fmw(14),full(13),fill(12:0) } */
/*    This allows FIFOs of up to 8k entries each. */
/*    The first DWords mem-DW0 and mem-DW1 are only read by NFIFO controller. */
/*    To reset a FIFO, reinit the configuration entries mem-DW0..2. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_config   0x00000000U
#define Adr_NX90_nfifo_nfifo_config 0xFF400000U
#define Adr_NX90_nfifo_config       0xFF400000U
#define DFLT_VAL_NX90_nfifo_config  0x00000000U

#define MSK_NX90_nfifo_config_base_config         0xfffffffcU
#define SRT_NX90_nfifo_config_base_config         2
#define DFLT_VAL_NX90_nfifo_config_base_config    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_config_base_config 0x00000000U

/* all used bits of 'NX90_nfifo_config': */
#define MSK_USED_BITS_NX90_nfifo_config 0xfffffffcU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_raw   0x0000000CU
#define Adr_NX90_nfifo_nfifo_irq_raw 0xFF40000CU
#define Adr_NX90_nfifo_irq_raw       0xFF40000CU
#define DFLT_VAL_NX90_nfifo_irq_raw  0x00000000U

#define MSK_NX90_nfifo_irq_raw_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_raw_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_raw_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_raw_read                0x00000002U
#define SRT_NX90_nfifo_irq_raw_read                1
#define DFLT_VAL_NX90_nfifo_irq_raw_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_read        0x00000000U
#define MSK_NX90_nfifo_irq_raw_write               0x00000004U
#define SRT_NX90_nfifo_irq_raw_write               2
#define DFLT_VAL_NX90_nfifo_irq_raw_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_write       0x00000000U
#define MSK_NX90_nfifo_irq_raw_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_raw_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_raw_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_raw_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_raw_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_raw_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_raw_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_raw_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_raw_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_raw_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_raw_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_raw_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_raw_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_raw_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_raw_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_raw_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_raw_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_raw_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_raw_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_raw_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_raw_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_raw_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_raw_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_raw_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_raw': */
#define MSK_USED_BITS_NX90_nfifo_irq_raw 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_app_masked */
/* => Masked IRQ of ARM_APP: */
/*    Shows status of masked IRQs as connected to application ARM Cortex M4. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_app_masked   0x00000010U
#define Adr_NX90_nfifo_nfifo_irq_arm_app_masked 0xFF400010U
#define Adr_NX90_nfifo_irq_arm_app_masked       0xFF400010U

#define MSK_NX90_nfifo_irq_arm_app_masked_ahbl_error  0x00000001U
#define SRT_NX90_nfifo_irq_arm_app_masked_ahbl_error  0
#define MSK_NX90_nfifo_irq_arm_app_masked_read        0x00000002U
#define SRT_NX90_nfifo_irq_arm_app_masked_read        1
#define MSK_NX90_nfifo_irq_arm_app_masked_write       0x00000004U
#define SRT_NX90_nfifo_irq_arm_app_masked_write       2
#define MSK_NX90_nfifo_irq_arm_app_masked_fifo_active 0x00000008U
#define SRT_NX90_nfifo_irq_arm_app_masked_fifo_active 3
#define MSK_NX90_nfifo_irq_arm_app_masked_observe0    0x00000010U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe0    4
#define MSK_NX90_nfifo_irq_arm_app_masked_observe1    0x00000020U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe1    5
#define MSK_NX90_nfifo_irq_arm_app_masked_observe2    0x00000040U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe2    6
#define MSK_NX90_nfifo_irq_arm_app_masked_observe3    0x00000080U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe3    7
#define MSK_NX90_nfifo_irq_arm_app_masked_observe4    0x00000100U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe4    8
#define MSK_NX90_nfifo_irq_arm_app_masked_observe5    0x00000200U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe5    9
#define MSK_NX90_nfifo_irq_arm_app_masked_observe6    0x00000400U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe6    10
#define MSK_NX90_nfifo_irq_arm_app_masked_observe7    0x00000800U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe7    11
#define MSK_NX90_nfifo_irq_arm_app_masked_observe8    0x00001000U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe8    12
#define MSK_NX90_nfifo_irq_arm_app_masked_observe9    0x00002000U
#define SRT_NX90_nfifo_irq_arm_app_masked_observe9    13

/* all used bits of 'NX90_nfifo_irq_arm_app_masked': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_app_masked 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_app_msk_set */
/* => ARM_APP Cortex M4 IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources to the ARM_APP processor. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_app_msk_set   0x00000014U
#define Adr_NX90_nfifo_nfifo_irq_arm_app_msk_set 0xFF400014U
#define Adr_NX90_nfifo_irq_arm_app_msk_set       0xFF400014U
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set  0x00000000U

#define MSK_NX90_nfifo_irq_arm_app_msk_set_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_read                0x00000002U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_read                1
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_read        0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_write               0x00000004U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_write               2
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_write       0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_arm_app_msk_set': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_app_msk_set 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_app_msk_reset */
/* => ARM_APP Cortex M4 IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_app_msk_reset   0x00000018U
#define Adr_NX90_nfifo_nfifo_irq_arm_app_msk_reset 0xFF400018U
#define Adr_NX90_nfifo_irq_arm_app_msk_reset       0xFF400018U
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset  0x00000000U

#define MSK_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_read                0x00000002U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_read                1
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_read        0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_write               0x00000004U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_write               2
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_write       0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_arm_app_msk_reset': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_app_msk_reset 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_com_masked */
/* => Masked IRQ of ARM_COM: */
/*    Shows status of masked IRQs as connected to communication ARM Cortex M4. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_com_masked   0x0000001CU
#define Adr_NX90_nfifo_nfifo_irq_arm_com_masked 0xFF40001CU
#define Adr_NX90_nfifo_irq_arm_com_masked       0xFF40001CU

#define MSK_NX90_nfifo_irq_arm_com_masked_ahbl_error  0x00000001U
#define SRT_NX90_nfifo_irq_arm_com_masked_ahbl_error  0
#define MSK_NX90_nfifo_irq_arm_com_masked_read        0x00000002U
#define SRT_NX90_nfifo_irq_arm_com_masked_read        1
#define MSK_NX90_nfifo_irq_arm_com_masked_write       0x00000004U
#define SRT_NX90_nfifo_irq_arm_com_masked_write       2
#define MSK_NX90_nfifo_irq_arm_com_masked_fifo_active 0x00000008U
#define SRT_NX90_nfifo_irq_arm_com_masked_fifo_active 3
#define MSK_NX90_nfifo_irq_arm_com_masked_observe0    0x00000010U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe0    4
#define MSK_NX90_nfifo_irq_arm_com_masked_observe1    0x00000020U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe1    5
#define MSK_NX90_nfifo_irq_arm_com_masked_observe2    0x00000040U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe2    6
#define MSK_NX90_nfifo_irq_arm_com_masked_observe3    0x00000080U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe3    7
#define MSK_NX90_nfifo_irq_arm_com_masked_observe4    0x00000100U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe4    8
#define MSK_NX90_nfifo_irq_arm_com_masked_observe5    0x00000200U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe5    9
#define MSK_NX90_nfifo_irq_arm_com_masked_observe6    0x00000400U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe6    10
#define MSK_NX90_nfifo_irq_arm_com_masked_observe7    0x00000800U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe7    11
#define MSK_NX90_nfifo_irq_arm_com_masked_observe8    0x00001000U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe8    12
#define MSK_NX90_nfifo_irq_arm_com_masked_observe9    0x00002000U
#define SRT_NX90_nfifo_irq_arm_com_masked_observe9    13

/* all used bits of 'NX90_nfifo_irq_arm_com_masked': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_com_masked 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_com_msk_set */
/* => ARM_COM IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources to the ARM_COM processor. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_com_msk_set   0x00000020U
#define Adr_NX90_nfifo_nfifo_irq_arm_com_msk_set 0xFF400020U
#define Adr_NX90_nfifo_irq_arm_com_msk_set       0xFF400020U
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set  0x00000000U

#define MSK_NX90_nfifo_irq_arm_com_msk_set_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_read                0x00000002U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_read                1
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_read        0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_write               0x00000004U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_write               2
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_write       0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_set_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_arm_com_msk_set_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_set_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_set_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_arm_com_msk_set': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_com_msk_set 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_com_msk_reset */
/* => ARM_COM IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_com_msk_reset   0x00000024U
#define Adr_NX90_nfifo_nfifo_irq_arm_com_msk_reset 0xFF400024U
#define Adr_NX90_nfifo_irq_arm_com_msk_reset       0xFF400024U
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset  0x00000000U

#define MSK_NX90_nfifo_irq_arm_com_msk_reset_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_read                0x00000002U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_read                1
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_read        0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_write               0x00000004U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_write               2
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_write       0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_arm_com_msk_reset_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_arm_com_msk_reset_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_com_msk_reset_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_arm_com_msk_reset': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_com_msk_reset 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_app_masked */
/* => Masked IRQ of xPIC_APP: */
/*    Shows status of masked IRQs as connected to xPIC_APP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_app_masked   0x00000028U
#define Adr_NX90_nfifo_nfifo_irq_xpic_app_masked 0xFF400028U
#define Adr_NX90_nfifo_irq_xpic_app_masked       0xFF400028U

#define MSK_NX90_nfifo_irq_xpic_app_masked_ahbl_error  0x00000001U
#define SRT_NX90_nfifo_irq_xpic_app_masked_ahbl_error  0
#define MSK_NX90_nfifo_irq_xpic_app_masked_read        0x00000002U
#define SRT_NX90_nfifo_irq_xpic_app_masked_read        1
#define MSK_NX90_nfifo_irq_xpic_app_masked_write       0x00000004U
#define SRT_NX90_nfifo_irq_xpic_app_masked_write       2
#define MSK_NX90_nfifo_irq_xpic_app_masked_fifo_active 0x00000008U
#define SRT_NX90_nfifo_irq_xpic_app_masked_fifo_active 3
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe0    0x00000010U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe0    4
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe1    0x00000020U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe1    5
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe2    0x00000040U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe2    6
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe3    0x00000080U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe3    7
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe4    0x00000100U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe4    8
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe5    0x00000200U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe5    9
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe6    0x00000400U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe6    10
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe7    0x00000800U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe7    11
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe8    0x00001000U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe8    12
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe9    0x00002000U
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe9    13

/* all used bits of 'NX90_nfifo_irq_xpic_app_masked': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_app_masked 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_app_msk_set */
/* => xPIC_APP IRQ mask set: */
/*    The xPIC_APP IRQ mask enables interrupt requests for corresponding interrupt sources to the xPIC_APP processor. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_app_msk_set   0x0000002CU
#define Adr_NX90_nfifo_nfifo_irq_xpic_app_msk_set 0xFF40002CU
#define Adr_NX90_nfifo_irq_xpic_app_msk_set       0xFF40002CU
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set  0x00000000U

#define MSK_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_read                0x00000002U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_read                1
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_read        0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_write               0x00000004U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_write               2
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_write       0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_xpic_app_msk_set': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_app_msk_set 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_app_msk_reset */
/* => xPIC_APP IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_app_msk_reset   0x00000030U
#define Adr_NX90_nfifo_nfifo_irq_xpic_app_msk_reset 0xFF400030U
#define Adr_NX90_nfifo_irq_xpic_app_msk_reset       0xFF400030U
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset  0x00000000U

#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_read                0x00000002U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_read                1
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_read        0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_write               0x00000004U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_write               2
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_write       0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_xpic_app_msk_reset': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_app_msk_reset 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_com_masked */
/* => Masked IRQ of xPIC_COM: */
/*    Shows status of masked IRQs as connected to xPIC_COM. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_com_masked   0x00000034U
#define Adr_NX90_nfifo_nfifo_irq_xpic_com_masked 0xFF400034U
#define Adr_NX90_nfifo_irq_xpic_com_masked       0xFF400034U

#define MSK_NX90_nfifo_irq_xpic_com_masked_ahbl_error  0x00000001U
#define SRT_NX90_nfifo_irq_xpic_com_masked_ahbl_error  0
#define MSK_NX90_nfifo_irq_xpic_com_masked_read        0x00000002U
#define SRT_NX90_nfifo_irq_xpic_com_masked_read        1
#define MSK_NX90_nfifo_irq_xpic_com_masked_write       0x00000004U
#define SRT_NX90_nfifo_irq_xpic_com_masked_write       2
#define MSK_NX90_nfifo_irq_xpic_com_masked_fifo_active 0x00000008U
#define SRT_NX90_nfifo_irq_xpic_com_masked_fifo_active 3
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe0    0x00000010U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe0    4
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe1    0x00000020U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe1    5
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe2    0x00000040U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe2    6
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe3    0x00000080U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe3    7
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe4    0x00000100U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe4    8
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe5    0x00000200U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe5    9
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe6    0x00000400U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe6    10
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe7    0x00000800U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe7    11
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe8    0x00001000U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe8    12
#define MSK_NX90_nfifo_irq_xpic_com_masked_observe9    0x00002000U
#define SRT_NX90_nfifo_irq_xpic_com_masked_observe9    13

/* all used bits of 'NX90_nfifo_irq_xpic_com_masked': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_com_masked 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_com_msk_set */
/* => xPIC_COM IRQ mask set: */
/*    The xPIC_COM IRQ mask enables interrupt requests for corresponding interrupt sources to the xPIC_COM processor. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_com_msk_set   0x00000038U
#define Adr_NX90_nfifo_nfifo_irq_xpic_com_msk_set 0xFF400038U
#define Adr_NX90_nfifo_irq_xpic_com_msk_set       0xFF400038U
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set  0x00000000U

#define MSK_NX90_nfifo_irq_xpic_com_msk_set_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_read                0x00000002U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_read                1
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_read        0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_write               0x00000004U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_write               2
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_write       0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_set_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_xpic_com_msk_set_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_set_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_xpic_com_msk_set': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_com_msk_set 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_com_msk_reset */
/* => xPIC_COM IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_com_msk_reset   0x0000003CU
#define Adr_NX90_nfifo_nfifo_irq_xpic_com_msk_reset 0xFF40003CU
#define Adr_NX90_nfifo_irq_xpic_com_msk_reset       0xFF40003CU
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset  0x00000000U

#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_ahbl_error          0x00000001U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_ahbl_error     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_ahbl_error  0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_read                0x00000002U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_read                1
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_read           0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_read        0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_write               0x00000004U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_write               2
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_write          0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_write       0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_fifo_active         0x00000008U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_fifo_active    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_fifo_active 0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe0            0x00000010U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe0       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe0    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe1            0x00000020U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe1       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe1    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe2            0x00000040U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe2       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe2    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe3            0x00000080U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe3       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe3    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe4            0x00000100U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe4       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe4    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe5            0x00000200U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe5       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe5    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe6            0x00000400U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe6       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe6    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe7            0x00000800U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe7       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe7    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe8            0x00001000U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe8       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe8    0x00000000U
#define MSK_NX90_nfifo_irq_xpic_com_msk_reset_observe9            0x00002000U
#define SRT_NX90_nfifo_irq_xpic_com_msk_reset_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe9       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_com_msk_reset_observe9    0x00000000U

/* all used bits of 'NX90_nfifo_irq_xpic_com_msk_reset': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_com_msk_reset 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe0 */
/* => FIFO OBSERVE0: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe0   0x00000058U
#define Adr_NX90_nfifo_nfifo_irq_observe0 0xFF400058U
#define Adr_NX90_nfifo_irq_observe0       0xFF400058U
#define DFLT_VAL_NX90_nfifo_irq_observe0  0x00000000U

#define MSK_NX90_nfifo_irq_observe0_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe0_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe0_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe0_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe0_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe0_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe0_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe0_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe0_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe0_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe0_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe0_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe0_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe0_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe0_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe0_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe0_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe0_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe0_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe0_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe0_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe0_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe0_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe0_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe0_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe0_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe0_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe0': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe0 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe1 */
/* => FIFO OBSERVE1: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe1   0x0000005CU
#define Adr_NX90_nfifo_nfifo_irq_observe1 0xFF40005CU
#define Adr_NX90_nfifo_irq_observe1       0xFF40005CU
#define DFLT_VAL_NX90_nfifo_irq_observe1  0x00000000U

#define MSK_NX90_nfifo_irq_observe1_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe1_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe1_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe1_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe1_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe1_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe1_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe1_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe1_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe1_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe1_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe1_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe1_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe1_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe1_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe1_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe1_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe1_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe1_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe1_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe1_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe1_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe1_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe1_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe1_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe1_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe1_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe1': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe1 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe2 */
/* => FIFO OBSERVE2: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe2   0x00000060U
#define Adr_NX90_nfifo_nfifo_irq_observe2 0xFF400060U
#define Adr_NX90_nfifo_irq_observe2       0xFF400060U
#define DFLT_VAL_NX90_nfifo_irq_observe2  0x00000000U

#define MSK_NX90_nfifo_irq_observe2_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe2_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe2_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe2_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe2_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe2_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe2_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe2_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe2_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe2_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe2_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe2_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe2_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe2_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe2_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe2_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe2_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe2_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe2_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe2_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe2_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe2_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe2_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe2_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe2_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe2_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe2_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe2': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe2 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe3 */
/* => FIFO OBSERVE3: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe3   0x00000064U
#define Adr_NX90_nfifo_nfifo_irq_observe3 0xFF400064U
#define Adr_NX90_nfifo_irq_observe3       0xFF400064U
#define DFLT_VAL_NX90_nfifo_irq_observe3  0x00000000U

#define MSK_NX90_nfifo_irq_observe3_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe3_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe3_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe3_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe3_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe3_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe3_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe3_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe3_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe3_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe3_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe3_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe3_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe3_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe3_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe3_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe3_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe3_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe3_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe3_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe3_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe3_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe3_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe3_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe3_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe3_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe3_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe3': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe3 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe4 */
/* => FIFO OBSERVE4: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe4   0x00000068U
#define Adr_NX90_nfifo_nfifo_irq_observe4 0xFF400068U
#define Adr_NX90_nfifo_irq_observe4       0xFF400068U
#define DFLT_VAL_NX90_nfifo_irq_observe4  0x00000000U

#define MSK_NX90_nfifo_irq_observe4_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe4_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe4_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe4_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe4_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe4_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe4_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe4_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe4_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe4_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe4_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe4_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe4_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe4_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe4_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe4_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe4_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe4_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe4_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe4_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe4_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe4_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe4_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe4_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe4_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe4_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe4_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe4': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe4 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe5 */
/* => FIFO OBSERVE5: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe5   0x0000006CU
#define Adr_NX90_nfifo_nfifo_irq_observe5 0xFF40006CU
#define Adr_NX90_nfifo_irq_observe5       0xFF40006CU
#define DFLT_VAL_NX90_nfifo_irq_observe5  0x00000000U

#define MSK_NX90_nfifo_irq_observe5_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe5_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe5_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe5_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe5_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe5_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe5_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe5_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe5_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe5_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe5_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe5_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe5_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe5_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe5_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe5_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe5_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe5_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe5_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe5_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe5_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe5_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe5_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe5_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe5_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe5_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe5_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe5': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe5 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe6 */
/* => FIFO OBSERVE6: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe6   0x00000070U
#define Adr_NX90_nfifo_nfifo_irq_observe6 0xFF400070U
#define Adr_NX90_nfifo_irq_observe6       0xFF400070U
#define DFLT_VAL_NX90_nfifo_irq_observe6  0x00000000U

#define MSK_NX90_nfifo_irq_observe6_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe6_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe6_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe6_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe6_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe6_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe6_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe6_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe6_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe6_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe6_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe6_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe6_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe6_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe6_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe6_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe6_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe6_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe6_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe6_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe6_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe6_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe6_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe6_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe6_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe6_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe6_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe6': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe6 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe7 */
/* => FIFO OBSERVE7: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe7   0x00000074U
#define Adr_NX90_nfifo_nfifo_irq_observe7 0xFF400074U
#define Adr_NX90_nfifo_irq_observe7       0xFF400074U
#define DFLT_VAL_NX90_nfifo_irq_observe7  0x00000000U

#define MSK_NX90_nfifo_irq_observe7_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe7_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe7_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe7_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe7_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe7_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe7_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe7_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe7_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe7_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe7_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe7_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe7_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe7_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe7_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe7_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe7_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe7_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe7_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe7_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe7_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe7_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe7_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe7_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe7_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe7_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe7_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe7': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe7 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe8 */
/* => FIFO OBSERVE8: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe8   0x00000078U
#define Adr_NX90_nfifo_nfifo_irq_observe8 0xFF400078U
#define Adr_NX90_nfifo_irq_observe8       0xFF400078U
#define DFLT_VAL_NX90_nfifo_irq_observe8  0x00000000U

#define MSK_NX90_nfifo_irq_observe8_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe8_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe8_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe8_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe8_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe8_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe8_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe8_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe8_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe8_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe8_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe8_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe8_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe8_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe8_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe8_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe8_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe8_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe8_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe8_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe8_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe8_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe8_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe8_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe8_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe8_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe8_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe8': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe8 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe9 */
/* => FIFO OBSERVE9: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe9   0x0000007CU
#define Adr_NX90_nfifo_nfifo_irq_observe9 0xFF40007CU
#define Adr_NX90_nfifo_irq_observe9       0xFF40007CU
#define DFLT_VAL_NX90_nfifo_irq_observe9  0x00000000U

#define MSK_NX90_nfifo_irq_observe9_fifonr         0x000003ffU
#define SRT_NX90_nfifo_irq_observe9_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe9_fifonr    0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_fifonr 0x00000000U
#define MSK_NX90_nfifo_irq_observe9_read           0x00008000U
#define SRT_NX90_nfifo_irq_observe9_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe9_read      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_read   0x00000000U
#define MSK_NX90_nfifo_irq_observe9_undr           0x00010000U
#define SRT_NX90_nfifo_irq_observe9_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe9_undr      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_undr   0x00000000U
#define MSK_NX90_nfifo_irq_observe9_emw            0x00020000U
#define SRT_NX90_nfifo_irq_observe9_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe9_emw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_emw    0x00000000U
#define MSK_NX90_nfifo_irq_observe9_empty          0x00040000U
#define SRT_NX90_nfifo_irq_observe9_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe9_empty     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_empty  0x00000000U
#define MSK_NX90_nfifo_irq_observe9_write          0x00080000U
#define SRT_NX90_nfifo_irq_observe9_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe9_write     0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_write  0x00000000U
#define MSK_NX90_nfifo_irq_observe9_ovfl           0x00100000U
#define SRT_NX90_nfifo_irq_observe9_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe9_ovfl      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_ovfl   0x00000000U
#define MSK_NX90_nfifo_irq_observe9_fmw            0x00200000U
#define SRT_NX90_nfifo_irq_observe9_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe9_fmw       0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_fmw    0x00000000U
#define MSK_NX90_nfifo_irq_observe9_full           0x00400000U
#define SRT_NX90_nfifo_irq_observe9_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe9_full      0x00000000U
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_full   0x00000000U

/* all used bits of 'NX90_nfifo_irq_observe9': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe9 0x007f83ffU

/* --------------------------------------------------------------------- */
/* Register nfifo_fifo_start */
/* => Start of NFIFO FIFO access addresses: */
/*    The following DW-addresses are associated with FIFOs: */
/*    Read accesses to an address in this area are reading from the appropriate FIFO, */
/*    write accesses to an address in this area are writing to the appropriate FIFO. */
/*    The number of FIFOs is limited by this address area to 991. */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_fifo_start   0x00000080U
#define Adr_NX90_nfifo_nfifo_fifo_start 0xFF400080U
#define Adr_NX90_nfifo_fifo_start       0xFF400080U

/* --------------------------------------------------------------------- */
/* Register nfifo_fifo_end */
/* => End of NFIFO FIFO access addresses */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_fifo_end   0x00000FFCU
#define Adr_NX90_nfifo_nfifo_fifo_end 0xFF400FFCU
#define Adr_NX90_nfifo_fifo_end       0xFF400FFCU


/* ===================================================================== */

/* Area of pad_ctrl */

/* ===================================================================== */

#define Addr_NX90_pad_ctrl 0xFF401000U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_rdy_n */
/* => Pad configuration register of port RDY_N (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    Programable pad functions are: */
/*       ds:   Driving strength: 0: low driving strength (default), 1: high driving strength. */
/*       pe:   Pull enable: 0: No resistor is applied, 1: resistor is enabled. */
/*             The pull-direction (up or down) is determined by the pad-type. */
/*       ie:   Input enable: 0: Digital pad input function disabled, 1: input is enabled. */
/*    Note: */
/*       Not all functions are available for all pads, it depends on the pad type. */
/*       Functions not found as programmable bit in the register of a pad are not supported by the pad. */
/*    Note: */
/*       The default states are alreday applied during reset. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_rdy_n      0x00000000U
#define Adr_NX90_pad_ctrl_pad_ctrl_rdy_n 0xFF401000U
#define Adr_NX90_pad_ctrl_rdy_n          0xFF401000U
#define DFLT_VAL_NX90_pad_ctrl_rdy_n     0x00000050U

#define MSK_NX90_pad_ctrl_rdy_n_ds         0x00000001U
#define SRT_NX90_pad_ctrl_rdy_n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_rdy_n_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_rdy_n_ds 0x00000000U
#define MSK_NX90_pad_ctrl_rdy_n_pe         0x00000010U
#define SRT_NX90_pad_ctrl_rdy_n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_rdy_n_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_rdy_n_pe 0x00000001U
#define MSK_NX90_pad_ctrl_rdy_n_ie         0x00000040U
#define SRT_NX90_pad_ctrl_rdy_n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_rdy_n_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_rdy_n_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_rdy_n': */
#define MSK_USED_BITS_NX90_pad_ctrl_rdy_n 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_run_n */
/* => Pad configuration register of port RUN_N (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_run_n      0x00000004U
#define Adr_NX90_pad_ctrl_pad_ctrl_run_n 0xFF401004U
#define Adr_NX90_pad_ctrl_run_n          0xFF401004U
#define DFLT_VAL_NX90_pad_ctrl_run_n     0x00000050U

#define MSK_NX90_pad_ctrl_run_n_ds         0x00000001U
#define SRT_NX90_pad_ctrl_run_n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_run_n_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_run_n_ds 0x00000000U
#define MSK_NX90_pad_ctrl_run_n_pe         0x00000010U
#define SRT_NX90_pad_ctrl_run_n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_run_n_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_run_n_pe 0x00000001U
#define MSK_NX90_pad_ctrl_run_n_ie         0x00000040U
#define SRT_NX90_pad_ctrl_run_n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_run_n_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_run_n_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_run_n': */
#define MSK_USED_BITS_NX90_pad_ctrl_run_n 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled0 */
/* => Pad configuration register of port MLED0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled0      0x00000008U
#define Adr_NX90_pad_ctrl_pad_ctrl_mled0 0xFF401008U
#define Adr_NX90_pad_ctrl_mled0          0xFF401008U
#define DFLT_VAL_NX90_pad_ctrl_mled0     0x00000000U

#define MSK_NX90_pad_ctrl_mled0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mled0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mled0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mled0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled0_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled0_pe 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mled0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled0 0x00000011U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled1 */
/* => Pad configuration register of port MLED1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled1      0x0000000CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mled1 0xFF40100CU
#define Adr_NX90_pad_ctrl_mled1          0xFF40100CU
#define DFLT_VAL_NX90_pad_ctrl_mled1     0x00000000U

#define MSK_NX90_pad_ctrl_mled1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mled1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mled1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mled1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled1_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled1_pe 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mled1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled1 0x00000011U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled2 */
/* => Pad configuration register of port MLED2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled2      0x00000010U
#define Adr_NX90_pad_ctrl_pad_ctrl_mled2 0xFF401010U
#define Adr_NX90_pad_ctrl_mled2          0xFF401010U
#define DFLT_VAL_NX90_pad_ctrl_mled2     0x00000000U

#define MSK_NX90_pad_ctrl_mled2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mled2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mled2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mled2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled2_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled2_pe 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mled2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled2 0x00000011U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled3 */
/* => Pad configuration register of port MLED3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled3      0x00000014U
#define Adr_NX90_pad_ctrl_pad_ctrl_mled3 0xFF401014U
#define Adr_NX90_pad_ctrl_mled3          0xFF401014U
#define DFLT_VAL_NX90_pad_ctrl_mled3     0x00000000U

#define MSK_NX90_pad_ctrl_mled3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mled3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mled3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mled3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled3_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mled3_pe 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mled3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled3 0x00000011U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io0 */
/* => Pad configuration register of port COM_IO0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io0      0x00000018U
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io0 0xFF401018U
#define Adr_NX90_pad_ctrl_com_io0          0xFF401018U
#define DFLT_VAL_NX90_pad_ctrl_com_io0     0x00000050U

#define MSK_NX90_pad_ctrl_com_io0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_com_io0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_com_io0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_com_io0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io0_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io0_pe 0x00000001U
#define MSK_NX90_pad_ctrl_com_io0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_com_io0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io0_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io0_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_com_io0': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io0 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io1 */
/* => Pad configuration register of port COM_IO1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io1      0x0000001CU
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io1 0xFF40101CU
#define Adr_NX90_pad_ctrl_com_io1          0xFF40101CU
#define DFLT_VAL_NX90_pad_ctrl_com_io1     0x00000050U

#define MSK_NX90_pad_ctrl_com_io1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_com_io1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_com_io1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_com_io1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io1_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io1_pe 0x00000001U
#define MSK_NX90_pad_ctrl_com_io1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_com_io1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io1_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io1_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_com_io1': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io2 */
/* => Pad configuration register of port COM_IO2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io2      0x00000020U
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io2 0xFF401020U
#define Adr_NX90_pad_ctrl_com_io2          0xFF401020U
#define DFLT_VAL_NX90_pad_ctrl_com_io2     0x00000050U

#define MSK_NX90_pad_ctrl_com_io2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_com_io2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_com_io2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_com_io2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_com_io2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_com_io2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_com_io2': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io3 */
/* => Pad configuration register of port COM_IO3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io3      0x00000024U
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io3 0xFF401024U
#define Adr_NX90_pad_ctrl_com_io3          0xFF401024U
#define DFLT_VAL_NX90_pad_ctrl_com_io3     0x00000050U

#define MSK_NX90_pad_ctrl_com_io3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_com_io3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_com_io3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_com_io3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_com_io3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_com_io3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_com_io3': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxclk */
/* => Pad configuration register of port MII0_RXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxclk      0x00000028U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxclk 0xFF401028U
#define Adr_NX90_pad_ctrl_mii0_rxclk          0xFF401028U
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxclk_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_rxclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxclk_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_rxclk_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxclk_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxclk_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxclk_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxclk 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd0 */
/* => Pad configuration register of port MII0_RXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd0      0x0000002CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd0 0xFF40102CU
#define Adr_NX90_pad_ctrl_mii0_rxd0          0xFF40102CU
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd0     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxd0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd0_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd0_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxd0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd0_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd0_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd0 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd1 */
/* => Pad configuration register of port MII0_RXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd1      0x00000030U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd1 0xFF401030U
#define Adr_NX90_pad_ctrl_mii0_rxd1          0xFF401030U
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxd1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_rxd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_rxd1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd1_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxd1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd1_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd2 */
/* => Pad configuration register of port MII0_RXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd2      0x00000034U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd2 0xFF401034U
#define Adr_NX90_pad_ctrl_mii0_rxd2          0xFF401034U
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxd2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_rxd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_rxd2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxd2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd3 */
/* => Pad configuration register of port MII0_RXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd3      0x00000038U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd3 0xFF401038U
#define Adr_NX90_pad_ctrl_mii0_rxd3          0xFF401038U
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd3     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxd3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxd3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd3 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxdv */
/* => Pad configuration register of port MII0_RXDV (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxdv      0x0000003CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxdv 0xFF40103CU
#define Adr_NX90_pad_ctrl_mii0_rxdv          0xFF40103CU
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxdv     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxdv_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxdv_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxdv_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxdv_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxdv_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxdv_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxdv_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxdv_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxdv': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxdv 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxer */
/* => Pad configuration register of port MII0_RXER (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxer      0x00000040U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxer 0xFF401040U
#define Adr_NX90_pad_ctrl_mii0_rxer          0xFF401040U
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxer     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_rxer_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_rxer_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxer_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxer_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_rxer_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_rxer_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxer_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxer_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_rxer': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxer 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txclk */
/* => Pad configuration register of port MII0_TXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txclk      0x00000044U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txclk 0xFF401044U
#define Adr_NX90_pad_ctrl_mii0_txclk          0xFF401044U
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_txclk_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_txclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txclk_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_txclk_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_txclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txclk_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_txclk_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_txclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txclk_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_txclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txclk 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd0 */
/* => Pad configuration register of port MII0_TXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd0      0x00000048U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd0 0xFF401048U
#define Adr_NX90_pad_ctrl_mii0_txd0          0xFF401048U
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_txd0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_txd0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_txd0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_txd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd0_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_txd0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_txd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd0_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_txd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd0 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd1 */
/* => Pad configuration register of port MII0_TXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd1      0x0000004CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd1 0xFF40104CU
#define Adr_NX90_pad_ctrl_mii0_txd1          0xFF40104CU
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_txd1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_txd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_txd1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_txd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd1_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_txd1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_txd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd1_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_txd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd2 */
/* => Pad configuration register of port MII0_TXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd2      0x00000050U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd2 0xFF401050U
#define Adr_NX90_pad_ctrl_mii0_txd2          0xFF401050U
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_txd2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_txd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_txd2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_txd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_txd2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_txd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_txd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd3 */
/* => Pad configuration register of port MII0_TXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd3      0x00000054U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd3 0xFF401054U
#define Adr_NX90_pad_ctrl_mii0_txd3          0xFF401054U
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_txd3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_txd3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_txd3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_txd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_txd3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_txd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_txd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txen */
/* => Pad configuration register of port MII0_TXEN (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txen      0x00000058U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txen 0xFF401058U
#define Adr_NX90_pad_ctrl_mii0_txen          0xFF401058U
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_txen_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_txen_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_txen_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_txen_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_txen_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_txen_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_txen': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txen 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_col */
/* => Pad configuration register of port MII0_COL (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_col      0x0000005CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_col 0xFF40105CU
#define Adr_NX90_pad_ctrl_mii0_col          0xFF40105CU
#define DFLT_VAL_NX90_pad_ctrl_mii0_col     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_col_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_col_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_col_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_col_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_col_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_col_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_col': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_col 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_crs */
/* => Pad configuration register of port MII0_CRS (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_crs      0x00000060U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_crs 0xFF401060U
#define Adr_NX90_pad_ctrl_mii0_crs          0xFF401060U
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs     0x00000050U

#define MSK_NX90_pad_ctrl_mii0_crs_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii0_crs_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii0_crs_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii0_crs_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii0_crs_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii0_crs_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii0_crs': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_crs 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_phy0_led_link_in */
/* => Pad configuration register of port PHY0_LED_LINK_IN (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_phy0_led_link_in      0x00000064U
#define Adr_NX90_pad_ctrl_pad_ctrl_phy0_led_link_in 0xFF401064U
#define Adr_NX90_pad_ctrl_phy0_led_link_in          0xFF401064U
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in     0x00000050U

#define MSK_NX90_pad_ctrl_phy0_led_link_in_pe         0x00000010U
#define SRT_NX90_pad_ctrl_phy0_led_link_in_pe         4
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_pe 0x00000001U
#define MSK_NX90_pad_ctrl_phy0_led_link_in_ie         0x00000040U
#define SRT_NX90_pad_ctrl_phy0_led_link_in_ie         6
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_phy0_led_link_in': */
#define MSK_USED_BITS_NX90_pad_ctrl_phy0_led_link_in 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxclk */
/* => Pad configuration register of port MII1_RXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxclk      0x00000068U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxclk 0xFF401068U
#define Adr_NX90_pad_ctrl_mii1_rxclk          0xFF401068U
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_rxclk_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_rxclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxclk_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxclk_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxclk_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_rxclk_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxclk_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_rxclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxclk 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd0 */
/* => Pad configuration register of port MII1_RXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i_double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd0      0x0000006CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd0 0xFF40106CU
#define Adr_NX90_pad_ctrl_mii1_rxd0          0xFF40106CU
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd0     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_rxd0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd0_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd0_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxd0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd0_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd0_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_rxd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd0 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd1 */
/* => Pad configuration register of port MII1_RXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd1      0x00000070U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd1 0xFF401070U
#define Adr_NX90_pad_ctrl_mii1_rxd1          0xFF401070U
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_rxd1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_rxd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxd1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd1_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxd1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd1_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_rxd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd2 */
/* => Pad configuration register of port MII1_RXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd2      0x00000074U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd2 0xFF401074U
#define Adr_NX90_pad_ctrl_mii1_rxd2          0xFF401074U
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_rxd2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_rxd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxd2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd2_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxd2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd2_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_rxd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd3 */
/* => Pad configuration register of port MII1_RXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i_double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd3      0x00000078U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd3 0xFF401078U
#define Adr_NX90_pad_ctrl_mii1_rxd3          0xFF401078U
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd3     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_rxd3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd3_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd3_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_rxd3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd3_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd3_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_rxd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd3 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxdv */
/* => Pad configuration register of port MII1_RXDV (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxdv      0x0000007CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxdv 0xFF40107CU
#define Adr_NX90_pad_ctrl_mii1_rxdv          0xFF40107CU
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxdv     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_rxdv_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxdv_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxdv_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxdv_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_rxdv_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxdv_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxdv_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxdv_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_rxdv': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxdv 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxer */
/* => Pad configuration register of port MII1_RXER (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxer      0x00000080U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxer 0xFF401080U
#define Adr_NX90_pad_ctrl_mii1_rxer          0xFF401080U
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_rxer_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_rxer_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_rxer_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_rxer_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_rxer': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxer 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txclk */
/* => Pad configuration register of port MII1_TXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txclk      0x00000084U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txclk 0xFF401084U
#define Adr_NX90_pad_ctrl_mii1_txclk          0xFF401084U
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_txclk_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_txclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txclk_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txclk_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_txclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txclk_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_txclk_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_txclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txclk_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_txclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txclk 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd0 */
/* => Pad configuration register of port MII1_TXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd0      0x00000088U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd0 0xFF401088U
#define Adr_NX90_pad_ctrl_mii1_txd0          0xFF401088U
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_txd0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_txd0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_txd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd0_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_txd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd0_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_txd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd0 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd1 */
/* => Pad configuration register of port MII1_TXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd1      0x0000008CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd1 0xFF40108CU
#define Adr_NX90_pad_ctrl_mii1_txd1          0xFF40108CU
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_txd1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_txd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_txd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd1_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_txd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd1_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_txd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd2 */
/* => Pad configuration register of port MII1_TXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd2      0x00000090U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd2 0xFF401090U
#define Adr_NX90_pad_ctrl_mii1_txd2          0xFF401090U
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_txd2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_txd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_txd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd2_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_txd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd2_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_txd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd3 */
/* => Pad configuration register of port MII1_TXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd3      0x00000094U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd3 0xFF401094U
#define Adr_NX90_pad_ctrl_mii1_txd3          0xFF401094U
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3     0x00000000U

#define MSK_NX90_pad_ctrl_mii1_txd3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_txd3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_txd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3_pe    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd3_pe 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txd3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_txd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd3_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mii1_txd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txen */
/* => Pad configuration register of port MII1_TXEN (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txen      0x00000098U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txen 0xFF401098U
#define Adr_NX90_pad_ctrl_mii1_txen          0xFF401098U
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_txen_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_txen_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txen_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_txen_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_txen_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txen_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_txen_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_txen_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txen_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_txen': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txen 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_col */
/* => Pad configuration register of port MII1_COL (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_col      0x0000009CU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_col 0xFF40109CU
#define Adr_NX90_pad_ctrl_mii1_col          0xFF40109CU
#define DFLT_VAL_NX90_pad_ctrl_mii1_col     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_col_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_col_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_col_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_col_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_col_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_col_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_col': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_col 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_crs */
/* => Pad configuration register of port MII1_CRS (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_crs      0x000000A0U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_crs 0xFF4010A0U
#define Adr_NX90_pad_ctrl_mii1_crs          0xFF4010A0U
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs     0x00000050U

#define MSK_NX90_pad_ctrl_mii1_crs_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii1_crs_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii1_crs_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii1_crs_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii1_crs_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii1_crs_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii1_crs': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_crs 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_phy1_led_link_in */
/* => Pad configuration register of port PHY1_LED_LINK_IN (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_phy1_led_link_in      0x000000A4U
#define Adr_NX90_pad_ctrl_pad_ctrl_phy1_led_link_in 0xFF4010A4U
#define Adr_NX90_pad_ctrl_phy1_led_link_in          0xFF4010A4U
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in     0x00000050U

#define MSK_NX90_pad_ctrl_phy1_led_link_in_pe         0x00000010U
#define SRT_NX90_pad_ctrl_phy1_led_link_in_pe         4
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_pe 0x00000001U
#define MSK_NX90_pad_ctrl_phy1_led_link_in_ie         0x00000040U
#define SRT_NX90_pad_ctrl_phy1_led_link_in_ie         6
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_phy1_led_link_in': */
#define MSK_USED_BITS_NX90_pad_ctrl_phy1_led_link_in 0x00000050U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii_mdc */
/* => Pad configuration register of port MII_MDC (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii_mdc      0x000000A8U
#define Adr_NX90_pad_ctrl_pad_ctrl_mii_mdc 0xFF4010A8U
#define Adr_NX90_pad_ctrl_mii_mdc          0xFF4010A8U
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc     0x00000050U

#define MSK_NX90_pad_ctrl_mii_mdc_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii_mdc_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdc_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii_mdc_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii_mdc_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdc_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii_mdc_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii_mdc_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdc_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii_mdc': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii_mdc 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii_mdio */
/* => Pad configuration register of port MII_MDIO (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii_mdio      0x000000ACU
#define Adr_NX90_pad_ctrl_pad_ctrl_mii_mdio 0xFF4010ACU
#define Adr_NX90_pad_ctrl_mii_mdio          0xFF4010ACU
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio     0x00000050U

#define MSK_NX90_pad_ctrl_mii_mdio_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mii_mdio_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdio_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mii_mdio_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mii_mdio_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdio_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mii_mdio_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mii_mdio_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdio_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mii_mdio': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii_mdio 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_rst_out_n */
/* => Pad configuration register of port RST_OUT_N (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_rst_out_n      0x000000B0U
#define Adr_NX90_pad_ctrl_pad_ctrl_rst_out_n 0xFF4010B0U
#define Adr_NX90_pad_ctrl_rst_out_n          0xFF4010B0U
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n     0x00000050U

#define MSK_NX90_pad_ctrl_rst_out_n_ds         0x00000001U
#define SRT_NX90_pad_ctrl_rst_out_n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_rst_out_n_ds 0x00000000U
#define MSK_NX90_pad_ctrl_rst_out_n_pe         0x00000010U
#define SRT_NX90_pad_ctrl_rst_out_n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_rst_out_n_pe 0x00000001U
#define MSK_NX90_pad_ctrl_rst_out_n_ie         0x00000040U
#define SRT_NX90_pad_ctrl_rst_out_n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_rst_out_n_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_rst_out_n': */
#define MSK_USED_BITS_NX90_pad_ctrl_rst_out_n 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_clk25out */
/* => Pad configuration register of port CLK25OUT (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_clk25out      0x000000B4U
#define Adr_NX90_pad_ctrl_pad_ctrl_clk25out 0xFF4010B4U
#define Adr_NX90_pad_ctrl_clk25out          0xFF4010B4U
#define DFLT_VAL_NX90_pad_ctrl_clk25out     0x00000010U

#define MSK_NX90_pad_ctrl_clk25out_ds         0x00000001U
#define SRT_NX90_pad_ctrl_clk25out_ds         0
#define DFLT_VAL_NX90_pad_ctrl_clk25out_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_clk25out_ds 0x00000000U
#define MSK_NX90_pad_ctrl_clk25out_pe         0x00000010U
#define SRT_NX90_pad_ctrl_clk25out_pe         4
#define DFLT_VAL_NX90_pad_ctrl_clk25out_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_clk25out_pe 0x00000001U

/* all used bits of 'NX90_pad_ctrl_clk25out': */
#define MSK_USED_BITS_NX90_pad_ctrl_clk25out 0x00000011U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio0 */
/* => Pad configuration register of port MMIO0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio0      0x000000B8U
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio0 0xFF4010B8U
#define Adr_NX90_pad_ctrl_mmio0          0xFF4010B8U
#define DFLT_VAL_NX90_pad_ctrl_mmio0     0x00000050U

#define MSK_NX90_pad_ctrl_mmio0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio0_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio0_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio0_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio0_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mmio0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio0 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio1 */
/* => Pad configuration register of port MMIO1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio1      0x000000BCU
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio1 0xFF4010BCU
#define Adr_NX90_pad_ctrl_mmio1          0xFF4010BCU
#define DFLT_VAL_NX90_pad_ctrl_mmio1     0x00000050U

#define MSK_NX90_pad_ctrl_mmio1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio1_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio1_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio1_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio1_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mmio1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio2 */
/* => Pad configuration register of port MMIO2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio2      0x000000C0U
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio2 0xFF4010C0U
#define Adr_NX90_pad_ctrl_mmio2          0xFF4010C0U
#define DFLT_VAL_NX90_pad_ctrl_mmio2     0x00000050U

#define MSK_NX90_pad_ctrl_mmio2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mmio2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio3 */
/* => Pad configuration register of port MMIO3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio3      0x000000C4U
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio3 0xFF4010C4U
#define Adr_NX90_pad_ctrl_mmio3          0xFF4010C4U
#define DFLT_VAL_NX90_pad_ctrl_mmio3     0x00000050U

#define MSK_NX90_pad_ctrl_mmio3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_mmio3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio4 */
/* => Pad configuration register of port MMIO4 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio4      0x000000C8U
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio4 0xFF4010C8U
#define Adr_NX90_pad_ctrl_mmio4          0xFF4010C8U
#define DFLT_VAL_NX90_pad_ctrl_mmio4     0x00000010U

#define MSK_NX90_pad_ctrl_mmio4_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio4_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio4_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio4_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio4_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio4_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio4_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio4_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio4_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio4_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio4_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio4_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mmio4': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio4 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio5 */
/* => Pad configuration register of port MMIO5 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio5      0x000000CCU
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio5 0xFF4010CCU
#define Adr_NX90_pad_ctrl_mmio5          0xFF4010CCU
#define DFLT_VAL_NX90_pad_ctrl_mmio5     0x00000010U

#define MSK_NX90_pad_ctrl_mmio5_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio5_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio5_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio5_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio5_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio5_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio5_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio5_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio5_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio5_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio5_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio5_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mmio5': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio5 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio6 */
/* => Pad configuration register of port MMIO6 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio6      0x000000D0U
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio6 0xFF4010D0U
#define Adr_NX90_pad_ctrl_mmio6          0xFF4010D0U
#define DFLT_VAL_NX90_pad_ctrl_mmio6     0x00000010U

#define MSK_NX90_pad_ctrl_mmio6_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio6_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio6_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio6_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio6_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio6_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio6_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio6_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio6_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio6_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio6_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio6_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mmio6': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio6 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio7 */
/* => Pad configuration register of port MMIO7 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio7      0x000000D4U
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio7 0xFF4010D4U
#define Adr_NX90_pad_ctrl_mmio7          0xFF4010D4U
#define DFLT_VAL_NX90_pad_ctrl_mmio7     0x00000010U

#define MSK_NX90_pad_ctrl_mmio7_ds         0x00000001U
#define SRT_NX90_pad_ctrl_mmio7_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio7_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio7_ds 0x00000000U
#define MSK_NX90_pad_ctrl_mmio7_pe         0x00000010U
#define SRT_NX90_pad_ctrl_mmio7_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio7_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio7_pe 0x00000001U
#define MSK_NX90_pad_ctrl_mmio7_ie         0x00000040U
#define SRT_NX90_pad_ctrl_mmio7_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio7_ie    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio7_ie 0x00000000U

/* all used bits of 'NX90_pad_ctrl_mmio7': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio7 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_clk */
/* => Pad configuration register of port SQI_CLK (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_clk      0x000000D8U
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_clk 0xFF4010D8U
#define Adr_NX90_pad_ctrl_sqi_clk          0xFF4010D8U
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk     0x00000050U

#define MSK_NX90_pad_ctrl_sqi_clk_ds         0x00000001U
#define SRT_NX90_pad_ctrl_sqi_clk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_clk_ds 0x00000000U
#define MSK_NX90_pad_ctrl_sqi_clk_pe         0x00000010U
#define SRT_NX90_pad_ctrl_sqi_clk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_clk_pe 0x00000001U
#define MSK_NX90_pad_ctrl_sqi_clk_ie         0x00000040U
#define SRT_NX90_pad_ctrl_sqi_clk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_clk_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_sqi_clk': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_clk 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_cs0n */
/* => Pad configuration register of port SQI_CS0N (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_cs0n      0x000000DCU
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_cs0n 0xFF4010DCU
#define Adr_NX90_pad_ctrl_sqi_cs0n          0xFF4010DCU
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n     0x00000050U

#define MSK_NX90_pad_ctrl_sqi_cs0n_ds         0x00000001U
#define SRT_NX90_pad_ctrl_sqi_cs0n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_cs0n_ds 0x00000000U
#define MSK_NX90_pad_ctrl_sqi_cs0n_pe         0x00000010U
#define SRT_NX90_pad_ctrl_sqi_cs0n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_cs0n_pe 0x00000001U
#define MSK_NX90_pad_ctrl_sqi_cs0n_ie         0x00000040U
#define SRT_NX90_pad_ctrl_sqi_cs0n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_cs0n_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_sqi_cs0n': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_cs0n 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_mosi */
/* => Pad configuration register of port SQI_MOSI (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_mosi      0x000000E0U
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_mosi 0xFF4010E0U
#define Adr_NX90_pad_ctrl_sqi_mosi          0xFF4010E0U
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi     0x00000050U

#define MSK_NX90_pad_ctrl_sqi_mosi_ds         0x00000001U
#define SRT_NX90_pad_ctrl_sqi_mosi_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_mosi_ds 0x00000000U
#define MSK_NX90_pad_ctrl_sqi_mosi_pe         0x00000010U
#define SRT_NX90_pad_ctrl_sqi_mosi_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_mosi_pe 0x00000001U
#define MSK_NX90_pad_ctrl_sqi_mosi_ie         0x00000040U
#define SRT_NX90_pad_ctrl_sqi_mosi_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_mosi_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_sqi_mosi': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_mosi 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_miso */
/* => Pad configuration register of port SQI_MISO (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_miso      0x000000E4U
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_miso 0xFF4010E4U
#define Adr_NX90_pad_ctrl_sqi_miso          0xFF4010E4U
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso     0x00000050U

#define MSK_NX90_pad_ctrl_sqi_miso_ds         0x00000001U
#define SRT_NX90_pad_ctrl_sqi_miso_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_miso_ds 0x00000000U
#define MSK_NX90_pad_ctrl_sqi_miso_pe         0x00000010U
#define SRT_NX90_pad_ctrl_sqi_miso_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_miso_pe 0x00000001U
#define MSK_NX90_pad_ctrl_sqi_miso_ie         0x00000040U
#define SRT_NX90_pad_ctrl_sqi_miso_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_miso_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_sqi_miso': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_miso 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_sio2 */
/* => Pad configuration register of port SQI_SIO2 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_sio2      0x000000E8U
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_sio2 0xFF4010E8U
#define Adr_NX90_pad_ctrl_sqi_sio2          0xFF4010E8U
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2     0x00000050U

#define MSK_NX90_pad_ctrl_sqi_sio2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_sqi_sio2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_sqi_sio2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_sqi_sio2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_sqi_sio2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_sqi_sio2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_sqi_sio2': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_sio2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_sio3 */
/* => Pad configuration register of port SQI_SIO3 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_sio3      0x000000ECU
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_sio3 0xFF4010ECU
#define Adr_NX90_pad_ctrl_sqi_sio3          0xFF4010ECU
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3     0x00000050U

#define MSK_NX90_pad_ctrl_sqi_sio3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_sqi_sio3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_sqi_sio3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_sqi_sio3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_sqi_sio3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_sqi_sio3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_sqi_sio3': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_sio3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a0 */
/* => Pad configuration register of port HIF_A0 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a0      0x000000F0U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a0 0xFF4010F0U
#define Adr_NX90_pad_ctrl_hif_a0          0xFF4010F0U
#define DFLT_VAL_NX90_pad_ctrl_hif_a0     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a0_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a0_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a0_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a0_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a0': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a0 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a1 */
/* => Pad configuration register of port HIF_A1 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a1      0x000000F4U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a1 0xFF4010F4U
#define Adr_NX90_pad_ctrl_hif_a1          0xFF4010F4U
#define DFLT_VAL_NX90_pad_ctrl_hif_a1     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a1_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a1_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a1_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a1_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a1': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a2 */
/* => Pad configuration register of port HIF_A2 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a2      0x000000F8U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a2 0xFF4010F8U
#define Adr_NX90_pad_ctrl_hif_a2          0xFF4010F8U
#define DFLT_VAL_NX90_pad_ctrl_hif_a2     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a2': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a3 */
/* => Pad configuration register of port HIF_A3 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a3      0x000000FCU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a3 0xFF4010FCU
#define Adr_NX90_pad_ctrl_hif_a3          0xFF4010FCU
#define DFLT_VAL_NX90_pad_ctrl_hif_a3     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a3': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a4 */
/* => Pad configuration register of port HIF_A4 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a4      0x00000100U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a4 0xFF401100U
#define Adr_NX90_pad_ctrl_hif_a4          0xFF401100U
#define DFLT_VAL_NX90_pad_ctrl_hif_a4     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a4_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a4_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a4_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a4_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a4_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a4_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a4_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a4_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a4_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a4_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a4_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a4_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a4': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a4 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a5 */
/* => Pad configuration register of port HIF_A5 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a5      0x00000104U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a5 0xFF401104U
#define Adr_NX90_pad_ctrl_hif_a5          0xFF401104U
#define DFLT_VAL_NX90_pad_ctrl_hif_a5     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a5_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a5_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a5_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a5_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a5_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a5_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a5_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a5_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a5_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a5_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a5_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a5_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a5': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a5 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a6 */
/* => Pad configuration register of port HIF_A6 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a6      0x00000108U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a6 0xFF401108U
#define Adr_NX90_pad_ctrl_hif_a6          0xFF401108U
#define DFLT_VAL_NX90_pad_ctrl_hif_a6     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a6_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a6_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a6_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a6_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a6_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a6_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a6_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a6_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a6_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a6_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a6_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a6_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a6': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a6 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a7 */
/* => Pad configuration register of port HIF_A7 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a7      0x0000010CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a7 0xFF40110CU
#define Adr_NX90_pad_ctrl_hif_a7          0xFF40110CU
#define DFLT_VAL_NX90_pad_ctrl_hif_a7     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a7_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a7_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a7_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a7_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a7_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a7_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a7_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a7_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a7_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a7_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a7_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a7_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a7': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a7 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a8 */
/* => Pad configuration register of port HIF_A8 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a8      0x00000110U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a8 0xFF401110U
#define Adr_NX90_pad_ctrl_hif_a8          0xFF401110U
#define DFLT_VAL_NX90_pad_ctrl_hif_a8     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a8_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a8_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a8_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a8_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a8_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a8_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a8_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a8_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a8_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a8_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a8_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a8_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a8': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a8 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a9 */
/* => Pad configuration register of port HIF_A9 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a9      0x00000114U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a9 0xFF401114U
#define Adr_NX90_pad_ctrl_hif_a9          0xFF401114U
#define DFLT_VAL_NX90_pad_ctrl_hif_a9     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a9_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a9_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a9_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a9_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a9_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a9_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a9_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a9_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a9_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a9_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a9_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a9_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a9': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a9 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a10 */
/* => Pad configuration register of port HIF_A10 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a10      0x00000118U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a10 0xFF401118U
#define Adr_NX90_pad_ctrl_hif_a10          0xFF401118U
#define DFLT_VAL_NX90_pad_ctrl_hif_a10     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a10_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a10_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a10_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a10_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a10_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a10_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a10_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a10_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a10_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a10_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a10_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a10_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a10': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a10 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a11 */
/* => Pad configuration register of port HIF_A11 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a11      0x0000011CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a11 0xFF40111CU
#define Adr_NX90_pad_ctrl_hif_a11          0xFF40111CU
#define DFLT_VAL_NX90_pad_ctrl_hif_a11     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a11_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a11_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a11_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a11_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a11_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a11_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a11_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a11_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a11_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a11_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a11_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a11_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a11': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a11 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a12 */
/* => Pad configuration register of port HIF_A12 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a12      0x00000120U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a12 0xFF401120U
#define Adr_NX90_pad_ctrl_hif_a12          0xFF401120U
#define DFLT_VAL_NX90_pad_ctrl_hif_a12     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a12_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a12_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a12_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a12_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a12_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a12_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a12_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a12_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a12_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a12_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a12_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a12_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a12': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a12 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a13 */
/* => Pad configuration register of port HIF_A13 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a13      0x00000124U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a13 0xFF401124U
#define Adr_NX90_pad_ctrl_hif_a13          0xFF401124U
#define DFLT_VAL_NX90_pad_ctrl_hif_a13     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a13_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a13_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a13_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a13_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a13_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a13_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a13_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a13_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a13_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a13_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a13_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a13_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a13': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a13 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a14 */
/* => Pad configuration register of port HIF_A14 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a14      0x00000128U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a14 0xFF401128U
#define Adr_NX90_pad_ctrl_hif_a14          0xFF401128U
#define DFLT_VAL_NX90_pad_ctrl_hif_a14     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a14_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a14_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a14_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a14_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a14_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a14_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a14_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a14_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a14_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a14_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a14_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a14_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a14': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a14 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a15 */
/* => Pad configuration register of port HIF_A15 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a15      0x0000012CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a15 0xFF40112CU
#define Adr_NX90_pad_ctrl_hif_a15          0xFF40112CU
#define DFLT_VAL_NX90_pad_ctrl_hif_a15     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a15_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a15_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a15_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a15_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a15_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a15_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a15_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a15_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a15_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a15_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a15_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a15_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a15': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a15 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a16 */
/* => Pad configuration register of port HIF_A16 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a16      0x00000130U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a16 0xFF401130U
#define Adr_NX90_pad_ctrl_hif_a16          0xFF401130U
#define DFLT_VAL_NX90_pad_ctrl_hif_a16     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a16_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a16_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a16_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a16_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a16_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a16_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a16_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a16_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a16_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a16_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a16_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a16_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a16': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a16 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a17 */
/* => Pad configuration register of port HIF_A17 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a17      0x00000134U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a17 0xFF401134U
#define Adr_NX90_pad_ctrl_hif_a17          0xFF401134U
#define DFLT_VAL_NX90_pad_ctrl_hif_a17     0x00000050U

#define MSK_NX90_pad_ctrl_hif_a17_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_a17_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a17_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a17_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_a17_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_a17_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a17_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a17_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_a17_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_a17_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a17_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a17_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_a17': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a17 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d0 */
/* => Pad configuration register of port HIF_D0 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d0      0x00000138U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d0 0xFF401138U
#define Adr_NX90_pad_ctrl_hif_d0          0xFF401138U
#define DFLT_VAL_NX90_pad_ctrl_hif_d0     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d0_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d0_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d0_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d0_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d0_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d0_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d0_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d0_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d0_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d0': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d0 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d1 */
/* => Pad configuration register of port HIF_D1 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d1      0x0000013CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d1 0xFF40113CU
#define Adr_NX90_pad_ctrl_hif_d1          0xFF40113CU
#define DFLT_VAL_NX90_pad_ctrl_hif_d1     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d1_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d1_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d1_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d1_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d1_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d1_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d1_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d1_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d1_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d1': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d1 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d2 */
/* => Pad configuration register of port HIF_D2 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d2      0x00000140U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d2 0xFF401140U
#define Adr_NX90_pad_ctrl_hif_d2          0xFF401140U
#define DFLT_VAL_NX90_pad_ctrl_hif_d2     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d2_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d2_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d2_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d2_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d2_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d2_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d2_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d2_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d2_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d2': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d2 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d3 */
/* => Pad configuration register of port HIF_D3 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d3      0x00000144U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d3 0xFF401144U
#define Adr_NX90_pad_ctrl_hif_d3          0xFF401144U
#define DFLT_VAL_NX90_pad_ctrl_hif_d3     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d3_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d3_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d3_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d3_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d3_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d3_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d3_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d3_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d3_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d3': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d3 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d4 */
/* => Pad configuration register of port HIF_D4 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d4      0x00000148U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d4 0xFF401148U
#define Adr_NX90_pad_ctrl_hif_d4          0xFF401148U
#define DFLT_VAL_NX90_pad_ctrl_hif_d4     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d4_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d4_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d4_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d4_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d4_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d4_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d4_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d4_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d4_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d4_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d4_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d4_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d4': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d4 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d5 */
/* => Pad configuration register of port HIF_D5 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d5      0x0000014CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d5 0xFF40114CU
#define Adr_NX90_pad_ctrl_hif_d5          0xFF40114CU
#define DFLT_VAL_NX90_pad_ctrl_hif_d5     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d5_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d5_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d5_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d5_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d5_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d5_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d5_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d5_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d5_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d5_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d5_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d5_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d5': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d5 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d6 */
/* => Pad configuration register of port HIF_D6 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d6      0x00000150U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d6 0xFF401150U
#define Adr_NX90_pad_ctrl_hif_d6          0xFF401150U
#define DFLT_VAL_NX90_pad_ctrl_hif_d6     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d6_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d6_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d6_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d6_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d6_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d6_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d6_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d6_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d6_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d6_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d6_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d6_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d6': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d6 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d7 */
/* => Pad configuration register of port HIF_D7 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d7      0x00000154U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d7 0xFF401154U
#define Adr_NX90_pad_ctrl_hif_d7          0xFF401154U
#define DFLT_VAL_NX90_pad_ctrl_hif_d7     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d7_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d7_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d7_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d7_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d7_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d7_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d7_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d7_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d7_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d7_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d7_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d7_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d7': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d7 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d8 */
/* => Pad configuration register of port HIF_D8 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d8      0x00000158U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d8 0xFF401158U
#define Adr_NX90_pad_ctrl_hif_d8          0xFF401158U
#define DFLT_VAL_NX90_pad_ctrl_hif_d8     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d8_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d8_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d8_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d8_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d8_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d8_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d8_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d8_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d8_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d8_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d8_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d8_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d8': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d8 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d9 */
/* => Pad configuration register of port HIF_D9 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d9      0x0000015CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d9 0xFF40115CU
#define Adr_NX90_pad_ctrl_hif_d9          0xFF40115CU
#define DFLT_VAL_NX90_pad_ctrl_hif_d9     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d9_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d9_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d9_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d9_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d9_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d9_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d9_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d9_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d9_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d9_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d9_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d9_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d9': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d9 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d10 */
/* => Pad configuration register of port HIF_D10 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d10      0x00000160U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d10 0xFF401160U
#define Adr_NX90_pad_ctrl_hif_d10          0xFF401160U
#define DFLT_VAL_NX90_pad_ctrl_hif_d10     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d10_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d10_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d10_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d10_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d10_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d10_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d10_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d10_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d10_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d10_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d10_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d10_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d10': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d10 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d11 */
/* => Pad configuration register of port HIF_D11 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d11      0x00000164U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d11 0xFF401164U
#define Adr_NX90_pad_ctrl_hif_d11          0xFF401164U
#define DFLT_VAL_NX90_pad_ctrl_hif_d11     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d11_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d11_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d11_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d11_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d11_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d11_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d11_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d11_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d11_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d11_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d11_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d11_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d11': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d11 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d12 */
/* => Pad configuration register of port HIF_D12 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d12      0x00000168U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d12 0xFF401168U
#define Adr_NX90_pad_ctrl_hif_d12          0xFF401168U
#define DFLT_VAL_NX90_pad_ctrl_hif_d12     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d12_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d12_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d12_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d12_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d12_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d12_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d12_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d12_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d12_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d12_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d12_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d12_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d12': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d12 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d13 */
/* => Pad configuration register of port HIF_D13 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d13      0x0000016CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d13 0xFF40116CU
#define Adr_NX90_pad_ctrl_hif_d13          0xFF40116CU
#define DFLT_VAL_NX90_pad_ctrl_hif_d13     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d13_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d13_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d13_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d13_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d13_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d13_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d13_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d13_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d13_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d13_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d13_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d13_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d13': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d13 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d14 */
/* => Pad configuration register of port HIF_D14 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d14      0x00000170U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d14 0xFF401170U
#define Adr_NX90_pad_ctrl_hif_d14          0xFF401170U
#define DFLT_VAL_NX90_pad_ctrl_hif_d14     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d14_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d14_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d14_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d14_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d14_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d14_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d14_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d14_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d14_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d14_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d14_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d14_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d14': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d14 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d15 */
/* => Pad configuration register of port HIF_D15 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d15      0x00000174U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d15 0xFF401174U
#define Adr_NX90_pad_ctrl_hif_d15          0xFF401174U
#define DFLT_VAL_NX90_pad_ctrl_hif_d15     0x00000050U

#define MSK_NX90_pad_ctrl_hif_d15_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_d15_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d15_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d15_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_d15_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_d15_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d15_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d15_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_d15_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_d15_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d15_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d15_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_d15': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d15 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_bhen */
/* => Pad configuration register of port HIF_BHEN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_bhen      0x00000178U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_bhen 0xFF401178U
#define Adr_NX90_pad_ctrl_hif_bhen          0xFF401178U
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen     0x00000050U

#define MSK_NX90_pad_ctrl_hif_bhen_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_bhen_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_bhen_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_bhen_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_bhen_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_bhen_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_bhen_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_bhen_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_bhen_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_bhen': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_bhen 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_csn */
/* => Pad configuration register of port HIF_CSN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_csn      0x0000017CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_csn 0xFF40117CU
#define Adr_NX90_pad_ctrl_hif_csn          0xFF40117CU
#define DFLT_VAL_NX90_pad_ctrl_hif_csn     0x00000050U

#define MSK_NX90_pad_ctrl_hif_csn_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_csn_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_csn_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_csn_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_csn_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_csn_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_csn_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_csn_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_csn_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_csn_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_csn_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_csn_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_csn': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_csn 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_rdn */
/* => Pad configuration register of port HIF_RDN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_rdn      0x00000180U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_rdn 0xFF401180U
#define Adr_NX90_pad_ctrl_hif_rdn          0xFF401180U
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn     0x00000050U

#define MSK_NX90_pad_ctrl_hif_rdn_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_rdn_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdn_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_rdn_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_rdn_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdn_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_rdn_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_rdn_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdn_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_rdn': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_rdn 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_wrn */
/* => Pad configuration register of port HIF_WRN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_wrn      0x00000184U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_wrn 0xFF401184U
#define Adr_NX90_pad_ctrl_hif_wrn          0xFF401184U
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn     0x00000050U

#define MSK_NX90_pad_ctrl_hif_wrn_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_wrn_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_wrn_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_wrn_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_wrn_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_wrn_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_wrn_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_wrn_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_wrn_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_wrn': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_wrn 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_rdy */
/* => Pad configuration register of port HIF_RDY (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_rdy      0x00000188U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_rdy 0xFF401188U
#define Adr_NX90_pad_ctrl_hif_rdy          0xFF401188U
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy     0x00000050U

#define MSK_NX90_pad_ctrl_hif_rdy_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_rdy_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdy_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_rdy_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_rdy_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdy_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_rdy_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_rdy_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdy_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_rdy': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_rdy 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_dirq */
/* => Pad configuration register of port HIF_DIRQ (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_dirq      0x0000018CU
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_dirq 0xFF40118CU
#define Adr_NX90_pad_ctrl_hif_dirq          0xFF40118CU
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq     0x00000050U

#define MSK_NX90_pad_ctrl_hif_dirq_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_dirq_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_dirq_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_dirq_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_dirq_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_dirq_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_dirq_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_dirq_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_dirq_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_dirq': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_dirq 0x00000051U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_sdclk */
/* => Pad configuration register of port HIF_SDCLK (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_sdclk      0x00000190U
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_sdclk 0xFF401190U
#define Adr_NX90_pad_ctrl_hif_sdclk          0xFF401190U
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk     0x00000050U

#define MSK_NX90_pad_ctrl_hif_sdclk_ds         0x00000001U
#define SRT_NX90_pad_ctrl_hif_sdclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk_ds    0x00000000U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_sdclk_ds 0x00000000U
#define MSK_NX90_pad_ctrl_hif_sdclk_pe         0x00000010U
#define SRT_NX90_pad_ctrl_hif_sdclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk_pe    0x00000010U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_sdclk_pe 0x00000001U
#define MSK_NX90_pad_ctrl_hif_sdclk_ie         0x00000040U
#define SRT_NX90_pad_ctrl_hif_sdclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk_ie    0x00000040U
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_sdclk_ie 0x00000001U

/* all used bits of 'NX90_pad_ctrl_hif_sdclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_sdclk 0x00000051U


/* ===================================================================== */

/* Area of asic_ctrl */

/* ===================================================================== */

#define Addr_NX90_asic_ctrl 0xFF401200U

/* --------------------------------------------------------------------- */
/* Register io_config0 */
/* => IO Config0 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config0_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config0       0x00000000U
#define Adr_NX90_asic_ctrl_io_config0 0xFF401200U
#define Adr_NX90_io_config0           0xFF401200U
#define DFLT_VAL_NX90_io_config0      0x00000000U

#define MSK_NX90_io_config0_sel_xm0_tx              0x00000001U
#define SRT_NX90_io_config0_sel_xm0_tx              0
#define DFLT_VAL_NX90_io_config0_sel_xm0_tx         0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_xm0_tx      0x00000000U
#define MSK_NX90_io_config0_sel_xm0_txoe            0x00000002U
#define SRT_NX90_io_config0_sel_xm0_txoe            1
#define DFLT_VAL_NX90_io_config0_sel_xm0_txoe       0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_xm0_txoe    0x00000000U
#define MSK_NX90_io_config0_sel_xm0_eclk            0x00000004U
#define SRT_NX90_io_config0_sel_xm0_eclk            2
#define DFLT_VAL_NX90_io_config0_sel_xm0_eclk       0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_xm0_eclk    0x00000000U
#define MSK_NX90_io_config0_sel_xm0_io              0x000001f8U
#define SRT_NX90_io_config0_sel_xm0_io              3
#define DFLT_VAL_NX90_io_config0_sel_xm0_io         0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_xm0_io      0x00000000U
#define MSK_NX90_io_config0_sel_fb0clk              0x00000200U
#define SRT_NX90_io_config0_sel_fb0clk              9
#define DFLT_VAL_NX90_io_config0_sel_fb0clk         0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_fb0clk      0x00000000U
#define MSK_NX90_io_config0_sel_xm0_mii_cfg         0x00003c00U
#define SRT_NX90_io_config0_sel_xm0_mii_cfg         10
#define DFLT_VAL_NX90_io_config0_sel_xm0_mii_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_xm0_mii_cfg 0x00000000U
#define MSK_NX90_io_config0_sel_xc0_mdio            0x0000c000U
#define SRT_NX90_io_config0_sel_xc0_mdio            14
#define DFLT_VAL_NX90_io_config0_sel_xc0_mdio       0x00000000U
#define DFLT_BF_VAL_NX90_io_config0_sel_xc0_mdio    0x00000000U

/* all used bits of 'NX90_io_config0': */
#define MSK_USED_BITS_NX90_io_config0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config0_mask */
/* => IO Config0 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config0 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config0_mask       0x00000004U
#define Adr_NX90_asic_ctrl_io_config0_mask 0xFF401204U
#define Adr_NX90_io_config0_mask           0xFF401204U
#define DFLT_VAL_NX90_io_config0_mask      0x0000ffffU

#define MSK_NX90_io_config0_mask_sel_xm0_tx              0x00000001U
#define SRT_NX90_io_config0_mask_sel_xm0_tx              0
#define DFLT_VAL_NX90_io_config0_mask_sel_xm0_tx         0x00000001U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_xm0_tx      0x00000001U
#define MSK_NX90_io_config0_mask_sel_xm0_txoe            0x00000002U
#define SRT_NX90_io_config0_mask_sel_xm0_txoe            1
#define DFLT_VAL_NX90_io_config0_mask_sel_xm0_txoe       0x00000002U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_xm0_txoe    0x00000001U
#define MSK_NX90_io_config0_mask_sel_xm0_eclk            0x00000004U
#define SRT_NX90_io_config0_mask_sel_xm0_eclk            2
#define DFLT_VAL_NX90_io_config0_mask_sel_xm0_eclk       0x00000004U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_xm0_eclk    0x00000001U
#define MSK_NX90_io_config0_mask_sel_xm0_io              0x000001f8U
#define SRT_NX90_io_config0_mask_sel_xm0_io              3
#define DFLT_VAL_NX90_io_config0_mask_sel_xm0_io         0x000001f8U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_xm0_io      0x0000003fU
#define MSK_NX90_io_config0_mask_sel_fb0clk              0x00000200U
#define SRT_NX90_io_config0_mask_sel_fb0clk              9
#define DFLT_VAL_NX90_io_config0_mask_sel_fb0clk         0x00000200U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_fb0clk      0x00000001U
#define MSK_NX90_io_config0_mask_sel_xm0_mii_cfg         0x00003c00U
#define SRT_NX90_io_config0_mask_sel_xm0_mii_cfg         10
#define DFLT_VAL_NX90_io_config0_mask_sel_xm0_mii_cfg    0x00003c00U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_xm0_mii_cfg 0x0000000fU
#define MSK_NX90_io_config0_mask_sel_xc0_mdio            0x0000c000U
#define SRT_NX90_io_config0_mask_sel_xc0_mdio            14
#define DFLT_VAL_NX90_io_config0_mask_sel_xc0_mdio       0x0000c000U
#define DFLT_BF_VAL_NX90_io_config0_mask_sel_xc0_mdio    0x00000003U

/* all used bits of 'NX90_io_config0_mask': */
#define MSK_USED_BITS_NX90_io_config0_mask 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config1 */
/* => IO Config1 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config1_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config1       0x00000008U
#define Adr_NX90_asic_ctrl_io_config1 0xFF401208U
#define Adr_NX90_io_config1           0xFF401208U
#define DFLT_VAL_NX90_io_config1      0x00000000U

#define MSK_NX90_io_config1_sel_xm1_tx              0x00000001U
#define SRT_NX90_io_config1_sel_xm1_tx              0
#define DFLT_VAL_NX90_io_config1_sel_xm1_tx         0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_xm1_tx      0x00000000U
#define MSK_NX90_io_config1_sel_xm1_txoe            0x00000002U
#define SRT_NX90_io_config1_sel_xm1_txoe            1
#define DFLT_VAL_NX90_io_config1_sel_xm1_txoe       0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_xm1_txoe    0x00000000U
#define MSK_NX90_io_config1_sel_xm1_eclk            0x00000004U
#define SRT_NX90_io_config1_sel_xm1_eclk            2
#define DFLT_VAL_NX90_io_config1_sel_xm1_eclk       0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_xm1_eclk    0x00000000U
#define MSK_NX90_io_config1_sel_xm1_io              0x000001f8U
#define SRT_NX90_io_config1_sel_xm1_io              3
#define DFLT_VAL_NX90_io_config1_sel_xm1_io         0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_xm1_io      0x00000000U
#define MSK_NX90_io_config1_sel_fb1clk              0x00000200U
#define SRT_NX90_io_config1_sel_fb1clk              9
#define DFLT_VAL_NX90_io_config1_sel_fb1clk         0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_fb1clk      0x00000000U
#define MSK_NX90_io_config1_sel_xm1_mii_cfg         0x00003c00U
#define SRT_NX90_io_config1_sel_xm1_mii_cfg         10
#define DFLT_VAL_NX90_io_config1_sel_xm1_mii_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_xm1_mii_cfg 0x00000000U
#define MSK_NX90_io_config1_sel_xc1_mdio            0x0000c000U
#define SRT_NX90_io_config1_sel_xc1_mdio            14
#define DFLT_VAL_NX90_io_config1_sel_xc1_mdio       0x00000000U
#define DFLT_BF_VAL_NX90_io_config1_sel_xc1_mdio    0x00000000U

/* all used bits of 'NX90_io_config1': */
#define MSK_USED_BITS_NX90_io_config1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config1_mask */
/* => IO Config1 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config1 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config1_mask       0x0000000CU
#define Adr_NX90_asic_ctrl_io_config1_mask 0xFF40120CU
#define Adr_NX90_io_config1_mask           0xFF40120CU
#define DFLT_VAL_NX90_io_config1_mask      0x0000ffffU

#define MSK_NX90_io_config1_mask_sel_xm1_tx              0x00000001U
#define SRT_NX90_io_config1_mask_sel_xm1_tx              0
#define DFLT_VAL_NX90_io_config1_mask_sel_xm1_tx         0x00000001U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_xm1_tx      0x00000001U
#define MSK_NX90_io_config1_mask_sel_xm1_txoe            0x00000002U
#define SRT_NX90_io_config1_mask_sel_xm1_txoe            1
#define DFLT_VAL_NX90_io_config1_mask_sel_xm1_txoe       0x00000002U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_xm1_txoe    0x00000001U
#define MSK_NX90_io_config1_mask_sel_xm1_eclk            0x00000004U
#define SRT_NX90_io_config1_mask_sel_xm1_eclk            2
#define DFLT_VAL_NX90_io_config1_mask_sel_xm1_eclk       0x00000004U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_xm1_eclk    0x00000001U
#define MSK_NX90_io_config1_mask_sel_xm1_io              0x000001f8U
#define SRT_NX90_io_config1_mask_sel_xm1_io              3
#define DFLT_VAL_NX90_io_config1_mask_sel_xm1_io         0x000001f8U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_xm1_io      0x0000003fU
#define MSK_NX90_io_config1_mask_sel_fb1clk              0x00000200U
#define SRT_NX90_io_config1_mask_sel_fb1clk              9
#define DFLT_VAL_NX90_io_config1_mask_sel_fb1clk         0x00000200U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_fb1clk      0x00000001U
#define MSK_NX90_io_config1_mask_sel_xm1_mii_cfg         0x00003c00U
#define SRT_NX90_io_config1_mask_sel_xm1_mii_cfg         10
#define DFLT_VAL_NX90_io_config1_mask_sel_xm1_mii_cfg    0x00003c00U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_xm1_mii_cfg 0x0000000fU
#define MSK_NX90_io_config1_mask_sel_xc1_mdio            0x0000c000U
#define SRT_NX90_io_config1_mask_sel_xc1_mdio            14
#define DFLT_VAL_NX90_io_config1_mask_sel_xc1_mdio       0x0000c000U
#define DFLT_BF_VAL_NX90_io_config1_mask_sel_xc1_mdio    0x00000003U

/* all used bits of 'NX90_io_config1_mask': */
#define MSK_USED_BITS_NX90_io_config1_mask 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config2 */
/* => IO Config2 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config2_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config2       0x00000010U
#define Adr_NX90_asic_ctrl_io_config2 0xFF401210U
#define Adr_NX90_io_config2           0xFF401210U
#define DFLT_VAL_NX90_io_config2      0x00000000U

#define MSK_NX90_io_config2_sel_gpio8                        0x00000001U
#define SRT_NX90_io_config2_sel_gpio8                        0
#define DFLT_VAL_NX90_io_config2_sel_gpio8                   0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio8                0x00000000U
#define MSK_NX90_io_config2_sel_gpio9                        0x00000002U
#define SRT_NX90_io_config2_sel_gpio9                        1
#define DFLT_VAL_NX90_io_config2_sel_gpio9                   0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio9                0x00000000U
#define MSK_NX90_io_config2_sel_gpio10                       0x00000004U
#define SRT_NX90_io_config2_sel_gpio10                       2
#define DFLT_VAL_NX90_io_config2_sel_gpio10                  0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio10               0x00000000U
#define MSK_NX90_io_config2_sel_gpio11                       0x00000008U
#define SRT_NX90_io_config2_sel_gpio11                       3
#define DFLT_VAL_NX90_io_config2_sel_gpio11                  0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio11               0x00000000U
#define MSK_NX90_io_config2_sel_xc_trigger0_hif_sirq         0x00000010U
#define SRT_NX90_io_config2_sel_xc_trigger0_hif_sirq         4
#define DFLT_VAL_NX90_io_config2_sel_xc_trigger0_hif_sirq    0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_xc_trigger0_hif_sirq 0x00000000U
#define MSK_NX90_io_config2_sel_phy_devel                    0x00000020U
#define SRT_NX90_io_config2_sel_phy_devel                    5
#define DFLT_VAL_NX90_io_config2_sel_phy_devel               0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_phy_devel            0x00000000U
#define MSK_NX90_io_config2_sel_ephy0                        0x00000040U
#define SRT_NX90_io_config2_sel_ephy0                        6
#define DFLT_VAL_NX90_io_config2_sel_ephy0                   0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy0                0x00000000U
#define MSK_NX90_io_config2_sel_ephy1                        0x00000080U
#define SRT_NX90_io_config2_sel_ephy1                        7
#define DFLT_VAL_NX90_io_config2_sel_ephy1                   0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy1                0x00000000U
#define MSK_NX90_io_config2_sel_ephy_mdio                    0x00000100U
#define SRT_NX90_io_config2_sel_ephy_mdio                    8
#define DFLT_VAL_NX90_io_config2_sel_ephy_mdio               0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy_mdio            0x00000000U
#define MSK_NX90_io_config2_sel_fo0                          0x00000200U
#define SRT_NX90_io_config2_sel_fo0                          9
#define DFLT_VAL_NX90_io_config2_sel_fo0                     0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_fo0                  0x00000000U
#define MSK_NX90_io_config2_sel_fo1                          0x00000400U
#define SRT_NX90_io_config2_sel_fo1                          10
#define DFLT_VAL_NX90_io_config2_sel_fo1                     0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_fo1                  0x00000000U
#define MSK_NX90_io_config2_sel_i2c0_com                     0x00000800U
#define SRT_NX90_io_config2_sel_i2c0_com                     11
#define DFLT_VAL_NX90_io_config2_sel_i2c0_com                0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_i2c0_com             0x00000000U
#define MSK_NX90_io_config2_sel_i2c1_com                     0x00001000U
#define SRT_NX90_io_config2_sel_i2c1_com                     12
#define DFLT_VAL_NX90_io_config2_sel_i2c1_com                0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_i2c1_com             0x00000000U
#define MSK_NX90_io_config2_sel_uart_com                     0x00002000U
#define SRT_NX90_io_config2_sel_uart_com                     13
#define DFLT_VAL_NX90_io_config2_sel_uart_com                0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_uart_com             0x00000000U
#define MSK_NX90_io_config2_sel_uart_com_rctsn               0x00004000U
#define SRT_NX90_io_config2_sel_uart_com_rctsn               14
#define DFLT_VAL_NX90_io_config2_sel_uart_com_rctsn          0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_sel_uart_com_rctsn       0x00000000U
#define MSK_NX90_io_config2_clk25out_oe                      0x00008000U
#define SRT_NX90_io_config2_clk25out_oe                      15
#define DFLT_VAL_NX90_io_config2_clk25out_oe                 0x00000000U
#define DFLT_BF_VAL_NX90_io_config2_clk25out_oe              0x00000000U

/* all used bits of 'NX90_io_config2': */
#define MSK_USED_BITS_NX90_io_config2 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config2_mask */
/* => IO Config2 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config2 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config2_mask       0x00000014U
#define Adr_NX90_asic_ctrl_io_config2_mask 0xFF401214U
#define Adr_NX90_io_config2_mask           0xFF401214U
#define DFLT_VAL_NX90_io_config2_mask      0x0000ffffU

#define MSK_NX90_io_config2_mask_sel_gpio8                        0x00000001U
#define SRT_NX90_io_config2_mask_sel_gpio8                        0
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio8                   0x00000001U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio8                0x00000001U
#define MSK_NX90_io_config2_mask_sel_gpio9                        0x00000002U
#define SRT_NX90_io_config2_mask_sel_gpio9                        1
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio9                   0x00000002U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio9                0x00000001U
#define MSK_NX90_io_config2_mask_sel_gpio10                       0x00000004U
#define SRT_NX90_io_config2_mask_sel_gpio10                       2
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio10                  0x00000004U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio10               0x00000001U
#define MSK_NX90_io_config2_mask_sel_gpio11                       0x00000008U
#define SRT_NX90_io_config2_mask_sel_gpio11                       3
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio11                  0x00000008U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio11               0x00000001U
#define MSK_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq         0x00000010U
#define SRT_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq         4
#define DFLT_VAL_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq    0x00000010U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq 0x00000001U
#define MSK_NX90_io_config2_mask_sel_phy_devel                    0x00000020U
#define SRT_NX90_io_config2_mask_sel_phy_devel                    5
#define DFLT_VAL_NX90_io_config2_mask_sel_phy_devel               0x00000020U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_phy_devel            0x00000001U
#define MSK_NX90_io_config2_mask_sel_ephy0                        0x00000040U
#define SRT_NX90_io_config2_mask_sel_ephy0                        6
#define DFLT_VAL_NX90_io_config2_mask_sel_ephy0                   0x00000040U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_ephy0                0x00000001U
#define MSK_NX90_io_config2_mask_sel_ephy1                        0x00000080U
#define SRT_NX90_io_config2_mask_sel_ephy1                        7
#define DFLT_VAL_NX90_io_config2_mask_sel_ephy1                   0x00000080U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_ephy1                0x00000001U
#define MSK_NX90_io_config2_mask_sel_ephy_mdio                    0x00000100U
#define SRT_NX90_io_config2_mask_sel_ephy_mdio                    8
#define DFLT_VAL_NX90_io_config2_mask_sel_ephy_mdio               0x00000100U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_ephy_mdio            0x00000001U
#define MSK_NX90_io_config2_mask_sel_fo0                          0x00000200U
#define SRT_NX90_io_config2_mask_sel_fo0                          9
#define DFLT_VAL_NX90_io_config2_mask_sel_fo0                     0x00000200U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_fo0                  0x00000001U
#define MSK_NX90_io_config2_mask_sel_fo1                          0x00000400U
#define SRT_NX90_io_config2_mask_sel_fo1                          10
#define DFLT_VAL_NX90_io_config2_mask_sel_fo1                     0x00000400U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_fo1                  0x00000001U
#define MSK_NX90_io_config2_mask_sel_i2c0_com                     0x00000800U
#define SRT_NX90_io_config2_mask_sel_i2c0_com                     11
#define DFLT_VAL_NX90_io_config2_mask_sel_i2c0_com                0x00000800U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_i2c0_com             0x00000001U
#define MSK_NX90_io_config2_mask_sel_i2c1_com                     0x00001000U
#define SRT_NX90_io_config2_mask_sel_i2c1_com                     12
#define DFLT_VAL_NX90_io_config2_mask_sel_i2c1_com                0x00001000U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_i2c1_com             0x00000001U
#define MSK_NX90_io_config2_mask_sel_uart_com                     0x00002000U
#define SRT_NX90_io_config2_mask_sel_uart_com                     13
#define DFLT_VAL_NX90_io_config2_mask_sel_uart_com                0x00002000U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_uart_com             0x00000001U
#define MSK_NX90_io_config2_mask_sel_uart_com_rctsn               0x00004000U
#define SRT_NX90_io_config2_mask_sel_uart_com_rctsn               14
#define DFLT_VAL_NX90_io_config2_mask_sel_uart_com_rctsn          0x00004000U
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_uart_com_rctsn       0x00000001U
#define MSK_NX90_io_config2_mask_clk25out_oe                      0x00008000U
#define SRT_NX90_io_config2_mask_clk25out_oe                      15
#define DFLT_VAL_NX90_io_config2_mask_clk25out_oe                 0x00008000U
#define DFLT_BF_VAL_NX90_io_config2_mask_clk25out_oe              0x00000001U

/* all used bits of 'NX90_io_config2_mask': */
#define MSK_USED_BITS_NX90_io_config2_mask 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config3 */
/* => IO Config3 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config3_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config3       0x00000018U
#define Adr_NX90_asic_ctrl_io_config3 0xFF401218U
#define Adr_NX90_io_config3           0xFF401218U
#define DFLT_VAL_NX90_io_config3      0x00000000U

#define MSK_NX90_io_config3_sel_gpio0                0x00000001U
#define SRT_NX90_io_config3_sel_gpio0                0
#define DFLT_VAL_NX90_io_config3_sel_gpio0           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio0        0x00000000U
#define MSK_NX90_io_config3_sel_gpio1                0x00000002U
#define SRT_NX90_io_config3_sel_gpio1                1
#define DFLT_VAL_NX90_io_config3_sel_gpio1           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio1        0x00000000U
#define MSK_NX90_io_config3_sel_gpio2                0x00000004U
#define SRT_NX90_io_config3_sel_gpio2                2
#define DFLT_VAL_NX90_io_config3_sel_gpio2           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio2        0x00000000U
#define MSK_NX90_io_config3_sel_gpio3                0x00000008U
#define SRT_NX90_io_config3_sel_gpio3                3
#define DFLT_VAL_NX90_io_config3_sel_gpio3           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio3        0x00000000U
#define MSK_NX90_io_config3_sel_gpio4                0x00000010U
#define SRT_NX90_io_config3_sel_gpio4                4
#define DFLT_VAL_NX90_io_config3_sel_gpio4           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio4        0x00000000U
#define MSK_NX90_io_config3_sel_gpio5                0x00000020U
#define SRT_NX90_io_config3_sel_gpio5                5
#define DFLT_VAL_NX90_io_config3_sel_gpio5           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio5        0x00000000U
#define MSK_NX90_io_config3_sel_gpio6                0x00000040U
#define SRT_NX90_io_config3_sel_gpio6                6
#define DFLT_VAL_NX90_io_config3_sel_gpio6           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio6        0x00000000U
#define MSK_NX90_io_config3_sel_gpio7                0x00000080U
#define SRT_NX90_io_config3_sel_gpio7                7
#define DFLT_VAL_NX90_io_config3_sel_gpio7           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio7        0x00000000U
#define MSK_NX90_io_config3_sel_endat0               0x00000100U
#define SRT_NX90_io_config3_sel_endat0               8
#define DFLT_VAL_NX90_io_config3_sel_endat0          0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_endat0       0x00000000U
#define MSK_NX90_io_config3_sel_endat0_devel         0x00000200U
#define SRT_NX90_io_config3_sel_endat0_devel         9
#define DFLT_VAL_NX90_io_config3_sel_endat0_devel    0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_endat0_devel 0x00000000U
#define MSK_NX90_io_config3_sel_endat1               0x00000400U
#define SRT_NX90_io_config3_sel_endat1               10
#define DFLT_VAL_NX90_io_config3_sel_endat1          0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_endat1       0x00000000U
#define MSK_NX90_io_config3_sel_endat1_devel         0x00000800U
#define SRT_NX90_io_config3_sel_endat1_devel         11
#define DFLT_VAL_NX90_io_config3_sel_endat1_devel    0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_endat1_devel 0x00000000U
#define MSK_NX90_io_config3_sel_biss0                0x00001000U
#define SRT_NX90_io_config3_sel_biss0                12
#define DFLT_VAL_NX90_io_config3_sel_biss0           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_biss0        0x00000000U
#define MSK_NX90_io_config3_sel_biss0_mo             0x00002000U
#define SRT_NX90_io_config3_sel_biss0_mo             13
#define DFLT_VAL_NX90_io_config3_sel_biss0_mo        0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_biss0_mo     0x00000000U
#define MSK_NX90_io_config3_sel_biss1                0x00004000U
#define SRT_NX90_io_config3_sel_biss1                14
#define DFLT_VAL_NX90_io_config3_sel_biss1           0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_biss1        0x00000000U
#define MSK_NX90_io_config3_sel_biss1_mo             0x00008000U
#define SRT_NX90_io_config3_sel_biss1_mo             15
#define DFLT_VAL_NX90_io_config3_sel_biss1_mo        0x00000000U
#define DFLT_BF_VAL_NX90_io_config3_sel_biss1_mo     0x00000000U

/* all used bits of 'NX90_io_config3': */
#define MSK_USED_BITS_NX90_io_config3 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config3_mask */
/* => IO Config3 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config3 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config3_mask       0x0000001CU
#define Adr_NX90_asic_ctrl_io_config3_mask 0xFF40121CU
#define Adr_NX90_io_config3_mask           0xFF40121CU
#define DFLT_VAL_NX90_io_config3_mask      0x0000ffffU

#define MSK_NX90_io_config3_mask_sel_gpio0                0x00000001U
#define SRT_NX90_io_config3_mask_sel_gpio0                0
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio0           0x00000001U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio0        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio1                0x00000002U
#define SRT_NX90_io_config3_mask_sel_gpio1                1
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio1           0x00000002U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio1        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio2                0x00000004U
#define SRT_NX90_io_config3_mask_sel_gpio2                2
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio2           0x00000004U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio2        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio3                0x00000008U
#define SRT_NX90_io_config3_mask_sel_gpio3                3
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio3           0x00000008U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio3        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio4                0x00000010U
#define SRT_NX90_io_config3_mask_sel_gpio4                4
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio4           0x00000010U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio4        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio5                0x00000020U
#define SRT_NX90_io_config3_mask_sel_gpio5                5
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio5           0x00000020U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio5        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio6                0x00000040U
#define SRT_NX90_io_config3_mask_sel_gpio6                6
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio6           0x00000040U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio6        0x00000001U
#define MSK_NX90_io_config3_mask_sel_gpio7                0x00000080U
#define SRT_NX90_io_config3_mask_sel_gpio7                7
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio7           0x00000080U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio7        0x00000001U
#define MSK_NX90_io_config3_mask_sel_endat0               0x00000100U
#define SRT_NX90_io_config3_mask_sel_endat0               8
#define DFLT_VAL_NX90_io_config3_mask_sel_endat0          0x00000100U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat0       0x00000001U
#define MSK_NX90_io_config3_mask_sel_endat0_devel         0x00000200U
#define SRT_NX90_io_config3_mask_sel_endat0_devel         9
#define DFLT_VAL_NX90_io_config3_mask_sel_endat0_devel    0x00000200U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat0_devel 0x00000001U
#define MSK_NX90_io_config3_mask_sel_endat1               0x00000400U
#define SRT_NX90_io_config3_mask_sel_endat1               10
#define DFLT_VAL_NX90_io_config3_mask_sel_endat1          0x00000400U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat1       0x00000001U
#define MSK_NX90_io_config3_mask_sel_endat1_devel         0x00000800U
#define SRT_NX90_io_config3_mask_sel_endat1_devel         11
#define DFLT_VAL_NX90_io_config3_mask_sel_endat1_devel    0x00000800U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat1_devel 0x00000001U
#define MSK_NX90_io_config3_mask_sel_biss0                0x00001000U
#define SRT_NX90_io_config3_mask_sel_biss0                12
#define DFLT_VAL_NX90_io_config3_mask_sel_biss0           0x00001000U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss0        0x00000001U
#define MSK_NX90_io_config3_mask_sel_biss0_mo             0x00002000U
#define SRT_NX90_io_config3_mask_sel_biss0_mo             13
#define DFLT_VAL_NX90_io_config3_mask_sel_biss0_mo        0x00002000U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss0_mo     0x00000001U
#define MSK_NX90_io_config3_mask_sel_biss1                0x00004000U
#define SRT_NX90_io_config3_mask_sel_biss1                14
#define DFLT_VAL_NX90_io_config3_mask_sel_biss1           0x00004000U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss1        0x00000001U
#define MSK_NX90_io_config3_mask_sel_biss1_mo             0x00008000U
#define SRT_NX90_io_config3_mask_sel_biss1_mo             15
#define DFLT_VAL_NX90_io_config3_mask_sel_biss1_mo        0x00008000U
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss1_mo     0x00000001U

/* all used bits of 'NX90_io_config3_mask': */
#define MSK_USED_BITS_NX90_io_config3_mask 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config4 */
/* => IO Config4 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config4_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config4       0x00000020U
#define Adr_NX90_asic_ctrl_io_config4 0xFF401220U
#define Adr_NX90_io_config4           0xFF401220U
#define DFLT_VAL_NX90_io_config4      0x00000000U

#define MSK_NX90_io_config4_sel_i2c_app                     0x00000001U
#define SRT_NX90_io_config4_sel_i2c_app                     0
#define DFLT_VAL_NX90_io_config4_sel_i2c_app                0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_i2c_app             0x00000000U
#define MSK_NX90_io_config4_sel_uart_app                    0x00000002U
#define SRT_NX90_io_config4_sel_uart_app                    1
#define DFLT_VAL_NX90_io_config4_sel_uart_app               0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_app            0x00000000U
#define MSK_NX90_io_config4_sel_uart_app_rctsn              0x00000004U
#define SRT_NX90_io_config4_sel_uart_app_rctsn              2
#define DFLT_VAL_NX90_io_config4_sel_uart_app_rctsn         0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_app_rctsn      0x00000000U
#define MSK_NX90_io_config4_sel_uart_xpic_app               0x00000008U
#define SRT_NX90_io_config4_sel_uart_xpic_app               3
#define DFLT_VAL_NX90_io_config4_sel_uart_xpic_app          0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_xpic_app       0x00000000U
#define MSK_NX90_io_config4_sel_uart_xpic_app_rctsn         0x00000010U
#define SRT_NX90_io_config4_sel_uart_xpic_app_rctsn         4
#define DFLT_VAL_NX90_io_config4_sel_uart_xpic_app_rctsn    0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_xpic_app_rctsn 0x00000000U
#define MSK_NX90_io_config4_sel_spi0_app                    0x00000020U
#define SRT_NX90_io_config4_sel_spi0_app                    5
#define DFLT_VAL_NX90_io_config4_sel_spi0_app               0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_spi0_app            0x00000000U
#define MSK_NX90_io_config4_sel_spi0_app_cs1                0x00000040U
#define SRT_NX90_io_config4_sel_spi0_app_cs1                6
#define DFLT_VAL_NX90_io_config4_sel_spi0_app_cs1           0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_spi0_app_cs1        0x00000000U
#define MSK_NX90_io_config4_sel_spi2_app                    0x00000080U
#define SRT_NX90_io_config4_sel_spi2_app                    7
#define DFLT_VAL_NX90_io_config4_sel_spi2_app               0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app            0x00000000U
#define MSK_NX90_io_config4_sel_spi2_app_cs1                0x00000100U
#define SRT_NX90_io_config4_sel_spi2_app_cs1                8
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_cs1           0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_cs1        0x00000000U
#define MSK_NX90_io_config4_sel_spi2_app_cs2                0x00000200U
#define SRT_NX90_io_config4_sel_spi2_app_cs2                9
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_cs2           0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_cs2        0x00000000U
#define MSK_NX90_io_config4_sel_can0_app                    0x00000400U
#define SRT_NX90_io_config4_sel_can0_app                    10
#define DFLT_VAL_NX90_io_config4_sel_can0_app               0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_can0_app            0x00000000U
#define MSK_NX90_io_config4_sel_can1_app                    0x00000800U
#define SRT_NX90_io_config4_sel_can1_app                    11
#define DFLT_VAL_NX90_io_config4_sel_can1_app               0x00000000U
#define DFLT_BF_VAL_NX90_io_config4_sel_can1_app            0x00000000U

/* all used bits of 'NX90_io_config4': */
#define MSK_USED_BITS_NX90_io_config4 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register io_config4_mask */
/* => IO Config4 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config4 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config4_mask       0x00000024U
#define Adr_NX90_asic_ctrl_io_config4_mask 0xFF401224U
#define Adr_NX90_io_config4_mask           0xFF401224U
#define DFLT_VAL_NX90_io_config4_mask      0x00000fffU

#define MSK_NX90_io_config4_mask_sel_i2c_app                     0x00000001U
#define SRT_NX90_io_config4_mask_sel_i2c_app                     0
#define DFLT_VAL_NX90_io_config4_mask_sel_i2c_app                0x00000001U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_i2c_app             0x00000001U
#define MSK_NX90_io_config4_mask_sel_uart_app                    0x00000002U
#define SRT_NX90_io_config4_mask_sel_uart_app                    1
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_app               0x00000002U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_app            0x00000001U
#define MSK_NX90_io_config4_mask_sel_uart_app_rctsn              0x00000004U
#define SRT_NX90_io_config4_mask_sel_uart_app_rctsn              2
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_app_rctsn         0x00000004U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_app_rctsn      0x00000001U
#define MSK_NX90_io_config4_mask_sel_uart_xpic_app               0x00000008U
#define SRT_NX90_io_config4_mask_sel_uart_xpic_app               3
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_xpic_app          0x00000008U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_xpic_app       0x00000001U
#define MSK_NX90_io_config4_mask_sel_uart_xpic_app_rctsn         0x00000010U
#define SRT_NX90_io_config4_mask_sel_uart_xpic_app_rctsn         4
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_xpic_app_rctsn    0x00000010U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_xpic_app_rctsn 0x00000001U
#define MSK_NX90_io_config4_mask_sel_spi0_app                    0x00000020U
#define SRT_NX90_io_config4_mask_sel_spi0_app                    5
#define DFLT_VAL_NX90_io_config4_mask_sel_spi0_app               0x00000020U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi0_app            0x00000001U
#define MSK_NX90_io_config4_mask_sel_spi0_app_cs1                0x00000040U
#define SRT_NX90_io_config4_mask_sel_spi0_app_cs1                6
#define DFLT_VAL_NX90_io_config4_mask_sel_spi0_app_cs1           0x00000040U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi0_app_cs1        0x00000001U
#define MSK_NX90_io_config4_mask_sel_spi2_app                    0x00000080U
#define SRT_NX90_io_config4_mask_sel_spi2_app                    7
#define DFLT_VAL_NX90_io_config4_mask_sel_spi2_app               0x00000080U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi2_app            0x00000001U
#define MSK_NX90_io_config4_mask_sel_spi2_app_cs1                0x00000100U
#define SRT_NX90_io_config4_mask_sel_spi2_app_cs1                8
#define DFLT_VAL_NX90_io_config4_mask_sel_spi2_app_cs1           0x00000100U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi2_app_cs1        0x00000001U
#define MSK_NX90_io_config4_mask_sel_spi2_app_cs2                0x00000200U
#define SRT_NX90_io_config4_mask_sel_spi2_app_cs2                9
#define DFLT_VAL_NX90_io_config4_mask_sel_spi2_app_cs2           0x00000200U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi2_app_cs2        0x00000001U
#define MSK_NX90_io_config4_mask_sel_can0_app                    0x00000400U
#define SRT_NX90_io_config4_mask_sel_can0_app                    10
#define DFLT_VAL_NX90_io_config4_mask_sel_can0_app               0x00000400U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_can0_app            0x00000001U
#define MSK_NX90_io_config4_mask_sel_can1_app                    0x00000800U
#define SRT_NX90_io_config4_mask_sel_can1_app                    11
#define DFLT_VAL_NX90_io_config4_mask_sel_can1_app               0x00000800U
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_can1_app            0x00000001U

/* all used bits of 'NX90_io_config4_mask': */
#define MSK_USED_BITS_NX90_io_config4_mask 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register io_config5 */
/* => IO Config5 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config5_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config5       0x00000028U
#define Adr_NX90_asic_ctrl_io_config5 0xFF401228U
#define Adr_NX90_io_config5           0xFF401228U
#define DFLT_VAL_NX90_io_config5      0x00000000U

#define MSK_NX90_io_config5_sel_pio_app         0x000000ffU
#define SRT_NX90_io_config5_sel_pio_app         0
#define DFLT_VAL_NX90_io_config5_sel_pio_app    0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_pio_app 0x00000000U
#define MSK_NX90_io_config5_sel_mled4           0x00000100U
#define SRT_NX90_io_config5_sel_mled4           8
#define DFLT_VAL_NX90_io_config5_sel_mled4      0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled4   0x00000000U
#define MSK_NX90_io_config5_sel_mled5           0x00000200U
#define SRT_NX90_io_config5_sel_mled5           9
#define DFLT_VAL_NX90_io_config5_sel_mled5      0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled5   0x00000000U
#define MSK_NX90_io_config5_sel_mled6           0x00000400U
#define SRT_NX90_io_config5_sel_mled6           10
#define DFLT_VAL_NX90_io_config5_sel_mled6      0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled6   0x00000000U
#define MSK_NX90_io_config5_sel_mled7           0x00000800U
#define SRT_NX90_io_config5_sel_mled7           11
#define DFLT_VAL_NX90_io_config5_sel_mled7      0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled7   0x00000000U
#define MSK_NX90_io_config5_sel_mled8           0x00001000U
#define SRT_NX90_io_config5_sel_mled8           12
#define DFLT_VAL_NX90_io_config5_sel_mled8      0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled8   0x00000000U
#define MSK_NX90_io_config5_sel_mled9           0x00002000U
#define SRT_NX90_io_config5_sel_mled9           13
#define DFLT_VAL_NX90_io_config5_sel_mled9      0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled9   0x00000000U
#define MSK_NX90_io_config5_sel_mled10          0x00004000U
#define SRT_NX90_io_config5_sel_mled10          14
#define DFLT_VAL_NX90_io_config5_sel_mled10     0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled10  0x00000000U
#define MSK_NX90_io_config5_sel_mled11          0x00008000U
#define SRT_NX90_io_config5_sel_mled11          15
#define DFLT_VAL_NX90_io_config5_sel_mled11     0x00000000U
#define DFLT_BF_VAL_NX90_io_config5_sel_mled11  0x00000000U

/* all used bits of 'NX90_io_config5': */
#define MSK_USED_BITS_NX90_io_config5 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config5_mask */
/* => IO Config5 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config5 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config5_mask       0x0000002CU
#define Adr_NX90_asic_ctrl_io_config5_mask 0xFF40122CU
#define Adr_NX90_io_config5_mask           0xFF40122CU
#define DFLT_VAL_NX90_io_config5_mask      0x0000ffffU

#define MSK_NX90_io_config5_mask_sel_pio_app         0x000000ffU
#define SRT_NX90_io_config5_mask_sel_pio_app         0
#define DFLT_VAL_NX90_io_config5_mask_sel_pio_app    0x000000ffU
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_pio_app 0x000000ffU
#define MSK_NX90_io_config5_mask_sel_mled4           0x00000100U
#define SRT_NX90_io_config5_mask_sel_mled4           8
#define DFLT_VAL_NX90_io_config5_mask_sel_mled4      0x00000100U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled4   0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled5           0x00000200U
#define SRT_NX90_io_config5_mask_sel_mled5           9
#define DFLT_VAL_NX90_io_config5_mask_sel_mled5      0x00000200U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled5   0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled6           0x00000400U
#define SRT_NX90_io_config5_mask_sel_mled6           10
#define DFLT_VAL_NX90_io_config5_mask_sel_mled6      0x00000400U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled6   0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled7           0x00000800U
#define SRT_NX90_io_config5_mask_sel_mled7           11
#define DFLT_VAL_NX90_io_config5_mask_sel_mled7      0x00000800U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled7   0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled8           0x00001000U
#define SRT_NX90_io_config5_mask_sel_mled8           12
#define DFLT_VAL_NX90_io_config5_mask_sel_mled8      0x00001000U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled8   0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled9           0x00002000U
#define SRT_NX90_io_config5_mask_sel_mled9           13
#define DFLT_VAL_NX90_io_config5_mask_sel_mled9      0x00002000U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled9   0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled10          0x00004000U
#define SRT_NX90_io_config5_mask_sel_mled10          14
#define DFLT_VAL_NX90_io_config5_mask_sel_mled10     0x00004000U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled10  0x00000001U
#define MSK_NX90_io_config5_mask_sel_mled11          0x00008000U
#define SRT_NX90_io_config5_mask_sel_mled11          15
#define DFLT_VAL_NX90_io_config5_mask_sel_mled11     0x00008000U
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled11  0x00000001U

/* all used bits of 'NX90_io_config5_mask': */
#define MSK_USED_BITS_NX90_io_config5_mask 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register io_config6 */
/* => IO Config6 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config6_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config6       0x00000030U
#define Adr_NX90_asic_ctrl_io_config6 0xFF401230U
#define Adr_NX90_io_config6           0xFF401230U
#define DFLT_VAL_NX90_io_config6      0x00000000U

#define MSK_NX90_io_config6_sel_io_link0          0x00000001U
#define SRT_NX90_io_config6_sel_io_link0          0
#define DFLT_VAL_NX90_io_config6_sel_io_link0     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link0  0x00000000U
#define MSK_NX90_io_config6_sel_io_link0b         0x00000002U
#define SRT_NX90_io_config6_sel_io_link0b         1
#define DFLT_VAL_NX90_io_config6_sel_io_link0b    0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link0b 0x00000000U
#define MSK_NX90_io_config6_sel_io_link1          0x00000004U
#define SRT_NX90_io_config6_sel_io_link1          2
#define DFLT_VAL_NX90_io_config6_sel_io_link1     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link1  0x00000000U
#define MSK_NX90_io_config6_sel_io_link1b         0x00000008U
#define SRT_NX90_io_config6_sel_io_link1b         3
#define DFLT_VAL_NX90_io_config6_sel_io_link1b    0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link1b 0x00000000U
#define MSK_NX90_io_config6_sel_io_link2          0x00000010U
#define SRT_NX90_io_config6_sel_io_link2          4
#define DFLT_VAL_NX90_io_config6_sel_io_link2     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link2  0x00000000U
#define MSK_NX90_io_config6_sel_io_link3          0x00000020U
#define SRT_NX90_io_config6_sel_io_link3          5
#define DFLT_VAL_NX90_io_config6_sel_io_link3     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link3  0x00000000U
#define MSK_NX90_io_config6_sel_io_link4          0x00000040U
#define SRT_NX90_io_config6_sel_io_link4          6
#define DFLT_VAL_NX90_io_config6_sel_io_link4     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link4  0x00000000U
#define MSK_NX90_io_config6_sel_io_link5          0x00000080U
#define SRT_NX90_io_config6_sel_io_link5          7
#define DFLT_VAL_NX90_io_config6_sel_io_link5     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link5  0x00000000U
#define MSK_NX90_io_config6_sel_io_link6          0x00000100U
#define SRT_NX90_io_config6_sel_io_link6          8
#define DFLT_VAL_NX90_io_config6_sel_io_link6     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link6  0x00000000U
#define MSK_NX90_io_config6_sel_io_link7          0x00000200U
#define SRT_NX90_io_config6_sel_io_link7          9
#define DFLT_VAL_NX90_io_config6_sel_io_link7     0x00000000U
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link7  0x00000000U

/* all used bits of 'NX90_io_config6': */
#define MSK_USED_BITS_NX90_io_config6 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register io_config6_mask */
/* => IO Config6 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config6 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config6_mask       0x00000034U
#define Adr_NX90_asic_ctrl_io_config6_mask 0xFF401234U
#define Adr_NX90_io_config6_mask           0xFF401234U
#define DFLT_VAL_NX90_io_config6_mask      0x000003ffU

#define MSK_NX90_io_config6_mask_sel_io_link0          0x00000001U
#define SRT_NX90_io_config6_mask_sel_io_link0          0
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link0     0x00000001U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link0  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link0b         0x00000002U
#define SRT_NX90_io_config6_mask_sel_io_link0b         1
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link0b    0x00000002U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link0b 0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link1          0x00000004U
#define SRT_NX90_io_config6_mask_sel_io_link1          2
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link1     0x00000004U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link1  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link1b         0x00000008U
#define SRT_NX90_io_config6_mask_sel_io_link1b         3
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link1b    0x00000008U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link1b 0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link2          0x00000010U
#define SRT_NX90_io_config6_mask_sel_io_link2          4
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link2     0x00000010U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link2  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link3          0x00000020U
#define SRT_NX90_io_config6_mask_sel_io_link3          5
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link3     0x00000020U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link3  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link4          0x00000040U
#define SRT_NX90_io_config6_mask_sel_io_link4          6
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link4     0x00000040U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link4  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link5          0x00000080U
#define SRT_NX90_io_config6_mask_sel_io_link5          7
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link5     0x00000080U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link5  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link6          0x00000100U
#define SRT_NX90_io_config6_mask_sel_io_link6          8
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link6     0x00000100U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link6  0x00000001U
#define MSK_NX90_io_config6_mask_sel_io_link7          0x00000200U
#define SRT_NX90_io_config6_mask_sel_io_link7          9
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link7     0x00000200U
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link7  0x00000001U

/* all used bits of 'NX90_io_config6_mask': */
#define MSK_USED_BITS_NX90_io_config6_mask 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register io_config7 */
/* => IO Config7 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config7_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config7       0x00000038U
#define Adr_NX90_asic_ctrl_io_config7 0xFF401238U
#define Adr_NX90_io_config7           0xFF401238U
#define DFLT_VAL_NX90_io_config7      0x00000000U

#define MSK_NX90_io_config7_sel_eth_cfg          0x0000001fU
#define SRT_NX90_io_config7_sel_eth_cfg          0
#define DFLT_VAL_NX90_io_config7_sel_eth_cfg     0x00000000U
#define DFLT_BF_VAL_NX90_io_config7_sel_eth_cfg  0x00000000U
#define MSK_NX90_io_config7_sel_eth_mdio         0x00000060U
#define SRT_NX90_io_config7_sel_eth_mdio         5
#define DFLT_VAL_NX90_io_config7_sel_eth_mdio    0x00000000U
#define DFLT_BF_VAL_NX90_io_config7_sel_eth_mdio 0x00000000U
#define MSK_NX90_io_config7_sel_sqi_cs1          0x00000080U
#define SRT_NX90_io_config7_sel_sqi_cs1          7
#define DFLT_VAL_NX90_io_config7_sel_sqi_cs1     0x00000000U
#define DFLT_BF_VAL_NX90_io_config7_sel_sqi_cs1  0x00000000U
#define MSK_NX90_io_config7_sel_sqi_cs2          0x00000100U
#define SRT_NX90_io_config7_sel_sqi_cs2          8
#define DFLT_VAL_NX90_io_config7_sel_sqi_cs2     0x00000000U
#define DFLT_BF_VAL_NX90_io_config7_sel_sqi_cs2  0x00000000U

/* all used bits of 'NX90_io_config7': */
#define MSK_USED_BITS_NX90_io_config7 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register io_config7_mask */
/* => IO Config7 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config7 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config7_mask       0x0000003CU
#define Adr_NX90_asic_ctrl_io_config7_mask 0xFF40123CU
#define Adr_NX90_io_config7_mask           0xFF40123CU
#define DFLT_VAL_NX90_io_config7_mask      0x000001ffU

#define MSK_NX90_io_config7_mask_sel_eth_cfg          0x0000001fU
#define SRT_NX90_io_config7_mask_sel_eth_cfg          0
#define DFLT_VAL_NX90_io_config7_mask_sel_eth_cfg     0x0000001fU
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_eth_cfg  0x0000001fU
#define MSK_NX90_io_config7_mask_sel_eth_mdio         0x00000060U
#define SRT_NX90_io_config7_mask_sel_eth_mdio         5
#define DFLT_VAL_NX90_io_config7_mask_sel_eth_mdio    0x00000060U
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_eth_mdio 0x00000003U
#define MSK_NX90_io_config7_mask_sel_sqi_cs1          0x00000080U
#define SRT_NX90_io_config7_mask_sel_sqi_cs1          7
#define DFLT_VAL_NX90_io_config7_mask_sel_sqi_cs1     0x00000080U
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_sqi_cs1  0x00000001U
#define MSK_NX90_io_config7_mask_sel_sqi_cs2          0x00000100U
#define SRT_NX90_io_config7_mask_sel_sqi_cs2          8
#define DFLT_VAL_NX90_io_config7_mask_sel_sqi_cs2     0x00000100U
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_sqi_cs2  0x00000001U

/* all used bits of 'NX90_io_config7_mask': */
#define MSK_USED_BITS_NX90_io_config7_mask 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register io_config8 */
/* => IO Config8 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have effect if according bit in io_config8_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config8       0x00000040U
#define Adr_NX90_asic_ctrl_io_config8 0xFF401240U
#define Adr_NX90_io_config8           0xFF401240U
#define DFLT_VAL_NX90_io_config8      0x00000000U

#define MSK_NX90_io_config8_sel_arm_trace_cfg         0x00000003U
#define SRT_NX90_io_config8_sel_arm_trace_cfg         0
#define DFLT_VAL_NX90_io_config8_sel_arm_trace_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_io_config8_sel_arm_trace_cfg 0x00000000U

/* all used bits of 'NX90_io_config8': */
#define MSK_USED_BITS_NX90_io_config8 0x00000003U

/* --------------------------------------------------------------------- */
/* Register io_config8_mask */
/* => IO Config8 Mask Register: */
/*    This register might be used to lock special IO configurations for restricted netX devices. \ */
/*    Any bit of the io_config8 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config8_mask       0x00000044U
#define Adr_NX90_asic_ctrl_io_config8_mask 0xFF401244U
#define Adr_NX90_io_config8_mask           0xFF401244U
#define DFLT_VAL_NX90_io_config8_mask      0x00000003U

#define MSK_NX90_io_config8_mask_sel_arm_trace_cfg         0x00000003U
#define SRT_NX90_io_config8_mask_sel_arm_trace_cfg         0
#define DFLT_VAL_NX90_io_config8_mask_sel_arm_trace_cfg    0x00000003U
#define DFLT_BF_VAL_NX90_io_config8_mask_sel_arm_trace_cfg 0x00000003U

/* all used bits of 'NX90_io_config8_mask': */
#define MSK_USED_BITS_NX90_io_config8_mask 0x00000003U

/* --------------------------------------------------------------------- */
/* Register phy_ctrl0 */
/* => PHY Control Register: */
/*    This register contains some static configuration of the Ethernet PHY. */
/*    Changes will only have effect if according bit in adr_phy_ctrl0_mask-register is set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_phy_ctrl0       0x00000048U
#define Adr_NX90_asic_ctrl_phy_ctrl0 0xFF401248U
#define Adr_NX90_phy_ctrl0           0xFF401248U
#define DFLT_VAL_NX90_phy_ctrl0      0x00000fffU

#define MSK_NX90_phy_ctrl0_phy0_led_invert         0x0000003fU
#define SRT_NX90_phy_ctrl0_phy0_led_invert         0
#define DFLT_VAL_NX90_phy_ctrl0_phy0_led_invert    0x0000003fU
#define DFLT_BF_VAL_NX90_phy_ctrl0_phy0_led_invert 0x0000003fU
#define MSK_NX90_phy_ctrl0_phy1_led_invert         0x00000fc0U
#define SRT_NX90_phy_ctrl0_phy1_led_invert         6
#define DFLT_VAL_NX90_phy_ctrl0_phy1_led_invert    0x00000fc0U
#define DFLT_BF_VAL_NX90_phy_ctrl0_phy1_led_invert 0x0000003fU

/* all used bits of 'NX90_phy_ctrl0': */
#define MSK_USED_BITS_NX90_phy_ctrl0 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register phy_ctrl0_mask */
/* => PHY Control Register Mask: */
/*    This register might be used to lock PHY Control register. \ */
/*    Any bit of the phy_ctrl0 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_phy_ctrl0_mask       0x0000004CU
#define Adr_NX90_asic_ctrl_phy_ctrl0_mask 0xFF40124CU
#define Adr_NX90_phy_ctrl0_mask           0xFF40124CU
#define DFLT_VAL_NX90_phy_ctrl0_mask      0x00000fffU

#define MSK_NX90_phy_ctrl0_mask_phy0_led_invert         0x0000003fU
#define SRT_NX90_phy_ctrl0_mask_phy0_led_invert         0
#define DFLT_VAL_NX90_phy_ctrl0_mask_phy0_led_invert    0x0000003fU
#define DFLT_BF_VAL_NX90_phy_ctrl0_mask_phy0_led_invert 0x0000003fU
#define MSK_NX90_phy_ctrl0_mask_phy1_led_invert         0x00000fc0U
#define SRT_NX90_phy_ctrl0_mask_phy1_led_invert         6
#define DFLT_VAL_NX90_phy_ctrl0_mask_phy1_led_invert    0x00000fc0U
#define DFLT_BF_VAL_NX90_phy_ctrl0_mask_phy1_led_invert 0x0000003fU

/* all used bits of 'NX90_phy_ctrl0_mask': */
#define MSK_USED_BITS_NX90_phy_ctrl0_mask 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register clock_enable0 */
/* => Global Clock Enable Register: */
/*    Use this registers to disable modules completely for power saving purposes. */
/*    Changes will only have effect if according bit in clock_enable_mask-register is set. */
/*    Note: For low power consumption at power on, all switchable clocks are disabled after reset and must be enabled before module usage. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable0       0x00000050U
#define Adr_NX90_asic_ctrl_clock_enable0 0xFF401250U
#define Adr_NX90_clock_enable0           0xFF401250U
#define DFLT_VAL_NX90_clock_enable0      0x00001000U

#define MSK_NX90_clock_enable0_rpec0           0x00000001U
#define SRT_NX90_clock_enable0_rpec0           0
#define DFLT_VAL_NX90_clock_enable0_rpec0      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_rpec0   0x00000000U
#define MSK_NX90_clock_enable0_rpec1           0x00000002U
#define SRT_NX90_clock_enable0_rpec1           1
#define DFLT_VAL_NX90_clock_enable0_rpec1      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_rpec1   0x00000000U
#define MSK_NX90_clock_enable0_tpec0           0x00000004U
#define SRT_NX90_clock_enable0_tpec0           2
#define DFLT_VAL_NX90_clock_enable0_tpec0      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_tpec0   0x00000000U
#define MSK_NX90_clock_enable0_tpec1           0x00000008U
#define SRT_NX90_clock_enable0_tpec1           3
#define DFLT_VAL_NX90_clock_enable0_tpec1      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_tpec1   0x00000000U
#define MSK_NX90_clock_enable0_xmac0           0x00000010U
#define SRT_NX90_clock_enable0_xmac0           4
#define DFLT_VAL_NX90_clock_enable0_xmac0      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_xmac0   0x00000000U
#define MSK_NX90_clock_enable0_xmac1           0x00000020U
#define SRT_NX90_clock_enable0_xmac1           5
#define DFLT_VAL_NX90_clock_enable0_xmac1      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_xmac1   0x00000000U
#define MSK_NX90_clock_enable0_fb0             0x00000040U
#define SRT_NX90_clock_enable0_fb0             6
#define DFLT_VAL_NX90_clock_enable0_fb0        0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_fb0     0x00000000U
#define MSK_NX90_clock_enable0_fb1             0x00000080U
#define SRT_NX90_clock_enable0_fb1             7
#define DFLT_VAL_NX90_clock_enable0_fb1        0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_fb1     0x00000000U
#define MSK_NX90_clock_enable0_xc_misc         0x00000100U
#define SRT_NX90_clock_enable0_xc_misc         8
#define DFLT_VAL_NX90_clock_enable0_xc_misc    0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_xc_misc 0x00000000U
#define MSK_NX90_clock_enable0_xpic0           0x00000200U
#define SRT_NX90_clock_enable0_xpic0           9
#define DFLT_VAL_NX90_clock_enable0_xpic0      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_xpic0   0x00000000U
#define MSK_NX90_clock_enable0_dma_com         0x00000400U
#define SRT_NX90_clock_enable0_dma_com         10
#define DFLT_VAL_NX90_clock_enable0_dma_com    0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_dma_com 0x00000000U
#define MSK_NX90_clock_enable0_arm_app         0x00000800U
#define SRT_NX90_clock_enable0_arm_app         11
#define DFLT_VAL_NX90_clock_enable0_arm_app    0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_arm_app 0x00000000U
#define MSK_NX90_clock_enable0_debug           0x00001000U
#define SRT_NX90_clock_enable0_debug           12
#define DFLT_VAL_NX90_clock_enable0_debug      0x00001000U
#define DFLT_BF_VAL_NX90_clock_enable0_debug   0x00000001U
#define MSK_NX90_clock_enable0_dpm             0x00002000U
#define SRT_NX90_clock_enable0_dpm             13
#define DFLT_VAL_NX90_clock_enable0_dpm        0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable0_dpm     0x00000000U

/* all used bits of 'NX90_clock_enable0': */
#define MSK_USED_BITS_NX90_clock_enable0 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register clock_enable0_mask */
/* => Global Clock Enable Mask Register: */
/*    This register might be used to lock clock_enable0 register. \ */
/*    Any bit of the clock_enable0 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable0_mask       0x00000054U
#define Adr_NX90_asic_ctrl_clock_enable0_mask 0xFF401254U
#define Adr_NX90_clock_enable0_mask           0xFF401254U
#define DFLT_VAL_NX90_clock_enable0_mask      0x00003fffU

#define MSK_NX90_clock_enable0_mask_rpec0           0x00000001U
#define SRT_NX90_clock_enable0_mask_rpec0           0
#define DFLT_VAL_NX90_clock_enable0_mask_rpec0      0x00000001U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_rpec0   0x00000001U
#define MSK_NX90_clock_enable0_mask_rpec1           0x00000002U
#define SRT_NX90_clock_enable0_mask_rpec1           1
#define DFLT_VAL_NX90_clock_enable0_mask_rpec1      0x00000002U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_rpec1   0x00000001U
#define MSK_NX90_clock_enable0_mask_tpec0           0x00000004U
#define SRT_NX90_clock_enable0_mask_tpec0           2
#define DFLT_VAL_NX90_clock_enable0_mask_tpec0      0x00000004U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_tpec0   0x00000001U
#define MSK_NX90_clock_enable0_mask_tpec1           0x00000008U
#define SRT_NX90_clock_enable0_mask_tpec1           3
#define DFLT_VAL_NX90_clock_enable0_mask_tpec1      0x00000008U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_tpec1   0x00000001U
#define MSK_NX90_clock_enable0_mask_xmac0           0x00000010U
#define SRT_NX90_clock_enable0_mask_xmac0           4
#define DFLT_VAL_NX90_clock_enable0_mask_xmac0      0x00000010U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xmac0   0x00000001U
#define MSK_NX90_clock_enable0_mask_xmac1           0x00000020U
#define SRT_NX90_clock_enable0_mask_xmac1           5
#define DFLT_VAL_NX90_clock_enable0_mask_xmac1      0x00000020U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xmac1   0x00000001U
#define MSK_NX90_clock_enable0_mask_fb0             0x00000040U
#define SRT_NX90_clock_enable0_mask_fb0             6
#define DFLT_VAL_NX90_clock_enable0_mask_fb0        0x00000040U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_fb0     0x00000001U
#define MSK_NX90_clock_enable0_mask_fb1             0x00000080U
#define SRT_NX90_clock_enable0_mask_fb1             7
#define DFLT_VAL_NX90_clock_enable0_mask_fb1        0x00000080U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_fb1     0x00000001U
#define MSK_NX90_clock_enable0_mask_xc_misc         0x00000100U
#define SRT_NX90_clock_enable0_mask_xc_misc         8
#define DFLT_VAL_NX90_clock_enable0_mask_xc_misc    0x00000100U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xc_misc 0x00000001U
#define MSK_NX90_clock_enable0_mask_xpic0           0x00000200U
#define SRT_NX90_clock_enable0_mask_xpic0           9
#define DFLT_VAL_NX90_clock_enable0_mask_xpic0      0x00000200U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xpic0   0x00000001U
#define MSK_NX90_clock_enable0_mask_dma_com         0x00000400U
#define SRT_NX90_clock_enable0_mask_dma_com         10
#define DFLT_VAL_NX90_clock_enable0_mask_dma_com    0x00000400U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_dma_com 0x00000001U
#define MSK_NX90_clock_enable0_mask_arm_app         0x00000800U
#define SRT_NX90_clock_enable0_mask_arm_app         11
#define DFLT_VAL_NX90_clock_enable0_mask_arm_app    0x00000800U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_arm_app 0x00000001U
#define MSK_NX90_clock_enable0_mask_debug           0x00001000U
#define SRT_NX90_clock_enable0_mask_debug           12
#define DFLT_VAL_NX90_clock_enable0_mask_debug      0x00001000U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_debug   0x00000001U
#define MSK_NX90_clock_enable0_mask_dpm             0x00002000U
#define SRT_NX90_clock_enable0_mask_dpm             13
#define DFLT_VAL_NX90_clock_enable0_mask_dpm        0x00002000U
#define DFLT_BF_VAL_NX90_clock_enable0_mask_dpm     0x00000001U

/* all used bits of 'NX90_clock_enable0_mask': */
#define MSK_USED_BITS_NX90_clock_enable0_mask 0x00003fffU

/* --------------------------------------------------------------------- */
/* Register clock_enable1 */
/* => Global Clock Enable Register: */
/*    Use this registers to disable modules completely for power saving purposes. */
/*    Changes will only have effect if according bit in clock_enable_mask-register is set. */
/*    Note: For low power consumption at power on, all switchable clocks are disabled after reset and must be enabled before module usage. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable1       0x00000058U
#define Adr_NX90_asic_ctrl_clock_enable1 0xFF401258U
#define Adr_NX90_clock_enable1           0xFF401258U
#define DFLT_VAL_NX90_clock_enable1      0x00000000U

#define MSK_NX90_clock_enable1_xpic1           0x00000001U
#define SRT_NX90_clock_enable1_xpic1           0
#define DFLT_VAL_NX90_clock_enable1_xpic1      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable1_xpic1   0x00000000U
#define MSK_NX90_clock_enable1_dma_app         0x00000002U
#define SRT_NX90_clock_enable1_dma_app         1
#define DFLT_VAL_NX90_clock_enable1_dma_app    0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable1_dma_app 0x00000000U
#define MSK_NX90_clock_enable1_crypt           0x00000004U
#define SRT_NX90_clock_enable1_crypt           2
#define DFLT_VAL_NX90_clock_enable1_crypt      0x00000000U
#define DFLT_BF_VAL_NX90_clock_enable1_crypt   0x00000000U

/* all used bits of 'NX90_clock_enable1': */
#define MSK_USED_BITS_NX90_clock_enable1 0x00000007U

/* --------------------------------------------------------------------- */
/* Register clock_enable1_mask */
/* => Global Clock Enable Mask Register: */
/*    This register might be used to lock clock_enable1 register. \ */
/*    Any bit of the clock_enable1 register can only be set, if the corresponding mask bit in this register is set either. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable1_mask       0x0000005CU
#define Adr_NX90_asic_ctrl_clock_enable1_mask 0xFF40125CU
#define Adr_NX90_clock_enable1_mask           0xFF40125CU
#define DFLT_VAL_NX90_clock_enable1_mask      0x00000007U

#define MSK_NX90_clock_enable1_mask_xpic1           0x00000001U
#define SRT_NX90_clock_enable1_mask_xpic1           0
#define DFLT_VAL_NX90_clock_enable1_mask_xpic1      0x00000001U
#define DFLT_BF_VAL_NX90_clock_enable1_mask_xpic1   0x00000001U
#define MSK_NX90_clock_enable1_mask_dma_app         0x00000002U
#define SRT_NX90_clock_enable1_mask_dma_app         1
#define DFLT_VAL_NX90_clock_enable1_mask_dma_app    0x00000002U
#define DFLT_BF_VAL_NX90_clock_enable1_mask_dma_app 0x00000001U
#define MSK_NX90_clock_enable1_mask_crypt           0x00000004U
#define SRT_NX90_clock_enable1_mask_crypt           2
#define DFLT_VAL_NX90_clock_enable1_mask_crypt      0x00000004U
#define DFLT_BF_VAL_NX90_clock_enable1_mask_crypt   0x00000001U

/* all used bits of 'NX90_clock_enable1_mask': */
#define MSK_USED_BITS_NX90_clock_enable1_mask 0x00000007U

/* --------------------------------------------------------------------- */
/* Register reset_ctrl */
/* => Reset Control Register: */
/*    This register controls the reset functions of the netX chip and indicates the reset state. The reset state */
/*    shows which resets have occurred, allowing the firmware to detect which resets were active. In order to */
/*    determine the source of the last reset, the firmware should evaluate and reset these bits during its start */
/*    sequence. After a power on reset, the RESET_CTRL register is cleared completely. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_reset_ctrl       0x00000060U
#define Adr_NX90_asic_ctrl_reset_ctrl 0xFF401260U
#define Adr_NX90_reset_ctrl           0xFF401260U
#define DFLT_VAL_NX90_reset_ctrl      0x00000000U

#define MSK_NX90_reset_ctrl_RES_IN                   0x00000001U
#define SRT_NX90_reset_ctrl_RES_IN                   0
#define DFLT_VAL_NX90_reset_ctrl_RES_IN              0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_IN           0x00000000U
#define MSK_NX90_reset_ctrl_RES_WDOG                 0x00000002U
#define SRT_NX90_reset_ctrl_RES_WDOG                 1
#define DFLT_VAL_NX90_reset_ctrl_RES_WDOG            0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_WDOG         0x00000000U
#define MSK_NX90_reset_ctrl_RES_HOST                 0x00000004U
#define SRT_NX90_reset_ctrl_RES_HOST                 2
#define DFLT_VAL_NX90_reset_ctrl_RES_HOST            0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_HOST         0x00000000U
#define MSK_NX90_reset_ctrl_RES_FIRMWARE             0x00000008U
#define SRT_NX90_reset_ctrl_RES_FIRMWARE             3
#define DFLT_VAL_NX90_reset_ctrl_RES_FIRMWARE        0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_FIRMWARE     0x00000000U
#define MSK_NX90_reset_ctrl_RES_ARM_COM              0x00000010U
#define SRT_NX90_reset_ctrl_RES_ARM_COM              4
#define DFLT_VAL_NX90_reset_ctrl_RES_ARM_COM         0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_ARM_COM      0x00000000U
#define MSK_NX90_reset_ctrl_RES_ARM_APP              0x00000020U
#define SRT_NX90_reset_ctrl_RES_ARM_APP              5
#define DFLT_VAL_NX90_reset_ctrl_RES_ARM_APP         0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_ARM_APP      0x00000000U
#define MSK_NX90_reset_ctrl_FIRMWARE_STATUS0         0x00100000U
#define SRT_NX90_reset_ctrl_FIRMWARE_STATUS0         20
#define DFLT_VAL_NX90_reset_ctrl_FIRMWARE_STATUS0    0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_FIRMWARE_STATUS0 0x00000000U
#define MSK_NX90_reset_ctrl_FIRMWARE_STATUS1         0x00200000U
#define SRT_NX90_reset_ctrl_FIRMWARE_STATUS1         21
#define DFLT_VAL_NX90_reset_ctrl_FIRMWARE_STATUS1    0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_FIRMWARE_STATUS1 0x00000000U
#define MSK_NX90_reset_ctrl_FIRMWARE_STATUS2         0x00400000U
#define SRT_NX90_reset_ctrl_FIRMWARE_STATUS2         22
#define DFLT_VAL_NX90_reset_ctrl_FIRMWARE_STATUS2    0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_FIRMWARE_STATUS2 0x00000000U
#define MSK_NX90_reset_ctrl_FIRMWARE_STATUS3         0x00800000U
#define SRT_NX90_reset_ctrl_FIRMWARE_STATUS3         23
#define DFLT_VAL_NX90_reset_ctrl_FIRMWARE_STATUS3    0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_FIRMWARE_STATUS3 0x00000000U
#define MSK_NX90_reset_ctrl_RES_REQ_FIRMWARE         0x01000000U
#define SRT_NX90_reset_ctrl_RES_REQ_FIRMWARE         24
#define DFLT_VAL_NX90_reset_ctrl_RES_REQ_FIRMWARE    0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_REQ_FIRMWARE 0x00000000U
#define MSK_NX90_reset_ctrl_RES_REQ_OUT              0x02000000U
#define SRT_NX90_reset_ctrl_RES_REQ_OUT              25
#define DFLT_VAL_NX90_reset_ctrl_RES_REQ_OUT         0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_RES_REQ_OUT      0x00000000U
#define MSK_NX90_reset_ctrl_EN_RES_REQ_OUT           0x04000000U
#define SRT_NX90_reset_ctrl_EN_RES_REQ_OUT           26
#define DFLT_VAL_NX90_reset_ctrl_EN_RES_REQ_OUT      0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_EN_RES_REQ_OUT   0x00000000U
#define MSK_NX90_reset_ctrl_rst_out_n_in_ro          0x08000000U
#define SRT_NX90_reset_ctrl_rst_out_n_in_ro          27
#define DFLT_VAL_NX90_reset_ctrl_rst_out_n_in_ro     0x00000000U
#define DFLT_BF_VAL_NX90_reset_ctrl_rst_out_n_in_ro  0x00000000U

/* all used bits of 'NX90_reset_ctrl': */
#define MSK_USED_BITS_NX90_reset_ctrl 0x0ff0003fU

/* --------------------------------------------------------------------- */
/* Register ahbl_master_ready */
/* => All AHBL master ready signals. */
/*    Before stop, reset or clockdisable of any master, check that this bit of the appropriate master is 1. */
/*    If it is 0, a current access of this master to the system is not finished. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ahbl_master_ready       0x00000064U
#define Adr_NX90_asic_ctrl_ahbl_master_ready 0xFF401264U
#define Adr_NX90_ahbl_master_ready           0xFF401264U

#define MSK_NX90_ahbl_master_ready_val 0x0007ffffU
#define SRT_NX90_ahbl_master_ready_val 0

/* all used bits of 'NX90_ahbl_master_ready': */
#define MSK_USED_BITS_NX90_ahbl_master_ready 0x0007ffffU

/* --------------------------------------------------------------------- */
/* Register system_status */
/* => netX System Status Register. */
/*    This register provides information of special netX system events, e.g: System related interrupt activity, Abort activity. */
/*    Abort or IRQ status flag can be cleared by writing a '1' to the appropriate bits. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_system_status       0x00000074U
#define Adr_NX90_asic_ctrl_system_status 0xFF401274U
#define Adr_NX90_system_status           0xFF401274U

#define MSK_NX90_system_status_lic_err_irq_status   0x00000001U
#define SRT_NX90_system_status_lic_err_irq_status   0
#define MSK_NX90_system_status_extbus_to_irq_status 0x00000002U
#define SRT_NX90_system_status_extbus_to_irq_status 1
#define MSK_NX90_system_status_testmode             0x00000100U
#define SRT_NX90_system_status_testmode             8
#define MSK_NX90_system_status_pw_bod_ok            0x00000200U
#define SRT_NX90_system_status_pw_bod_ok            9
#define MSK_NX90_system_status_pll_bypass           0x00000400U
#define SRT_NX90_system_status_pll_bypass           10
#define MSK_NX90_system_status_quick_count          0x00000800U
#define SRT_NX90_system_status_quick_count          11
#define MSK_NX90_system_status_lic_err_abort_status 0x00010000U
#define SRT_NX90_system_status_lic_err_abort_status 16

/* all used bits of 'NX90_system_status': */
#define MSK_USED_BITS_NX90_system_status 0x00010f03U

/* --------------------------------------------------------------------- */
/* Register systime_feth_ctrl */
/* => Select systime for FETH */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_feth_ctrl       0x00000078U
#define Adr_NX90_asic_ctrl_systime_feth_ctrl 0xFF401278U
#define Adr_NX90_systime_feth_ctrl           0xFF401278U
#define DFLT_VAL_NX90_systime_feth_ctrl      0x00000000U

#define MSK_NX90_systime_feth_ctrl_feth         0x00000003U
#define SRT_NX90_systime_feth_ctrl_feth         0
#define DFLT_VAL_NX90_systime_feth_ctrl_feth    0x00000000U
#define DFLT_BF_VAL_NX90_systime_feth_ctrl_feth 0x00000000U

/* all used bits of 'NX90_systime_feth_ctrl': */
#define MSK_USED_BITS_NX90_systime_feth_ctrl 0x00000003U

/* --------------------------------------------------------------------- */
/* Register systime_gpio_com_ctrl */
/* => Select systime for GPIO_COM */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_gpio_com_ctrl       0x0000007CU
#define Adr_NX90_asic_ctrl_systime_gpio_com_ctrl 0xFF40127CU
#define Adr_NX90_systime_gpio_com_ctrl           0xFF40127CU
#define DFLT_VAL_NX90_systime_gpio_com_ctrl      0x00000000U

#define MSK_NX90_systime_gpio_com_ctrl_gpio_com         0x00000003U
#define SRT_NX90_systime_gpio_com_ctrl_gpio_com         0
#define DFLT_VAL_NX90_systime_gpio_com_ctrl_gpio_com    0x00000000U
#define DFLT_BF_VAL_NX90_systime_gpio_com_ctrl_gpio_com 0x00000000U

/* all used bits of 'NX90_systime_gpio_com_ctrl': */
#define MSK_USED_BITS_NX90_systime_gpio_com_ctrl 0x00000003U

/* --------------------------------------------------------------------- */
/* Register systime_gpio_app_ctrl */
/* => Select systime for GPIO_APP */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_gpio_app_ctrl       0x00000080U
#define Adr_NX90_asic_ctrl_systime_gpio_app_ctrl 0xFF401280U
#define Adr_NX90_systime_gpio_app_ctrl           0xFF401280U
#define DFLT_VAL_NX90_systime_gpio_app_ctrl      0x00000000U

#define MSK_NX90_systime_gpio_app_ctrl_gpio_app         0x00000003U
#define SRT_NX90_systime_gpio_app_ctrl_gpio_app         0
#define DFLT_VAL_NX90_systime_gpio_app_ctrl_gpio_app    0x00000000U
#define DFLT_BF_VAL_NX90_systime_gpio_app_ctrl_gpio_app 0x00000000U

/* all used bits of 'NX90_systime_gpio_app_ctrl': */
#define MSK_USED_BITS_NX90_systime_gpio_app_ctrl 0x00000003U

/* --------------------------------------------------------------------- */
/* Register only_porn */
/* => Firmware Status register: */
/*    This register is not Reset by SW resets, only PORn will reset this register. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from ACCESS_KEY register */
/*    2.: write back access-key to ACCESS_KEY register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_only_porn       0x00000084U
#define Adr_NX90_asic_ctrl_only_porn 0xFF401284U
#define Adr_NX90_only_porn           0xFF401284U
#define DFLT_VAL_NX90_only_porn      0x00000000U

#define MSK_NX90_only_porn_only_porn         0xffffffffU
#define SRT_NX90_only_porn_only_porn         0
#define DFLT_VAL_NX90_only_porn_only_porn    0x00000000U
#define DFLT_BF_VAL_NX90_only_porn_only_porn 0x00000000U

/* all used bits of 'NX90_only_porn': */
#define MSK_USED_BITS_NX90_only_porn 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register only_porn_rom */
/* => Firmware Status register for handling boot/rom-code issues: */
/*    This register is not Reset by SW resets, only PORn will reset this register. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from ACCESS_KEY register */
/*    2.: write back access-key to ACCESS_KEY register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_only_porn_rom       0x00000088U
#define Adr_NX90_asic_ctrl_only_porn_rom 0xFF401288U
#define Adr_NX90_only_porn_rom           0xFF401288U
#define DFLT_VAL_NX90_only_porn_rom      0x00000000U

#define MSK_NX90_only_porn_rom_val         0xffffffffU
#define SRT_NX90_only_porn_rom_val         0
#define DFLT_VAL_NX90_only_porn_rom_val    0x00000000U
#define DFLT_BF_VAL_NX90_only_porn_rom_val 0x00000000U

/* all used bits of 'NX90_only_porn_rom': */
#define MSK_USED_BITS_NX90_only_porn_rom 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register netx_version */
/* => netX Revision Register: */
/*    This register contains information about netX hardware and bootloader revision. */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_version       0x0000008CU
#define Adr_NX90_asic_ctrl_netx_version 0xFF40128CU
#define Adr_NX90_netx_version           0xFF40128CU
#define DFLT_VAL_NX90_netx_version      0x0000000cU

#define MSK_NX90_netx_version_netx_version         0xffffffffU
#define SRT_NX90_netx_version_netx_version         0
#define DFLT_VAL_NX90_netx_version_netx_version    0x0000000cU
#define DFLT_BF_VAL_NX90_netx_version_netx_version 0x0000000cU

/* all used bits of 'NX90_netx_version': */
#define MSK_USED_BITS_NX90_netx_version 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register netx_status */
/* => netX Legacy System Status Configuration Register. */
/*    This Register was implemented in Hilscher HIF module originally. */
/*    From Hilscher Program Reference Guide: The general status of a netX based system is usually indicated by the System LED, which can either */
/*    consist of a dual LED or two single LEDs. */
/*    Access to this register is not protected by any locking or access protection algorithm. */
/*    IMPORTANT: netX50/100/500 Change Note: */
/*       The netX50/100/500 SYS_STA register was byte accessible. This changed: This register is only 32bit accessible. */
/*       In netx50/100/500, write access to bits 0..15 of SYS_STA register can generate an IRQ to external host CPU. */
/*       As the register now is 32bit accessible only, this is changed to whole register access. I.e. any write */
/*       access to this register will generate an host IRQ if enabled. To change the upper 16 bits of this register without */
/*       host IRQ generation, use register rdy_run_cfg. */
/*    Note: */
/*       Changing bits here will also change rdy_run_cfg register bits. */
/*    Note: */
/*       Bits 0..3 and 8..15 are read-only-mirrored to DPM/Host Status register dpm_sys_sta (DPM_HOST_SYS_STAT) (Area DPM). */
/*       Read-only bits 4..7 can be programmed by DPM/Host Status register dpm_sys_sta (DPM_HOST_SYS_STAT) (Area DPM). */
/*    Note: */
/*       Don't spend too much time in searching a deeper sense in this register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_status       0x00000090U
#define Adr_NX90_asic_ctrl_netx_status 0xFF401290U
#define Adr_NX90_netx_status           0xFF401290U
#define DFLT_VAL_NX90_netx_status      0x0003f000U

#define MSK_NX90_netx_status_RDY                   0x00000001U
#define SRT_NX90_netx_status_RDY                   0
#define DFLT_VAL_NX90_netx_status_RDY              0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_RDY           0x00000000U
#define MSK_NX90_netx_status_RUN                   0x00000002U
#define SRT_NX90_netx_status_RUN                   1
#define DFLT_VAL_NX90_netx_status_RUN              0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_RUN           0x00000000U
#define MSK_NX90_netx_status_NETX_STATE            0x0000000cU
#define SRT_NX90_netx_status_NETX_STATE            2
#define DFLT_VAL_NX90_netx_status_NETX_STATE       0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_NETX_STATE    0x00000000U
#define MSK_NX90_netx_status_HOST_STATE_ro         0x000000f0U
#define SRT_NX90_netx_status_HOST_STATE_ro         4
#define DFLT_VAL_NX90_netx_status_HOST_STATE_ro    0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_HOST_STATE_ro 0x00000000U
#define MSK_NX90_netx_status_NETX_STA_CODE         0x0000ff00U
#define SRT_NX90_netx_status_NETX_STA_CODE         8
#define DFLT_VAL_NX90_netx_status_NETX_STA_CODE    0x0000f000U
#define DFLT_BF_VAL_NX90_netx_status_NETX_STA_CODE 0x000000f0U
#define MSK_NX90_netx_status_RDY_IN                0x00010000U
#define SRT_NX90_netx_status_RDY_IN                16
#define DFLT_VAL_NX90_netx_status_RDY_IN           0x00010000U
#define DFLT_BF_VAL_NX90_netx_status_RDY_IN        0x00000001U
#define MSK_NX90_netx_status_RUN_IN                0x00020000U
#define SRT_NX90_netx_status_RUN_IN                17
#define DFLT_VAL_NX90_netx_status_RUN_IN           0x00020000U
#define DFLT_BF_VAL_NX90_netx_status_RUN_IN        0x00000001U
#define MSK_NX90_netx_status_RDY_POL               0x00040000U
#define SRT_NX90_netx_status_RDY_POL               18
#define DFLT_VAL_NX90_netx_status_RDY_POL          0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_RDY_POL       0x00000000U
#define MSK_NX90_netx_status_RUN_POL               0x00080000U
#define SRT_NX90_netx_status_RUN_POL               19
#define DFLT_VAL_NX90_netx_status_RUN_POL          0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_RUN_POL       0x00000000U
#define MSK_NX90_netx_status_RDY_DRV               0x01000000U
#define SRT_NX90_netx_status_RDY_DRV               24
#define DFLT_VAL_NX90_netx_status_RDY_DRV          0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_RDY_DRV       0x00000000U
#define MSK_NX90_netx_status_RUN_DRV               0x02000000U
#define SRT_NX90_netx_status_RUN_DRV               25
#define DFLT_VAL_NX90_netx_status_RUN_DRV          0x00000000U
#define DFLT_BF_VAL_NX90_netx_status_RUN_DRV       0x00000000U

/* all used bits of 'NX90_netx_status': */
#define MSK_USED_BITS_NX90_netx_status 0x030fffffU

/* --------------------------------------------------------------------- */
/* Register rdy_run_cfg */
/* => netX Legacy RDY/RUN IO System Status Configuration Register. */
/*    RDY/RUN signal programming was implemented in Hilscher HIF module originally. */
/*    From Hilscher Program Reference Guide: The general status of a netX based system is usually indicated by the System LED, which can either */
/*    consist of a dual LED or two single LEDs. */
/*    Access to this register is not protected by any locking or access protection algorithm. */
/*    Note: */
/*       Use this register to change the upper 16 bits of sys_sta (SYS_STA) register witout */
/*       host IRQ generation. For further information see sys_sta register description. Changing bits here */
/*       will also change sys_sta register bits, however no host IRQ will be generated. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_rdy_run_cfg       0x00000094U
#define Adr_NX90_asic_ctrl_rdy_run_cfg 0xFF401294U
#define Adr_NX90_rdy_run_cfg           0xFF401294U
#define DFLT_VAL_NX90_rdy_run_cfg      0x00030000U

#define MSK_NX90_rdy_run_cfg_RDY             0x00000001U
#define SRT_NX90_rdy_run_cfg_RDY             0
#define DFLT_VAL_NX90_rdy_run_cfg_RDY        0x00000000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RDY     0x00000000U
#define MSK_NX90_rdy_run_cfg_RUN             0x00000002U
#define SRT_NX90_rdy_run_cfg_RUN             1
#define DFLT_VAL_NX90_rdy_run_cfg_RUN        0x00000000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RUN     0x00000000U
#define MSK_NX90_rdy_run_cfg_RDY_IN          0x00010000U
#define SRT_NX90_rdy_run_cfg_RDY_IN          16
#define DFLT_VAL_NX90_rdy_run_cfg_RDY_IN     0x00010000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RDY_IN  0x00000001U
#define MSK_NX90_rdy_run_cfg_RUN_IN          0x00020000U
#define SRT_NX90_rdy_run_cfg_RUN_IN          17
#define DFLT_VAL_NX90_rdy_run_cfg_RUN_IN     0x00020000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RUN_IN  0x00000001U
#define MSK_NX90_rdy_run_cfg_RDY_POL         0x00040000U
#define SRT_NX90_rdy_run_cfg_RDY_POL         18
#define DFLT_VAL_NX90_rdy_run_cfg_RDY_POL    0x00000000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RDY_POL 0x00000000U
#define MSK_NX90_rdy_run_cfg_RUN_POL         0x00080000U
#define SRT_NX90_rdy_run_cfg_RUN_POL         19
#define DFLT_VAL_NX90_rdy_run_cfg_RUN_POL    0x00000000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RUN_POL 0x00000000U
#define MSK_NX90_rdy_run_cfg_RDY_DRV         0x01000000U
#define SRT_NX90_rdy_run_cfg_RDY_DRV         24
#define DFLT_VAL_NX90_rdy_run_cfg_RDY_DRV    0x00000000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RDY_DRV 0x00000000U
#define MSK_NX90_rdy_run_cfg_RUN_DRV         0x02000000U
#define SRT_NX90_rdy_run_cfg_RUN_DRV         25
#define DFLT_VAL_NX90_rdy_run_cfg_RUN_DRV    0x00000000U
#define DFLT_BF_VAL_NX90_rdy_run_cfg_RUN_DRV 0x00000000U

/* all used bits of 'NX90_rdy_run_cfg': */
#define MSK_USED_BITS_NX90_rdy_run_cfg 0x030f0003U

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_hifmem_sdram */
/* => Firewall configuration register for the HIFMEM_SDRAM NETX AHB channel. */
/*    IMPORTANT: */
/*      Changing permissions must not be done while any master accesses the slave protected by this register. */
/*      If permissions are changed during an access a whole system lockup could occur. */
/*    Note: */
/*      APP-side masters are: DPM0, DPM1, XC01, XPIC_COM, ARM_COM, DMAC_COM. */
/*      COM-side masters are: IDPM_MASTER, XPIC_APP, ARM_APP, DMAC_APP. */
/*      Other masters which cannot be filtered but globally disabled are: IPC_MASTER, DEBUG_MASTER. */
/*    Note: */
/*      A denied write access will be ignored. */
/*      A denied read access will return unpredictable data. */
/*      A denied access will generate an ERROR-response (abort) if the appropriate abort_en-bit is set. */
/*      A denied access will generate an interrupt in the ASIC_CTRL IRQ registers, which is maskable there. */
/*    Note: */
/*      This register can be locked to protect it from reconfiguration by ASIC_CTRL_COM-netx_lock-lock_firewall. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_hifmem_sdram       0x00000098U
#define Adr_NX90_asic_ctrl_firewall_cfg_hifmem_sdram 0xFF401298U
#define Adr_NX90_firewall_cfg_hifmem_sdram           0xFF401298U
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram      0x00000033U

#define MSK_NX90_firewall_cfg_hifmem_sdram_wp_com               0x00000001U
#define SRT_NX90_firewall_cfg_hifmem_sdram_wp_com               0
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_wp_com          0x00000001U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_wp_com       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_sdram_wp_app               0x00000002U
#define SRT_NX90_firewall_cfg_hifmem_sdram_wp_app               1
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_wp_app          0x00000002U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_wp_app       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_sdram_rp_com               0x00000010U
#define SRT_NX90_firewall_cfg_hifmem_sdram_rp_com               4
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_rp_com          0x00000010U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_rp_com       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_sdram_rp_app               0x00000020U
#define SRT_NX90_firewall_cfg_hifmem_sdram_rp_app               5
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_rp_app          0x00000020U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_rp_app       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_sdram_abort_en_com         0x00000100U
#define SRT_NX90_firewall_cfg_hifmem_sdram_abort_en_com         8
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_abort_en_com    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_abort_en_com 0x00000000U
#define MSK_NX90_firewall_cfg_hifmem_sdram_abort_en_app         0x00000200U
#define SRT_NX90_firewall_cfg_hifmem_sdram_abort_en_app         9
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_abort_en_app    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_abort_en_app 0x00000000U

/* all used bits of 'NX90_firewall_cfg_hifmem_sdram': */
#define MSK_USED_BITS_NX90_firewall_cfg_hifmem_sdram 0x00000333U

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_hifmem_amem */
/* => Firewall configuration register for the HIFMEM_AMEM NETX AHB channel. */
/*    IMPORTANT: */
/*      Changing permissions must not be done while any master accesses the slave protected by this register. */
/*      If permissions are changed during an access a whole system lockup could occur. */
/*    Note: */
/*      APP-side masters are: DPM0, DPM1, XC01, XPIC_COM, ARM_COM, DMAC_COM. */
/*      COM-side masters are: IDPM_MASTER, XPIC_APP, ARM_APP, DMAC_APP. */
/*      Other masters which cannot be filtered but globally disabled are: IPC_MASTER, DEBUG_MASTER. */
/*    Note: */
/*      A denied write access will be ignored. */
/*      A denied read access will return unpredictable data. */
/*      A denied access will generate an ERROR-response (abort) if the appropriate abort_en-bit is set. */
/*      A denied access will generate an interrupt in the ASIC_CTRL IRQ registers, which is maskable there. */
/*    Note: */
/*      This register can be locked to protect it from reconfiguration by ASIC_CTRL_COM-netx_lock-lock_firewall. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_hifmem_amem       0x0000009CU
#define Adr_NX90_asic_ctrl_firewall_cfg_hifmem_amem 0xFF40129CU
#define Adr_NX90_firewall_cfg_hifmem_amem           0xFF40129CU
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem      0x00000033U

#define MSK_NX90_firewall_cfg_hifmem_amem_wp_com               0x00000001U
#define SRT_NX90_firewall_cfg_hifmem_amem_wp_com               0
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_wp_com          0x00000001U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_wp_com       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_amem_wp_app               0x00000002U
#define SRT_NX90_firewall_cfg_hifmem_amem_wp_app               1
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_wp_app          0x00000002U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_wp_app       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_amem_rp_com               0x00000010U
#define SRT_NX90_firewall_cfg_hifmem_amem_rp_com               4
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_rp_com          0x00000010U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_rp_com       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_amem_rp_app               0x00000020U
#define SRT_NX90_firewall_cfg_hifmem_amem_rp_app               5
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_rp_app          0x00000020U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_rp_app       0x00000001U
#define MSK_NX90_firewall_cfg_hifmem_amem_abort_en_com         0x00000100U
#define SRT_NX90_firewall_cfg_hifmem_amem_abort_en_com         8
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_abort_en_com    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_abort_en_com 0x00000000U
#define MSK_NX90_firewall_cfg_hifmem_amem_abort_en_app         0x00000200U
#define SRT_NX90_firewall_cfg_hifmem_amem_abort_en_app         9
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_abort_en_app    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_abort_en_app 0x00000000U

/* all used bits of 'NX90_firewall_cfg_hifmem_amem': */
#define MSK_USED_BITS_NX90_firewall_cfg_hifmem_amem 0x00000333U

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_sqirom */
/* => Firewall configuration register for the SQIROM NETX AHB channel. */
/*    IMPORTANT: */
/*      Changing permissions must not be done while any master accesses the slave protected by this register. */
/*      If permissions are changed during an access a whole system lockup could occur. */
/*    Note: */
/*      APP-side masters are: DPM0, DPM1, XC01, XPIC_COM, ARM_COM, DMAC_COM. */
/*      COM-side masters are: IDPM_MASTER, XPIC_APP, ARM_APP, DMAC_APP. */
/*      Other masters which cannot be filtered but globally disabled are: IPC_MASTER, DEBUG_MASTER. */
/*    Note: */
/*      A denied write access will be ignored. */
/*      A denied read access will return unpredictable data. */
/*      A denied access will generate an ERROR-response (abort) if the appropriate abort_en-bit is set. */
/*      A denied access will generate an interrupt in the ASIC_CTRL IRQ registers, which is maskable there. */
/*    Note: */
/*      This register can be locked to protect it from reconfiguration by ASIC_CTRL_COM-netx_lock-lock_firewall. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_sqirom       0x000000A0U
#define Adr_NX90_asic_ctrl_firewall_cfg_sqirom 0xFF4012A0U
#define Adr_NX90_firewall_cfg_sqirom           0xFF4012A0U
#define DFLT_VAL_NX90_firewall_cfg_sqirom      0x00000033U

#define MSK_NX90_firewall_cfg_sqirom_wp_com               0x00000001U
#define SRT_NX90_firewall_cfg_sqirom_wp_com               0
#define DFLT_VAL_NX90_firewall_cfg_sqirom_wp_com          0x00000001U
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_wp_com       0x00000001U
#define MSK_NX90_firewall_cfg_sqirom_wp_app               0x00000002U
#define SRT_NX90_firewall_cfg_sqirom_wp_app               1
#define DFLT_VAL_NX90_firewall_cfg_sqirom_wp_app          0x00000002U
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_wp_app       0x00000001U
#define MSK_NX90_firewall_cfg_sqirom_rp_com               0x00000010U
#define SRT_NX90_firewall_cfg_sqirom_rp_com               4
#define DFLT_VAL_NX90_firewall_cfg_sqirom_rp_com          0x00000010U
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_rp_com       0x00000001U
#define MSK_NX90_firewall_cfg_sqirom_rp_app               0x00000020U
#define SRT_NX90_firewall_cfg_sqirom_rp_app               5
#define DFLT_VAL_NX90_firewall_cfg_sqirom_rp_app          0x00000020U
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_rp_app       0x00000001U
#define MSK_NX90_firewall_cfg_sqirom_abort_en_com         0x00000100U
#define SRT_NX90_firewall_cfg_sqirom_abort_en_com         8
#define DFLT_VAL_NX90_firewall_cfg_sqirom_abort_en_com    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_abort_en_com 0x00000000U
#define MSK_NX90_firewall_cfg_sqirom_abort_en_app         0x00000200U
#define SRT_NX90_firewall_cfg_sqirom_abort_en_app         9
#define DFLT_VAL_NX90_firewall_cfg_sqirom_abort_en_app    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_abort_en_app 0x00000000U

/* all used bits of 'NX90_firewall_cfg_sqirom': */
#define MSK_USED_BITS_NX90_firewall_cfg_sqirom 0x00000333U

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_crypt */
/* => Firewall configuration register for the CRYPT NETX AHB channel. */
/*    IMPORTANT: */
/*      Changing permissions must not be done while any master accesses the slave protected by this register. */
/*      If permissions are changed during an access a whole system lockup could occur. */
/*    Note: */
/*      APP-side masters are: DPM0, DPM1, XC01, XPIC_COM, ARM_COM, DMAC_COM. */
/*      COM-side masters are: IDPM_MASTER, XPIC_APP, ARM_APP, DMAC_APP. */
/*      Other masters which cannot be filtered but globally disabled are: IPC_MASTER, DEBUG_MASTER. */
/*    Note: */
/*      A denied write access will be ignored. */
/*      A denied read access will return unpredictable data. */
/*      A denied access will generate an ERROR-response (abort) if the appropriate abort_en-bit is set. */
/*      A denied access will generate an interrupt in the ASIC_CTRL IRQ registers, which is maskable there. */
/*    Note: */
/*      This register can be locked to protect it from reconfiguration by ASIC_CTRL_COM-netx_lock-lock_firewall. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_crypt       0x000000A4U
#define Adr_NX90_asic_ctrl_firewall_cfg_crypt 0xFF4012A4U
#define Adr_NX90_firewall_cfg_crypt           0xFF4012A4U
#define DFLT_VAL_NX90_firewall_cfg_crypt      0x00000033U

#define MSK_NX90_firewall_cfg_crypt_wp_com               0x00000001U
#define SRT_NX90_firewall_cfg_crypt_wp_com               0
#define DFLT_VAL_NX90_firewall_cfg_crypt_wp_com          0x00000001U
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_wp_com       0x00000001U
#define MSK_NX90_firewall_cfg_crypt_wp_app               0x00000002U
#define SRT_NX90_firewall_cfg_crypt_wp_app               1
#define DFLT_VAL_NX90_firewall_cfg_crypt_wp_app          0x00000002U
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_wp_app       0x00000001U
#define MSK_NX90_firewall_cfg_crypt_rp_com               0x00000010U
#define SRT_NX90_firewall_cfg_crypt_rp_com               4
#define DFLT_VAL_NX90_firewall_cfg_crypt_rp_com          0x00000010U
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_rp_com       0x00000001U
#define MSK_NX90_firewall_cfg_crypt_rp_app               0x00000020U
#define SRT_NX90_firewall_cfg_crypt_rp_app               5
#define DFLT_VAL_NX90_firewall_cfg_crypt_rp_app          0x00000020U
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_rp_app       0x00000001U
#define MSK_NX90_firewall_cfg_crypt_abort_en_com         0x00000100U
#define SRT_NX90_firewall_cfg_crypt_abort_en_com         8
#define DFLT_VAL_NX90_firewall_cfg_crypt_abort_en_com    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_abort_en_com 0x00000000U
#define MSK_NX90_firewall_cfg_crypt_abort_en_app         0x00000200U
#define SRT_NX90_firewall_cfg_crypt_abort_en_app         9
#define DFLT_VAL_NX90_firewall_cfg_crypt_abort_en_app    0x00000000U
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_abort_en_app 0x00000000U

/* all used bits of 'NX90_firewall_cfg_crypt': */
#define MSK_USED_BITS_NX90_firewall_cfg_crypt 0x00000333U

/* --------------------------------------------------------------------- */
/* Register misc_asic_ctrl */
/* => TBD: anpassen/ausbauen */
/*    Miscellaneous ASIC Control Register: */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_misc_asic_ctrl       0x000000A8U
#define Adr_NX90_asic_ctrl_misc_asic_ctrl 0xFF4012A8U
#define Adr_NX90_misc_asic_ctrl           0xFF4012A8U
#define DFLT_VAL_NX90_misc_asic_ctrl      0x00000000U

#define MSK_NX90_misc_asic_ctrl_lic_err_taint_en         0x00000001U
#define SRT_NX90_misc_asic_ctrl_lic_err_taint_en         0
#define DFLT_VAL_NX90_misc_asic_ctrl_lic_err_taint_en    0x00000000U
#define DFLT_BF_VAL_NX90_misc_asic_ctrl_lic_err_taint_en 0x00000000U
#define MSK_NX90_misc_asic_ctrl_lic_err_abort_en         0x00000002U
#define SRT_NX90_misc_asic_ctrl_lic_err_abort_en         1
#define DFLT_VAL_NX90_misc_asic_ctrl_lic_err_abort_en    0x00000000U
#define DFLT_BF_VAL_NX90_misc_asic_ctrl_lic_err_abort_en 0x00000000U
#define MSK_NX90_misc_asic_ctrl_lic_err_irq_en           0x00000004U
#define SRT_NX90_misc_asic_ctrl_lic_err_irq_en           2
#define DFLT_VAL_NX90_misc_asic_ctrl_lic_err_irq_en      0x00000000U
#define DFLT_BF_VAL_NX90_misc_asic_ctrl_lic_err_irq_en   0x00000000U
#define MSK_NX90_misc_asic_ctrl_lic_err_delay_en         0x00000008U
#define SRT_NX90_misc_asic_ctrl_lic_err_delay_en         3
#define DFLT_VAL_NX90_misc_asic_ctrl_lic_err_delay_en    0x00000000U
#define DFLT_BF_VAL_NX90_misc_asic_ctrl_lic_err_delay_en 0x00000000U

/* all used bits of 'NX90_misc_asic_ctrl': */
#define MSK_USED_BITS_NX90_misc_asic_ctrl 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register netx_lic_id */
/* => TBD: ausbauen */
/*    netX License ID Register: */
/*    This register contains license information read from security memory during boot phase */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_lic_id       0x000000ACU
#define Adr_NX90_asic_ctrl_netx_lic_id 0xFF4012ACU
#define Adr_NX90_netx_lic_id           0xFF4012ACU
#define DFLT_VAL_NX90_netx_lic_id      0x00000000U

#define MSK_NX90_netx_lic_id_id         0xffffffffU
#define SRT_NX90_netx_lic_id_id         0
#define DFLT_VAL_NX90_netx_lic_id_id    0x00000000U
#define DFLT_BF_VAL_NX90_netx_lic_id_id 0x00000000U

/* all used bits of 'NX90_netx_lic_id': */
#define MSK_USED_BITS_NX90_netx_lic_id 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register netx_lic_flags0 */
/* => TBD: ausbauen */
/*    netX License Flags 0 Register: */
/*    This register is part of netX licence error detection mechanism. If netX software requested an unavailable licence, this */
/*    will be flagged in netx_lic_errors0 register. */
/*    This register contains license information read from security memory during boot phase */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_lic_flags0       0x000000B0U
#define Adr_NX90_asic_ctrl_netx_lic_flags0 0xFF4012B0U
#define Adr_NX90_netx_lic_flags0           0xFF4012B0U
#define DFLT_VAL_NX90_netx_lic_flags0      0x00000000U

#define MSK_NX90_netx_lic_flags0_flags         0xffffffffU
#define SRT_NX90_netx_lic_flags0_flags         0
#define DFLT_VAL_NX90_netx_lic_flags0_flags    0x00000000U
#define DFLT_BF_VAL_NX90_netx_lic_flags0_flags 0x00000000U

/* all used bits of 'NX90_netx_lic_flags0': */
#define MSK_USED_BITS_NX90_netx_lic_flags0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register netx_lic_flags1 */
/* => TBD: ausbauen */
/*    netX License Flags 1 Register: */
/*    This register is part of netX licence error detection mechanism. If netX software requested an unavailable licence, this */
/*    will be flagged in netx_lic_errors1 register. */
/*    This register contains license information read from security memory during boot phase */
/*    This register is lockable by asic_ctrl_com_netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_lic_flags1       0x000000B4U
#define Adr_NX90_asic_ctrl_netx_lic_flags1 0xFF4012B4U
#define Adr_NX90_netx_lic_flags1           0xFF4012B4U
#define DFLT_VAL_NX90_netx_lic_flags1      0x00000000U

#define MSK_NX90_netx_lic_flags1_flags         0xffffffffU
#define SRT_NX90_netx_lic_flags1_flags         0
#define DFLT_VAL_NX90_netx_lic_flags1_flags    0x00000000U
#define DFLT_BF_VAL_NX90_netx_lic_flags1_flags 0x00000000U

/* all used bits of 'NX90_netx_lic_flags1': */
#define MSK_USED_BITS_NX90_netx_lic_flags1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register netx_lic_errors0 */
/* => TBD: ausbauen */
/*    netX License Errors 0 Status Register: */
/*    This register is part of netX licence error detection mechanism. If netX software requested a licence not */
/*    provided by netx_lic_flags0, this will be flagged here. */
/*    This register contains 0 in case of no license error */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_lic_errors0       0x000000B8U
#define Adr_NX90_asic_ctrl_netx_lic_errors0 0xFF4012B8U
#define Adr_NX90_netx_lic_errors0           0xFF4012B8U

#define MSK_NX90_netx_lic_errors0_err_ro 0xffffffffU
#define SRT_NX90_netx_lic_errors0_err_ro 0

/* all used bits of 'NX90_netx_lic_errors0': */
#define MSK_USED_BITS_NX90_netx_lic_errors0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register netx_lic_errors1 */
/* => TBD: ausbauen */
/*    netX License Errors 1 Status Register: */
/*    This register is part of netX licence error detection mechanism. If netX software requested a licence not */
/*    provided by netx_lic_flags1, this will be flagged here. */
/*    This register contains 0 in case of no license error */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_lic_errors1       0x000000BCU
#define Adr_NX90_asic_ctrl_netx_lic_errors1 0xFF4012BCU
#define Adr_NX90_netx_lic_errors1           0xFF4012BCU

#define MSK_NX90_netx_lic_errors1_err_ro 0xffffffffU
#define SRT_NX90_netx_lic_errors1_err_ro 0

/* all used bits of 'NX90_netx_lic_errors1': */
#define MSK_USED_BITS_NX90_netx_lic_errors1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_access_key */
/* => ASIC Control Locking access-key Register: */
/*    Writing to any register in the asic_ctrl or mmio_ctrl address area is only possible after */
/*    setting the correct key here to avoid unmeant changes e.g. by crashed software. */
/*    ---- */
/*    Changing a control register in the asic_ctrl or mmio_ctrl address area is only possible by the following sequence: */
/*    1.: Read out the Locking access-key from this register. */
/*    2.: Write back this Locking access-key to this register. */
/*    3.: Write desired value to the control register. */
/*    ---- */
/*    The Locking access-key will become invalid after each access to any register in the asic_ctrl or mmio_ctrl address area */
/*    and has to be read out and set again for sequent accesses. */
/*    Note: */
/*       Since netX56 there are 3 separated instances of access-key-protection logic: One for ARM, one for xPIC and */
/*       one shared by all other netX system masters. That allows ARM and XPIC running access-key read-write sequence */
/*       and configuration access without any synchronisation or locking completely independent. Before netX56 a sequence */
/*       started by one master (e.g. ARM) became invalid when interrupted by another master (e.g. xPIC). That was changed: ARM */
/*       and xPIC are able to remove protection without being influenced by each other (or by any other master). Once a */
/*       access-key-sequence was performed protected configuration registers are only writable for the master which performed */
/*       it. */
/*       To allow access to protected register for other masters (e.g. XPECs or SYSDEBUG) the third instance of */
/*       access-key-protection logic is implemented. This is shared by all masters except ARM and xPIC. When more */
/*       than one of these masters should use this, locking must be done in software to avoid sequence of one master */
/*       being interrupted by another. */
/*       Access-key read and write address is the same for all masters. However, ARM-key is only readable or writable by ARM, xPIC-key */
/*       only by xPIC and shared key only by all other masters but never by ARM or xPIC. */
/*    Note: */
/*       netX4000 has separate access-keys for the following CPUs: CR7, CA9, SYSDEBUG, xPIC0, xPIC1, xPIC2, xPIC3. All other masters */
/*       use the shared key. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_access_key       0x000000C0U
#define Adr_NX90_asic_ctrl_asic_ctrl_access_key 0xFF4012C0U
#define Adr_NX90_asic_ctrl_access_key           0xFF4012C0U
#define DFLT_VAL_NX90_asic_ctrl_access_key      0x00000000U

#define MSK_NX90_asic_ctrl_access_key_access_key         0x0000ffffU
#define SRT_NX90_asic_ctrl_access_key_access_key         0
#define DFLT_VAL_NX90_asic_ctrl_access_key_access_key    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_access_key_access_key 0x00000000U

/* all used bits of 'NX90_asic_ctrl_access_key': */
#define MSK_USED_BITS_NX90_asic_ctrl_access_key 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_raw */
/* => ASIC_CTRL raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_raw       0x000000C8U
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_raw 0xFF4012C8U
#define Adr_NX90_asic_ctrl_irq_raw           0xFF4012C8U
#define DFLT_VAL_NX90_asic_ctrl_irq_raw      0x00000000U

#define MSK_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_com         0x00000001U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_com         0
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_com    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_com 0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_app         0x00000002U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_app         1
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_app    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_sdram_app 0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_com          0x00000004U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_com          2
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_com     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_com  0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_app          0x00000008U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_app          3
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_app     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_hifmem_amem_app  0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_sqirom_com               0x00000010U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_sqirom_com               4
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_sqirom_com          0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_sqirom_com       0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_sqirom_app               0x00000020U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_sqirom_app               5
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_sqirom_app          0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_sqirom_app       0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_crypt_com                0x00000040U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_crypt_com                6
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_crypt_com           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_crypt_com        0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_firewall_crypt_app                0x00000080U
#define SRT_NX90_asic_ctrl_irq_raw_firewall_crypt_app                7
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_firewall_crypt_app           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_firewall_crypt_app        0x00000000U
#define MSK_NX90_asic_ctrl_irq_raw_bod_fail                          0x00000100U
#define SRT_NX90_asic_ctrl_irq_raw_bod_fail                          8
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_bod_fail                     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_bod_fail                  0x00000000U

/* all used bits of 'NX90_asic_ctrl_irq_raw': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_raw 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_masked */
/* => ASIC_CTRL masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_masked       0x000000CCU
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_masked 0xFF4012CCU
#define Adr_NX90_asic_ctrl_irq_masked           0xFF4012CCU

#define MSK_NX90_asic_ctrl_irq_masked_firewall_hifmem_sdram_com 0x00000001U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_hifmem_sdram_com 0
#define MSK_NX90_asic_ctrl_irq_masked_firewall_hifmem_sdram_app 0x00000002U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_hifmem_sdram_app 1
#define MSK_NX90_asic_ctrl_irq_masked_firewall_hifmem_amem_com  0x00000004U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_hifmem_amem_com  2
#define MSK_NX90_asic_ctrl_irq_masked_firewall_hifmem_amem_app  0x00000008U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_hifmem_amem_app  3
#define MSK_NX90_asic_ctrl_irq_masked_firewall_sqirom_com       0x00000010U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_sqirom_com       4
#define MSK_NX90_asic_ctrl_irq_masked_firewall_sqirom_app       0x00000020U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_sqirom_app       5
#define MSK_NX90_asic_ctrl_irq_masked_firewall_crypt_com        0x00000040U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_crypt_com        6
#define MSK_NX90_asic_ctrl_irq_masked_firewall_crypt_app        0x00000080U
#define SRT_NX90_asic_ctrl_irq_masked_firewall_crypt_app        7
#define MSK_NX90_asic_ctrl_irq_masked_bod_fail                  0x00000100U
#define SRT_NX90_asic_ctrl_irq_masked_bod_fail                  8

/* all used bits of 'NX90_asic_ctrl_irq_masked': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_masked 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_mask_set */
/* => ASIC_CTRL IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ maskq register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to bod_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_mask_set       0x000000D0U
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_mask_set 0xFF4012D0U
#define Adr_NX90_asic_ctrl_irq_mask_set           0xFF4012D0U
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set      0x00000000U

#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_com         0x00000001U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_com         0
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_com    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_com 0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_app         0x00000002U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_app         1
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_app    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_sdram_app 0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_com          0x00000004U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_com          2
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_com     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_com  0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_app          0x00000008U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_app          3
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_app     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_hifmem_amem_app  0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_com               0x00000010U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_com               4
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_com          0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_com       0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_app               0x00000020U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_app               5
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_app          0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_sqirom_app       0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_crypt_com                0x00000040U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_crypt_com                6
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_crypt_com           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_crypt_com        0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_firewall_crypt_app                0x00000080U
#define SRT_NX90_asic_ctrl_irq_mask_set_firewall_crypt_app                7
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_firewall_crypt_app           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_firewall_crypt_app        0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_set_bod_fail                          0x00000100U
#define SRT_NX90_asic_ctrl_irq_mask_set_bod_fail                          8
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_bod_fail                     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_bod_fail                  0x00000000U

/* all used bits of 'NX90_asic_ctrl_irq_mask_set': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_mask_set 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_mask_reset */
/* => ASIC_CTRL IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_mask_reset       0x000000D4U
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_mask_reset 0xFF4012D4U
#define Adr_NX90_asic_ctrl_irq_mask_reset           0xFF4012D4U
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset      0x00000000U

#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_com         0x00000001U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_com         0
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_com    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_com 0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_app         0x00000002U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_app         1
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_app    0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_sdram_app 0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_com          0x00000004U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_com          2
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_com     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_com  0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_app          0x00000008U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_app          3
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_app     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_hifmem_amem_app  0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_com               0x00000010U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_com               4
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_com          0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_com       0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_app               0x00000020U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_app               5
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_app          0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_sqirom_app       0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_com                0x00000040U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_com                6
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_com           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_com        0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_app                0x00000080U
#define SRT_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_app                7
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_app           0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_firewall_crypt_app        0x00000000U
#define MSK_NX90_asic_ctrl_irq_mask_reset_bod_fail                          0x00000100U
#define SRT_NX90_asic_ctrl_irq_mask_reset_bod_fail                          8
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_bod_fail                     0x00000000U
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_bod_fail                  0x00000000U

/* all used bits of 'NX90_asic_ctrl_irq_mask_reset': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_mask_reset 0x000001ffU


/* ===================================================================== */

/* Area of mmio_ctrl */

/* ===================================================================== */

#define Addr_NX90_mmio_ctrl 0xFF401300U

/* --------------------------------------------------------------------- */
/* Register mmio0_cfg */
/* => Multiplexmatrix Configuration Register for MMIO0 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    ------------------------------- */
/*    mmio*_sel - coding: */
/*    {     |                        |                           | border=1 */
/*    Coding netX internal function \ signal type                 functional group */
/*           (core connection) */
/*    0x00   xc_sample0               input,                      Trigger/Latch Unit */
/*    0x01   xc_sample1               input,                      Trigger/Latch Unit */
/*    0x02   xc_trigger0              tristatable output,         Trigger/Latch Unit */
/*    0x03   xc_trigger1              tristatable output,         Trigger/Latch Unit */
/*    0x04   can0_app_rx              input,                      CAN of app side ARM */
/*    0x05   can0_app_tx              always driven output,       CAN of app side ARM */
/*    0x06   can1_app_rx              input,                      CAN of app side ARM */
/*    0x07   can1_app_tx              always driven output,       CAN of app side ARM */
/*    0x08   i2c_xpic_app_scl         bidirectional,              I2C of app side xPIC */
/*    0x09   i2c_xpic_app_sda         bidirectional,              I2C of app side xPIC */
/*    0x0a   i2c_app_scl              bidirectional,              I2C of app side ARM */
/*    0x0b   i2c_app_sda              bidirectional,              I2C of app side ARM */
/*    0x0c   spi_xpic_app_clk         bidirectional,              SPI of app side xPIC */
/*    0x0d   spi_xpic_app_cs0n        bidirectional,              SPI of app side xPIC */
/*    0x0e   spi_xpic_app_cs1n        bidirectional,              SPI of app side xPIC */
/*    0x0f   spi_xpic_app_cs2n        bidirectional,              SPI of app side xPIC */
/*    0x10   spi_xpic_app_miso        bidirectional,              SPI of app side xPIC */
/*    0x11   spi_xpic_app_mosi        bidirectional,              SPI of app side xPIC */
/*    0x12   spi1_app_clk             bidirectional,              SPI of app side ARM */
/*    0x13   spi1_app_cs0n            bidirectional,              SPI of app side ARM */
/*    0x14   spi1_app_cs1n            bidirectional,              SPI of app side ARM */
/*    0x15   spi1_app_cs2n            bidirectional,              SPI of app side ARM */
/*    0x16   spi1_app_miso            bidirectional,              SPI of app side ARM */
/*    0x17   spi1_app_mosi            bidirectional,              SPI of app side ARM */
/*    0x18   uart_xpic_app_rxd        input,                      UART of app side xPIC */
/*    0x19   uart_xpic_app_txd        tristatable output,         UART of app side xPIC */
/*    0x1a   uart_xpic_app_rtsn       tristatable output,         UART of app side xPIC */
/*    0x1b   uart_xpic_app_ctsn       input,                      UART of app side xPIC */
/*    0x1c   uart_app_rxd             input,                      UART of app side ARM */
/*    0x1d   uart_app_txd             tristatable output,         UART of app side ARM */
/*    0x1e   uart_app_rtsn            tristatable output,         UART of app side ARM */
/*    0x1f   uart_app_ctsn            input,                      UART of app side ARM */
/*    0x20   gpio0                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x21   gpio1                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x22   gpio2                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x23   gpio3                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x24   gpio4                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x25   gpio5                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x26   gpio6                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x27   gpio7                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x28   wdg_act                  always driven output,       System Watchdog */
/*    0x29   en_in                    input,                      HIF pio input sampling enable */
/*    0x2a   eth_mmio_mdc             always driven output,       MDIO */
/*    0x2b   eth_mmio_mdio            bidirectional,              MDIO */
/*    0x3f   PIO mode                 use MMIO PIO line registers PIO function} */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio0_cfg       0x00000000U
#define Adr_NX90_mmio_ctrl_mmio0_cfg 0xFF401300U
#define Adr_NX90_mmio0_cfg           0xFF401300U
#define DFLT_VAL_NX90_mmio0_cfg      0x0000003fU

#define MSK_NX90_mmio0_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio0_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio0_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio0_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio0_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio0_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio0_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio0_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio0_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio0_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio0_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio0_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio0_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio0_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio0_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio0_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio0_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio0_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio0_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio0_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio0_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio0_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio0_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio0_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio0_cfg': */
#define MSK_USED_BITS_NX90_mmio0_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio1_cfg */
/* => Multiplexmatrix Configuration Register for MMIO1 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio1_cfg       0x00000004U
#define Adr_NX90_mmio_ctrl_mmio1_cfg 0xFF401304U
#define Adr_NX90_mmio1_cfg           0xFF401304U
#define DFLT_VAL_NX90_mmio1_cfg      0x0000003fU

#define MSK_NX90_mmio1_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio1_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio1_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio1_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio1_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio1_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio1_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio1_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio1_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio1_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio1_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio1_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio1_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio1_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio1_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio1_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio1_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio1_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio1_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio1_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio1_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio1_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio1_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio1_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio1_cfg': */
#define MSK_USED_BITS_NX90_mmio1_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio2_cfg */
/* => Multiplexmatrix Configuration Register for MMIO2 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio2_cfg       0x00000008U
#define Adr_NX90_mmio_ctrl_mmio2_cfg 0xFF401308U
#define Adr_NX90_mmio2_cfg           0xFF401308U
#define DFLT_VAL_NX90_mmio2_cfg      0x0000003fU

#define MSK_NX90_mmio2_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio2_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio2_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio2_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio2_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio2_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio2_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio2_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio2_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio2_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio2_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio2_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio2_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio2_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio2_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio2_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio2_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio2_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio2_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio2_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio2_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio2_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio2_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio2_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio2_cfg': */
#define MSK_USED_BITS_NX90_mmio2_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio3_cfg */
/* => Multiplexmatrix Configuration Register for MMIO3 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio3_cfg       0x0000000CU
#define Adr_NX90_mmio_ctrl_mmio3_cfg 0xFF40130CU
#define Adr_NX90_mmio3_cfg           0xFF40130CU
#define DFLT_VAL_NX90_mmio3_cfg      0x0000003fU

#define MSK_NX90_mmio3_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio3_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio3_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio3_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio3_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio3_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio3_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio3_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio3_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio3_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio3_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio3_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio3_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio3_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio3_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio3_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio3_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio3_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio3_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio3_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio3_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio3_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio3_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio3_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio3_cfg': */
#define MSK_USED_BITS_NX90_mmio3_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio4_cfg */
/* => Multiplexmatrix Configuration Register for MMIO4 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio4_cfg       0x00000010U
#define Adr_NX90_mmio_ctrl_mmio4_cfg 0xFF401310U
#define Adr_NX90_mmio4_cfg           0xFF401310U
#define DFLT_VAL_NX90_mmio4_cfg      0x0000003fU

#define MSK_NX90_mmio4_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio4_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio4_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio4_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio4_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio4_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio4_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio4_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio4_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio4_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio4_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio4_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio4_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio4_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio4_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio4_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio4_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio4_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio4_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio4_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio4_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio4_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio4_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio4_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio4_cfg': */
#define MSK_USED_BITS_NX90_mmio4_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio5_cfg */
/* => Multiplexmatrix Configuration Register for MMIO5 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio5_cfg       0x00000014U
#define Adr_NX90_mmio_ctrl_mmio5_cfg 0xFF401314U
#define Adr_NX90_mmio5_cfg           0xFF401314U
#define DFLT_VAL_NX90_mmio5_cfg      0x0000003fU

#define MSK_NX90_mmio5_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio5_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio5_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio5_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio5_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio5_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio5_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio5_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio5_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio5_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio5_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio5_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio5_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio5_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio5_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio5_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio5_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio5_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio5_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio5_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio5_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio5_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio5_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio5_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio5_cfg': */
#define MSK_USED_BITS_NX90_mmio5_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio6_cfg */
/* => Multiplexmatrix Configuration Register for MMIO6 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio6_cfg       0x00000018U
#define Adr_NX90_mmio_ctrl_mmio6_cfg 0xFF401318U
#define Adr_NX90_mmio6_cfg           0xFF401318U
#define DFLT_VAL_NX90_mmio6_cfg      0x0000003fU

#define MSK_NX90_mmio6_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio6_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio6_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio6_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio6_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio6_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio6_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio6_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio6_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio6_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio6_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio6_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio6_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio6_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio6_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio6_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio6_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio6_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio6_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio6_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio6_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio6_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio6_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio6_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio6_cfg': */
#define MSK_USED_BITS_NX90_mmio6_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio7_cfg */
/* => Multiplexmatrix Configuration Register for MMIO7 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio7_cfg       0x0000001CU
#define Adr_NX90_mmio_ctrl_mmio7_cfg 0xFF40131CU
#define Adr_NX90_mmio7_cfg           0xFF40131CU
#define DFLT_VAL_NX90_mmio7_cfg      0x0000003fU

#define MSK_NX90_mmio7_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio7_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio7_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio7_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio7_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio7_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio7_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio7_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio7_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio7_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio7_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio7_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio7_cfg_pio_oe               0x00010000U
#define SRT_NX90_mmio7_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio7_cfg_pio_oe          0x00000000U
#define DFLT_BF_VAL_NX90_mmio7_cfg_pio_oe       0x00000000U
#define MSK_NX90_mmio7_cfg_pio_out              0x00020000U
#define SRT_NX90_mmio7_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio7_cfg_pio_out         0x00000000U
#define DFLT_BF_VAL_NX90_mmio7_cfg_pio_out      0x00000000U
#define MSK_NX90_mmio7_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio7_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio7_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio7_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio7_cfg': */
#define MSK_USED_BITS_NX90_mmio7_cfg 0x0007063fU

/* --------------------------------------------------------------------- */
/* Register mmio8_cfg */
/* => Multiplexmatrix Configuration Register for MMIO8 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio8 signal is a multiplex option of HIF_D8 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio8_cfg       0x00000020U
#define Adr_NX90_mmio_ctrl_mmio8_cfg 0xFF401320U
#define Adr_NX90_mmio8_cfg           0xFF401320U
#define DFLT_VAL_NX90_mmio8_cfg      0x0000003fU

#define MSK_NX90_mmio8_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio8_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio8_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio8_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio8_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio8_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio8_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio8_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio8_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio8_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio8_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio8_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio8_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio8_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio8_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio8_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio8_cfg': */
#define MSK_USED_BITS_NX90_mmio8_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio9_cfg */
/* => Multiplexmatrix Configuration Register for MMIO9 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio9 signal is a multiplex option of HIF_D9 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio9_cfg       0x00000024U
#define Adr_NX90_mmio_ctrl_mmio9_cfg 0xFF401324U
#define Adr_NX90_mmio9_cfg           0xFF401324U
#define DFLT_VAL_NX90_mmio9_cfg      0x0000003fU

#define MSK_NX90_mmio9_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio9_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio9_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio9_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio9_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio9_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio9_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio9_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio9_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio9_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio9_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio9_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio9_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio9_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio9_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio9_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio9_cfg': */
#define MSK_USED_BITS_NX90_mmio9_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio10_cfg */
/* => Multiplexmatrix Configuration Register for MMIO10 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio10 signal is a multiplex option of HIF_D10 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio10_cfg       0x00000028U
#define Adr_NX90_mmio_ctrl_mmio10_cfg 0xFF401328U
#define Adr_NX90_mmio10_cfg           0xFF401328U
#define DFLT_VAL_NX90_mmio10_cfg      0x0000003fU

#define MSK_NX90_mmio10_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio10_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio10_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio10_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio10_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio10_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio10_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio10_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio10_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio10_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio10_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio10_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio10_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio10_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio10_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio10_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio10_cfg': */
#define MSK_USED_BITS_NX90_mmio10_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio11_cfg */
/* => Multiplexmatrix Configuration Register for MMIO11 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio11 signal is a multiplex option of HIF_D11 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio11_cfg       0x0000002CU
#define Adr_NX90_mmio_ctrl_mmio11_cfg 0xFF40132CU
#define Adr_NX90_mmio11_cfg           0xFF40132CU
#define DFLT_VAL_NX90_mmio11_cfg      0x0000003fU

#define MSK_NX90_mmio11_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio11_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio11_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio11_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio11_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio11_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio11_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio11_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio11_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio11_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio11_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio11_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio11_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio11_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio11_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio11_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio11_cfg': */
#define MSK_USED_BITS_NX90_mmio11_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio12_cfg */
/* => Multiplexmatrix Configuration Register for MMIO12 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio12 signal is a multiplex option of HIF_D12 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio12_cfg       0x00000030U
#define Adr_NX90_mmio_ctrl_mmio12_cfg 0xFF401330U
#define Adr_NX90_mmio12_cfg           0xFF401330U
#define DFLT_VAL_NX90_mmio12_cfg      0x0000003fU

#define MSK_NX90_mmio12_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio12_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio12_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio12_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio12_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio12_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio12_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio12_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio12_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio12_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio12_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio12_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio12_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio12_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio12_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio12_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio12_cfg': */
#define MSK_USED_BITS_NX90_mmio12_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio13_cfg */
/* => Multiplexmatrix Configuration Register for MMIO13 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio13 signal is a multiplex option of HIF_D13 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio13_cfg       0x00000034U
#define Adr_NX90_mmio_ctrl_mmio13_cfg 0xFF401334U
#define Adr_NX90_mmio13_cfg           0xFF401334U
#define DFLT_VAL_NX90_mmio13_cfg      0x0000003fU

#define MSK_NX90_mmio13_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio13_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio13_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio13_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio13_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio13_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio13_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio13_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio13_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio13_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio13_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio13_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio13_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio13_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio13_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio13_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio13_cfg': */
#define MSK_USED_BITS_NX90_mmio13_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio14_cfg */
/* => Multiplexmatrix Configuration Register for MMIO14 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio14 signal is a multiplex option of HIF_D14 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio14_cfg       0x00000038U
#define Adr_NX90_mmio_ctrl_mmio14_cfg 0xFF401338U
#define Adr_NX90_mmio14_cfg           0xFF401338U
#define DFLT_VAL_NX90_mmio14_cfg      0x0000003fU

#define MSK_NX90_mmio14_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio14_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio14_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio14_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio14_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio14_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio14_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio14_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio14_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio14_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio14_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio14_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio14_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio14_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio14_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio14_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio14_cfg': */
#define MSK_USED_BITS_NX90_mmio14_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio15_cfg */
/* => Multiplexmatrix Configuration Register for MMIO15 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio15 signal is a multiplex option of HIF_D15 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio15_cfg       0x0000003CU
#define Adr_NX90_mmio_ctrl_mmio15_cfg 0xFF40133CU
#define Adr_NX90_mmio15_cfg           0xFF40133CU
#define DFLT_VAL_NX90_mmio15_cfg      0x0000003fU

#define MSK_NX90_mmio15_cfg_mmio_sel             0x0000003fU
#define SRT_NX90_mmio15_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio15_cfg_mmio_sel        0x0000003fU
#define DFLT_BF_VAL_NX90_mmio15_cfg_mmio_sel     0x0000003fU
#define MSK_NX90_mmio15_cfg_mmio_out_inv         0x00000200U
#define SRT_NX90_mmio15_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio15_cfg_mmio_out_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mmio15_cfg_mmio_out_inv 0x00000000U
#define MSK_NX90_mmio15_cfg_mmio_in_inv          0x00000400U
#define SRT_NX90_mmio15_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio15_cfg_mmio_in_inv     0x00000000U
#define DFLT_BF_VAL_NX90_mmio15_cfg_mmio_in_inv  0x00000000U
#define MSK_NX90_mmio15_cfg_status_in_ro         0x00040000U
#define SRT_NX90_mmio15_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio15_cfg_status_in_ro    0x00000000U
#define DFLT_BF_VAL_NX90_mmio15_cfg_status_in_ro 0x00000000U

/* all used bits of 'NX90_mmio15_cfg': */
#define MSK_USED_BITS_NX90_mmio15_cfg 0x0004063fU

/* --------------------------------------------------------------------- */
/* Register mmio_pio_out_line_cfg0 */
/* => MMIO PIO line output level register of MMIO 0 to 15. */
/*    Changing bits here will change 'pio_out' bit of related mmio*_cfg register. Changes there will change related bit inside this register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_out_line_cfg0       0x00000040U
#define Adr_NX90_mmio_ctrl_mmio_pio_out_line_cfg0 0xFF401340U
#define Adr_NX90_mmio_pio_out_line_cfg0           0xFF401340U
#define DFLT_VAL_NX90_mmio_pio_out_line_cfg0      0x00000000U

#define MSK_NX90_mmio_pio_out_line_cfg0_line         0x0000ffffU
#define SRT_NX90_mmio_pio_out_line_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_out_line_cfg0_line    0x00000000U
#define DFLT_BF_VAL_NX90_mmio_pio_out_line_cfg0_line 0x00000000U

/* all used bits of 'NX90_mmio_pio_out_line_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_out_line_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_pio_out_line_set_cfg0 */
/* => MMIO PIO line output level set register of MMIO 0 to 15. */
/*    This register is for setting single MMIO PIOs to high level with a single access. In contrast to using the 'mmio_pio_out_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will activate the 'pio_out' bit of related 'mmio*_cfg' register and also activate */
/*    the related bits in the 'mmio_pio_out_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_out_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_out_line_set_cfg0       0x00000044U
#define Adr_NX90_mmio_ctrl_mmio_pio_out_line_set_cfg0 0xFF401344U
#define Adr_NX90_mmio_pio_out_line_set_cfg0           0xFF401344U
#define DFLT_VAL_NX90_mmio_pio_out_line_set_cfg0      0x00000000U

#define MSK_NX90_mmio_pio_out_line_set_cfg0_line         0x0000ffffU
#define SRT_NX90_mmio_pio_out_line_set_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_out_line_set_cfg0_line    0x00000000U
#define DFLT_BF_VAL_NX90_mmio_pio_out_line_set_cfg0_line 0x00000000U

/* all used bits of 'NX90_mmio_pio_out_line_set_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_out_line_set_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_pio_out_line_reset_cfg0 */
/* => MMIO PIO line output level reset register of MMIO 0 to 15. */
/*    This register is for deactivating single MMIO PIOs with a single access. In contrast to using the 'mmio_pio_out_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will clear the 'pio_out' bit of related 'mmio*_cfg' register and also clear */
/*    the related bits in the 'mmio_pio_out_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_out_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_out_line_reset_cfg0       0x00000048U
#define Adr_NX90_mmio_ctrl_mmio_pio_out_line_reset_cfg0 0xFF401348U
#define Adr_NX90_mmio_pio_out_line_reset_cfg0           0xFF401348U
#define DFLT_VAL_NX90_mmio_pio_out_line_reset_cfg0      0x00000000U

#define MSK_NX90_mmio_pio_out_line_reset_cfg0_line         0x0000ffffU
#define SRT_NX90_mmio_pio_out_line_reset_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_out_line_reset_cfg0_line    0x00000000U
#define DFLT_BF_VAL_NX90_mmio_pio_out_line_reset_cfg0_line 0x00000000U

/* all used bits of 'NX90_mmio_pio_out_line_reset_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_out_line_reset_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_pio_oe_line_cfg0 */
/* => MMIO PIO line output enable register of MMIO 0 to 15. */
/*    Changing bits here will change 'pio_oe' bit of related mmio*_cfg register. Changes there will change related bit inside this register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_oe_line_cfg0       0x0000004CU
#define Adr_NX90_mmio_ctrl_mmio_pio_oe_line_cfg0 0xFF40134CU
#define Adr_NX90_mmio_pio_oe_line_cfg0           0xFF40134CU
#define DFLT_VAL_NX90_mmio_pio_oe_line_cfg0      0x00000000U

#define MSK_NX90_mmio_pio_oe_line_cfg0_line         0x0000ffffU
#define SRT_NX90_mmio_pio_oe_line_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_oe_line_cfg0_line    0x00000000U
#define DFLT_BF_VAL_NX90_mmio_pio_oe_line_cfg0_line 0x00000000U

/* all used bits of 'NX90_mmio_pio_oe_line_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_oe_line_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_pio_oe_line_set_cfg0 */
/* => MMIO PIO line output enable set register of MMIO 0 to 15. */
/*    This register is for activating single MMIO PIOs with a single access. In contrast to using the 'mmio_pio_oe_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will activate the 'pio_oe' bit of related 'mmio*_cfg' register and also activate */
/*    the related bits in the 'mmio_pio_oe_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_oe_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_oe_line_set_cfg0       0x00000050U
#define Adr_NX90_mmio_ctrl_mmio_pio_oe_line_set_cfg0 0xFF401350U
#define Adr_NX90_mmio_pio_oe_line_set_cfg0           0xFF401350U
#define DFLT_VAL_NX90_mmio_pio_oe_line_set_cfg0      0x00000000U

#define MSK_NX90_mmio_pio_oe_line_set_cfg0_line         0x0000ffffU
#define SRT_NX90_mmio_pio_oe_line_set_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_oe_line_set_cfg0_line    0x00000000U
#define DFLT_BF_VAL_NX90_mmio_pio_oe_line_set_cfg0_line 0x00000000U

/* all used bits of 'NX90_mmio_pio_oe_line_set_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_oe_line_set_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_pio_oe_line_reset_cfg0 */
/* => MMIO PIO line output enable reset register of MMIO 0 to 15. */
/*    This register is for deactivating single MMIO PIOs with a single access. In contrast to using the 'mmio_pio_oe_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will clear the 'pio_oe' bit of related 'mmio*_cfg' register and also clear */
/*    the related bits in the 'mmio_pio_oe_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_oe_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_oe_line_reset_cfg0       0x00000054U
#define Adr_NX90_mmio_ctrl_mmio_pio_oe_line_reset_cfg0 0xFF401354U
#define Adr_NX90_mmio_pio_oe_line_reset_cfg0           0xFF401354U
#define DFLT_VAL_NX90_mmio_pio_oe_line_reset_cfg0      0x00000000U

#define MSK_NX90_mmio_pio_oe_line_reset_cfg0_line         0x0000ffffU
#define SRT_NX90_mmio_pio_oe_line_reset_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_oe_line_reset_cfg0_line    0x00000000U
#define DFLT_BF_VAL_NX90_mmio_pio_oe_line_reset_cfg0_line 0x00000000U

/* all used bits of 'NX90_mmio_pio_oe_line_reset_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_oe_line_reset_cfg0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_in_line_status0 */
/* => MMIO input line register of MMIO 0 to 15. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_in_line_status0       0x00000058U
#define Adr_NX90_mmio_ctrl_mmio_in_line_status0 0xFF401358U
#define Adr_NX90_mmio_in_line_status0           0xFF401358U

#define MSK_NX90_mmio_in_line_status0_line 0x0000ffffU
#define SRT_NX90_mmio_in_line_status0_line 0

/* all used bits of 'NX90_mmio_in_line_status0': */
#define MSK_USED_BITS_NX90_mmio_in_line_status0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register mmio_is_pio_status0 */
/* => MMIO mode line register of MMIO 0 to 15. */
/*    Note: PIO Mode can be enabled or disabled in mmio_cfg registers. */
/*    Note */
/*       MMIO8 is not a standard-function MMIO and has no PIO function. When bit 8 is set, MMIO8-function will be active on HIF_D8. */
/*       MMIO9 is not a standard-function MMIO and has no PIO function. When bit 9 is set, MMIO9-function will be active on HIF_D9. */
/*       MMIO10 is not a standard-function MMIO and has no PIO function. When bit 10 is set, MMIO10-function will be active on HIF_D10. */
/*       MMIO11 is not a standard-function MMIO and has no PIO function. When bit 11 is set, MMIO11-function will be active on HIF_D11. */
/*       MMIO12 is not a standard-function MMIO and has no PIO function. When bit 12 is set, MMIO12-function will be active on HIF_D12. */
/*       MMIO13 is not a standard-function MMIO and has no PIO function. When bit 13 is set, MMIO13-function will be active on HIF_D13. */
/*       MMIO14 is not a standard-function MMIO and has no PIO function. When bit 14 is set, MMIO14-function will be active on HIF_D14. */
/*       MMIO15 is not a standard-function MMIO and has no PIO function. When bit 15 is set, MMIO15-function will be active on HIF_D15. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_is_pio_status0       0x0000005CU
#define Adr_NX90_mmio_ctrl_mmio_is_pio_status0 0xFF40135CU
#define Adr_NX90_mmio_is_pio_status0           0xFF40135CU

#define MSK_NX90_mmio_is_pio_status0_line 0x0000ffffU
#define SRT_NX90_mmio_is_pio_status0_line 0

/* all used bits of 'NX90_mmio_is_pio_status0': */
#define MSK_USED_BITS_NX90_mmio_is_pio_status0 0x0000ffffU


/* ===================================================================== */

/* Area of global_buf_man */

/* ===================================================================== */

#define Addr_NX90_global_buf_man 0xFF401380U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_0 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_0            0x00000000U
#define Adr_NX90_global_buf_man_global_read_buffer_0 0xFF401380U
#define Adr_NX90_global_read_buffer_0                0xFF401380U
#define DFLT_VAL_NX90_global_read_buffer_0           0x00000003U

#define MSK_NX90_global_read_buffer_0_val         0x00000003U
#define SRT_NX90_global_read_buffer_0_val         0
#define DFLT_VAL_NX90_global_read_buffer_0_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_0_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_0': */
#define MSK_USED_BITS_NX90_global_read_buffer_0 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_1 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_1            0x00000004U
#define Adr_NX90_global_buf_man_global_read_buffer_1 0xFF401384U
#define Adr_NX90_global_read_buffer_1                0xFF401384U
#define DFLT_VAL_NX90_global_read_buffer_1           0x00000003U

#define MSK_NX90_global_read_buffer_1_val         0x00000003U
#define SRT_NX90_global_read_buffer_1_val         0
#define DFLT_VAL_NX90_global_read_buffer_1_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_1_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_1': */
#define MSK_USED_BITS_NX90_global_read_buffer_1 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_2 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_2            0x00000008U
#define Adr_NX90_global_buf_man_global_read_buffer_2 0xFF401388U
#define Adr_NX90_global_read_buffer_2                0xFF401388U
#define DFLT_VAL_NX90_global_read_buffer_2           0x00000003U

#define MSK_NX90_global_read_buffer_2_val         0x00000003U
#define SRT_NX90_global_read_buffer_2_val         0
#define DFLT_VAL_NX90_global_read_buffer_2_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_2_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_2': */
#define MSK_USED_BITS_NX90_global_read_buffer_2 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_3 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_3            0x0000000CU
#define Adr_NX90_global_buf_man_global_read_buffer_3 0xFF40138CU
#define Adr_NX90_global_read_buffer_3                0xFF40138CU
#define DFLT_VAL_NX90_global_read_buffer_3           0x00000003U

#define MSK_NX90_global_read_buffer_3_val         0x00000003U
#define SRT_NX90_global_read_buffer_3_val         0
#define DFLT_VAL_NX90_global_read_buffer_3_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_3_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_3': */
#define MSK_USED_BITS_NX90_global_read_buffer_3 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_4 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_4            0x00000010U
#define Adr_NX90_global_buf_man_global_read_buffer_4 0xFF401390U
#define Adr_NX90_global_read_buffer_4                0xFF401390U
#define DFLT_VAL_NX90_global_read_buffer_4           0x00000003U

#define MSK_NX90_global_read_buffer_4_val         0x00000003U
#define SRT_NX90_global_read_buffer_4_val         0
#define DFLT_VAL_NX90_global_read_buffer_4_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_4_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_4': */
#define MSK_USED_BITS_NX90_global_read_buffer_4 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_5 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_5            0x00000014U
#define Adr_NX90_global_buf_man_global_read_buffer_5 0xFF401394U
#define Adr_NX90_global_read_buffer_5                0xFF401394U
#define DFLT_VAL_NX90_global_read_buffer_5           0x00000003U

#define MSK_NX90_global_read_buffer_5_val         0x00000003U
#define SRT_NX90_global_read_buffer_5_val         0
#define DFLT_VAL_NX90_global_read_buffer_5_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_5_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_5': */
#define MSK_USED_BITS_NX90_global_read_buffer_5 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_6 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_6            0x00000018U
#define Adr_NX90_global_buf_man_global_read_buffer_6 0xFF401398U
#define Adr_NX90_global_read_buffer_6                0xFF401398U
#define DFLT_VAL_NX90_global_read_buffer_6           0x00000003U

#define MSK_NX90_global_read_buffer_6_val         0x00000003U
#define SRT_NX90_global_read_buffer_6_val         0
#define DFLT_VAL_NX90_global_read_buffer_6_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_6_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_6': */
#define MSK_USED_BITS_NX90_global_read_buffer_6 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_read_buffer_7 */
/* => read: get read buffer number */
/*    write reset buffer states */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_read_buffer_7            0x0000001CU
#define Adr_NX90_global_buf_man_global_read_buffer_7 0xFF40139CU
#define Adr_NX90_global_read_buffer_7                0xFF40139CU
#define DFLT_VAL_NX90_global_read_buffer_7           0x00000003U

#define MSK_NX90_global_read_buffer_7_val         0x00000003U
#define SRT_NX90_global_read_buffer_7_val         0
#define DFLT_VAL_NX90_global_read_buffer_7_val    0x00000003U
#define DFLT_BF_VAL_NX90_global_read_buffer_7_val 0x00000003U

/* all used bits of 'NX90_global_read_buffer_7': */
#define MSK_USED_BITS_NX90_global_read_buffer_7 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_0 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_0            0x00000020U
#define Adr_NX90_global_buf_man_global_write_buffer_0 0xFF4013A0U
#define Adr_NX90_global_write_buffer_0                0xFF4013A0U
#define DFLT_VAL_NX90_global_write_buffer_0           0x00000000U

#define MSK_NX90_global_write_buffer_0_val         0x00000003U
#define SRT_NX90_global_write_buffer_0_val         0
#define DFLT_VAL_NX90_global_write_buffer_0_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_0_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_0': */
#define MSK_USED_BITS_NX90_global_write_buffer_0 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_1 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_1            0x00000024U
#define Adr_NX90_global_buf_man_global_write_buffer_1 0xFF4013A4U
#define Adr_NX90_global_write_buffer_1                0xFF4013A4U
#define DFLT_VAL_NX90_global_write_buffer_1           0x00000000U

#define MSK_NX90_global_write_buffer_1_val         0x00000003U
#define SRT_NX90_global_write_buffer_1_val         0
#define DFLT_VAL_NX90_global_write_buffer_1_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_1_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_1': */
#define MSK_USED_BITS_NX90_global_write_buffer_1 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_2 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_2            0x00000028U
#define Adr_NX90_global_buf_man_global_write_buffer_2 0xFF4013A8U
#define Adr_NX90_global_write_buffer_2                0xFF4013A8U
#define DFLT_VAL_NX90_global_write_buffer_2           0x00000000U

#define MSK_NX90_global_write_buffer_2_val         0x00000003U
#define SRT_NX90_global_write_buffer_2_val         0
#define DFLT_VAL_NX90_global_write_buffer_2_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_2_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_2': */
#define MSK_USED_BITS_NX90_global_write_buffer_2 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_3 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_3            0x0000002CU
#define Adr_NX90_global_buf_man_global_write_buffer_3 0xFF4013ACU
#define Adr_NX90_global_write_buffer_3                0xFF4013ACU
#define DFLT_VAL_NX90_global_write_buffer_3           0x00000000U

#define MSK_NX90_global_write_buffer_3_val         0x00000003U
#define SRT_NX90_global_write_buffer_3_val         0
#define DFLT_VAL_NX90_global_write_buffer_3_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_3_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_3': */
#define MSK_USED_BITS_NX90_global_write_buffer_3 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_4 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_4            0x00000030U
#define Adr_NX90_global_buf_man_global_write_buffer_4 0xFF4013B0U
#define Adr_NX90_global_write_buffer_4                0xFF4013B0U
#define DFLT_VAL_NX90_global_write_buffer_4           0x00000000U

#define MSK_NX90_global_write_buffer_4_val         0x00000003U
#define SRT_NX90_global_write_buffer_4_val         0
#define DFLT_VAL_NX90_global_write_buffer_4_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_4_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_4': */
#define MSK_USED_BITS_NX90_global_write_buffer_4 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_5 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_5            0x00000034U
#define Adr_NX90_global_buf_man_global_write_buffer_5 0xFF4013B4U
#define Adr_NX90_global_write_buffer_5                0xFF4013B4U
#define DFLT_VAL_NX90_global_write_buffer_5           0x00000000U

#define MSK_NX90_global_write_buffer_5_val         0x00000003U
#define SRT_NX90_global_write_buffer_5_val         0
#define DFLT_VAL_NX90_global_write_buffer_5_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_5_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_5': */
#define MSK_USED_BITS_NX90_global_write_buffer_5 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_6 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_6            0x00000038U
#define Adr_NX90_global_buf_man_global_write_buffer_6 0xFF4013B8U
#define Adr_NX90_global_write_buffer_6                0xFF4013B8U
#define DFLT_VAL_NX90_global_write_buffer_6           0x00000000U

#define MSK_NX90_global_write_buffer_6_val         0x00000003U
#define SRT_NX90_global_write_buffer_6_val         0
#define DFLT_VAL_NX90_global_write_buffer_6_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_6_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_6': */
#define MSK_USED_BITS_NX90_global_write_buffer_6 0x00000003U

/* --------------------------------------------------------------------- */
/* Register global_write_buffer_7 */
/* => read: get write buffer number */
/*    write release write buffer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_global_write_buffer_7            0x0000003CU
#define Adr_NX90_global_buf_man_global_write_buffer_7 0xFF4013BCU
#define Adr_NX90_global_write_buffer_7                0xFF4013BCU
#define DFLT_VAL_NX90_global_write_buffer_7           0x00000000U

#define MSK_NX90_global_write_buffer_7_val         0x00000003U
#define SRT_NX90_global_write_buffer_7_val         0
#define DFLT_VAL_NX90_global_write_buffer_7_val    0x00000000U
#define DFLT_BF_VAL_NX90_global_write_buffer_7_val 0x00000000U

/* all used bits of 'NX90_global_write_buffer_7': */
#define MSK_USED_BITS_NX90_global_write_buffer_7 0x00000003U


/* ===================================================================== */

/* Area of hif_io_ctrl */

/* ===================================================================== */

#define Addr_NX90_hif_io_ctrl 0xFF401480U

/* --------------------------------------------------------------------- */
/* Register hif_io_cfg */
/* => IO Config Register: */
/*    Selects of HIF pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    This configuration must be set up according to external netX connection before any access to external logic. */
/*    This register is protected by the netX access key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access key from ACCESS_KEY register (ASIC_CTRL address area) */
/*    2.: write back access key to ACCESS_KEY register (ASIC_CTRL address area) */
/*    3.: write desired value to this register (ASIC_CTRL address area) */
/*    Attention: Be very careful programming this register. False settings may cause permanent damage on netX or devices connected */
/*               to HIF-IOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_io_cfg         0x00000000U
#define Adr_NX90_hif_io_ctrl_hif_io_cfg 0xFF401480U
#define Adr_NX90_hif_io_cfg             0xFF401480U
#define DFLT_VAL_NX90_hif_io_cfg        0x01000060U

#define MSK_NX90_hif_io_cfg_sel_hif_dpm                    0x00000001U
#define SRT_NX90_hif_io_cfg_sel_hif_dpm                    0
#define DFLT_VAL_NX90_hif_io_cfg_sel_hif_dpm               0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_hif_dpm            0x00000000U
#define MSK_NX90_hif_io_cfg_sel_dpm_serial                 0x00000002U
#define SRT_NX90_hif_io_cfg_sel_dpm_serial                 1
#define DFLT_VAL_NX90_hif_io_cfg_sel_dpm_serial            0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_dpm_serial         0x00000000U
#define MSK_NX90_hif_io_cfg_sel_dpm_serial_sph             0x00000004U
#define SRT_NX90_hif_io_cfg_sel_dpm_serial_sph             2
#define DFLT_VAL_NX90_hif_io_cfg_sel_dpm_serial_sph        0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_dpm_serial_sph     0x00000000U
#define MSK_NX90_hif_io_cfg_sel_dpm_serial_spo             0x00000008U
#define SRT_NX90_hif_io_cfg_sel_dpm_serial_spo             3
#define DFLT_VAL_NX90_hif_io_cfg_sel_dpm_serial_spo        0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_dpm_serial_spo     0x00000000U
#define MSK_NX90_hif_io_cfg_en_sdpm1                       0x00000010U
#define SRT_NX90_hif_io_cfg_en_sdpm1                       4
#define DFLT_VAL_NX90_hif_io_cfg_en_sdpm1                  0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_sdpm1               0x00000000U
#define MSK_NX90_hif_io_cfg_hif_mi_cfg                     0x00000060U
#define SRT_NX90_hif_io_cfg_hif_mi_cfg                     5
#define DFLT_VAL_NX90_hif_io_cfg_hif_mi_cfg                0x00000060U
#define DFLT_BF_VAL_NX90_hif_io_cfg_hif_mi_cfg             0x00000003U
#define MSK_NX90_hif_io_cfg_en_hif_sdram_mi                0x00000080U
#define SRT_NX90_hif_io_cfg_en_hif_sdram_mi                7
#define DFLT_VAL_NX90_hif_io_cfg_en_hif_sdram_mi           0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_hif_sdram_mi        0x00000000U
#define MSK_NX90_hif_io_cfg_sel_hif_a_width                0x00000f00U
#define SRT_NX90_hif_io_cfg_sel_hif_a_width                8
#define DFLT_VAL_NX90_hif_io_cfg_sel_hif_a_width           0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_hif_a_width        0x00000000U
#define MSK_NX90_hif_io_cfg_en_hif_rdy_pio_mi              0x01000000U
#define SRT_NX90_hif_io_cfg_en_hif_rdy_pio_mi              24
#define DFLT_VAL_NX90_hif_io_cfg_en_hif_rdy_pio_mi         0x01000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_hif_rdy_pio_mi      0x00000001U
#define MSK_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19         0x02000000U
#define SRT_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19         25
#define DFLT_VAL_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19    0x00000000U
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19 0x00000000U

/* all used bits of 'NX90_hif_io_cfg': */
#define MSK_USED_BITS_NX90_hif_io_cfg 0x03000fffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_cfg */
/* => HIF PIO Mode configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_cfg         0x00000004U
#define Adr_NX90_hif_io_ctrl_hif_pio_cfg 0xFF401484U
#define Adr_NX90_hif_pio_cfg             0xFF401484U
#define DFLT_VAL_NX90_hif_pio_cfg        0x80000008U

#define MSK_NX90_hif_pio_cfg_in_ctrl                  0x00000003U
#define SRT_NX90_hif_pio_cfg_in_ctrl                  0
#define DFLT_VAL_NX90_hif_pio_cfg_in_ctrl             0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_in_ctrl          0x00000000U
#define MSK_NX90_hif_pio_cfg_filter_en_in             0x00000008U
#define SRT_NX90_hif_pio_cfg_filter_en_in             3
#define DFLT_VAL_NX90_hif_pio_cfg_filter_en_in        0x00000008U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_filter_en_in     0x00000001U
#define MSK_NX90_hif_pio_cfg_irq_hif_d12_cfg          0x00030000U
#define SRT_NX90_hif_pio_cfg_irq_hif_d12_cfg          16
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_d12_cfg     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_d12_cfg  0x00000000U
#define MSK_NX90_hif_pio_cfg_irq_hif_a16_cfg          0x000c0000U
#define SRT_NX90_hif_pio_cfg_irq_hif_a16_cfg          18
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_a16_cfg     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_a16_cfg  0x00000000U
#define MSK_NX90_hif_pio_cfg_irq_hif_a17_cfg          0x00300000U
#define SRT_NX90_hif_pio_cfg_irq_hif_a17_cfg          20
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_a17_cfg     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_a17_cfg  0x00000000U
#define MSK_NX90_hif_pio_cfg_irq_hif_dirq_cfg         0x0c000000U
#define SRT_NX90_hif_pio_cfg_irq_hif_dirq_cfg         26
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_dirq_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_dirq_cfg 0x00000000U
#define MSK_NX90_hif_pio_cfg_filter_irqs              0x80000000U
#define SRT_NX90_hif_pio_cfg_filter_irqs              31
#define DFLT_VAL_NX90_hif_pio_cfg_filter_irqs         0x80000000U
#define DFLT_BF_VAL_NX90_hif_pio_cfg_filter_irqs      0x00000001U

/* all used bits of 'NX90_hif_pio_cfg': */
#define MSK_USED_BITS_NX90_hif_pio_cfg 0x8c3f000bU

/* --------------------------------------------------------------------- */
/* Register hif_pio_out0 */
/* => HIF PIO Output State Configuration Register 0. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the programmed state if appropriate enable bit */
/*    is set in hif_pio_oe0 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_out0         0x00000008U
#define Adr_NX90_hif_io_ctrl_hif_pio_out0 0xFF401488U
#define Adr_NX90_hif_pio_out0             0xFF401488U
#define DFLT_VAL_NX90_hif_pio_out0        0x00000000U

#define MSK_NX90_hif_pio_out0_hif_d0          0x00000001U
#define SRT_NX90_hif_pio_out0_hif_d0          0
#define DFLT_VAL_NX90_hif_pio_out0_hif_d0     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d0  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d1          0x00000002U
#define SRT_NX90_hif_pio_out0_hif_d1          1
#define DFLT_VAL_NX90_hif_pio_out0_hif_d1     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d1  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d2          0x00000004U
#define SRT_NX90_hif_pio_out0_hif_d2          2
#define DFLT_VAL_NX90_hif_pio_out0_hif_d2     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d2  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d3          0x00000008U
#define SRT_NX90_hif_pio_out0_hif_d3          3
#define DFLT_VAL_NX90_hif_pio_out0_hif_d3     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d3  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d4          0x00000010U
#define SRT_NX90_hif_pio_out0_hif_d4          4
#define DFLT_VAL_NX90_hif_pio_out0_hif_d4     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d4  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d5          0x00000020U
#define SRT_NX90_hif_pio_out0_hif_d5          5
#define DFLT_VAL_NX90_hif_pio_out0_hif_d5     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d5  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d6          0x00000040U
#define SRT_NX90_hif_pio_out0_hif_d6          6
#define DFLT_VAL_NX90_hif_pio_out0_hif_d6     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d6  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d7          0x00000080U
#define SRT_NX90_hif_pio_out0_hif_d7          7
#define DFLT_VAL_NX90_hif_pio_out0_hif_d7     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d7  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d8          0x00000100U
#define SRT_NX90_hif_pio_out0_hif_d8          8
#define DFLT_VAL_NX90_hif_pio_out0_hif_d8     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d8  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d9          0x00000200U
#define SRT_NX90_hif_pio_out0_hif_d9          9
#define DFLT_VAL_NX90_hif_pio_out0_hif_d9     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d9  0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d10         0x00000400U
#define SRT_NX90_hif_pio_out0_hif_d10         10
#define DFLT_VAL_NX90_hif_pio_out0_hif_d10    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d10 0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d11         0x00000800U
#define SRT_NX90_hif_pio_out0_hif_d11         11
#define DFLT_VAL_NX90_hif_pio_out0_hif_d11    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d11 0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d12         0x00001000U
#define SRT_NX90_hif_pio_out0_hif_d12         12
#define DFLT_VAL_NX90_hif_pio_out0_hif_d12    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d12 0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d13         0x00002000U
#define SRT_NX90_hif_pio_out0_hif_d13         13
#define DFLT_VAL_NX90_hif_pio_out0_hif_d13    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d13 0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d14         0x00004000U
#define SRT_NX90_hif_pio_out0_hif_d14         14
#define DFLT_VAL_NX90_hif_pio_out0_hif_d14    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d14 0x00000000U
#define MSK_NX90_hif_pio_out0_hif_d15         0x00008000U
#define SRT_NX90_hif_pio_out0_hif_d15         15
#define DFLT_VAL_NX90_hif_pio_out0_hif_d15    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d15 0x00000000U

/* all used bits of 'NX90_hif_pio_out0': */
#define MSK_USED_BITS_NX90_hif_pio_out0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_out1 */
/* => HIF PIO Output State Configuration Register 1. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the programmed state if appropriate enable bit */
/*    is set in hif_pio_oe1 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_out1         0x0000000CU
#define Adr_NX90_hif_io_ctrl_hif_pio_out1 0xFF40148CU
#define Adr_NX90_hif_pio_out1             0xFF40148CU
#define DFLT_VAL_NX90_hif_pio_out1        0x00000000U

#define MSK_NX90_hif_pio_out1_hif_a0            0x00000001U
#define SRT_NX90_hif_pio_out1_hif_a0            0
#define DFLT_VAL_NX90_hif_pio_out1_hif_a0       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a0    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a1            0x00000002U
#define SRT_NX90_hif_pio_out1_hif_a1            1
#define DFLT_VAL_NX90_hif_pio_out1_hif_a1       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a1    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a2            0x00000004U
#define SRT_NX90_hif_pio_out1_hif_a2            2
#define DFLT_VAL_NX90_hif_pio_out1_hif_a2       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a2    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a3            0x00000008U
#define SRT_NX90_hif_pio_out1_hif_a3            3
#define DFLT_VAL_NX90_hif_pio_out1_hif_a3       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a3    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a4            0x00000010U
#define SRT_NX90_hif_pio_out1_hif_a4            4
#define DFLT_VAL_NX90_hif_pio_out1_hif_a4       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a4    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a5            0x00000020U
#define SRT_NX90_hif_pio_out1_hif_a5            5
#define DFLT_VAL_NX90_hif_pio_out1_hif_a5       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a5    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a6            0x00000040U
#define SRT_NX90_hif_pio_out1_hif_a6            6
#define DFLT_VAL_NX90_hif_pio_out1_hif_a6       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a6    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a7            0x00000080U
#define SRT_NX90_hif_pio_out1_hif_a7            7
#define DFLT_VAL_NX90_hif_pio_out1_hif_a7       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a7    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a8            0x00000100U
#define SRT_NX90_hif_pio_out1_hif_a8            8
#define DFLT_VAL_NX90_hif_pio_out1_hif_a8       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a8    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a9            0x00000200U
#define SRT_NX90_hif_pio_out1_hif_a9            9
#define DFLT_VAL_NX90_hif_pio_out1_hif_a9       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a9    0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a10           0x00000400U
#define SRT_NX90_hif_pio_out1_hif_a10           10
#define DFLT_VAL_NX90_hif_pio_out1_hif_a10      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a10   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a11           0x00000800U
#define SRT_NX90_hif_pio_out1_hif_a11           11
#define DFLT_VAL_NX90_hif_pio_out1_hif_a11      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a11   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a12           0x00001000U
#define SRT_NX90_hif_pio_out1_hif_a12           12
#define DFLT_VAL_NX90_hif_pio_out1_hif_a12      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a12   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a13           0x00002000U
#define SRT_NX90_hif_pio_out1_hif_a13           13
#define DFLT_VAL_NX90_hif_pio_out1_hif_a13      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a13   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a14           0x00004000U
#define SRT_NX90_hif_pio_out1_hif_a14           14
#define DFLT_VAL_NX90_hif_pio_out1_hif_a14      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a14   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a15           0x00008000U
#define SRT_NX90_hif_pio_out1_hif_a15           15
#define DFLT_VAL_NX90_hif_pio_out1_hif_a15      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a15   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a16           0x00010000U
#define SRT_NX90_hif_pio_out1_hif_a16           16
#define DFLT_VAL_NX90_hif_pio_out1_hif_a16      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a16   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_a17           0x00020000U
#define SRT_NX90_hif_pio_out1_hif_a17           17
#define DFLT_VAL_NX90_hif_pio_out1_hif_a17      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a17   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_bhen          0x02000000U
#define SRT_NX90_hif_pio_out1_hif_bhen          25
#define DFLT_VAL_NX90_hif_pio_out1_hif_bhen     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_bhen  0x00000000U
#define MSK_NX90_hif_pio_out1_hif_rdn           0x04000000U
#define SRT_NX90_hif_pio_out1_hif_rdn           26
#define DFLT_VAL_NX90_hif_pio_out1_hif_rdn      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_rdn   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_wrn           0x08000000U
#define SRT_NX90_hif_pio_out1_hif_wrn           27
#define DFLT_VAL_NX90_hif_pio_out1_hif_wrn      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_wrn   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_csn           0x10000000U
#define SRT_NX90_hif_pio_out1_hif_csn           28
#define DFLT_VAL_NX90_hif_pio_out1_hif_csn      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_csn   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_rdy           0x20000000U
#define SRT_NX90_hif_pio_out1_hif_rdy           29
#define DFLT_VAL_NX90_hif_pio_out1_hif_rdy      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_rdy   0x00000000U
#define MSK_NX90_hif_pio_out1_hif_dirq          0x40000000U
#define SRT_NX90_hif_pio_out1_hif_dirq          30
#define DFLT_VAL_NX90_hif_pio_out1_hif_dirq     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_dirq  0x00000000U
#define MSK_NX90_hif_pio_out1_hif_sdclk         0x80000000U
#define SRT_NX90_hif_pio_out1_hif_sdclk         31
#define DFLT_VAL_NX90_hif_pio_out1_hif_sdclk    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_sdclk 0x00000000U

/* all used bits of 'NX90_hif_pio_out1': */
#define MSK_USED_BITS_NX90_hif_pio_out1 0xfe03ffffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_oe0 */
/* => HIF PIO Output Enable Configuration Register 0. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the output state */
/*    programmed in in hif_pio_out0 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_oe0         0x00000010U
#define Adr_NX90_hif_io_ctrl_hif_pio_oe0 0xFF401490U
#define Adr_NX90_hif_pio_oe0             0xFF401490U
#define DFLT_VAL_NX90_hif_pio_oe0        0x00000000U

#define MSK_NX90_hif_pio_oe0_hif_d0          0x00000001U
#define SRT_NX90_hif_pio_oe0_hif_d0          0
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d0     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d0  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d1          0x00000002U
#define SRT_NX90_hif_pio_oe0_hif_d1          1
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d1     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d1  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d2          0x00000004U
#define SRT_NX90_hif_pio_oe0_hif_d2          2
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d2     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d2  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d3          0x00000008U
#define SRT_NX90_hif_pio_oe0_hif_d3          3
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d3     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d3  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d4          0x00000010U
#define SRT_NX90_hif_pio_oe0_hif_d4          4
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d4     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d4  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d5          0x00000020U
#define SRT_NX90_hif_pio_oe0_hif_d5          5
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d5     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d5  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d6          0x00000040U
#define SRT_NX90_hif_pio_oe0_hif_d6          6
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d6     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d6  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d7          0x00000080U
#define SRT_NX90_hif_pio_oe0_hif_d7          7
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d7     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d7  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d8          0x00000100U
#define SRT_NX90_hif_pio_oe0_hif_d8          8
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d8     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d8  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d9          0x00000200U
#define SRT_NX90_hif_pio_oe0_hif_d9          9
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d9     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d9  0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d10         0x00000400U
#define SRT_NX90_hif_pio_oe0_hif_d10         10
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d10    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d10 0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d11         0x00000800U
#define SRT_NX90_hif_pio_oe0_hif_d11         11
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d11    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d11 0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d12         0x00001000U
#define SRT_NX90_hif_pio_oe0_hif_d12         12
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d12    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d12 0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d13         0x00002000U
#define SRT_NX90_hif_pio_oe0_hif_d13         13
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d13    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d13 0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d14         0x00004000U
#define SRT_NX90_hif_pio_oe0_hif_d14         14
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d14    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d14 0x00000000U
#define MSK_NX90_hif_pio_oe0_hif_d15         0x00008000U
#define SRT_NX90_hif_pio_oe0_hif_d15         15
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d15    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d15 0x00000000U

/* all used bits of 'NX90_hif_pio_oe0': */
#define MSK_USED_BITS_NX90_hif_pio_oe0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_oe1 */
/* => HIF PIO Output Enable Configuration Register 1. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the output state */
/*    programmed in in hif_pio_out1 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_oe1         0x00000014U
#define Adr_NX90_hif_io_ctrl_hif_pio_oe1 0xFF401494U
#define Adr_NX90_hif_pio_oe1             0xFF401494U
#define DFLT_VAL_NX90_hif_pio_oe1        0x00000000U

#define MSK_NX90_hif_pio_oe1_hif_a0            0x00000001U
#define SRT_NX90_hif_pio_oe1_hif_a0            0
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a0       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a0    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a1            0x00000002U
#define SRT_NX90_hif_pio_oe1_hif_a1            1
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a1       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a1    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a2            0x00000004U
#define SRT_NX90_hif_pio_oe1_hif_a2            2
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a2       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a2    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a3            0x00000008U
#define SRT_NX90_hif_pio_oe1_hif_a3            3
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a3       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a3    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a4            0x00000010U
#define SRT_NX90_hif_pio_oe1_hif_a4            4
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a4       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a4    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a5            0x00000020U
#define SRT_NX90_hif_pio_oe1_hif_a5            5
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a5       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a5    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a6            0x00000040U
#define SRT_NX90_hif_pio_oe1_hif_a6            6
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a6       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a6    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a7            0x00000080U
#define SRT_NX90_hif_pio_oe1_hif_a7            7
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a7       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a7    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a8            0x00000100U
#define SRT_NX90_hif_pio_oe1_hif_a8            8
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a8       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a8    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a9            0x00000200U
#define SRT_NX90_hif_pio_oe1_hif_a9            9
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a9       0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a9    0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a10           0x00000400U
#define SRT_NX90_hif_pio_oe1_hif_a10           10
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a10      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a10   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a11           0x00000800U
#define SRT_NX90_hif_pio_oe1_hif_a11           11
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a11      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a11   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a12           0x00001000U
#define SRT_NX90_hif_pio_oe1_hif_a12           12
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a12      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a12   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a13           0x00002000U
#define SRT_NX90_hif_pio_oe1_hif_a13           13
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a13      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a13   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a14           0x00004000U
#define SRT_NX90_hif_pio_oe1_hif_a14           14
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a14      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a14   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a15           0x00008000U
#define SRT_NX90_hif_pio_oe1_hif_a15           15
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a15      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a15   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a16           0x00010000U
#define SRT_NX90_hif_pio_oe1_hif_a16           16
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a16      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a16   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_a17           0x00020000U
#define SRT_NX90_hif_pio_oe1_hif_a17           17
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a17      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a17   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_bhen          0x02000000U
#define SRT_NX90_hif_pio_oe1_hif_bhen          25
#define DFLT_VAL_NX90_hif_pio_oe1_hif_bhen     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_bhen  0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_rdn           0x04000000U
#define SRT_NX90_hif_pio_oe1_hif_rdn           26
#define DFLT_VAL_NX90_hif_pio_oe1_hif_rdn      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_rdn   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_wrn           0x08000000U
#define SRT_NX90_hif_pio_oe1_hif_wrn           27
#define DFLT_VAL_NX90_hif_pio_oe1_hif_wrn      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_wrn   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_csn           0x10000000U
#define SRT_NX90_hif_pio_oe1_hif_csn           28
#define DFLT_VAL_NX90_hif_pio_oe1_hif_csn      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_csn   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_rdy           0x20000000U
#define SRT_NX90_hif_pio_oe1_hif_rdy           29
#define DFLT_VAL_NX90_hif_pio_oe1_hif_rdy      0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_rdy   0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_dirq          0x40000000U
#define SRT_NX90_hif_pio_oe1_hif_dirq          30
#define DFLT_VAL_NX90_hif_pio_oe1_hif_dirq     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_dirq  0x00000000U
#define MSK_NX90_hif_pio_oe1_hif_sdclk         0x80000000U
#define SRT_NX90_hif_pio_oe1_hif_sdclk         31
#define DFLT_VAL_NX90_hif_pio_oe1_hif_sdclk    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_sdclk 0x00000000U

/* all used bits of 'NX90_hif_pio_oe1': */
#define MSK_USED_BITS_NX90_hif_pio_oe1 0xfe03ffffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_in0 */
/* => HIF PIO Input State Register 0. */
/*    IO input states can be read here regardless whether IO is used in current HIF/EXT_BUS Memory Interface configuration. */
/*    HIF IO sampling behaviour can be programmed by 'in_ctrl' bits of 'hif_pio_cfg' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_in0         0x00000018U
#define Adr_NX90_hif_io_ctrl_hif_pio_in0 0xFF401498U
#define Adr_NX90_hif_pio_in0             0xFF401498U

#define MSK_NX90_hif_pio_in0_hif_d0  0x00000001U
#define SRT_NX90_hif_pio_in0_hif_d0  0
#define MSK_NX90_hif_pio_in0_hif_d1  0x00000002U
#define SRT_NX90_hif_pio_in0_hif_d1  1
#define MSK_NX90_hif_pio_in0_hif_d2  0x00000004U
#define SRT_NX90_hif_pio_in0_hif_d2  2
#define MSK_NX90_hif_pio_in0_hif_d3  0x00000008U
#define SRT_NX90_hif_pio_in0_hif_d3  3
#define MSK_NX90_hif_pio_in0_hif_d4  0x00000010U
#define SRT_NX90_hif_pio_in0_hif_d4  4
#define MSK_NX90_hif_pio_in0_hif_d5  0x00000020U
#define SRT_NX90_hif_pio_in0_hif_d5  5
#define MSK_NX90_hif_pio_in0_hif_d6  0x00000040U
#define SRT_NX90_hif_pio_in0_hif_d6  6
#define MSK_NX90_hif_pio_in0_hif_d7  0x00000080U
#define SRT_NX90_hif_pio_in0_hif_d7  7
#define MSK_NX90_hif_pio_in0_hif_d8  0x00000100U
#define SRT_NX90_hif_pio_in0_hif_d8  8
#define MSK_NX90_hif_pio_in0_hif_d9  0x00000200U
#define SRT_NX90_hif_pio_in0_hif_d9  9
#define MSK_NX90_hif_pio_in0_hif_d10 0x00000400U
#define SRT_NX90_hif_pio_in0_hif_d10 10
#define MSK_NX90_hif_pio_in0_hif_d11 0x00000800U
#define SRT_NX90_hif_pio_in0_hif_d11 11
#define MSK_NX90_hif_pio_in0_hif_d12 0x00001000U
#define SRT_NX90_hif_pio_in0_hif_d12 12
#define MSK_NX90_hif_pio_in0_hif_d13 0x00002000U
#define SRT_NX90_hif_pio_in0_hif_d13 13
#define MSK_NX90_hif_pio_in0_hif_d14 0x00004000U
#define SRT_NX90_hif_pio_in0_hif_d14 14
#define MSK_NX90_hif_pio_in0_hif_d15 0x00008000U
#define SRT_NX90_hif_pio_in0_hif_d15 15

/* all used bits of 'NX90_hif_pio_in0': */
#define MSK_USED_BITS_NX90_hif_pio_in0 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_in1 */
/* => HIF PIO Input State Register 1. */
/*    IO input states can be read here regardless whether IO is used in current HIF/EXT_BUS Memory Interface configuration. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_in1         0x0000001CU
#define Adr_NX90_hif_io_ctrl_hif_pio_in1 0xFF40149CU
#define Adr_NX90_hif_pio_in1             0xFF40149CU

#define MSK_NX90_hif_pio_in1_hif_a0    0x00000001U
#define SRT_NX90_hif_pio_in1_hif_a0    0
#define MSK_NX90_hif_pio_in1_hif_a1    0x00000002U
#define SRT_NX90_hif_pio_in1_hif_a1    1
#define MSK_NX90_hif_pio_in1_hif_a2    0x00000004U
#define SRT_NX90_hif_pio_in1_hif_a2    2
#define MSK_NX90_hif_pio_in1_hif_a3    0x00000008U
#define SRT_NX90_hif_pio_in1_hif_a3    3
#define MSK_NX90_hif_pio_in1_hif_a4    0x00000010U
#define SRT_NX90_hif_pio_in1_hif_a4    4
#define MSK_NX90_hif_pio_in1_hif_a5    0x00000020U
#define SRT_NX90_hif_pio_in1_hif_a5    5
#define MSK_NX90_hif_pio_in1_hif_a6    0x00000040U
#define SRT_NX90_hif_pio_in1_hif_a6    6
#define MSK_NX90_hif_pio_in1_hif_a7    0x00000080U
#define SRT_NX90_hif_pio_in1_hif_a7    7
#define MSK_NX90_hif_pio_in1_hif_a8    0x00000100U
#define SRT_NX90_hif_pio_in1_hif_a8    8
#define MSK_NX90_hif_pio_in1_hif_a9    0x00000200U
#define SRT_NX90_hif_pio_in1_hif_a9    9
#define MSK_NX90_hif_pio_in1_hif_a10   0x00000400U
#define SRT_NX90_hif_pio_in1_hif_a10   10
#define MSK_NX90_hif_pio_in1_hif_a11   0x00000800U
#define SRT_NX90_hif_pio_in1_hif_a11   11
#define MSK_NX90_hif_pio_in1_hif_a12   0x00001000U
#define SRT_NX90_hif_pio_in1_hif_a12   12
#define MSK_NX90_hif_pio_in1_hif_a13   0x00002000U
#define SRT_NX90_hif_pio_in1_hif_a13   13
#define MSK_NX90_hif_pio_in1_hif_a14   0x00004000U
#define SRT_NX90_hif_pio_in1_hif_a14   14
#define MSK_NX90_hif_pio_in1_hif_a15   0x00008000U
#define SRT_NX90_hif_pio_in1_hif_a15   15
#define MSK_NX90_hif_pio_in1_hif_a16   0x00010000U
#define SRT_NX90_hif_pio_in1_hif_a16   16
#define MSK_NX90_hif_pio_in1_hif_a17   0x00020000U
#define SRT_NX90_hif_pio_in1_hif_a17   17
#define MSK_NX90_hif_pio_in1_hif_bhen  0x02000000U
#define SRT_NX90_hif_pio_in1_hif_bhen  25
#define MSK_NX90_hif_pio_in1_hif_rdn   0x04000000U
#define SRT_NX90_hif_pio_in1_hif_rdn   26
#define MSK_NX90_hif_pio_in1_hif_wrn   0x08000000U
#define SRT_NX90_hif_pio_in1_hif_wrn   27
#define MSK_NX90_hif_pio_in1_hif_csn   0x10000000U
#define SRT_NX90_hif_pio_in1_hif_csn   28
#define MSK_NX90_hif_pio_in1_hif_rdy   0x20000000U
#define SRT_NX90_hif_pio_in1_hif_rdy   29
#define MSK_NX90_hif_pio_in1_hif_dirq  0x40000000U
#define SRT_NX90_hif_pio_in1_hif_dirq  30
#define MSK_NX90_hif_pio_in1_hif_sdclk 0x80000000U
#define SRT_NX90_hif_pio_in1_hif_sdclk 31

/* all used bits of 'NX90_hif_pio_in1': */
#define MSK_USED_BITS_NX90_hif_pio_in1 0xfe03ffffU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_raw */
/* => HIF PIO Raw (before masking) IRQ Status Register. */
/*    If bit is set, the according interrupt is asserted. */
/*    Interrupt status can be cleared by writing ones to this register. */
/*    Each IRQ source can be assigned either to xPIC or to ARM (or to both) by the following registers. */
/*    IRQ clearing has lower priority than IRQ set when done simultaneously. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/*    Note: The bits of this register are reordered since NETX56. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_raw         0x00000024U
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_raw 0xFF4014A4U
#define Adr_NX90_hif_pio_irq_raw             0xFF4014A4U

#define MSK_NX90_hif_pio_irq_raw_irq_hif_d12  0x00000001U
#define SRT_NX90_hif_pio_irq_raw_irq_hif_d12  0
#define MSK_NX90_hif_pio_irq_raw_irq_hif_a16  0x00000002U
#define SRT_NX90_hif_pio_irq_raw_irq_hif_a16  1
#define MSK_NX90_hif_pio_irq_raw_irq_hif_a17  0x00000004U
#define SRT_NX90_hif_pio_irq_raw_irq_hif_a17  2
#define MSK_NX90_hif_pio_irq_raw_irq_hif_dirq 0x00000008U
#define SRT_NX90_hif_pio_irq_raw_irq_hif_dirq 3

/* all used bits of 'NX90_hif_pio_irq_raw': */
#define MSK_USED_BITS_NX90_hif_pio_irq_raw 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_arm_mask_set */
/* => HIF PIO Interrupt Mask Register for netX internal ARM. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal ARM. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal ARM without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_arm_mask_set         0x00000028U
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_arm_mask_set 0xFF4014A8U
#define Adr_NX90_hif_pio_irq_arm_mask_set             0xFF4014A8U
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set        0x00000000U

#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12          0x00000001U
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12  0x00000000U
#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16          0x00000002U
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16  0x00000000U
#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17          0x00000004U
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17  0x00000000U
#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq         0x00000008U
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq 0x00000000U

/* all used bits of 'NX90_hif_pio_irq_arm_mask_set': */
#define MSK_USED_BITS_NX90_hif_pio_irq_arm_mask_set 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_arm_mask_reset */
/* => HIF PIO Interrupt Mask Reset Register for netX internal ARM. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal ARM if asserted. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal ARM without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_arm_mask_reset         0x0000002CU
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_arm_mask_reset 0xFF4014ACU
#define Adr_NX90_hif_pio_irq_arm_mask_reset             0xFF4014ACU
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset        0x00000000U

#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12          0x00000001U
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12  0x00000000U
#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16          0x00000002U
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16  0x00000000U
#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17          0x00000004U
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17  0x00000000U
#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq         0x00000008U
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq 0x00000000U

/* all used bits of 'NX90_hif_pio_irq_arm_mask_reset': */
#define MSK_USED_BITS_NX90_hif_pio_irq_arm_mask_reset 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_arm_masked */
/* => HIF PIO Masked Interrupt Status Register for netX internal ARM. */
/*    If bit is set, if the according mask bit is set in hif_pio_irq_arm_mask-register and the according interrupt is asserted. */
/*    IRQ for netX internal ARM signal is asserted if at least one bit is set here. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal ARM signal without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_arm_masked         0x00000030U
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_arm_masked 0xFF4014B0U
#define Adr_NX90_hif_pio_irq_arm_masked             0xFF4014B0U

#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_d12  0x00000001U
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_d12  0
#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_a16  0x00000002U
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_a16  1
#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_a17  0x00000004U
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_a17  2
#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_dirq 0x00000008U
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_dirq 3

/* all used bits of 'NX90_hif_pio_irq_arm_masked': */
#define MSK_USED_BITS_NX90_hif_pio_irq_arm_masked 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_xpic_mask_set */
/* => HIF PIO Interrupt Mask Register for netX internal xPIC. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal xPIC. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal xPIC without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_xpic_mask_set         0x00000034U
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_xpic_mask_set 0xFF4014B4U
#define Adr_NX90_hif_pio_irq_xpic_mask_set             0xFF4014B4U
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set        0x00000000U

#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12          0x00000001U
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12  0x00000000U
#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16          0x00000002U
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16  0x00000000U
#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17          0x00000004U
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17  0x00000000U
#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq         0x00000008U
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq 0x00000000U

/* all used bits of 'NX90_hif_pio_irq_xpic_mask_set': */
#define MSK_USED_BITS_NX90_hif_pio_irq_xpic_mask_set 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_xpic_mask_reset */
/* => HIF PIO Interrupt Mask Reset Register for netX internal xPIC. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal xPIC if asserted. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal xPIC without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_xpic_mask_reset         0x00000038U
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_xpic_mask_reset 0xFF4014B8U
#define Adr_NX90_hif_pio_irq_xpic_mask_reset             0xFF4014B8U
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset        0x00000000U

#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12          0x00000001U
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12  0x00000000U
#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16          0x00000002U
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16  0x00000000U
#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17          0x00000004U
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17     0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17  0x00000000U
#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq         0x00000008U
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq    0x00000000U
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq 0x00000000U

/* all used bits of 'NX90_hif_pio_irq_xpic_mask_reset': */
#define MSK_USED_BITS_NX90_hif_pio_irq_xpic_mask_reset 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_xpic_masked */
/* => HIF PIO Masked Interrupt Status Register for netX internal xPIC. */
/*    If bit is set, if the according mask bit is set in hif_pio_irq_xpic_mask-register and the according interrupt is asserted. */
/*    IRQ for netX internal xPIC signal is asserted if at least one bit is set here. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal xPIC signal without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_xpic_masked         0x0000003CU
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_xpic_masked 0xFF4014BCU
#define Adr_NX90_hif_pio_irq_xpic_masked             0xFF4014BCU

#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_d12  0x00000001U
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_d12  0
#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_a16  0x00000002U
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_a16  1
#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_a17  0x00000004U
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_a17  2
#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_dirq 0x00000008U
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_dirq 3

/* all used bits of 'NX90_hif_pio_irq_xpic_masked': */
#define MSK_USED_BITS_NX90_hif_pio_irq_xpic_masked 0x0000000fU


/* ===================================================================== */

/* Area of hifmemctrl */

/* ===================================================================== */

#define Addr_NX90_hifmemctrl 0xFF401500U

/* ===================================================================== */

/* AREA ext_asyncmem_ctrl */
/* Area of hif_asyncmem_ctrl */

/* ===================================================================== */

#define Addr_NX90_hif_asyncmem_ctrl 0xFF401500U

/* --------------------------------------------------------------------- */
/* Register extsram0_ctrl */
/* => Control Register for external bus interface and wait-states for chip-select 0 area. */
/*    External addresses always be byte addresses. */
/*    For additional byte-enables/DQM signals view netX pinout documentation. */
/*    For all wait state configuration 1 cycle is 1 netx system clock cycle, i.e. 10ns for netX running on 100MHz at normal operation. */
/*    Note: Pause and data width configuration is compatible to netx500/100 and netx50. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram0_ctrl               0x00000000U
#define Adr_NX90_hif_asyncmem_ctrl_extsram0_ctrl 0xFF401500U
#define Adr_NX90_extsram0_ctrl                   0xFF401500U
#define DFLT_VAL_NX90_extsram0_ctrl              0x0303033fU

#define MSK_NX90_extsram0_ctrl_ws                       0x0000003fU
#define SRT_NX90_extsram0_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram0_ctrl_ws                  0x0000003fU
#define DFLT_BF_VAL_NX90_extsram0_ctrl_ws               0x0000003fU
#define MSK_NX90_extsram0_ctrl_p_pre                    0x00000300U
#define SRT_NX90_extsram0_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram0_ctrl_p_pre               0x00000300U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_p_pre            0x00000003U
#define MSK_NX90_extsram0_ctrl_p_post                   0x00030000U
#define SRT_NX90_extsram0_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram0_ctrl_p_post              0x00030000U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_p_post           0x00000003U
#define MSK_NX90_extsram0_ctrl_dwidth                   0x03000000U
#define SRT_NX90_extsram0_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram0_ctrl_dwidth              0x03000000U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_dwidth           0x00000003U
#define MSK_NX90_extsram0_ctrl_no_p_pre_seq_rd          0x10000000U
#define SRT_NX90_extsram0_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram0_ctrl_no_p_pre_seq_rd     0x00000000U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_no_p_pre_seq_rd  0x00000000U
#define MSK_NX90_extsram0_ctrl_no_p_post_seq_rd         0x20000000U
#define SRT_NX90_extsram0_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram0_ctrl_no_p_post_seq_rd    0x00000000U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_no_p_post_seq_rd 0x00000000U
#define MSK_NX90_extsram0_ctrl_static_cs                0x40000000U
#define SRT_NX90_extsram0_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram0_ctrl_static_cs           0x00000000U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_static_cs        0x00000000U
#define MSK_NX90_extsram0_ctrl_ready_en                 0x80000000U
#define SRT_NX90_extsram0_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram0_ctrl_ready_en            0x00000000U
#define DFLT_BF_VAL_NX90_extsram0_ctrl_ready_en         0x00000000U

/* all used bits of 'NX90_extsram0_ctrl': */
#define MSK_USED_BITS_NX90_extsram0_ctrl 0xf303033fU

/* --------------------------------------------------------------------- */
/* Register extsram1_ctrl */
/* => Control Register for external bus interface and wait-states for chip-select 1 area. */
/*    For detailed register description view extsram0_ctrl register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram1_ctrl               0x00000004U
#define Adr_NX90_hif_asyncmem_ctrl_extsram1_ctrl 0xFF401504U
#define Adr_NX90_extsram1_ctrl                   0xFF401504U
#define DFLT_VAL_NX90_extsram1_ctrl              0x0303033fU

#define MSK_NX90_extsram1_ctrl_ws                       0x0000003fU
#define SRT_NX90_extsram1_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram1_ctrl_ws                  0x0000003fU
#define DFLT_BF_VAL_NX90_extsram1_ctrl_ws               0x0000003fU
#define MSK_NX90_extsram1_ctrl_p_pre                    0x00000300U
#define SRT_NX90_extsram1_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram1_ctrl_p_pre               0x00000300U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_p_pre            0x00000003U
#define MSK_NX90_extsram1_ctrl_p_post                   0x00030000U
#define SRT_NX90_extsram1_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram1_ctrl_p_post              0x00030000U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_p_post           0x00000003U
#define MSK_NX90_extsram1_ctrl_dwidth                   0x03000000U
#define SRT_NX90_extsram1_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram1_ctrl_dwidth              0x03000000U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_dwidth           0x00000003U
#define MSK_NX90_extsram1_ctrl_no_p_pre_seq_rd          0x10000000U
#define SRT_NX90_extsram1_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram1_ctrl_no_p_pre_seq_rd     0x00000000U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_no_p_pre_seq_rd  0x00000000U
#define MSK_NX90_extsram1_ctrl_no_p_post_seq_rd         0x20000000U
#define SRT_NX90_extsram1_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram1_ctrl_no_p_post_seq_rd    0x00000000U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_no_p_post_seq_rd 0x00000000U
#define MSK_NX90_extsram1_ctrl_static_cs                0x40000000U
#define SRT_NX90_extsram1_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram1_ctrl_static_cs           0x00000000U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_static_cs        0x00000000U
#define MSK_NX90_extsram1_ctrl_ready_en                 0x80000000U
#define SRT_NX90_extsram1_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram1_ctrl_ready_en            0x00000000U
#define DFLT_BF_VAL_NX90_extsram1_ctrl_ready_en         0x00000000U

/* all used bits of 'NX90_extsram1_ctrl': */
#define MSK_USED_BITS_NX90_extsram1_ctrl 0xf303033fU

/* --------------------------------------------------------------------- */
/* Register extsram2_ctrl */
/* => Control Register for external bus interface and wait-states for chip-select 2 area. */
/*    For detailed register description view extsram0_ctrl register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram2_ctrl               0x00000008U
#define Adr_NX90_hif_asyncmem_ctrl_extsram2_ctrl 0xFF401508U
#define Adr_NX90_extsram2_ctrl                   0xFF401508U
#define DFLT_VAL_NX90_extsram2_ctrl              0x0303033fU

#define MSK_NX90_extsram2_ctrl_ws                       0x0000003fU
#define SRT_NX90_extsram2_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram2_ctrl_ws                  0x0000003fU
#define DFLT_BF_VAL_NX90_extsram2_ctrl_ws               0x0000003fU
#define MSK_NX90_extsram2_ctrl_p_pre                    0x00000300U
#define SRT_NX90_extsram2_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram2_ctrl_p_pre               0x00000300U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_p_pre            0x00000003U
#define MSK_NX90_extsram2_ctrl_p_post                   0x00030000U
#define SRT_NX90_extsram2_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram2_ctrl_p_post              0x00030000U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_p_post           0x00000003U
#define MSK_NX90_extsram2_ctrl_dwidth                   0x03000000U
#define SRT_NX90_extsram2_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram2_ctrl_dwidth              0x03000000U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_dwidth           0x00000003U
#define MSK_NX90_extsram2_ctrl_no_p_pre_seq_rd          0x10000000U
#define SRT_NX90_extsram2_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram2_ctrl_no_p_pre_seq_rd     0x00000000U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_no_p_pre_seq_rd  0x00000000U
#define MSK_NX90_extsram2_ctrl_no_p_post_seq_rd         0x20000000U
#define SRT_NX90_extsram2_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram2_ctrl_no_p_post_seq_rd    0x00000000U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_no_p_post_seq_rd 0x00000000U
#define MSK_NX90_extsram2_ctrl_static_cs                0x40000000U
#define SRT_NX90_extsram2_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram2_ctrl_static_cs           0x00000000U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_static_cs        0x00000000U
#define MSK_NX90_extsram2_ctrl_ready_en                 0x80000000U
#define SRT_NX90_extsram2_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram2_ctrl_ready_en            0x00000000U
#define DFLT_BF_VAL_NX90_extsram2_ctrl_ready_en         0x00000000U

/* all used bits of 'NX90_extsram2_ctrl': */
#define MSK_USED_BITS_NX90_extsram2_ctrl 0xf303033fU

/* --------------------------------------------------------------------- */
/* Register extsram3_ctrl */
/* => Control Register for external bus interface and wait-states for ExtMem1 chip-select 3 area. */
/*    For detailed register description view extsram0_ctrl register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram3_ctrl               0x0000000CU
#define Adr_NX90_hif_asyncmem_ctrl_extsram3_ctrl 0xFF40150CU
#define Adr_NX90_extsram3_ctrl                   0xFF40150CU
#define DFLT_VAL_NX90_extsram3_ctrl              0x0303033fU

#define MSK_NX90_extsram3_ctrl_ws                       0x0000003fU
#define SRT_NX90_extsram3_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram3_ctrl_ws                  0x0000003fU
#define DFLT_BF_VAL_NX90_extsram3_ctrl_ws               0x0000003fU
#define MSK_NX90_extsram3_ctrl_p_pre                    0x00000300U
#define SRT_NX90_extsram3_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram3_ctrl_p_pre               0x00000300U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_p_pre            0x00000003U
#define MSK_NX90_extsram3_ctrl_p_post                   0x00030000U
#define SRT_NX90_extsram3_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram3_ctrl_p_post              0x00030000U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_p_post           0x00000003U
#define MSK_NX90_extsram3_ctrl_dwidth                   0x03000000U
#define SRT_NX90_extsram3_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram3_ctrl_dwidth              0x03000000U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_dwidth           0x00000003U
#define MSK_NX90_extsram3_ctrl_no_p_pre_seq_rd          0x10000000U
#define SRT_NX90_extsram3_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram3_ctrl_no_p_pre_seq_rd     0x00000000U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_no_p_pre_seq_rd  0x00000000U
#define MSK_NX90_extsram3_ctrl_no_p_post_seq_rd         0x20000000U
#define SRT_NX90_extsram3_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram3_ctrl_no_p_post_seq_rd    0x00000000U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_no_p_post_seq_rd 0x00000000U
#define MSK_NX90_extsram3_ctrl_static_cs                0x40000000U
#define SRT_NX90_extsram3_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram3_ctrl_static_cs           0x00000000U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_static_cs        0x00000000U
#define MSK_NX90_extsram3_ctrl_ready_en                 0x80000000U
#define SRT_NX90_extsram3_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram3_ctrl_ready_en            0x00000000U
#define DFLT_BF_VAL_NX90_extsram3_ctrl_ready_en         0x00000000U

/* all used bits of 'NX90_extsram3_ctrl': */
#define MSK_USED_BITS_NX90_extsram3_ctrl 0xf303033fU

/* --------------------------------------------------------------------- */
/* Register ext_cs0_apm_ctrl */
/* => Asynchronous Page Mode (APM) Control Register for ExtMem0 chip-select area. */
/*    Only ExtMem0 chip-select area supports fast Asynchronous-Page-Mode (APM) Access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ext_cs0_apm_ctrl               0x00000010U
#define Adr_NX90_hif_asyncmem_ctrl_ext_cs0_apm_ctrl 0xFF401510U
#define Adr_NX90_ext_cs0_apm_ctrl                   0xFF401510U
#define DFLT_VAL_NX90_ext_cs0_apm_ctrl              0x0000000fU

#define MSK_NX90_ext_cs0_apm_ctrl_ws_apm          0x0000000fU
#define SRT_NX90_ext_cs0_apm_ctrl_ws_apm          0
#define DFLT_VAL_NX90_ext_cs0_apm_ctrl_ws_apm     0x0000000fU
#define DFLT_BF_VAL_NX90_ext_cs0_apm_ctrl_ws_apm  0x0000000fU
#define MSK_NX90_ext_cs0_apm_ctrl_apm_cfg         0x00000700U
#define SRT_NX90_ext_cs0_apm_ctrl_apm_cfg         8
#define DFLT_VAL_NX90_ext_cs0_apm_ctrl_apm_cfg    0x00000000U
#define DFLT_BF_VAL_NX90_ext_cs0_apm_ctrl_apm_cfg 0x00000000U

/* all used bits of 'NX90_ext_cs0_apm_ctrl': */
#define MSK_USED_BITS_NX90_ext_cs0_apm_ctrl 0x0000070fU

/* --------------------------------------------------------------------- */
/* Register ext_rdy_cfg */
/* => External Memory Ready Control Register. */
/*    Note: Timeout is generated if ready usage is enabled by the extsramX_ctrl registers and is not asserted to active state within 10us. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ext_rdy_cfg               0x00000020U
#define Adr_NX90_hif_asyncmem_ctrl_ext_rdy_cfg 0xFF401520U
#define Adr_NX90_ext_rdy_cfg                   0xFF401520U
#define DFLT_VAL_NX90_ext_rdy_cfg              0x00000001U

#define MSK_NX90_ext_rdy_cfg_rdy_act_level         0x00000001U
#define SRT_NX90_ext_rdy_cfg_rdy_act_level         0
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_act_level    0x00000001U
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_act_level 0x00000001U
#define MSK_NX90_ext_rdy_cfg_rdy_filter            0x00000030U
#define SRT_NX90_ext_rdy_cfg_rdy_filter            4
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_filter       0x00000000U
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_filter    0x00000000U
#define MSK_NX90_ext_rdy_cfg_rdy_to_irq_en         0x00000100U
#define SRT_NX90_ext_rdy_cfg_rdy_to_irq_en         8
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_to_irq_en    0x00000000U
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_to_irq_en 0x00000000U
#define MSK_NX90_ext_rdy_cfg_rdy_to_dis            0x00000800U
#define SRT_NX90_ext_rdy_cfg_rdy_to_dis            11
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_to_dis       0x00000000U
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_to_dis    0x00000000U

/* all used bits of 'NX90_ext_rdy_cfg': */
#define MSK_USED_BITS_NX90_ext_rdy_cfg 0x00000931U

/* --------------------------------------------------------------------- */
/* Register ext_rdy_status */
/* => External Memory Ready Status Register. */
/*    Note: Timeout is generated if ready usage is enabled by the extsramX_ctrl registers and is not asserted to active state within 10us. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ext_rdy_status               0x00000024U
#define Adr_NX90_hif_asyncmem_ctrl_ext_rdy_status 0xFF401524U
#define Adr_NX90_ext_rdy_status                   0xFF401524U
#define DFLT_VAL_NX90_ext_rdy_status              0x00000000U

#define MSK_NX90_ext_rdy_status_rdy_to_err_adr         0x07ffffffU
#define SRT_NX90_ext_rdy_status_rdy_to_err_adr         0
#define DFLT_VAL_NX90_ext_rdy_status_rdy_to_err_adr    0x00000000U
#define DFLT_BF_VAL_NX90_ext_rdy_status_rdy_to_err_adr 0x00000000U
#define MSK_NX90_ext_rdy_status_rdy_to_err_cs          0x30000000U
#define SRT_NX90_ext_rdy_status_rdy_to_err_cs          28
#define DFLT_VAL_NX90_ext_rdy_status_rdy_to_err_cs     0x00000000U
#define DFLT_BF_VAL_NX90_ext_rdy_status_rdy_to_err_cs  0x00000000U
#define MSK_NX90_ext_rdy_status_rdy_to_err             0x80000000U
#define SRT_NX90_ext_rdy_status_rdy_to_err             31
#define DFLT_VAL_NX90_ext_rdy_status_rdy_to_err        0x00000000U
#define DFLT_BF_VAL_NX90_ext_rdy_status_rdy_to_err     0x00000000U

/* all used bits of 'NX90_ext_rdy_status': */
#define MSK_USED_BITS_NX90_ext_rdy_status 0xb7ffffffU


/* ===================================================================== */

/* AREA ext_sdram_ctrl */
/* Area of hif_sdram_ctrl */

/* ===================================================================== */

#define Addr_NX90_hif_sdram_ctrl 0xFF401540U

/* --------------------------------------------------------------------- */
/* Register sdram_general_ctrl */
/* => Control Register for external SDRAM access. */
/*    For initializing procedure netX SDRAM controller view description of 'ctrl_en' bit inside this register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_general_ctrl            0x00000000U
#define Adr_NX90_hif_sdram_ctrl_sdram_general_ctrl 0xFF401540U
#define Adr_NX90_sdram_general_ctrl                0xFF401540U
#define DFLT_VAL_NX90_sdram_general_ctrl           0x01000001U

#define MSK_NX90_sdram_general_ctrl_banks                  0x00000003U
#define SRT_NX90_sdram_general_ctrl_banks                  0
#define DFLT_VAL_NX90_sdram_general_ctrl_banks             0x00000001U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_banks          0x00000001U
#define MSK_NX90_sdram_general_ctrl_rows                   0x00000030U
#define SRT_NX90_sdram_general_ctrl_rows                   4
#define DFLT_VAL_NX90_sdram_general_ctrl_rows              0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_rows           0x00000000U
#define MSK_NX90_sdram_general_ctrl_columns                0x00000700U
#define SRT_NX90_sdram_general_ctrl_columns                8
#define DFLT_VAL_NX90_sdram_general_ctrl_columns           0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_columns        0x00000000U
#define MSK_NX90_sdram_general_ctrl_dbus32                 0x00010000U
#define SRT_NX90_sdram_general_ctrl_dbus32                 16
#define DFLT_VAL_NX90_sdram_general_ctrl_dbus32            0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_dbus32         0x00000000U
#define MSK_NX90_sdram_general_ctrl_sdram_pwdn             0x00020000U
#define SRT_NX90_sdram_general_ctrl_sdram_pwdn             17
#define DFLT_VAL_NX90_sdram_general_ctrl_sdram_pwdn        0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_sdram_pwdn     0x00000000U
#define MSK_NX90_sdram_general_ctrl_extclk_en              0x00040000U
#define SRT_NX90_sdram_general_ctrl_extclk_en              18
#define DFLT_VAL_NX90_sdram_general_ctrl_extclk_en         0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_extclk_en      0x00000000U
#define MSK_NX90_sdram_general_ctrl_ctrl_en                0x00080000U
#define SRT_NX90_sdram_general_ctrl_ctrl_en                19
#define DFLT_VAL_NX90_sdram_general_ctrl_ctrl_en           0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_ctrl_en        0x00000000U
#define MSK_NX90_sdram_general_ctrl_refresh_mode           0x03000000U
#define SRT_NX90_sdram_general_ctrl_refresh_mode           24
#define DFLT_VAL_NX90_sdram_general_ctrl_refresh_mode      0x01000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_refresh_mode   0x00000001U
#define MSK_NX90_sdram_general_ctrl_sdram_ready            0x40000000U
#define SRT_NX90_sdram_general_ctrl_sdram_ready            30
#define DFLT_VAL_NX90_sdram_general_ctrl_sdram_ready       0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_sdram_ready    0x00000000U
#define MSK_NX90_sdram_general_ctrl_refresh_status         0x80000000U
#define SRT_NX90_sdram_general_ctrl_refresh_status         31
#define DFLT_VAL_NX90_sdram_general_ctrl_refresh_status    0x00000000U
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_refresh_status 0x00000000U

/* all used bits of 'NX90_sdram_general_ctrl': */
#define MSK_USED_BITS_NX90_sdram_general_ctrl 0xc30f0733U

/* --------------------------------------------------------------------- */
/* Register sdram_timing_ctrl */
/* => Control Register for external SDRAM access. */
/*    Changes can only be done, if the SDRAM controller is disabled (sdram_general_ctrl.ctrl_en == 0) */
/*    to avoid configuration problems. */
/*    Please view description of 'ctrl_en' bit inside sdram_general_ctrl register for initializing-procedure of netX SDRAM controller. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_timing_ctrl            0x00000004U
#define Adr_NX90_hif_sdram_ctrl_sdram_timing_ctrl 0xFF401544U
#define Adr_NX90_sdram_timing_ctrl                0xFF401544U
#define DFLT_VAL_NX90_sdram_timing_ctrl           0x0301f7f3U

#define MSK_NX90_sdram_timing_ctrl_t_RCD                     0x00000003U
#define SRT_NX90_sdram_timing_ctrl_t_RCD                     0
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RCD                0x00000003U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RCD             0x00000003U
#define MSK_NX90_sdram_timing_ctrl_t_WR                      0x00000030U
#define SRT_NX90_sdram_timing_ctrl_t_WR                      4
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_WR                 0x00000030U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_WR              0x00000003U
#define MSK_NX90_sdram_timing_ctrl_t_RP                      0x000000c0U
#define SRT_NX90_sdram_timing_ctrl_t_RP                      6
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RP                 0x000000c0U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RP              0x00000003U
#define MSK_NX90_sdram_timing_ctrl_t_RAS                     0x00000700U
#define SRT_NX90_sdram_timing_ctrl_t_RAS                     8
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RAS                0x00000700U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RAS             0x00000007U
#define MSK_NX90_sdram_timing_ctrl_t_RFC                     0x0000f000U
#define SRT_NX90_sdram_timing_ctrl_t_RFC                     12
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RFC                0x0000f000U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RFC             0x0000000fU
#define MSK_NX90_sdram_timing_ctrl_t_REFI                    0x00030000U
#define SRT_NX90_sdram_timing_ctrl_t_REFI                    16
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_REFI               0x00010000U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_REFI            0x00000001U
#define MSK_NX90_sdram_timing_ctrl_mem_sdclk_phase           0x00700000U
#define SRT_NX90_sdram_timing_ctrl_mem_sdclk_phase           20
#define DFLT_VAL_NX90_sdram_timing_ctrl_mem_sdclk_phase      0x00000000U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_mem_sdclk_phase   0x00000000U
#define MSK_NX90_sdram_timing_ctrl_data_sample_phase         0x07000000U
#define SRT_NX90_sdram_timing_ctrl_data_sample_phase         24
#define DFLT_VAL_NX90_sdram_timing_ctrl_data_sample_phase    0x03000000U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_data_sample_phase 0x00000003U
#define MSK_NX90_sdram_timing_ctrl_bypass_neg_delay          0x10000000U
#define SRT_NX90_sdram_timing_ctrl_bypass_neg_delay          28
#define DFLT_VAL_NX90_sdram_timing_ctrl_bypass_neg_delay     0x00000000U
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_bypass_neg_delay  0x00000000U

/* all used bits of 'NX90_sdram_timing_ctrl': */
#define MSK_USED_BITS_NX90_sdram_timing_ctrl 0x1773f7f3U

/* --------------------------------------------------------------------- */
/* Register sdram_mr */
/* => Mode Register for SDRAM device. */
/*    Changes can only be done, if the SDRAM controller is disabled (sdram_general_ctrl.ctrl_en == 0) */
/*    to avoid configuration problems. */
/*    The SDRAM Mode Registers of the used SDRAM device will be set after enabling the SDRAM controller in the 200us */
/*    SDRAM memory initialisation procedure. It is part of the SDRAM device and programmed by the LOAD MODE REGISTER command. */
/*    For details of SDRAM Mode Register view datasheet of used SDRAM device. */
/*    Please view description of 'ctrl_en' bit inside sdram_general_ctrl register for initializing-procedure of netX SDRAM controller. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_mr            0x00000008U
#define Adr_NX90_hif_sdram_ctrl_sdram_mr 0xFF401548U
#define Adr_NX90_sdram_mr                0xFF401548U
#define DFLT_VAL_NX90_sdram_mr           0x00000033U

#define MSK_NX90_sdram_mr_MR         0x00003fffU
#define SRT_NX90_sdram_mr_MR         0
#define DFLT_VAL_NX90_sdram_mr_MR    0x00000033U
#define DFLT_BF_VAL_NX90_sdram_mr_MR 0x00000033U

/* all used bits of 'NX90_sdram_mr': */
#define MSK_USED_BITS_NX90_sdram_mr 0x00003fffU


/* ===================================================================== */

/* AREA extmem_priority_ctrl */
/* Area of hifmem_priority_ctrl */

/* ===================================================================== */

#define Addr_NX90_hifmem_priority_ctrl 0xFF401580U

/* --------------------------------------------------------------------- */
/* Register extmem_prio_timslot_ctrl */
/* =>  Memory interface master timeslot priority control register. */
/*     This register may be partially locked by the exmem_priority_lock-register in asic_ctrl-address area. */
/*     Note: */
/*     Any master can access in one timeslot ((ts_accessrate_mX*ts_length_mX)/64) + 1 times (i.e. at */
/*     maximum (ts_accessrate_mX)/64 bandwidth on external memory bus, ts_accessrate_mX is programmed */
/*     by extmem_prio_accesstime_ctrl-register). */
/*     Priority control will watch data accesses on external memory data bus (SDRAM and non SDRAM), */
/*     including pauses on non SDRAM-accesses, not including control commands to SDRAM. */
/*     Any master requesting more accesses will be forced to wait for the remaining timeslot. */
/*    -------------------------------------------------------- */
/*     Programmable timeslots are: */
/*        ts_length =  0 :             64 systen clock cycles (i.e  0.64us at 100MHz) */
/*        ts_length =  1 :            128 systen clock cycles (i.e  1.28us at 100MHz) */
/*        ts_length =  2 :            256 systen clock cycles (i.e  2.56us at 100MHz) */
/*        ts_length =  3 :            512 systen clock cycles (i.e  5.12us at 100MHz) */
/*        ts_length =  4 :           1024 systen clock cycles (i.e 10.24us at 100MHz) */
/*        ts_length =  5 :           2048 systen clock cycles (i.e 20.48us at 100MHz) */
/*        ts_length =  6 :           4096 systen clock cycles (i.e 40.96us at 100MHz) */
/*        ts_length =  7 :           8192 systen clock cycles (i.e 81.92us at 100MHz) */
/*    -------------------------------------------------------- */
/*     For netX56 only SDRAM accesses are regarded for timeslot priority, SRAM/FLASH accesses are not. */
/*     Master numbering here is not identical with global system master numbering as external memory is */
/*     not available for all masters (not available for DPM, XC data and system channel and ARM TCM channels) */
/*     Master channel m0: xPIC data channel  (highest priority) */
/*     Master channel m1: xPIC instruction channel */
/*     Master channel m2: ARM AHB channel - data access */
/*     Master channel m3: ARM AHB channel - instruction fetch */
/*     Master channel m4: Shared channel for OSAC, SYSDEBUG and System DMA (lowest priority) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extmem_prio_timslot_ctrl                  0x00000000U
#define Adr_NX90_hifmem_priority_ctrl_extmem_prio_timslot_ctrl 0xFF401580U
#define Adr_NX90_extmem_prio_timslot_ctrl                      0xFF401580U
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl                 0x00077777U

#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_xpicd_mi          0x00000007U
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_xpicd_mi          0
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_xpicd_mi     0x00000007U
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_xpicd_mi  0x00000007U
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_xpici_mi          0x00000070U
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_xpici_mi          4
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_xpici_mi     0x00000070U
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_xpici_mi  0x00000007U
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_armd_mi           0x00000700U
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_armd_mi           8
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_armd_mi      0x00000700U
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_armd_mi   0x00000007U
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_armi_mi           0x00007000U
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_armi_mi           12
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_armi_mi      0x00007000U
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_armi_mi   0x00000007U
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi         0x00070000U
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi         16
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi    0x00070000U
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi 0x00000007U

/* all used bits of 'NX90_extmem_prio_timslot_ctrl': */
#define MSK_USED_BITS_NX90_extmem_prio_timslot_ctrl 0x00077777U

/* --------------------------------------------------------------------- */
/* Register extmem_prio_accesstime_ctrl */
/* =>  Control Register for master channel accesses per timeslot on external meory interface. */
/*     This register may be partially locked by the exmem_priority_lock-register in asic_ctrl-address area. */
/*     For detailed priority controlling read note at extmem_prio_timslot_ctrl-register description. */
/*    -------------------------------------------------------- */
/*     For netX56 only SDRAM accesses are regarded for timeslot priority, SRAM/FLASH accesses are not. */
/*     Master numbering here is not identical with global system master numbering as external memory is */
/*     not available for all masters (not available for DPM, XC data and system channel and ARM TCM channels) */
/*     Master channel m0: xPIC data channel  (highest priority) */
/*     Master channel m1: xPIC instruction channel */
/*     Master channel m2: ARM AHB channel - data access */
/*     Master channel m3: ARM AHB channel - instruction fetch */
/*     Master channel m4: Shared channel for OSAC, SYSDEBUG and System DMA (lowest priority) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extmem_prio_accesstime_ctrl                  0x00000004U
#define Adr_NX90_hifmem_priority_ctrl_extmem_prio_accesstime_ctrl 0xFF401584U
#define Adr_NX90_extmem_prio_accesstime_ctrl                      0xFF401584U
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl                 0x3fffffffU

#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpicd_mi          0x0000003fU
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpicd_mi          0
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpicd_mi     0x0000003fU
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpicd_mi  0x0000003fU
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpici_mi          0x00000fc0U
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpici_mi          6
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpici_mi     0x00000fc0U
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_xpici_mi  0x0000003fU
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armd_mi           0x0003f000U
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armd_mi           12
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armd_mi      0x0003f000U
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armd_mi   0x0000003fU
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armi_mi           0x00fc0000U
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armi_mi           18
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armi_mi      0x00fc0000U
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_armi_mi   0x0000003fU
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi         0x3f000000U
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi         24
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi    0x3f000000U
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi 0x0000003fU

/* all used bits of 'NX90_extmem_prio_accesstime_ctrl': */
#define MSK_USED_BITS_NX90_extmem_prio_accesstime_ctrl 0x3fffffffU


/* ===================================================================== */

/* Area of abort */

/* ===================================================================== */

#define Addr_NX90_abort 0xFF401600U

/* --------------------------------------------------------------------- */
/* Register abort_base */
/* => Start-address of abort generating address area. */
/*    Area size: 16Bytes */
/*    Abort (AHB: HRESP=ERROR) will be generated by access to this area. */
/*    Write access will be ignored. */
/*    Read access returns 0xdeadbeef. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_abort_base   0x00000000U
#define Adr_NX90_abort_abort_base 0xFF401600U
#define Adr_NX90_abort_base       0xFF401600U

/* --------------------------------------------------------------------- */
/* Register abort_end */
/* => End-address of abort generating address area. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_abort_end   0x0000000CU
#define Adr_NX90_abort_abort_end 0xFF40160CU
#define Adr_NX90_abort_end       0xFF40160CU


/* ===================================================================== */

/* Area of sqi */

/* ===================================================================== */

#define Addr_NX90_sqi 0xFF401640U

/* --------------------------------------------------------------------- */
/* Register sqi_cr0 */
/* => SQI control register 0 */
/*    This register is compatible to netX50 and netX10 SPI module. However, there are some additional settings possible. SQI module */
/*    provides only master functionality, hence slave settings are omitted. Compatible mode for netx100 is not supported by SQI module. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_cr0  0x00000000U
#define Adr_NX90_sqi_sqi_cr0  0xFF401640U
#define Adr_NX90_sqi_cr0      0xFF401640U
#define DFLT_VAL_NX90_sqi_cr0 0x00080007U

#define MSK_NX90_sqi_cr0_datasize           0x0000000fU
#define SRT_NX90_sqi_cr0_datasize           0
#define DFLT_VAL_NX90_sqi_cr0_datasize      0x00000007U
#define DFLT_BF_VAL_NX90_sqi_cr0_datasize   0x00000007U
#define MSK_NX90_sqi_cr0_sck_pol            0x00000040U
#define SRT_NX90_sqi_cr0_sck_pol            6
#define DFLT_VAL_NX90_sqi_cr0_sck_pol       0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr0_sck_pol    0x00000000U
#define MSK_NX90_sqi_cr0_sck_phase          0x00000080U
#define SRT_NX90_sqi_cr0_sck_phase          7
#define DFLT_VAL_NX90_sqi_cr0_sck_phase     0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr0_sck_phase  0x00000000U
#define MSK_NX90_sqi_cr0_sck_muladd         0x000fff00U
#define SRT_NX90_sqi_cr0_sck_muladd         8
#define DFLT_VAL_NX90_sqi_cr0_sck_muladd    0x00080000U
#define DFLT_BF_VAL_NX90_sqi_cr0_sck_muladd 0x00000800U
#define MSK_NX90_sqi_cr0_sio_cfg            0x00c00000U
#define SRT_NX90_sqi_cr0_sio_cfg            22
#define DFLT_VAL_NX90_sqi_cr0_sio_cfg       0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr0_sio_cfg    0x00000000U
#define MSK_NX90_sqi_cr0_filter_in          0x08000000U
#define SRT_NX90_sqi_cr0_filter_in          27
#define DFLT_VAL_NX90_sqi_cr0_filter_in     0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr0_filter_in  0x00000000U

/* all used bits of 'NX90_sqi_cr0': */
#define MSK_USED_BITS_NX90_sqi_cr0 0x08cfffcfU

/* --------------------------------------------------------------------- */
/* Register sqi_cr1 */
/* => SQI control register 1 */
/*    This register is compatible to netX50 and netX10 SPI module. However, there are some additional settings possible. SQI module */
/*    provides only master functionality, hence slave settings are omitted. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_cr1  0x00000004U
#define Adr_NX90_sqi_sqi_cr1  0xFF401644U
#define Adr_NX90_sqi_cr1      0xFF401644U
#define DFLT_VAL_NX90_sqi_cr1 0x08080000U

#define MSK_NX90_sqi_cr1_sqi_en                 0x00000002U
#define SRT_NX90_sqi_cr1_sqi_en                 1
#define DFLT_VAL_NX90_sqi_cr1_sqi_en            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_sqi_en         0x00000000U
#define MSK_NX90_sqi_cr1_fss                    0x00000700U
#define SRT_NX90_sqi_cr1_fss                    8
#define DFLT_VAL_NX90_sqi_cr1_fss               0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_fss            0x00000000U
#define MSK_NX90_sqi_cr1_fss_static             0x00000800U
#define SRT_NX90_sqi_cr1_fss_static             11
#define DFLT_VAL_NX90_sqi_cr1_fss_static        0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_fss_static     0x00000000U
#define MSK_NX90_sqi_cr1_spi_trans_ctrl         0x00001000U
#define SRT_NX90_sqi_cr1_spi_trans_ctrl         12
#define DFLT_VAL_NX90_sqi_cr1_spi_trans_ctrl    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_spi_trans_ctrl 0x00000000U
#define MSK_NX90_sqi_cr1_tx_fifo_wm             0x000f0000U
#define SRT_NX90_sqi_cr1_tx_fifo_wm             16
#define DFLT_VAL_NX90_sqi_cr1_tx_fifo_wm        0x00080000U
#define DFLT_BF_VAL_NX90_sqi_cr1_tx_fifo_wm     0x00000008U
#define MSK_NX90_sqi_cr1_tx_fifo_clr            0x00100000U
#define SRT_NX90_sqi_cr1_tx_fifo_clr            20
#define DFLT_VAL_NX90_sqi_cr1_tx_fifo_clr       0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_tx_fifo_clr    0x00000000U
#define MSK_NX90_sqi_cr1_rx_fifo_wm             0x0f000000U
#define SRT_NX90_sqi_cr1_rx_fifo_wm             24
#define DFLT_VAL_NX90_sqi_cr1_rx_fifo_wm        0x08000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_rx_fifo_wm     0x00000008U
#define MSK_NX90_sqi_cr1_rx_fifo_clr            0x10000000U
#define SRT_NX90_sqi_cr1_rx_fifo_clr            28
#define DFLT_VAL_NX90_sqi_cr1_rx_fifo_clr       0x00000000U
#define DFLT_BF_VAL_NX90_sqi_cr1_rx_fifo_clr    0x00000000U

/* all used bits of 'NX90_sqi_cr1': */
#define MSK_USED_BITS_NX90_sqi_cr1 0x1f1f1f02U

/* --------------------------------------------------------------------- */
/* Register sqi_dr */
/* => SQI data register (DR) */
/*    Read access: received data word is delivered from receive FIFO. */
/*    Write access: send data word is written to send FIFO. */
/*    Both, receive and transmit FIFO have a depth of 16 words (standard SPI mode). In SQI mode both FIFOs are combined, so 64 bytes are */
/*    available. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_dr  0x00000008U
#define Adr_NX90_sqi_sqi_dr  0xFF401648U
#define Adr_NX90_sqi_dr      0xFF401648U
#define DFLT_VAL_NX90_sqi_dr 0x00000000U

#define MSK_NX90_sqi_dr_data         0xffffffffU
#define SRT_NX90_sqi_dr_data         0
#define DFLT_VAL_NX90_sqi_dr_data    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_dr_data 0x00000000U

/* all used bits of 'NX90_sqi_dr': */
#define MSK_USED_BITS_NX90_sqi_dr 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sqi_sr */
/* => Read only SQI status register */
/*    Shows the current status of the SQI interface. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_sr 0x0000000CU
#define Adr_NX90_sqi_sqi_sr 0xFF40164CU
#define Adr_NX90_sqi_sr     0xFF40164CU

#define MSK_NX90_sqi_sr_tx_fifo_empty       0x00000001U
#define SRT_NX90_sqi_sr_tx_fifo_empty       0
#define MSK_NX90_sqi_sr_tx_fifo_not_full    0x00000002U
#define SRT_NX90_sqi_sr_tx_fifo_not_full    1
#define MSK_NX90_sqi_sr_rx_fifo_not_empty   0x00000004U
#define SRT_NX90_sqi_sr_rx_fifo_not_empty   2
#define MSK_NX90_sqi_sr_rx_fifo_full        0x00000008U
#define SRT_NX90_sqi_sr_rx_fifo_full        3
#define MSK_NX90_sqi_sr_busy                0x00000010U
#define SRT_NX90_sqi_sr_busy                4
#define MSK_NX90_sqi_sr_sqirom_timeout_err  0x00002000U
#define SRT_NX90_sqi_sr_sqirom_timeout_err  13
#define MSK_NX90_sqi_sr_sqirom_write_err    0x00004000U
#define SRT_NX90_sqi_sr_sqirom_write_err    14
#define MSK_NX90_sqi_sr_sqirom_disabled_err 0x00008000U
#define SRT_NX90_sqi_sr_sqirom_disabled_err 15
#define MSK_NX90_sqi_sr_tx_fifo_level       0x001f0000U
#define SRT_NX90_sqi_sr_tx_fifo_level       16
#define MSK_NX90_sqi_sr_tx_fifo_err_ovfl    0x00400000U
#define SRT_NX90_sqi_sr_tx_fifo_err_ovfl    22
#define MSK_NX90_sqi_sr_tx_fifo_err_undr    0x00800000U
#define SRT_NX90_sqi_sr_tx_fifo_err_undr    23
#define MSK_NX90_sqi_sr_rx_fifo_level       0x1f000000U
#define SRT_NX90_sqi_sr_rx_fifo_level       24
#define MSK_NX90_sqi_sr_rx_fifo_err_ovfl    0x40000000U
#define SRT_NX90_sqi_sr_rx_fifo_err_ovfl    30
#define MSK_NX90_sqi_sr_rx_fifo_err_undr    0x80000000U
#define SRT_NX90_sqi_sr_rx_fifo_err_undr    31

/* all used bits of 'NX90_sqi_sr': */
#define MSK_USED_BITS_NX90_sqi_sr 0xdfdfe01fU

/* --------------------------------------------------------------------- */
/* Register sqi_tcr */
/* => SQI transfer control */
/*    (module address offset 0x10 is reserved in netX10/50 SPI module. No compatibility problems by using this address for new register). */
/*    This register must not be changed while a transfer is running ('busy' bit in register 'sqi_sr' is '1') to avoid corrupted transfers causing hardware damage. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_tcr  0x00000010U
#define Adr_NX90_sqi_sqi_tcr  0xFF401650U
#define Adr_NX90_sqi_tcr      0xFF401650U
#define DFLT_VAL_NX90_sqi_tcr 0x1c000000U

#define MSK_NX90_sqi_tcr_transfer_size          0x0007ffffU
#define SRT_NX90_sqi_tcr_transfer_size          0
#define DFLT_VAL_NX90_sqi_tcr_transfer_size     0x00000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_transfer_size  0x00000000U
#define MSK_NX90_sqi_tcr_tx_out                 0x00200000U
#define SRT_NX90_sqi_tcr_tx_out                 21
#define DFLT_VAL_NX90_sqi_tcr_tx_out            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_tx_out         0x00000000U
#define MSK_NX90_sqi_tcr_tx_oe                  0x00400000U
#define SRT_NX90_sqi_tcr_tx_oe                  22
#define DFLT_VAL_NX90_sqi_tcr_tx_oe             0x00000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_tx_oe          0x00000000U
#define MSK_NX90_sqi_tcr_start_transfer         0x00800000U
#define SRT_NX90_sqi_tcr_start_transfer         23
#define DFLT_VAL_NX90_sqi_tcr_start_transfer    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_start_transfer 0x00000000U
#define MSK_NX90_sqi_tcr_mode                   0x03000000U
#define SRT_NX90_sqi_tcr_mode                   24
#define DFLT_VAL_NX90_sqi_tcr_mode              0x00000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_mode           0x00000000U
#define MSK_NX90_sqi_tcr_duplex                 0x0c000000U
#define SRT_NX90_sqi_tcr_duplex                 26
#define DFLT_VAL_NX90_sqi_tcr_duplex            0x0c000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_duplex         0x00000003U
#define MSK_NX90_sqi_tcr_ms_bit_first           0x10000000U
#define SRT_NX90_sqi_tcr_ms_bit_first           28
#define DFLT_VAL_NX90_sqi_tcr_ms_bit_first      0x10000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_ms_bit_first   0x00000001U
#define MSK_NX90_sqi_tcr_ms_byte_first          0x20000000U
#define SRT_NX90_sqi_tcr_ms_byte_first          29
#define DFLT_VAL_NX90_sqi_tcr_ms_byte_first     0x00000000U
#define DFLT_BF_VAL_NX90_sqi_tcr_ms_byte_first  0x00000000U

/* all used bits of 'NX90_sqi_tcr': */
#define MSK_USED_BITS_NX90_sqi_tcr 0x3fe7ffffU

/* --------------------------------------------------------------------- */
/* Register sqi_irq_mask */
/* => SQI interrupt mask register: */
/*    IRQ mask is an AND-mask: only raw interrupts with mask bit set can generate a module IRQ to CPU. */
/*    Note: The functionality of this register is similar to the corresponding SPI register spi_imsc. */
/*          However in contrast to this register, setting bits in spi_imsc does also clear the corresponding raw interrupts. */
/*    For detailed IRQ behaviour and function view 'sqi_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_mask  0x00000014U
#define Adr_NX90_sqi_sqi_irq_mask  0xFF401654U
#define Adr_NX90_sqi_irq_mask      0xFF401654U
#define DFLT_VAL_NX90_sqi_irq_mask 0x00000000U

#define MSK_NX90_sqi_irq_mask_RORIM                0x00000001U
#define SRT_NX90_sqi_irq_mask_RORIM                0
#define DFLT_VAL_NX90_sqi_irq_mask_RORIM           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_RORIM        0x00000000U
#define MSK_NX90_sqi_irq_mask_RTIM                 0x00000002U
#define SRT_NX90_sqi_irq_mask_RTIM                 1
#define DFLT_VAL_NX90_sqi_irq_mask_RTIM            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_RTIM         0x00000000U
#define MSK_NX90_sqi_irq_mask_RXIM                 0x00000004U
#define SRT_NX90_sqi_irq_mask_RXIM                 2
#define DFLT_VAL_NX90_sqi_irq_mask_RXIM            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_RXIM         0x00000000U
#define MSK_NX90_sqi_irq_mask_TXIM                 0x00000008U
#define SRT_NX90_sqi_irq_mask_TXIM                 3
#define DFLT_VAL_NX90_sqi_irq_mask_TXIM            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_TXIM         0x00000000U
#define MSK_NX90_sqi_irq_mask_rxneim               0x00000010U
#define SRT_NX90_sqi_irq_mask_rxneim               4
#define DFLT_VAL_NX90_sqi_irq_mask_rxneim          0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_rxneim       0x00000000U
#define MSK_NX90_sqi_irq_mask_rxfim                0x00000020U
#define SRT_NX90_sqi_irq_mask_rxfim                5
#define DFLT_VAL_NX90_sqi_irq_mask_rxfim           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_rxfim        0x00000000U
#define MSK_NX90_sqi_irq_mask_txeim                0x00000040U
#define SRT_NX90_sqi_irq_mask_txeim                6
#define DFLT_VAL_NX90_sqi_irq_mask_txeim           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_txeim        0x00000000U
#define MSK_NX90_sqi_irq_mask_trans_end            0x00000080U
#define SRT_NX90_sqi_irq_mask_trans_end            7
#define DFLT_VAL_NX90_sqi_irq_mask_trans_end       0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_trans_end    0x00000000U
#define MSK_NX90_sqi_irq_mask_sqirom_error         0x00000100U
#define SRT_NX90_sqi_irq_mask_sqirom_error         8
#define DFLT_VAL_NX90_sqi_irq_mask_sqirom_error    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_mask_sqirom_error 0x00000000U

/* all used bits of 'NX90_sqi_irq_mask': */
#define MSK_USED_BITS_NX90_sqi_irq_mask 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register sqi_irq_raw */
/* => SQI interrupt state before masking register (raw interrupt). */
/*    Writing a "1" to a bit clears this interrupt. */
/*    Note: */
/*       IRQ flags can also be cleared by using 'sqi_irq_clear' for SPI module compatibility. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_raw 0x00000018U
#define Adr_NX90_sqi_sqi_irq_raw 0xFF401658U
#define Adr_NX90_sqi_irq_raw     0xFF401658U

#define MSK_NX90_sqi_irq_raw_RORRIS       0x00000001U
#define SRT_NX90_sqi_irq_raw_RORRIS       0
#define MSK_NX90_sqi_irq_raw_RTRIS        0x00000002U
#define SRT_NX90_sqi_irq_raw_RTRIS        1
#define MSK_NX90_sqi_irq_raw_RXRIS        0x00000004U
#define SRT_NX90_sqi_irq_raw_RXRIS        2
#define MSK_NX90_sqi_irq_raw_TXRIS        0x00000008U
#define SRT_NX90_sqi_irq_raw_TXRIS        3
#define MSK_NX90_sqi_irq_raw_rxneris      0x00000010U
#define SRT_NX90_sqi_irq_raw_rxneris      4
#define MSK_NX90_sqi_irq_raw_rxfris       0x00000020U
#define SRT_NX90_sqi_irq_raw_rxfris       5
#define MSK_NX90_sqi_irq_raw_txeris       0x00000040U
#define SRT_NX90_sqi_irq_raw_txeris       6
#define MSK_NX90_sqi_irq_raw_trans_end    0x00000080U
#define SRT_NX90_sqi_irq_raw_trans_end    7
#define MSK_NX90_sqi_irq_raw_sqirom_error 0x00000100U
#define SRT_NX90_sqi_irq_raw_sqirom_error 8

/* all used bits of 'NX90_sqi_irq_raw': */
#define MSK_USED_BITS_NX90_sqi_irq_raw 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register sqi_irq_masked */
/* => SQI masked interrupt status register */
/*    For detailed IRQ behaviour and function view 'sqi_irq_raw' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_masked 0x0000001CU
#define Adr_NX90_sqi_sqi_irq_masked 0xFF40165CU
#define Adr_NX90_sqi_irq_masked     0xFF40165CU

#define MSK_NX90_sqi_irq_masked_RORMIS       0x00000001U
#define SRT_NX90_sqi_irq_masked_RORMIS       0
#define MSK_NX90_sqi_irq_masked_RTMIS        0x00000002U
#define SRT_NX90_sqi_irq_masked_RTMIS        1
#define MSK_NX90_sqi_irq_masked_RXMIS        0x00000004U
#define SRT_NX90_sqi_irq_masked_RXMIS        2
#define MSK_NX90_sqi_irq_masked_TXMIS        0x00000008U
#define SRT_NX90_sqi_irq_masked_TXMIS        3
#define MSK_NX90_sqi_irq_masked_rxnemis      0x00000010U
#define SRT_NX90_sqi_irq_masked_rxnemis      4
#define MSK_NX90_sqi_irq_masked_rxfmis       0x00000020U
#define SRT_NX90_sqi_irq_masked_rxfmis       5
#define MSK_NX90_sqi_irq_masked_txemis       0x00000040U
#define SRT_NX90_sqi_irq_masked_txemis       6
#define MSK_NX90_sqi_irq_masked_trans_end    0x00000080U
#define SRT_NX90_sqi_irq_masked_trans_end    7
#define MSK_NX90_sqi_irq_masked_sqirom_error 0x00000100U
#define SRT_NX90_sqi_irq_masked_sqirom_error 8

/* all used bits of 'NX90_sqi_irq_masked': */
#define MSK_USED_BITS_NX90_sqi_irq_masked 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register sqi_irq_clear */
/* => SQI interrupt clear register (for compatibility to netX10/50 SPI module). */
/*    This register is always '0' on read. */
/*    Note: */
/*       IRQ flags can also be cleared by writing 'sqi_irq_raw' register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_clear  0x00000020U
#define Adr_NX90_sqi_sqi_irq_clear  0xFF401660U
#define Adr_NX90_sqi_irq_clear      0xFF401660U
#define DFLT_VAL_NX90_sqi_irq_clear 0x00000000U

#define MSK_NX90_sqi_irq_clear_RORIC                0x00000001U
#define SRT_NX90_sqi_irq_clear_RORIC                0
#define DFLT_VAL_NX90_sqi_irq_clear_RORIC           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_RORIC        0x00000000U
#define MSK_NX90_sqi_irq_clear_RTIC                 0x00000002U
#define SRT_NX90_sqi_irq_clear_RTIC                 1
#define DFLT_VAL_NX90_sqi_irq_clear_RTIC            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_RTIC         0x00000000U
#define MSK_NX90_sqi_irq_clear_RXIC                 0x00000004U
#define SRT_NX90_sqi_irq_clear_RXIC                 2
#define DFLT_VAL_NX90_sqi_irq_clear_RXIC            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_RXIC         0x00000000U
#define MSK_NX90_sqi_irq_clear_TXIC                 0x00000008U
#define SRT_NX90_sqi_irq_clear_TXIC                 3
#define DFLT_VAL_NX90_sqi_irq_clear_TXIC            0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_TXIC         0x00000000U
#define MSK_NX90_sqi_irq_clear_rxneic               0x00000010U
#define SRT_NX90_sqi_irq_clear_rxneic               4
#define DFLT_VAL_NX90_sqi_irq_clear_rxneic          0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_rxneic       0x00000000U
#define MSK_NX90_sqi_irq_clear_rxfic                0x00000020U
#define SRT_NX90_sqi_irq_clear_rxfic                5
#define DFLT_VAL_NX90_sqi_irq_clear_rxfic           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_rxfic        0x00000000U
#define MSK_NX90_sqi_irq_clear_txeic                0x00000040U
#define SRT_NX90_sqi_irq_clear_txeic                6
#define DFLT_VAL_NX90_sqi_irq_clear_txeic           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_txeic        0x00000000U
#define MSK_NX90_sqi_irq_clear_trans_end            0x00000080U
#define SRT_NX90_sqi_irq_clear_trans_end            7
#define DFLT_VAL_NX90_sqi_irq_clear_trans_end       0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_trans_end    0x00000000U
#define MSK_NX90_sqi_irq_clear_sqirom_error         0x00000100U
#define SRT_NX90_sqi_irq_clear_sqirom_error         8
#define DFLT_VAL_NX90_sqi_irq_clear_sqirom_error    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_irq_clear_sqirom_error 0x00000000U

/* all used bits of 'NX90_sqi_irq_clear': */
#define MSK_USED_BITS_NX90_sqi_irq_clear 0x000001ffU

/* --------------------------------------------------------------------- */
/* Register sqi_dmacr */
/* => SQI DMA control register */
/*    Only normal transfer requests will be generated by this module (i.e. no last requests will be issued). In consequence */
/*    only DMAC controlled transfers can be used (no peripheral controlled mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_dmacr  0x00000024U
#define Adr_NX90_sqi_sqi_dmacr  0xFF401664U
#define Adr_NX90_sqi_dmacr      0xFF401664U
#define DFLT_VAL_NX90_sqi_dmacr 0x00000000U

#define MSK_NX90_sqi_dmacr_rx_dma_en         0x00000001U
#define SRT_NX90_sqi_dmacr_rx_dma_en         0
#define DFLT_VAL_NX90_sqi_dmacr_rx_dma_en    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_dmacr_rx_dma_en 0x00000000U
#define MSK_NX90_sqi_dmacr_tx_dma_en         0x00000002U
#define SRT_NX90_sqi_dmacr_tx_dma_en         1
#define DFLT_VAL_NX90_sqi_dmacr_tx_dma_en    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_dmacr_tx_dma_en 0x00000000U

/* all used bits of 'NX90_sqi_dmacr': */
#define MSK_USED_BITS_NX90_sqi_dmacr 0x00000003U

/* --------------------------------------------------------------------- */
/* Register sqi_pio_out */
/* => SQI PIO output level control register */
/*    IO PIO mode is controlable by 'sqi_cr0' register bits 'sio_cfg'. */
/*    PIO input signal states are never filtered ('sqi_cr0' bit 'filter_in') */
/*    Note: */
/*       SQI module must be enabled by register 'sqi_cr0' bit 'sqi_en' for SQI IOs driving in PIO mode. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_pio_out  0x00000028U
#define Adr_NX90_sqi_sqi_pio_out  0xFF401668U
#define Adr_NX90_sqi_pio_out      0xFF401668U
#define DFLT_VAL_NX90_sqi_pio_out 0x0000000eU

#define MSK_NX90_sqi_pio_out_sclk         0x00000001U
#define SRT_NX90_sqi_pio_out_sclk         0
#define DFLT_VAL_NX90_sqi_pio_out_sclk    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_out_sclk 0x00000000U
#define MSK_NX90_sqi_pio_out_csn          0x0000000eU
#define SRT_NX90_sqi_pio_out_csn          1
#define DFLT_VAL_NX90_sqi_pio_out_csn     0x0000000eU
#define DFLT_BF_VAL_NX90_sqi_pio_out_csn  0x00000007U
#define MSK_NX90_sqi_pio_out_mosi         0x00000010U
#define SRT_NX90_sqi_pio_out_mosi         4
#define DFLT_VAL_NX90_sqi_pio_out_mosi    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_out_mosi 0x00000000U
#define MSK_NX90_sqi_pio_out_miso         0x00000020U
#define SRT_NX90_sqi_pio_out_miso         5
#define DFLT_VAL_NX90_sqi_pio_out_miso    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_out_miso 0x00000000U
#define MSK_NX90_sqi_pio_out_sio2         0x00000040U
#define SRT_NX90_sqi_pio_out_sio2         6
#define DFLT_VAL_NX90_sqi_pio_out_sio2    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_out_sio2 0x00000000U
#define MSK_NX90_sqi_pio_out_sio3         0x00000080U
#define SRT_NX90_sqi_pio_out_sio3         7
#define DFLT_VAL_NX90_sqi_pio_out_sio3    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_out_sio3 0x00000000U

/* all used bits of 'NX90_sqi_pio_out': */
#define MSK_USED_BITS_NX90_sqi_pio_out 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register sqi_pio_oe */
/* => SQI PIO output enable control register */
/*    IO PIO mode is controlable by 'sqi_cr0' register bits 'sio_cfg'. */
/*    Note: */
/*       SQI module must be enabled by register 'sqi_cr0' bit 'sqi_en' for SQI IOs driving in PIO mode. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_pio_oe  0x00000030U
#define Adr_NX90_sqi_sqi_pio_oe  0xFF401670U
#define Adr_NX90_sqi_pio_oe      0xFF401670U
#define DFLT_VAL_NX90_sqi_pio_oe 0x00000000U

#define MSK_NX90_sqi_pio_oe_sclk         0x00000001U
#define SRT_NX90_sqi_pio_oe_sclk         0
#define DFLT_VAL_NX90_sqi_pio_oe_sclk    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_oe_sclk 0x00000000U
#define MSK_NX90_sqi_pio_oe_csn          0x0000000eU
#define SRT_NX90_sqi_pio_oe_csn          1
#define DFLT_VAL_NX90_sqi_pio_oe_csn     0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_oe_csn  0x00000000U
#define MSK_NX90_sqi_pio_oe_mosi         0x00000010U
#define SRT_NX90_sqi_pio_oe_mosi         4
#define DFLT_VAL_NX90_sqi_pio_oe_mosi    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_oe_mosi 0x00000000U
#define MSK_NX90_sqi_pio_oe_miso         0x00000020U
#define SRT_NX90_sqi_pio_oe_miso         5
#define DFLT_VAL_NX90_sqi_pio_oe_miso    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_oe_miso 0x00000000U
#define MSK_NX90_sqi_pio_oe_sio2         0x00000040U
#define SRT_NX90_sqi_pio_oe_sio2         6
#define DFLT_VAL_NX90_sqi_pio_oe_sio2    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_oe_sio2 0x00000000U
#define MSK_NX90_sqi_pio_oe_sio3         0x00000080U
#define SRT_NX90_sqi_pio_oe_sio3         7
#define DFLT_VAL_NX90_sqi_pio_oe_sio3    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_pio_oe_sio3 0x00000000U

/* all used bits of 'NX90_sqi_pio_oe': */
#define MSK_USED_BITS_NX90_sqi_pio_oe 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register sqi_pio_in */
/* => SQI PIO input status register */
/*    IO PIO mode is controllable by 'sqi_cr0' register bits 'sio_cfg'. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_pio_in 0x00000034U
#define Adr_NX90_sqi_sqi_pio_in 0xFF401674U
#define Adr_NX90_sqi_pio_in     0xFF401674U

#define MSK_NX90_sqi_pio_in_sclk 0x00000001U
#define SRT_NX90_sqi_pio_in_sclk 0
#define MSK_NX90_sqi_pio_in_csn  0x0000000eU
#define SRT_NX90_sqi_pio_in_csn  1
#define MSK_NX90_sqi_pio_in_mosi 0x00000010U
#define SRT_NX90_sqi_pio_in_mosi 4
#define MSK_NX90_sqi_pio_in_miso 0x00000020U
#define SRT_NX90_sqi_pio_in_miso 5
#define MSK_NX90_sqi_pio_in_sio2 0x00000040U
#define SRT_NX90_sqi_pio_in_sio2 6
#define MSK_NX90_sqi_pio_in_sio3 0x00000080U
#define SRT_NX90_sqi_pio_in_sio3 7

/* all used bits of 'NX90_sqi_pio_in': */
#define MSK_USED_BITS_NX90_sqi_pio_in 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register sqi_sqirom_cfg */
/* => SQIROM mode configuration */
/*    Configuration register for the SQIROM mode. */
/*    This mode supports the 'eXecute in Place' (XiP) feature of SQI flash chips. The position of the command byte and the address nibbles as well as */
/*    the the number of address nibbles and dummy cycles can be configured with this register. It is also possible to change the clock divider */
/*    to support a wide range of frequencies for the serial clock output. */
/*    Note: Before enabling this mode, the SQI flash chip needs to be in 4 bit command mode, otherwise the module is not able to fetch data */
/*          from the flash. */
/*    Note: When enabled, the SQI module is completely blocked, i.e. other SQI or SPI transactions are not possible. */
/*    Note: The chip-select signal of the flash must be connected to sqi_cs0. */
/*    Note: SQIROM transfers can be generated in SPI mode 0 or mode 3. This can be selected by in the sqi_cr0 register. Mode 1 and 2 must */
/*          not be selected for SQIROM usage. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_sqirom_cfg  0x00000038U
#define Adr_NX90_sqi_sqi_sqirom_cfg  0xFF401678U
#define Adr_NX90_sqi_sqirom_cfg      0xFF401678U
#define DFLT_VAL_NX90_sqi_sqirom_cfg 0x02020004U

#define MSK_NX90_sqi_sqirom_cfg_enable                  0x00000001U
#define SRT_NX90_sqi_sqirom_cfg_enable                  0
#define DFLT_VAL_NX90_sqi_sqirom_cfg_enable             0x00000000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_enable          0x00000000U
#define MSK_NX90_sqi_sqirom_cfg_addr_before_cmd         0x00000002U
#define SRT_NX90_sqi_sqirom_cfg_addr_before_cmd         1
#define DFLT_VAL_NX90_sqi_sqirom_cfg_addr_before_cmd    0x00000000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_addr_before_cmd 0x00000000U
#define MSK_NX90_sqi_sqirom_cfg_addr_nibbles            0x0000000cU
#define SRT_NX90_sqi_sqirom_cfg_addr_nibbles            2
#define DFLT_VAL_NX90_sqi_sqirom_cfg_addr_nibbles       0x00000004U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_addr_nibbles    0x00000001U
#define MSK_NX90_sqi_sqirom_cfg_addr_bits               0x00000070U
#define SRT_NX90_sqi_sqirom_cfg_addr_bits               4
#define DFLT_VAL_NX90_sqi_sqirom_cfg_addr_bits          0x00000000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_addr_bits       0x00000000U
#define MSK_NX90_sqi_sqirom_cfg_cmd_byte                0x0000ff00U
#define SRT_NX90_sqi_sqirom_cfg_cmd_byte                8
#define DFLT_VAL_NX90_sqi_sqirom_cfg_cmd_byte           0x00000000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_cmd_byte        0x00000000U
#define MSK_NX90_sqi_sqirom_cfg_dummy_cycles            0x000f0000U
#define SRT_NX90_sqi_sqirom_cfg_dummy_cycles            16
#define DFLT_VAL_NX90_sqi_sqirom_cfg_dummy_cycles       0x00020000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_dummy_cycles    0x00000002U
#define MSK_NX90_sqi_sqirom_cfg_t_csh                   0x00300000U
#define SRT_NX90_sqi_sqirom_cfg_t_csh                   20
#define DFLT_VAL_NX90_sqi_sqirom_cfg_t_csh              0x00000000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_t_csh           0x00000000U
#define MSK_NX90_sqi_sqirom_cfg_clk_div_val             0xff000000U
#define SRT_NX90_sqi_sqirom_cfg_clk_div_val             24
#define DFLT_VAL_NX90_sqi_sqirom_cfg_clk_div_val        0x02000000U
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_clk_div_val     0x00000002U

/* all used bits of 'NX90_sqi_sqirom_cfg': */
#define MSK_USED_BITS_NX90_sqi_sqirom_cfg 0xff3fff7fU


/* ===================================================================== */

/* Area of sample_at_porn_stat */

/* ===================================================================== */

#define Addr_NX90_sample_at_porn_stat 0xFF401680U

/* --------------------------------------------------------------------- */
/* Register sample_at_porn_stat_in0 */
/* => Status of inputs sampled at power-on-reset (PORn) register 0. */
/*    This register shows the status of the inputs sampled at power-on-reset. It will not change on normal system reset. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_at_porn_stat_in0                 0x00000000U
#define Adr_NX90_sample_at_porn_stat_sample_at_porn_stat_in0 0xFF401680U
#define Adr_NX90_sample_at_porn_stat_in0                     0xFF401680U

#define MSK_NX90_sample_at_porn_stat_in0_hif_d0  0x00000001U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d0  0
#define MSK_NX90_sample_at_porn_stat_in0_hif_d1  0x00000002U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d1  1
#define MSK_NX90_sample_at_porn_stat_in0_hif_d2  0x00000004U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d2  2
#define MSK_NX90_sample_at_porn_stat_in0_hif_d3  0x00000008U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d3  3
#define MSK_NX90_sample_at_porn_stat_in0_hif_d4  0x00000010U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d4  4
#define MSK_NX90_sample_at_porn_stat_in0_hif_d5  0x00000020U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d5  5
#define MSK_NX90_sample_at_porn_stat_in0_hif_d6  0x00000040U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d6  6
#define MSK_NX90_sample_at_porn_stat_in0_hif_d7  0x00000080U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d7  7
#define MSK_NX90_sample_at_porn_stat_in0_hif_d8  0x00000100U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d8  8
#define MSK_NX90_sample_at_porn_stat_in0_hif_d9  0x00000200U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d9  9
#define MSK_NX90_sample_at_porn_stat_in0_hif_d10 0x00000400U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d10 10
#define MSK_NX90_sample_at_porn_stat_in0_hif_d11 0x00000800U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d11 11
#define MSK_NX90_sample_at_porn_stat_in0_hif_d12 0x00001000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d12 12
#define MSK_NX90_sample_at_porn_stat_in0_hif_d13 0x00002000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d13 13
#define MSK_NX90_sample_at_porn_stat_in0_hif_d14 0x00004000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d14 14
#define MSK_NX90_sample_at_porn_stat_in0_hif_d15 0x00008000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_d15 15
#define MSK_NX90_sample_at_porn_stat_in0_hif_a0  0x00010000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a0  16
#define MSK_NX90_sample_at_porn_stat_in0_hif_a1  0x00020000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a1  17
#define MSK_NX90_sample_at_porn_stat_in0_hif_a2  0x00040000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a2  18
#define MSK_NX90_sample_at_porn_stat_in0_hif_a3  0x00080000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a3  19
#define MSK_NX90_sample_at_porn_stat_in0_hif_a4  0x00100000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a4  20
#define MSK_NX90_sample_at_porn_stat_in0_hif_a5  0x00200000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a5  21
#define MSK_NX90_sample_at_porn_stat_in0_hif_a6  0x00400000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a6  22
#define MSK_NX90_sample_at_porn_stat_in0_hif_a7  0x00800000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a7  23
#define MSK_NX90_sample_at_porn_stat_in0_hif_a8  0x01000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a8  24
#define MSK_NX90_sample_at_porn_stat_in0_hif_a9  0x02000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a9  25
#define MSK_NX90_sample_at_porn_stat_in0_hif_a10 0x04000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a10 26
#define MSK_NX90_sample_at_porn_stat_in0_hif_a11 0x08000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a11 27
#define MSK_NX90_sample_at_porn_stat_in0_hif_a12 0x10000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a12 28
#define MSK_NX90_sample_at_porn_stat_in0_hif_a13 0x20000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a13 29
#define MSK_NX90_sample_at_porn_stat_in0_hif_a14 0x40000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a14 30
#define MSK_NX90_sample_at_porn_stat_in0_hif_a15 0x80000000U
#define SRT_NX90_sample_at_porn_stat_in0_hif_a15 31

/* all used bits of 'NX90_sample_at_porn_stat_in0': */
#define MSK_USED_BITS_NX90_sample_at_porn_stat_in0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register sample_at_porn_stat_in1 */
/* => Status of inputs sampled at power-on-reset (PORn) register 1. */
/*    This register shows the status of the inputs sampled at power-on-reset. It will not change on normal system reset. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_at_porn_stat_in1                 0x00000004U
#define Adr_NX90_sample_at_porn_stat_sample_at_porn_stat_in1 0xFF401684U
#define Adr_NX90_sample_at_porn_stat_in1                     0xFF401684U

#define MSK_NX90_sample_at_porn_stat_in1_hif_a16   0x00000001U
#define SRT_NX90_sample_at_porn_stat_in1_hif_a16   0
#define MSK_NX90_sample_at_porn_stat_in1_hif_a17   0x00000002U
#define SRT_NX90_sample_at_porn_stat_in1_hif_a17   1
#define MSK_NX90_sample_at_porn_stat_in1_hif_bhen  0x00000004U
#define SRT_NX90_sample_at_porn_stat_in1_hif_bhen  2
#define MSK_NX90_sample_at_porn_stat_in1_hif_rdn   0x00000008U
#define SRT_NX90_sample_at_porn_stat_in1_hif_rdn   3
#define MSK_NX90_sample_at_porn_stat_in1_hif_wrn   0x00000010U
#define SRT_NX90_sample_at_porn_stat_in1_hif_wrn   4
#define MSK_NX90_sample_at_porn_stat_in1_hif_csn   0x00000020U
#define SRT_NX90_sample_at_porn_stat_in1_hif_csn   5
#define MSK_NX90_sample_at_porn_stat_in1_hif_rdy   0x00000040U
#define SRT_NX90_sample_at_porn_stat_in1_hif_rdy   6
#define MSK_NX90_sample_at_porn_stat_in1_hif_dirq  0x00000080U
#define SRT_NX90_sample_at_porn_stat_in1_hif_dirq  7
#define MSK_NX90_sample_at_porn_stat_in1_hif_sdclk 0x00000100U
#define SRT_NX90_sample_at_porn_stat_in1_hif_sdclk 8
#define MSK_NX90_sample_at_porn_stat_in1_rdy_n     0x00000200U
#define SRT_NX90_sample_at_porn_stat_in1_rdy_n     9
#define MSK_NX90_sample_at_porn_stat_in1_run_n     0x00000400U
#define SRT_NX90_sample_at_porn_stat_in1_run_n     10
#define MSK_NX90_sample_at_porn_stat_in1_sqi_clk   0x00000800U
#define SRT_NX90_sample_at_porn_stat_in1_sqi_clk   11
#define MSK_NX90_sample_at_porn_stat_in1_sqi_cs0n  0x00001000U
#define SRT_NX90_sample_at_porn_stat_in1_sqi_cs0n  12
#define MSK_NX90_sample_at_porn_stat_in1_sqi_mosi  0x00002000U
#define SRT_NX90_sample_at_porn_stat_in1_sqi_mosi  13
#define MSK_NX90_sample_at_porn_stat_in1_sqi_miso  0x00004000U
#define SRT_NX90_sample_at_porn_stat_in1_sqi_miso  14
#define MSK_NX90_sample_at_porn_stat_in1_sqi_sio2  0x00008000U
#define SRT_NX90_sample_at_porn_stat_in1_sqi_sio2  15
#define MSK_NX90_sample_at_porn_stat_in1_sqi_sio3  0x00010000U
#define SRT_NX90_sample_at_porn_stat_in1_sqi_sio3  16

/* all used bits of 'NX90_sample_at_porn_stat_in1': */
#define MSK_USED_BITS_NX90_sample_at_porn_stat_in1 0x0001ffffU


/* ===================================================================== */

/* Area of adc_seq */

/* ===================================================================== */

#define Addr_NX90_adc_seq 0xFF4016C0U

/* --------------------------------------------------------------------- */
/* Register adc_seq_start */
/* => ADC start register: */
/*    The bits start_adc0 and start_adc1 are write enables for the preceeding bits, respectively. */
/*    Setting one or both of these bits to 1 starts ADC control state machine for the appropriate ADC */
/*    using the configuration defined by the preceeding bits (sel_adc, ref_adc, tt_add_adc). */
/*    The configuration bits can only be changed in the write cycles starting the appropriate ADC. */
/*    This register is writable but can also be changed by hardware (reset). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_start     0x00000000U
#define Adr_NX90_adc_seq_adc_seq_start 0xFF4016C0U
#define Adr_NX90_adc_seq_start         0xFF4016C0U
#define DFLT_VAL_NX90_adc_seq_start    0x00060006U

#define MSK_NX90_adc_seq_start_start_adc0          0x00000001U
#define SRT_NX90_adc_seq_start_start_adc0          0
#define DFLT_VAL_NX90_adc_seq_start_start_adc0     0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_start_start_adc0  0x00000000U
#define MSK_NX90_adc_seq_start_sel_adc0            0x00000006U
#define SRT_NX90_adc_seq_start_sel_adc0            1
#define DFLT_VAL_NX90_adc_seq_start_sel_adc0       0x00000006U
#define DFLT_BF_VAL_NX90_adc_seq_start_sel_adc0    0x00000003U
#define MSK_NX90_adc_seq_start_ref_adc0            0x00000008U
#define SRT_NX90_adc_seq_start_ref_adc0            3
#define DFLT_VAL_NX90_adc_seq_start_ref_adc0       0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_start_ref_adc0    0x00000000U
#define MSK_NX90_adc_seq_start_tt_add_adc0         0x000003f0U
#define SRT_NX90_adc_seq_start_tt_add_adc0         4
#define DFLT_VAL_NX90_adc_seq_start_tt_add_adc0    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_start_tt_add_adc0 0x00000000U
#define MSK_NX90_adc_seq_start_start_adc1          0x00010000U
#define SRT_NX90_adc_seq_start_start_adc1          16
#define DFLT_VAL_NX90_adc_seq_start_start_adc1     0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_start_start_adc1  0x00000000U
#define MSK_NX90_adc_seq_start_sel_adc1            0x00060000U
#define SRT_NX90_adc_seq_start_sel_adc1            17
#define DFLT_VAL_NX90_adc_seq_start_sel_adc1       0x00060000U
#define DFLT_BF_VAL_NX90_adc_seq_start_sel_adc1    0x00000003U
#define MSK_NX90_adc_seq_start_ref_adc1            0x00080000U
#define SRT_NX90_adc_seq_start_ref_adc1            19
#define DFLT_VAL_NX90_adc_seq_start_ref_adc1       0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_start_ref_adc1    0x00000000U
#define MSK_NX90_adc_seq_start_tt_add_adc1         0x03f00000U
#define SRT_NX90_adc_seq_start_tt_add_adc1         20
#define DFLT_VAL_NX90_adc_seq_start_tt_add_adc1    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_start_tt_add_adc1 0x00000000U

/* all used bits of 'NX90_adc_seq_start': */
#define MSK_USED_BITS_NX90_adc_seq_start 0x03ff03ffU

/* --------------------------------------------------------------------- */
/* Register adc_seq_cfg */
/* => ADC general config register: */
/*    This register is for static config values of ADC. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_cfg     0x00000004U
#define Adr_NX90_adc_seq_adc_seq_cfg 0xFF4016C4U
#define Adr_NX90_adc_seq_cfg         0xFF4016C4U
#define DFLT_VAL_NX90_adc_seq_cfg    0x00000000U

#define MSK_NX90_adc_seq_cfg_enable                                    0x00000001U
#define SRT_NX90_adc_seq_cfg_enable                                    0
#define DFLT_VAL_NX90_adc_seq_cfg_enable                               0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_enable                            0x00000000U
#define MSK_NX90_adc_seq_cfg_reset_n                                   0x00000002U
#define SRT_NX90_adc_seq_cfg_reset_n                                   1
#define DFLT_VAL_NX90_adc_seq_cfg_reset_n                              0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_reset_n                           0x00000000U
#define MSK_NX90_adc_seq_cfg_buffer_enable                             0x00000004U
#define SRT_NX90_adc_seq_cfg_buffer_enable                             2
#define DFLT_VAL_NX90_adc_seq_cfg_buffer_enable                        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_buffer_enable                     0x00000000U
#define MSK_NX90_adc_seq_cfg_debug                                     0x00000008U
#define SRT_NX90_adc_seq_cfg_debug                                     3
#define DFLT_VAL_NX90_adc_seq_cfg_debug                                0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_debug                             0x00000000U
#define MSK_NX90_adc_seq_cfg_sync_sample_start_if_restart_both         0x00000010U
#define SRT_NX90_adc_seq_cfg_sync_sample_start_if_restart_both         4
#define DFLT_VAL_NX90_adc_seq_cfg_sync_sample_start_if_restart_both    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_sync_sample_start_if_restart_both 0x00000000U

/* all used bits of 'NX90_adc_seq_cfg': */
#define MSK_USED_BITS_NX90_adc_seq_cfg 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_cfg_clock */
/* => ADC config register for ADC clock (same for both ADCs): */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_cfg_clock     0x00000008U
#define Adr_NX90_adc_seq_adc_seq_cfg_clock 0xFF4016C8U
#define Adr_NX90_adc_seq_cfg_clock         0xFF4016C8U
#define DFLT_VAL_NX90_adc_seq_cfg_clock    0x0000001dU

#define MSK_NX90_adc_seq_cfg_clock_period             0x00000007U
#define SRT_NX90_adc_seq_cfg_clock_period             0
#define DFLT_VAL_NX90_adc_seq_cfg_clock_period        0x00000005U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_clock_period     0x00000005U
#define MSK_NX90_adc_seq_cfg_clock_adc1_shift         0x00000038U
#define SRT_NX90_adc_seq_cfg_clock_adc1_shift         3
#define DFLT_VAL_NX90_adc_seq_cfg_clock_adc1_shift    0x00000018U
#define DFLT_BF_VAL_NX90_adc_seq_cfg_clock_adc1_shift 0x00000003U

/* all used bits of 'NX90_adc_seq_cfg_clock': */
#define MSK_USED_BITS_NX90_adc_seq_cfg_clock 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_status */
/* => ADC status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_status     0x0000000CU
#define Adr_NX90_adc_seq_adc_seq_status 0xFF4016CCU
#define Adr_NX90_adc_seq_status         0xFF4016CCU

#define MSK_NX90_adc_seq_status_adc0_sample       0x00000001U
#define SRT_NX90_adc_seq_status_adc0_sample       0
#define MSK_NX90_adc_seq_status_adc1_sample       0x00000002U
#define SRT_NX90_adc_seq_status_adc1_sample       1
#define MSK_NX90_adc_seq_status_adc0_running      0x00000004U
#define SRT_NX90_adc_seq_status_adc0_running      2
#define MSK_NX90_adc_seq_status_adc1_running      0x00000008U
#define SRT_NX90_adc_seq_status_adc1_running      3
#define MSK_NX90_adc_seq_status_adc0_data         0x00000010U
#define SRT_NX90_adc_seq_status_adc0_data         4
#define MSK_NX90_adc_seq_status_adc1_data         0x00000020U
#define SRT_NX90_adc_seq_status_adc1_data         5
#define MSK_NX90_adc_seq_status_adc_clock_running 0x00000040U
#define SRT_NX90_adc_seq_status_adc_clock_running 6

/* all used bits of 'NX90_adc_seq_status': */
#define MSK_USED_BITS_NX90_adc_seq_status 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_adc_data0 */
/* => ADC0 value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_adc_data0     0x00000010U
#define Adr_NX90_adc_seq_adc_seq_adc_data0 0xFF4016D0U
#define Adr_NX90_adc_seq_adc_data0         0xFF4016D0U

#define MSK_NX90_adc_seq_adc_data0_val 0x00000fffU
#define SRT_NX90_adc_seq_adc_data0_val 0

/* all used bits of 'NX90_adc_seq_adc_data0': */
#define MSK_USED_BITS_NX90_adc_seq_adc_data0 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register adc_seq_adc_data1 */
/* => ADC1 value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_adc_data1     0x00000014U
#define Adr_NX90_adc_seq_adc_seq_adc_data1 0xFF4016D4U
#define Adr_NX90_adc_seq_adc_data1         0xFF4016D4U

#define MSK_NX90_adc_seq_adc_data1_val 0x00000fffU
#define SRT_NX90_adc_seq_adc_data1_val 0

/* all used bits of 'NX90_adc_seq_adc_data1': */
#define MSK_USED_BITS_NX90_adc_seq_adc_data1 0x00000fffU

/* --------------------------------------------------------------------- */
/* Register adc_seq_debug */
/* => Debug Mode register: */
/*    If cgf-debug is enabled, this register directly controls inputs of both ADCs. */
/*    Output data of both ADCs will still be at data0 and data1. */
/*    In debug mode, a software reset (cfg-reset_n) will not influence these values (only directly signal ADC_NRES). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_debug     0x00000018U
#define Adr_NX90_adc_seq_adc_seq_debug 0xFF4016D8U
#define Adr_NX90_adc_seq_debug         0xFF4016D8U
#define DFLT_VAL_NX90_adc_seq_debug    0x00004040U

#define MSK_NX90_adc_seq_debug_adc0_clk                  0x00000001U
#define SRT_NX90_adc_seq_debug_adc0_clk                  0
#define DFLT_VAL_NX90_adc_seq_debug_adc0_clk             0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_clk          0x00000000U
#define MSK_NX90_adc_seq_debug_adc0_soc                  0x00000002U
#define SRT_NX90_adc_seq_debug_adc0_soc                  1
#define DFLT_VAL_NX90_adc_seq_debug_adc0_soc             0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_soc          0x00000000U
#define MSK_NX90_adc_seq_debug_adc0_use_ref_vdd3         0x00000004U
#define SRT_NX90_adc_seq_debug_adc0_use_ref_vdd3         2
#define DFLT_VAL_NX90_adc_seq_debug_adc0_use_ref_vdd3    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_use_ref_vdd3 0x00000000U
#define MSK_NX90_adc_seq_debug_adc0_set_mux0             0x00000008U
#define SRT_NX90_adc_seq_debug_adc0_set_mux0             3
#define DFLT_VAL_NX90_adc_seq_debug_adc0_set_mux0        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_set_mux0     0x00000000U
#define MSK_NX90_adc_seq_debug_adc0_set_mux1             0x00000010U
#define SRT_NX90_adc_seq_debug_adc0_set_mux1             4
#define DFLT_VAL_NX90_adc_seq_debug_adc0_set_mux1        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_set_mux1     0x00000000U
#define MSK_NX90_adc_seq_debug_adc0_set_mux2             0x00000020U
#define SRT_NX90_adc_seq_debug_adc0_set_mux2             5
#define DFLT_VAL_NX90_adc_seq_debug_adc0_set_mux2        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_set_mux2     0x00000000U
#define MSK_NX90_adc_seq_debug_adc0_set_mux3             0x00000040U
#define SRT_NX90_adc_seq_debug_adc0_set_mux3             6
#define DFLT_VAL_NX90_adc_seq_debug_adc0_set_mux3        0x00000040U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc0_set_mux3     0x00000001U
#define MSK_NX90_adc_seq_debug_adc1_clk                  0x00000100U
#define SRT_NX90_adc_seq_debug_adc1_clk                  8
#define DFLT_VAL_NX90_adc_seq_debug_adc1_clk             0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_clk          0x00000000U
#define MSK_NX90_adc_seq_debug_adc1_soc                  0x00000200U
#define SRT_NX90_adc_seq_debug_adc1_soc                  9
#define DFLT_VAL_NX90_adc_seq_debug_adc1_soc             0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_soc          0x00000000U
#define MSK_NX90_adc_seq_debug_adc1_use_ref_vdd3         0x00000400U
#define SRT_NX90_adc_seq_debug_adc1_use_ref_vdd3         10
#define DFLT_VAL_NX90_adc_seq_debug_adc1_use_ref_vdd3    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_use_ref_vdd3 0x00000000U
#define MSK_NX90_adc_seq_debug_adc1_set_mux0             0x00000800U
#define SRT_NX90_adc_seq_debug_adc1_set_mux0             11
#define DFLT_VAL_NX90_adc_seq_debug_adc1_set_mux0        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_set_mux0     0x00000000U
#define MSK_NX90_adc_seq_debug_adc1_set_mux1             0x00001000U
#define SRT_NX90_adc_seq_debug_adc1_set_mux1             12
#define DFLT_VAL_NX90_adc_seq_debug_adc1_set_mux1        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_set_mux1     0x00000000U
#define MSK_NX90_adc_seq_debug_adc1_set_mux2             0x00002000U
#define SRT_NX90_adc_seq_debug_adc1_set_mux2             13
#define DFLT_VAL_NX90_adc_seq_debug_adc1_set_mux2        0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_set_mux2     0x00000000U
#define MSK_NX90_adc_seq_debug_adc1_set_mux3             0x00004000U
#define SRT_NX90_adc_seq_debug_adc1_set_mux3             14
#define DFLT_VAL_NX90_adc_seq_debug_adc1_set_mux3        0x00004000U
#define DFLT_BF_VAL_NX90_adc_seq_debug_adc1_set_mux3     0x00000001U

/* all used bits of 'NX90_adc_seq_debug': */
#define MSK_USED_BITS_NX90_adc_seq_debug 0x00007f7fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_irq_raw     0x0000001CU
#define Adr_NX90_adc_seq_adc_seq_irq_raw 0xFF4016DCU
#define Adr_NX90_adc_seq_irq_raw         0xFF4016DCU
#define DFLT_VAL_NX90_adc_seq_irq_raw    0x00000000U

#define MSK_NX90_adc_seq_irq_raw_adc0_sample_finish         0x00000001U
#define SRT_NX90_adc_seq_irq_raw_adc0_sample_finish         0
#define DFLT_VAL_NX90_adc_seq_irq_raw_adc0_sample_finish    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_raw_adc0_sample_finish 0x00000000U
#define MSK_NX90_adc_seq_irq_raw_adc1_sample_finish         0x00000002U
#define SRT_NX90_adc_seq_irq_raw_adc1_sample_finish         1
#define DFLT_VAL_NX90_adc_seq_irq_raw_adc1_sample_finish    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_raw_adc1_sample_finish 0x00000000U
#define MSK_NX90_adc_seq_irq_raw_adc0_data_finish           0x00000004U
#define SRT_NX90_adc_seq_irq_raw_adc0_data_finish           2
#define DFLT_VAL_NX90_adc_seq_irq_raw_adc0_data_finish      0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_raw_adc0_data_finish   0x00000000U
#define MSK_NX90_adc_seq_irq_raw_adc1_data_finish           0x00000008U
#define SRT_NX90_adc_seq_irq_raw_adc1_data_finish           3
#define DFLT_VAL_NX90_adc_seq_irq_raw_adc1_data_finish      0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_raw_adc1_data_finish   0x00000000U

/* all used bits of 'NX90_adc_seq_irq_raw': */
#define MSK_USED_BITS_NX90_adc_seq_irq_raw 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_irq_masked     0x00000020U
#define Adr_NX90_adc_seq_adc_seq_irq_masked 0xFF4016E0U
#define Adr_NX90_adc_seq_irq_masked         0xFF4016E0U

#define MSK_NX90_adc_seq_irq_masked_adc0_sample_finish 0x00000001U
#define SRT_NX90_adc_seq_irq_masked_adc0_sample_finish 0
#define MSK_NX90_adc_seq_irq_masked_adc1_sample_finish 0x00000002U
#define SRT_NX90_adc_seq_irq_masked_adc1_sample_finish 1
#define MSK_NX90_adc_seq_irq_masked_adc0_data_finish   0x00000004U
#define SRT_NX90_adc_seq_irq_masked_adc0_data_finish   2
#define MSK_NX90_adc_seq_irq_masked_adc1_data_finish   0x00000008U
#define SRT_NX90_adc_seq_irq_masked_adc1_data_finish   3

/* all used bits of 'NX90_adc_seq_irq_masked': */
#define MSK_USED_BITS_NX90_adc_seq_irq_masked 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_irq_mask_set */
/* => IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adc_seq_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_irq_mask_set     0x00000024U
#define Adr_NX90_adc_seq_adc_seq_irq_mask_set 0xFF4016E4U
#define Adr_NX90_adc_seq_irq_mask_set         0xFF4016E4U
#define DFLT_VAL_NX90_adc_seq_irq_mask_set    0x00000000U

#define MSK_NX90_adc_seq_irq_mask_set_adc0_sample_finish         0x00000001U
#define SRT_NX90_adc_seq_irq_mask_set_adc0_sample_finish         0
#define DFLT_VAL_NX90_adc_seq_irq_mask_set_adc0_sample_finish    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_set_adc0_sample_finish 0x00000000U
#define MSK_NX90_adc_seq_irq_mask_set_adc1_sample_finish         0x00000002U
#define SRT_NX90_adc_seq_irq_mask_set_adc1_sample_finish         1
#define DFLT_VAL_NX90_adc_seq_irq_mask_set_adc1_sample_finish    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_set_adc1_sample_finish 0x00000000U
#define MSK_NX90_adc_seq_irq_mask_set_adc0_data_finish           0x00000004U
#define SRT_NX90_adc_seq_irq_mask_set_adc0_data_finish           2
#define DFLT_VAL_NX90_adc_seq_irq_mask_set_adc0_data_finish      0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_set_adc0_data_finish   0x00000000U
#define MSK_NX90_adc_seq_irq_mask_set_adc1_data_finish           0x00000008U
#define SRT_NX90_adc_seq_irq_mask_set_adc1_data_finish           3
#define DFLT_VAL_NX90_adc_seq_irq_mask_set_adc1_data_finish      0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_set_adc1_data_finish   0x00000000U

/* all used bits of 'NX90_adc_seq_irq_mask_set': */
#define MSK_USED_BITS_NX90_adc_seq_irq_mask_set 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register adc_seq_irq_mask_reset */
/* => IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_adc_seq_irq_mask_reset     0x00000028U
#define Adr_NX90_adc_seq_adc_seq_irq_mask_reset 0xFF4016E8U
#define Adr_NX90_adc_seq_irq_mask_reset         0xFF4016E8U
#define DFLT_VAL_NX90_adc_seq_irq_mask_reset    0x00000000U

#define MSK_NX90_adc_seq_irq_mask_reset_adc0_sample_finish         0x00000001U
#define SRT_NX90_adc_seq_irq_mask_reset_adc0_sample_finish         0
#define DFLT_VAL_NX90_adc_seq_irq_mask_reset_adc0_sample_finish    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_reset_adc0_sample_finish 0x00000000U
#define MSK_NX90_adc_seq_irq_mask_reset_adc1_sample_finish         0x00000002U
#define SRT_NX90_adc_seq_irq_mask_reset_adc1_sample_finish         1
#define DFLT_VAL_NX90_adc_seq_irq_mask_reset_adc1_sample_finish    0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_reset_adc1_sample_finish 0x00000000U
#define MSK_NX90_adc_seq_irq_mask_reset_adc0_data_finish           0x00000004U
#define SRT_NX90_adc_seq_irq_mask_reset_adc0_data_finish           2
#define DFLT_VAL_NX90_adc_seq_irq_mask_reset_adc0_data_finish      0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_reset_adc0_data_finish   0x00000000U
#define MSK_NX90_adc_seq_irq_mask_reset_adc1_data_finish           0x00000008U
#define SRT_NX90_adc_seq_irq_mask_reset_adc1_data_finish           3
#define DFLT_VAL_NX90_adc_seq_irq_mask_reset_adc1_data_finish      0x00000000U
#define DFLT_BF_VAL_NX90_adc_seq_irq_mask_reset_adc1_data_finish   0x00000000U

/* all used bits of 'NX90_adc_seq_irq_mask_reset': */
#define MSK_USED_BITS_NX90_adc_seq_irq_mask_reset 0x0000000fU


/* ===================================================================== */

/* Area of miimu */

/* ===================================================================== */

#define Addr_NX90_miimu 0xFF401700U

/* --------------------------------------------------------------------- */
/* Register miimu */
/* => MDIO FSM interface controlling for netX external PHY. */
/*    Note: */
/*       Loopback for purpose is provided by miimu_sw register and also performed */
/*       in non-software-mode when enabled. */
/*    Note: */
/*       Prior phy_nres-bit was removed. PHY reset must be done by register ASIC_CTRL.phy_control. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_miimu   0x00000000U
#define Adr_NX90_miimu_miimu 0xFF401700U
#define Adr_NX90_miimu       0xFF401700U
#define DFLT_VAL_NX90_miimu  0x00000000U

#define MSK_NX90_miimu_snrdy              0x00000001U
#define SRT_NX90_miimu_snrdy              0
#define DFLT_VAL_NX90_miimu_snrdy         0x00000000U
#define DFLT_BF_VAL_NX90_miimu_snrdy      0x00000000U
#define MSK_NX90_miimu_preamble           0x00000002U
#define SRT_NX90_miimu_preamble           1
#define DFLT_VAL_NX90_miimu_preamble      0x00000000U
#define DFLT_BF_VAL_NX90_miimu_preamble   0x00000000U
#define MSK_NX90_miimu_opmode             0x00000004U
#define SRT_NX90_miimu_opmode             2
#define DFLT_VAL_NX90_miimu_opmode        0x00000000U
#define DFLT_BF_VAL_NX90_miimu_opmode     0x00000000U
#define MSK_NX90_miimu_mdc_period         0x00000008U
#define SRT_NX90_miimu_mdc_period         3
#define DFLT_VAL_NX90_miimu_mdc_period    0x00000000U
#define DFLT_BF_VAL_NX90_miimu_mdc_period 0x00000000U
#define MSK_NX90_miimu_rta                0x00000020U
#define SRT_NX90_miimu_rta                5
#define DFLT_VAL_NX90_miimu_rta           0x00000000U
#define DFLT_BF_VAL_NX90_miimu_rta        0x00000000U
#define MSK_NX90_miimu_regaddr            0x000007c0U
#define SRT_NX90_miimu_regaddr            6
#define DFLT_VAL_NX90_miimu_regaddr       0x00000000U
#define DFLT_BF_VAL_NX90_miimu_regaddr    0x00000000U
#define MSK_NX90_miimu_phyaddr            0x0000f800U
#define SRT_NX90_miimu_phyaddr            11
#define DFLT_VAL_NX90_miimu_phyaddr       0x00000000U
#define DFLT_BF_VAL_NX90_miimu_phyaddr    0x00000000U
#define MSK_NX90_miimu_data               0xffff0000U
#define SRT_NX90_miimu_data               16
#define DFLT_VAL_NX90_miimu_data          0x00000000U
#define DFLT_BF_VAL_NX90_miimu_data       0x00000000U

/* all used bits of 'NX90_miimu': */
#define MSK_USED_BITS_NX90_miimu 0xffffffefU

/* --------------------------------------------------------------------- */
/* Register miimu_sw */
/* => MDIO software interface controlling for netX internal PHY. */
/*    Note: */
/*       Function is similar to old MIIMU unit register 'miimu_sw', however data output */
/*       enable was removed as it is not necessary for MDIO interface to internal PHY (due */
/*       to non-bidirectional data signal). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_miimu_sw   0x00000004U
#define Adr_NX90_miimu_miimu_sw 0xFF401704U
#define Adr_NX90_miimu_sw       0xFF401704U
#define DFLT_VAL_NX90_miimu_sw  0x00000000U

#define MSK_NX90_miimu_sw_enable           0x00000001U
#define SRT_NX90_miimu_sw_enable           0
#define DFLT_VAL_NX90_miimu_sw_enable      0x00000000U
#define DFLT_BF_VAL_NX90_miimu_sw_enable   0x00000000U
#define MSK_NX90_miimu_sw_mdc              0x00000010U
#define SRT_NX90_miimu_sw_mdc              4
#define DFLT_VAL_NX90_miimu_sw_mdc         0x00000000U
#define DFLT_BF_VAL_NX90_miimu_sw_mdc      0x00000000U
#define MSK_NX90_miimu_sw_mdo              0x00000020U
#define SRT_NX90_miimu_sw_mdo              5
#define DFLT_VAL_NX90_miimu_sw_mdo         0x00000000U
#define DFLT_BF_VAL_NX90_miimu_sw_mdo      0x00000000U
#define MSK_NX90_miimu_sw_mdoe             0x00000040U
#define SRT_NX90_miimu_sw_mdoe             6
#define DFLT_VAL_NX90_miimu_sw_mdoe        0x00000000U
#define DFLT_BF_VAL_NX90_miimu_sw_mdoe     0x00000000U
#define MSK_NX90_miimu_sw_mdi_ro           0x00000080U
#define SRT_NX90_miimu_sw_mdi_ro           7
#define DFLT_VAL_NX90_miimu_sw_mdi_ro      0x00000000U
#define DFLT_BF_VAL_NX90_miimu_sw_mdi_ro   0x00000000U
#define MSK_NX90_miimu_sw_loopback         0x00000100U
#define SRT_NX90_miimu_sw_loopback         8
#define DFLT_VAL_NX90_miimu_sw_loopback    0x00000000U
#define DFLT_BF_VAL_NX90_miimu_sw_loopback 0x00000000U

/* all used bits of 'NX90_miimu_sw': */
#define MSK_USED_BITS_NX90_miimu_sw 0x000001f1U


/* ===================================================================== */

/* Area of feth */

/* ===================================================================== */

#define Addr_NX90_feth 0xFF480000U

/* ===================================================================== */

/* Area of eth_system */

/* ===================================================================== */

#define Addr_NX90_eth_system 0xFF480000U

/* ===================================================================== */

/* Area of eth */

/* ===================================================================== */

#define Addr_NX90_eth 0xFF480000U

/* --------------------------------------------------------------------- */
/* Register eth_config */
/* => ETH config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_config  0x00000000U
#define Adr_NX90_eth_eth_config  0xFF480000U
#define Adr_NX90_eth_config      0xFF480000U
#define DFLT_VAL_NX90_eth_config 0x00000004U

#define MSK_NX90_eth_config_rx_watermark_irq               0x0000000fU
#define SRT_NX90_eth_config_rx_watermark_irq               0
#define DFLT_VAL_NX90_eth_config_rx_watermark_irq          0x00000004U
#define DFLT_BF_VAL_NX90_eth_config_rx_watermark_irq       0x00000004U
#define MSK_NX90_eth_config_rx_sample_phase                0x00000070U
#define SRT_NX90_eth_config_rx_sample_phase                4
#define DFLT_VAL_NX90_eth_config_rx_sample_phase           0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_sample_phase        0x00000000U
#define MSK_NX90_eth_config_rx_delay_inputs                0x00000080U
#define SRT_NX90_eth_config_rx_delay_inputs                7
#define DFLT_VAL_NX90_eth_config_rx_delay_inputs           0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_delay_inputs        0x00000000U
#define MSK_NX90_eth_config_rx_allow_jumbo_packets         0x00000100U
#define SRT_NX90_eth_config_rx_allow_jumbo_packets         8
#define DFLT_VAL_NX90_eth_config_rx_allow_jumbo_packets    0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_allow_jumbo_packets 0x00000000U
#define MSK_NX90_eth_config_rx_exact_preamble              0x00000200U
#define SRT_NX90_eth_config_rx_exact_preamble              9
#define DFLT_VAL_NX90_eth_config_rx_exact_preamble         0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_exact_preamble      0x00000000U
#define MSK_NX90_eth_config_rx_no_preamble                 0x00000400U
#define SRT_NX90_eth_config_rx_no_preamble                 10
#define DFLT_VAL_NX90_eth_config_rx_no_preamble            0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_no_preamble         0x00000000U
#define MSK_NX90_eth_config_rx_dma_mode                    0x00000800U
#define SRT_NX90_eth_config_rx_dma_mode                    11
#define DFLT_VAL_NX90_eth_config_rx_dma_mode               0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_dma_mode            0x00000000U
#define MSK_NX90_eth_config_rx_systime_sfd                 0x00001000U
#define SRT_NX90_eth_config_rx_systime_sfd                 12
#define DFLT_VAL_NX90_eth_config_rx_systime_sfd            0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_systime_sfd         0x00000000U
#define MSK_NX90_eth_config_rx_enable                      0x00002000U
#define SRT_NX90_eth_config_rx_enable                      13
#define DFLT_VAL_NX90_eth_config_rx_enable                 0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_rx_enable              0x00000000U
#define MSK_NX90_eth_config_frequency                      0x08000000U
#define SRT_NX90_eth_config_frequency                      27
#define DFLT_VAL_NX90_eth_config_frequency                 0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_frequency              0x00000000U
#define MSK_NX90_eth_config_hd_suppress_loopback           0x10000000U
#define SRT_NX90_eth_config_hd_suppress_loopback           28
#define DFLT_VAL_NX90_eth_config_hd_suppress_loopback      0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_hd_suppress_loopback   0x00000000U
#define MSK_NX90_eth_config_phy_mode                       0x20000000U
#define SRT_NX90_eth_config_phy_mode                       29
#define DFLT_VAL_NX90_eth_config_phy_mode                  0x00000000U
#define DFLT_BF_VAL_NX90_eth_config_phy_mode               0x00000000U

/* all used bits of 'NX90_eth_config': */
#define MSK_USED_BITS_NX90_eth_config 0x38003fffU

/* --------------------------------------------------------------------- */
/* Register eth_tx_config */
/* => ETH config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_config  0x00000004U
#define Adr_NX90_eth_eth_tx_config  0xFF480004U
#define Adr_NX90_eth_tx_config      0xFF480004U
#define DFLT_VAL_NX90_eth_tx_config 0x02188084U

#define MSK_NX90_eth_tx_config_tx_watermark_irq           0x0000000fU
#define SRT_NX90_eth_tx_config_tx_watermark_irq           0
#define DFLT_VAL_NX90_eth_tx_config_tx_watermark_irq      0x00000004U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_watermark_irq   0x00000004U
#define MSK_NX90_eth_tx_config_tx_watermark_start         0x000000f0U
#define SRT_NX90_eth_tx_config_tx_watermark_start         4
#define DFLT_VAL_NX90_eth_tx_config_tx_watermark_start    0x00000080U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_watermark_start 0x00000008U
#define MSK_NX90_eth_tx_config_tx_output_phase            0x00000700U
#define SRT_NX90_eth_tx_config_tx_output_phase            8
#define DFLT_VAL_NX90_eth_tx_config_tx_output_phase       0x00000000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_output_phase    0x00000000U
#define MSK_NX90_eth_tx_config_tx_preamble_len            0x0000f800U
#define SRT_NX90_eth_tx_config_tx_preamble_len            11
#define DFLT_VAL_NX90_eth_tx_config_tx_preamble_len       0x00008000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_preamble_len    0x00000010U
#define MSK_NX90_eth_tx_config_tx_min_ifg_cycles          0x001f0000U
#define SRT_NX90_eth_tx_config_tx_min_ifg_cycles          16
#define DFLT_VAL_NX90_eth_tx_config_tx_min_ifg_cycles     0x00180000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_min_ifg_cycles  0x00000018U
#define MSK_NX90_eth_tx_config_tx_crs_low_cycles          0x03e00000U
#define SRT_NX90_eth_tx_config_tx_crs_low_cycles          21
#define DFLT_VAL_NX90_eth_tx_config_tx_crs_low_cycles     0x02000000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_crs_low_cycles  0x00000010U
#define MSK_NX90_eth_tx_config_tx_abort_frame             0x1c000000U
#define SRT_NX90_eth_tx_config_tx_abort_frame             26
#define DFLT_VAL_NX90_eth_tx_config_tx_abort_frame        0x00000000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_abort_frame     0x00000000U
#define MSK_NX90_eth_tx_config_tx_systime_sfd             0x20000000U
#define SRT_NX90_eth_tx_config_tx_systime_sfd             29
#define DFLT_VAL_NX90_eth_tx_config_tx_systime_sfd        0x00000000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_systime_sfd     0x00000000U
#define MSK_NX90_eth_tx_config_tx_dma_mode                0x40000000U
#define SRT_NX90_eth_tx_config_tx_dma_mode                30
#define DFLT_VAL_NX90_eth_tx_config_tx_dma_mode           0x00000000U
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_dma_mode        0x00000000U
#define MSK_NX90_eth_tx_config_half_duplex                0x80000000U
#define SRT_NX90_eth_tx_config_half_duplex                31
#define DFLT_VAL_NX90_eth_tx_config_half_duplex           0x00000000U
#define DFLT_BF_VAL_NX90_eth_tx_config_half_duplex        0x00000000U

/* all used bits of 'NX90_eth_tx_config': */
#define MSK_USED_BITS_NX90_eth_tx_config 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register eth_status */
/* => ETH status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_status 0x00000008U
#define Adr_NX90_eth_eth_status 0xFF480008U
#define Adr_NX90_eth_status     0xFF480008U

#define MSK_NX90_eth_status_rx_fill 0x0000001fU
#define SRT_NX90_eth_status_rx_fill 0
#define MSK_NX90_eth_status_tx_fill 0x00000f80U
#define SRT_NX90_eth_status_tx_fill 7

/* all used bits of 'NX90_eth_status': */
#define MSK_USED_BITS_NX90_eth_status 0x00000f9fU

/* --------------------------------------------------------------------- */
/* Register eth_tx_data */
/* => Data to TX-FIFO: */
/*    returns 0xdeadbeef on read */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_data  0x0000000CU
#define Adr_NX90_eth_eth_tx_data  0xFF48000CU
#define Adr_NX90_eth_tx_data      0xFF48000CU
#define DFLT_VAL_NX90_eth_tx_data 0x00000000U

#define MSK_NX90_eth_tx_data_val         0xffffffffU
#define SRT_NX90_eth_tx_data_val         0
#define DFLT_VAL_NX90_eth_tx_data_val    0x00000000U
#define DFLT_BF_VAL_NX90_eth_tx_data_val 0x00000000U

/* all used bits of 'NX90_eth_tx_data': */
#define MSK_USED_BITS_NX90_eth_tx_data 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register eth_rx_data */
/* => Data from RX-FIFO: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_rx_data 0x00000010U
#define Adr_NX90_eth_eth_rx_data 0xFF480010U
#define Adr_NX90_eth_rx_data     0xFF480010U

#define MSK_NX90_eth_rx_data_val 0xffffffffU
#define SRT_NX90_eth_rx_data_val 0

/* all used bits of 'NX90_eth_rx_data': */
#define MSK_USED_BITS_NX90_eth_rx_data 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register eth_tx_len */
/* => Length of data inside transmitted frame (between SFD and FCS) */
/*    Note: Set this value after previous frame is completely transmitted (irq-tx_frame_finished). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_len  0x00000014U
#define Adr_NX90_eth_eth_tx_len  0xFF480014U
#define Adr_NX90_eth_tx_len      0xFF480014U
#define DFLT_VAL_NX90_eth_tx_len 0x000005eaU

#define MSK_NX90_eth_tx_len_val         0x000007ffU
#define SRT_NX90_eth_tx_len_val         0
#define DFLT_VAL_NX90_eth_tx_len_val    0x000005eaU
#define DFLT_BF_VAL_NX90_eth_tx_len_val 0x000005eaU

/* all used bits of 'NX90_eth_tx_len': */
#define MSK_USED_BITS_NX90_eth_tx_len 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register eth_rx_len_stat */
/* => Length and status information of lastly received frame */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_rx_len_stat 0x00000018U
#define Adr_NX90_eth_eth_rx_len_stat 0xFF480018U
#define Adr_NX90_eth_rx_len_stat     0xFF480018U

#define MSK_NX90_eth_rx_len_stat_rx_len            0x000007ffU
#define SRT_NX90_eth_rx_len_stat_rx_len            0
#define MSK_NX90_eth_rx_len_stat_rx_short_ifg      0x08000000U
#define SRT_NX90_eth_rx_len_stat_rx_short_ifg      27
#define MSK_NX90_eth_rx_len_stat_rx_jumbo_packet   0x10000000U
#define SRT_NX90_eth_rx_len_stat_rx_jumbo_packet   28
#define MSK_NX90_eth_rx_len_stat_rx_dribble_nibble 0x20000000U
#define SRT_NX90_eth_rx_len_stat_rx_dribble_nibble 29
#define MSK_NX90_eth_rx_len_stat_rx_crc_error      0x40000000U
#define SRT_NX90_eth_rx_len_stat_rx_crc_error      30
#define MSK_NX90_eth_rx_len_stat_rx_mii_rxerr      0x80000000U
#define SRT_NX90_eth_rx_len_stat_rx_mii_rxerr      31

/* all used bits of 'NX90_eth_rx_len_stat': */
#define MSK_USED_BITS_NX90_eth_rx_len_stat 0xf80007ffU

/* --------------------------------------------------------------------- */
/* Register eth_rx_systime_ns */
/* => Systime_ns sampled at start of received frame. */
/*    Exact position of start of frame is defined in eth_config-systime_sfd. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_rx_systime_ns 0x00000020U
#define Adr_NX90_eth_eth_rx_systime_ns 0xFF480020U
#define Adr_NX90_eth_rx_systime_ns     0xFF480020U

#define MSK_NX90_eth_rx_systime_ns_val 0xffffffffU
#define SRT_NX90_eth_rx_systime_ns_val 0

/* all used bits of 'NX90_eth_rx_systime_ns': */
#define MSK_USED_BITS_NX90_eth_rx_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register eth_tx_systime_ns */
/* => Systime_ns sampled at start of transmitted frame. */
/*    Exact position of start of frame is defined in eth_tx_config-systime_sfd. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_systime_ns 0x00000024U
#define Adr_NX90_eth_eth_tx_systime_ns 0xFF480024U
#define Adr_NX90_eth_tx_systime_ns     0xFF480024U

#define MSK_NX90_eth_tx_systime_ns_val 0xffffffffU
#define SRT_NX90_eth_tx_systime_ns_val 0

/* all used bits of 'NX90_eth_tx_systime_ns': */
#define MSK_USED_BITS_NX90_eth_tx_systime_ns 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register eth_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    Write access with '1' to rx_/tx_fifo_undr/_ovfl resets RX-FIFO/TX-FIFO. */
/*    Bits rx_data and tx_fifo are cleared by reading from/filling the appropriate FIFO. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_raw  0x00000028U
#define Adr_NX90_eth_eth_irq_raw  0xFF480028U
#define Adr_NX90_eth_irq_raw      0xFF480028U
#define DFLT_VAL_NX90_eth_irq_raw 0x00000000U

#define MSK_NX90_eth_irq_raw_tx_fifo                   0x00000001U
#define SRT_NX90_eth_irq_raw_tx_fifo                   0
#define DFLT_VAL_NX90_eth_irq_raw_tx_fifo              0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_fifo           0x00000000U
#define MSK_NX90_eth_irq_raw_tx_frame_finished         0x00000002U
#define SRT_NX90_eth_irq_raw_tx_frame_finished         1
#define DFLT_VAL_NX90_eth_irq_raw_tx_frame_finished    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_frame_finished 0x00000000U
#define MSK_NX90_eth_irq_raw_rx_data                   0x00000004U
#define SRT_NX90_eth_irq_raw_rx_data                   2
#define DFLT_VAL_NX90_eth_irq_raw_rx_data              0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_data           0x00000000U
#define MSK_NX90_eth_irq_raw_rx_frame_finished         0x00000008U
#define SRT_NX90_eth_irq_raw_rx_frame_finished         3
#define DFLT_VAL_NX90_eth_irq_raw_rx_frame_finished    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_frame_finished 0x00000000U
#define MSK_NX90_eth_irq_raw_tx_fifo_undr              0x00000010U
#define SRT_NX90_eth_irq_raw_tx_fifo_undr              4
#define DFLT_VAL_NX90_eth_irq_raw_tx_fifo_undr         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_fifo_undr      0x00000000U
#define MSK_NX90_eth_irq_raw_tx_fifo_ovfl              0x00000020U
#define SRT_NX90_eth_irq_raw_tx_fifo_ovfl              5
#define DFLT_VAL_NX90_eth_irq_raw_tx_fifo_ovfl         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_fifo_ovfl      0x00000000U
#define MSK_NX90_eth_irq_raw_rx_fifo_undr              0x00000040U
#define SRT_NX90_eth_irq_raw_rx_fifo_undr              6
#define DFLT_VAL_NX90_eth_irq_raw_rx_fifo_undr         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_fifo_undr      0x00000000U
#define MSK_NX90_eth_irq_raw_rx_fifo_ovfl              0x00000080U
#define SRT_NX90_eth_irq_raw_rx_fifo_ovfl              7
#define DFLT_VAL_NX90_eth_irq_raw_rx_fifo_ovfl         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_fifo_ovfl      0x00000000U
#define MSK_NX90_eth_irq_raw_rx_cpu_too_slow           0x00000100U
#define SRT_NX90_eth_irq_raw_rx_cpu_too_slow           8
#define DFLT_VAL_NX90_eth_irq_raw_rx_cpu_too_slow      0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_cpu_too_slow   0x00000000U
#define MSK_NX90_eth_irq_raw_rx_short_dv               0x00000200U
#define SRT_NX90_eth_irq_raw_rx_short_dv               9
#define DFLT_VAL_NX90_eth_irq_raw_rx_short_dv          0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_short_dv       0x00000000U
#define MSK_NX90_eth_irq_raw_rx_preamble_error         0x00000400U
#define SRT_NX90_eth_irq_raw_rx_preamble_error         10
#define DFLT_VAL_NX90_eth_irq_raw_rx_preamble_error    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_preamble_error 0x00000000U
#define MSK_NX90_eth_irq_raw_tx_col                    0x00000800U
#define SRT_NX90_eth_irq_raw_tx_col                    11
#define DFLT_VAL_NX90_eth_irq_raw_tx_col               0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_col            0x00000000U
#define MSK_NX90_eth_irq_raw_tx_late_col               0x00001000U
#define SRT_NX90_eth_irq_raw_tx_late_col               12
#define DFLT_VAL_NX90_eth_irq_raw_tx_late_col          0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_late_col       0x00000000U

/* all used bits of 'NX90_eth_irq_raw': */
#define MSK_USED_BITS_NX90_eth_irq_raw 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register eth_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs as connected to ARM/xPIC. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_masked 0x0000002CU
#define Adr_NX90_eth_eth_irq_masked 0xFF48002CU
#define Adr_NX90_eth_irq_masked     0xFF48002CU

#define MSK_NX90_eth_irq_masked_tx_fifo           0x00000001U
#define SRT_NX90_eth_irq_masked_tx_fifo           0
#define MSK_NX90_eth_irq_masked_tx_frame_finished 0x00000002U
#define SRT_NX90_eth_irq_masked_tx_frame_finished 1
#define MSK_NX90_eth_irq_masked_rx_data           0x00000004U
#define SRT_NX90_eth_irq_masked_rx_data           2
#define MSK_NX90_eth_irq_masked_rx_frame_finished 0x00000008U
#define SRT_NX90_eth_irq_masked_rx_frame_finished 3
#define MSK_NX90_eth_irq_masked_tx_fifo_undr      0x00000010U
#define SRT_NX90_eth_irq_masked_tx_fifo_undr      4
#define MSK_NX90_eth_irq_masked_tx_fifo_ovfl      0x00000020U
#define SRT_NX90_eth_irq_masked_tx_fifo_ovfl      5
#define MSK_NX90_eth_irq_masked_rx_fifo_undr      0x00000040U
#define SRT_NX90_eth_irq_masked_rx_fifo_undr      6
#define MSK_NX90_eth_irq_masked_rx_fifo_ovfl      0x00000080U
#define SRT_NX90_eth_irq_masked_rx_fifo_ovfl      7
#define MSK_NX90_eth_irq_masked_rx_cpu_too_slow   0x00000100U
#define SRT_NX90_eth_irq_masked_rx_cpu_too_slow   8
#define MSK_NX90_eth_irq_masked_rx_short_dv       0x00000200U
#define SRT_NX90_eth_irq_masked_rx_short_dv       9
#define MSK_NX90_eth_irq_masked_rx_preamble_error 0x00000400U
#define SRT_NX90_eth_irq_masked_rx_preamble_error 10
#define MSK_NX90_eth_irq_masked_tx_col            0x00000800U
#define SRT_NX90_eth_irq_masked_tx_col            11
#define MSK_NX90_eth_irq_masked_tx_late_col       0x00001000U
#define SRT_NX90_eth_irq_masked_tx_late_col       12

/* all used bits of 'NX90_eth_irq_masked': */
#define MSK_USED_BITS_NX90_eth_irq_masked 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register eth_irq_msk_set */
/* => IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_eth_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_msk_set  0x00000030U
#define Adr_NX90_eth_eth_irq_msk_set  0xFF480030U
#define Adr_NX90_eth_irq_msk_set      0xFF480030U
#define DFLT_VAL_NX90_eth_irq_msk_set 0x00000000U

#define MSK_NX90_eth_irq_msk_set_tx_fifo                   0x00000001U
#define SRT_NX90_eth_irq_msk_set_tx_fifo                   0
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_fifo              0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_fifo           0x00000000U
#define MSK_NX90_eth_irq_msk_set_tx_frame_finished         0x00000002U
#define SRT_NX90_eth_irq_msk_set_tx_frame_finished         1
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_frame_finished    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_frame_finished 0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_data                   0x00000004U
#define SRT_NX90_eth_irq_msk_set_rx_data                   2
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_data              0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_data           0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_frame_finished         0x00000008U
#define SRT_NX90_eth_irq_msk_set_rx_frame_finished         3
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_frame_finished    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_frame_finished 0x00000000U
#define MSK_NX90_eth_irq_msk_set_tx_fifo_undr              0x00000010U
#define SRT_NX90_eth_irq_msk_set_tx_fifo_undr              4
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_fifo_undr         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_fifo_undr      0x00000000U
#define MSK_NX90_eth_irq_msk_set_tx_fifo_ovfl              0x00000020U
#define SRT_NX90_eth_irq_msk_set_tx_fifo_ovfl              5
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_fifo_ovfl         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_fifo_ovfl      0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_fifo_undr              0x00000040U
#define SRT_NX90_eth_irq_msk_set_rx_fifo_undr              6
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_fifo_undr         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_fifo_undr      0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_fifo_ovfl              0x00000080U
#define SRT_NX90_eth_irq_msk_set_rx_fifo_ovfl              7
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_fifo_ovfl         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_fifo_ovfl      0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_cpu_too_slow           0x00000100U
#define SRT_NX90_eth_irq_msk_set_rx_cpu_too_slow           8
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_cpu_too_slow      0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_cpu_too_slow   0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_short_dv               0x00000200U
#define SRT_NX90_eth_irq_msk_set_rx_short_dv               9
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_short_dv          0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_short_dv       0x00000000U
#define MSK_NX90_eth_irq_msk_set_rx_preamble_error         0x00000400U
#define SRT_NX90_eth_irq_msk_set_rx_preamble_error         10
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_preamble_error    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_preamble_error 0x00000000U
#define MSK_NX90_eth_irq_msk_set_tx_col                    0x00000800U
#define SRT_NX90_eth_irq_msk_set_tx_col                    11
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_col               0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_col            0x00000000U
#define MSK_NX90_eth_irq_msk_set_tx_late_col               0x00001000U
#define SRT_NX90_eth_irq_msk_set_tx_late_col               12
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_late_col          0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_late_col       0x00000000U

/* all used bits of 'NX90_eth_irq_msk_set': */
#define MSK_USED_BITS_NX90_eth_irq_msk_set 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register eth_irq_msk_reset */
/* => IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_msk_reset  0x00000034U
#define Adr_NX90_eth_eth_irq_msk_reset  0xFF480034U
#define Adr_NX90_eth_irq_msk_reset      0xFF480034U
#define DFLT_VAL_NX90_eth_irq_msk_reset 0x00000000U

#define MSK_NX90_eth_irq_msk_reset_tx_fifo                   0x00000001U
#define SRT_NX90_eth_irq_msk_reset_tx_fifo                   0
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_fifo              0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_fifo           0x00000000U
#define MSK_NX90_eth_irq_msk_reset_tx_frame_finished         0x00000002U
#define SRT_NX90_eth_irq_msk_reset_tx_frame_finished         1
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_frame_finished    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_frame_finished 0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_data                   0x00000004U
#define SRT_NX90_eth_irq_msk_reset_rx_data                   2
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_data              0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_data           0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_frame_finished         0x00000008U
#define SRT_NX90_eth_irq_msk_reset_rx_frame_finished         3
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_frame_finished    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_frame_finished 0x00000000U
#define MSK_NX90_eth_irq_msk_reset_tx_fifo_undr              0x00000010U
#define SRT_NX90_eth_irq_msk_reset_tx_fifo_undr              4
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_fifo_undr         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_fifo_undr      0x00000000U
#define MSK_NX90_eth_irq_msk_reset_tx_fifo_ovfl              0x00000020U
#define SRT_NX90_eth_irq_msk_reset_tx_fifo_ovfl              5
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_fifo_ovfl         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_fifo_ovfl      0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_fifo_undr              0x00000040U
#define SRT_NX90_eth_irq_msk_reset_rx_fifo_undr              6
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_fifo_undr         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_fifo_undr      0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_fifo_ovfl              0x00000080U
#define SRT_NX90_eth_irq_msk_reset_rx_fifo_ovfl              7
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_fifo_ovfl         0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_fifo_ovfl      0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_cpu_too_slow           0x00000100U
#define SRT_NX90_eth_irq_msk_reset_rx_cpu_too_slow           8
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_cpu_too_slow      0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_cpu_too_slow   0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_short_dv               0x00000200U
#define SRT_NX90_eth_irq_msk_reset_rx_short_dv               9
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_short_dv          0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_short_dv       0x00000000U
#define MSK_NX90_eth_irq_msk_reset_rx_preamble_error         0x00000400U
#define SRT_NX90_eth_irq_msk_reset_rx_preamble_error         10
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_preamble_error    0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_preamble_error 0x00000000U
#define MSK_NX90_eth_irq_msk_reset_tx_col                    0x00000800U
#define SRT_NX90_eth_irq_msk_reset_tx_col                    11
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_col               0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_col            0x00000000U
#define MSK_NX90_eth_irq_msk_reset_tx_late_col               0x00001000U
#define SRT_NX90_eth_irq_msk_reset_tx_late_col               12
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_late_col          0x00000000U
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_late_col       0x00000000U

/* all used bits of 'NX90_eth_irq_msk_reset': */
#define MSK_USED_BITS_NX90_eth_irq_msk_reset 0x00001fffU


/* ===================================================================== */

/* Area of intlogic_app */

/* ===================================================================== */

#define Addr_NX90_intlogic_app 0xFF800000U

/* ===================================================================== */

/* AREA dmac_mux */
/* Area of dmac_mux_app */

/* ===================================================================== */

#define Addr_NX90_dmac_mux_app 0xFF801000U

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel0 */
/* => Peripheral input select for DMAC input channel 0 */
/*    This register configures which peripheral should be connected to DMAC's input channel 0. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel0          0x00000000U
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel0 0xFF801000U
#define Adr_NX90_dmac_mux_peripheral_input_sel0              0xFF801000U
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel0         0x00000000U

#define MSK_NX90_dmac_mux_peripheral_input_sel0_index         0x0000003fU
#define SRT_NX90_dmac_mux_peripheral_input_sel0_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel0_index    0x00000000U
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel0_index 0x00000000U

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel0': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel0 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel1 */
/* => Peripheral input select for DMAC input channel 1 */
/*    This register configures which peripheral should be connected to DMAC's input channel 1. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel1          0x00000004U
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel1 0xFF801004U
#define Adr_NX90_dmac_mux_peripheral_input_sel1              0xFF801004U
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel1         0x00000001U

#define MSK_NX90_dmac_mux_peripheral_input_sel1_index         0x0000003fU
#define SRT_NX90_dmac_mux_peripheral_input_sel1_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel1_index    0x00000001U
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel1_index 0x00000001U

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel1': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel1 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel2 */
/* => Peripheral input select for DMAC input channel 2 */
/*    This register configures which peripheral should be connected to DMAC's input channel 2. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel2          0x00000008U
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel2 0xFF801008U
#define Adr_NX90_dmac_mux_peripheral_input_sel2              0xFF801008U
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel2         0x00000002U

#define MSK_NX90_dmac_mux_peripheral_input_sel2_index         0x0000003fU
#define SRT_NX90_dmac_mux_peripheral_input_sel2_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel2_index    0x00000002U
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel2_index 0x00000002U

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel2': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel2 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel3 */
/* => Peripheral input select for DMAC input channel 3 */
/*    This register configures which peripheral should be connected to DMAC's input channel 3. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel3          0x0000000CU
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel3 0xFF80100CU
#define Adr_NX90_dmac_mux_peripheral_input_sel3              0xFF80100CU
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel3         0x00000003U

#define MSK_NX90_dmac_mux_peripheral_input_sel3_index         0x0000003fU
#define SRT_NX90_dmac_mux_peripheral_input_sel3_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel3_index    0x00000003U
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel3_index 0x00000003U

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel3': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel3 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel4 */
/* => Peripheral input select for DMAC input channel 4 */
/*    This register configures which peripheral should be connected to DMAC's input channel 4. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel4          0x00000010U
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel4 0xFF801010U
#define Adr_NX90_dmac_mux_peripheral_input_sel4              0xFF801010U
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel4         0x00000004U

#define MSK_NX90_dmac_mux_peripheral_input_sel4_index         0x0000003fU
#define SRT_NX90_dmac_mux_peripheral_input_sel4_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel4_index    0x00000004U
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel4_index 0x00000004U

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel4': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel4 0x0000003fU

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel5 */
/* => Peripheral input select for DMAC input channel 5 */
/*    This register configures which peripheral should be connected to DMAC's input channel 5. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel5          0x00000014U
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel5 0xFF801014U
#define Adr_NX90_dmac_mux_peripheral_input_sel5              0xFF801014U
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel5         0x00000005U

#define MSK_NX90_dmac_mux_peripheral_input_sel5_index         0x0000003fU
#define SRT_NX90_dmac_mux_peripheral_input_sel5_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel5_index    0x00000005U
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel5_index 0x00000005U

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel5': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel5 0x0000003fU


/* ===================================================================== */

/* Area of mled_ctrl_app */

/* ===================================================================== */

#define Addr_NX90_mled_ctrl_app 0xFF801100U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_cfg */
/* => Multi LED control configuration register. */
/*    This register controls global configuration options for all MLED outputs. */
/*    Description of MLED control module operation: */
/*    Each output drives two LEDs: the low-side and the high-side LED. To achieve this, the output pin \ */
/*    can be in three states: driven high (i.e. the low-side LED is on), driven low (i.e. the high-side \ */
/*    LED is on) or high-z (i.e. both LEDs are off). */
/*    The MLED control module will drive the output in a fixed PWM scheme to make use of both LEDs at \ */
/*    the same time. The PWM period is the same for all outputs and is determined by the prescale_counter_max \ */
/*    bit field. The prescale counter will be increased with the netX system clock (i.e. 100 MHz). */
/*    If the prescale counter reaches the configured value, a second PWM counter will be increased by one. */
/*    The PWM counter is a fixed-width counter (0-511). If the counter is in the range of 0-255, the high-side LED \ */
/*    will be driven depending on the configured on_time (registers on_timeX, where X is an even number). If the \ */
/*    PWM counter reaches the on_time minus 1, the output pin will go to high-z state. */
/*    If the PWM counter is in the range of 256-511, the low-side LED will be driven depending on the configured \ */
/*    on_time (registers on_timeX, where X is an odd number). If the PWM counter reaches 256 plus the \ */
/*    on_time minus 1, the output pin will go to high-z state. */
/*    The use of two LEDs at the same time implies that each LED is on for a maximum of the half period (minus one). \ */
/*    This fact needs to be taken into account when determining the series resistors for the LEDs. The on_time can be \ */
/*    used for dimming effects or to compensate differences in the brightness of different (colored) LEDs. */
/*    The state of a LED depends on the configuration of the input multiplexer, which is configured by the \ */
/*    mled_ctrl_output_selX registers. There are several MLED control internal signals as well as netX system internal \ */
/*    signals. The internal signals include an always-off state, a state defined by a line-register and a signal \ */
/*    generated by a module internal blink generator. Each input signal can also be inverted (internal signals and \ */
/*    netX system signals). */
/*    The internal blink signal can be used to have a uniform blinking of several LEDs. The blink frequency is \ */
/*    determined by the blink_counter_max bit field. The blink frequency is always the same for all outputs configured \ */
/*    to blink mode. */
/*    Another mode of operation is the passthrough mode: This mode disables the PWM entierly and a configured signal */
/*    will be output directly or inverted (delayed by one netX system cycle). This mode will be used when the 'sel' \ */
/*    bit field of the phase 0 sel register is set to all '1's. The input signal (and inversion) is selected by the \ */
/*    the corresponding phase 1 sel register. The output can also be configured to high-z state if the corresponding \ */
/*    phase 1 on_time register is set to '0', therefore it must be sent != 0 for regular passthrough operation. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_cfg           0x00000000U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_cfg 0xFF801100U
#define Adr_NX90_mled_ctrl_app_cfg               0xFF801100U
#define DFLT_VAL_NX90_mled_ctrl_app_cfg          0x00018ffeU

#define MSK_NX90_mled_ctrl_app_cfg_enable                       0x00000001U
#define SRT_NX90_mled_ctrl_app_cfg_enable                       0
#define DFLT_VAL_NX90_mled_ctrl_app_cfg_enable                  0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_cfg_enable               0x00000000U
#define MSK_NX90_mled_ctrl_app_cfg_prescale_counter_max         0x000007feU
#define SRT_NX90_mled_ctrl_app_cfg_prescale_counter_max         1
#define DFLT_VAL_NX90_mled_ctrl_app_cfg_prescale_counter_max    0x000007feU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_cfg_prescale_counter_max 0x000003ffU
#define MSK_NX90_mled_ctrl_app_cfg_blink_counter_max            0x000ff800U
#define SRT_NX90_mled_ctrl_app_cfg_blink_counter_max            11
#define DFLT_VAL_NX90_mled_ctrl_app_cfg_blink_counter_max       0x00018800U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_cfg_blink_counter_max    0x00000031U

/* all used bits of 'NX90_mled_ctrl_app_cfg': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_cfg 0x000fffffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel0 */
/* => Input signal configuration for output 0 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel0           0x00000004U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel0 0xFF801104U
#define Adr_NX90_mled_ctrl_app_output_sel0               0xFF801104U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel0          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel0_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel0_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel0_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel0_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel0_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel0_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel0_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel0_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel0': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel0 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel1 */
/* => Input signal configuration for output 0 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel1           0x00000008U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel1 0xFF801108U
#define Adr_NX90_mled_ctrl_app_output_sel1               0xFF801108U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel1          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel1_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel1_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel1_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel1_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel1_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel1_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel1_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel1_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel1': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel1 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel2 */
/* => Input signal configuration for output 1 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel2           0x0000000CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel2 0xFF80110CU
#define Adr_NX90_mled_ctrl_app_output_sel2               0xFF80110CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel2          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel2_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel2_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel2_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel2_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel2_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel2_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel2_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel2_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel2': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel2 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel3 */
/* => Input signal configuration for output 1 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel3           0x00000010U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel3 0xFF801110U
#define Adr_NX90_mled_ctrl_app_output_sel3               0xFF801110U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel3          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel3_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel3_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel3_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel3_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel3_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel3_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel3_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel3_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel3': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel3 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel4 */
/* => Input signal configuration for output 2 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel4           0x00000014U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel4 0xFF801114U
#define Adr_NX90_mled_ctrl_app_output_sel4               0xFF801114U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel4          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel4_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel4_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel4_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel4_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel4_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel4_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel4_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel4_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel4': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel4 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel5 */
/* => Input signal configuration for output 2 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel5           0x00000018U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel5 0xFF801118U
#define Adr_NX90_mled_ctrl_app_output_sel5               0xFF801118U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel5          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel5_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel5_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel5_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel5_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel5_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel5_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel5_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel5_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel5': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel5 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel6 */
/* => Input signal configuration for output 3 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel6           0x0000001CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel6 0xFF80111CU
#define Adr_NX90_mled_ctrl_app_output_sel6               0xFF80111CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel6          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel6_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel6_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel6_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel6_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel6_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel6_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel6_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel6_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel6': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel6 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel7 */
/* => Input signal configuration for output 3 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel7           0x00000020U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel7 0xFF801120U
#define Adr_NX90_mled_ctrl_app_output_sel7               0xFF801120U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel7          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel7_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel7_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel7_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel7_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel7_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel7_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel7_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel7_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel7': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel7 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel8 */
/* => Input signal configuration for output 4 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel8           0x00000024U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel8 0xFF801124U
#define Adr_NX90_mled_ctrl_app_output_sel8               0xFF801124U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel8          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel8_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel8_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel8_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel8_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel8_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel8_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel8_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel8_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel8': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel8 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel9 */
/* => Input signal configuration for output 4 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel9           0x00000028U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel9 0xFF801128U
#define Adr_NX90_mled_ctrl_app_output_sel9               0xFF801128U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel9          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel9_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel9_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel9_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel9_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel9_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel9_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel9_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel9_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel9': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel9 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel10 */
/* => Input signal configuration for output 5 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel10           0x0000002CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel10 0xFF80112CU
#define Adr_NX90_mled_ctrl_app_output_sel10               0xFF80112CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel10          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel10_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel10_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel10_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel10_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel10_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel10_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel10_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel10_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel10': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel10 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel11 */
/* => Input signal configuration for output 5 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel11           0x00000030U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel11 0xFF801130U
#define Adr_NX90_mled_ctrl_app_output_sel11               0xFF801130U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel11          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel11_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel11_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel11_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel11_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel11_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel11_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel11_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel11_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel11': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel11 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel12 */
/* => Input signal configuration for output 6 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel12           0x00000034U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel12 0xFF801134U
#define Adr_NX90_mled_ctrl_app_output_sel12               0xFF801134U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel12          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel12_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel12_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel12_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel12_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel12_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel12_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel12_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel12_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel12': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel12 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel13 */
/* => Input signal configuration for output 6 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel13           0x00000038U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel13 0xFF801138U
#define Adr_NX90_mled_ctrl_app_output_sel13               0xFF801138U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel13          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel13_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel13_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel13_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel13_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel13_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel13_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel13_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel13_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel13': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel13 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel14 */
/* => Input signal configuration for output 7 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel14           0x0000003CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel14 0xFF80113CU
#define Adr_NX90_mled_ctrl_app_output_sel14               0xFF80113CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel14          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel14_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel14_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel14_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel14_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel14_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel14_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel14_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel14_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel14': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel14 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel15 */
/* => Input signal configuration for output 7 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel15           0x00000040U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel15 0xFF801140U
#define Adr_NX90_mled_ctrl_app_output_sel15               0xFF801140U
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel15          0x00000000U

#define MSK_NX90_mled_ctrl_app_output_sel15_inv         0x00000001U
#define SRT_NX90_mled_ctrl_app_output_sel15_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel15_inv    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel15_inv 0x00000000U
#define MSK_NX90_mled_ctrl_app_output_sel15_sel         0x00000006U
#define SRT_NX90_mled_ctrl_app_output_sel15_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel15_sel    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel15_sel 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_output_sel15': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel15 0x00000007U

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time0 */
/* => On-time for output 0 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time0           0x00000044U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time0 0xFF801144U
#define Adr_NX90_mled_ctrl_app_output_on_time0               0xFF801144U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time0          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time0_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time0_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time0_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time0_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time0': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time0 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time1 */
/* => On-time for output 0 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time1           0x00000048U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time1 0xFF801148U
#define Adr_NX90_mled_ctrl_app_output_on_time1               0xFF801148U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time1          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time1_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time1_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time1_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time1_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time1': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time1 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time2 */
/* => On-time for output 1 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time2           0x0000004CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time2 0xFF80114CU
#define Adr_NX90_mled_ctrl_app_output_on_time2               0xFF80114CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time2          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time2_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time2_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time2_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time2_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time2': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time2 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time3 */
/* => On-time for output 1 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time3           0x00000050U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time3 0xFF801150U
#define Adr_NX90_mled_ctrl_app_output_on_time3               0xFF801150U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time3          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time3_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time3_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time3_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time3_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time3': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time3 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time4 */
/* => On-time for output 2 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time4           0x00000054U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time4 0xFF801154U
#define Adr_NX90_mled_ctrl_app_output_on_time4               0xFF801154U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time4          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time4_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time4_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time4_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time4_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time4': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time4 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time5 */
/* => On-time for output 2 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time5           0x00000058U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time5 0xFF801158U
#define Adr_NX90_mled_ctrl_app_output_on_time5               0xFF801158U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time5          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time5_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time5_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time5_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time5_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time5': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time5 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time6 */
/* => On-time for output 3 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time6           0x0000005CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time6 0xFF80115CU
#define Adr_NX90_mled_ctrl_app_output_on_time6               0xFF80115CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time6          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time6_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time6_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time6_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time6_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time6': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time6 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time7 */
/* => On-time for output 3 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time7           0x00000060U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time7 0xFF801160U
#define Adr_NX90_mled_ctrl_app_output_on_time7               0xFF801160U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time7          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time7_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time7_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time7_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time7_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time7': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time7 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time8 */
/* => On-time for output 4 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time8           0x00000064U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time8 0xFF801164U
#define Adr_NX90_mled_ctrl_app_output_on_time8               0xFF801164U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time8          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time8_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time8_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time8_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time8_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time8': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time8 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time9 */
/* => On-time for output 4 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time9           0x00000068U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time9 0xFF801168U
#define Adr_NX90_mled_ctrl_app_output_on_time9               0xFF801168U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time9          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time9_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time9_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time9_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time9_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time9': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time9 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time10 */
/* => On-time for output 5 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time10           0x0000006CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time10 0xFF80116CU
#define Adr_NX90_mled_ctrl_app_output_on_time10               0xFF80116CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time10          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time10_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time10_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time10_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time10_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time10': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time10 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time11 */
/* => On-time for output 5 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time11           0x00000070U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time11 0xFF801170U
#define Adr_NX90_mled_ctrl_app_output_on_time11               0xFF801170U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time11          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time11_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time11_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time11_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time11_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time11': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time11 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time12 */
/* => On-time for output 6 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time12           0x00000074U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time12 0xFF801174U
#define Adr_NX90_mled_ctrl_app_output_on_time12               0xFF801174U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time12          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time12_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time12_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time12_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time12_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time12': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time12 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time13 */
/* => On-time for output 6 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time13           0x00000078U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time13 0xFF801178U
#define Adr_NX90_mled_ctrl_app_output_on_time13               0xFF801178U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time13          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time13_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time13_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time13_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time13_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time13': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time13 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time14 */
/* => On-time for output 7 phase 0 (high-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time14           0x0000007CU
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time14 0xFF80117CU
#define Adr_NX90_mled_ctrl_app_output_on_time14               0xFF80117CU
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time14          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time14_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time14_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time14_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time14_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time14': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time14 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time15 */
/* => On-time for output 7 phase 1 (low-side LED). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time15           0x00000080U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time15 0xFF801180U
#define Adr_NX90_mled_ctrl_app_output_on_time15               0xFF801180U
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time15          0x000000ffU

#define MSK_NX90_mled_ctrl_app_output_on_time15_val         0x000000ffU
#define SRT_NX90_mled_ctrl_app_output_on_time15_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time15_val    0x000000ffU
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time15_val 0x000000ffU

/* all used bits of 'NX90_mled_ctrl_app_output_on_time15': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time15 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_line0 */
/* => MLED line register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_line0           0x00000084U
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_line0 0xFF801184U
#define Adr_NX90_mled_ctrl_app_line0               0xFF801184U
#define DFLT_VAL_NX90_mled_ctrl_app_line0          0x00000000U

#define MSK_NX90_mled_ctrl_app_line0_val         0x0000ffffU
#define SRT_NX90_mled_ctrl_app_line0_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_line0_val    0x00000000U
#define DFLT_BF_VAL_NX90_mled_ctrl_app_line0_val 0x00000000U

/* all used bits of 'NX90_mled_ctrl_app_line0': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_line0 0x0000ffffU


/* ===================================================================== */

/* AREA gpio_app */
/* Area of gpio_app, gpio_xpic_app */

/* ===================================================================== */

#define Addr_NX90_gpio_app      0xFF801400U
#define Addr_NX90_gpio_xpic_app 0xFF900200U

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg0 */
/* => GPIO_APP pin 0 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg0           0x00000000U
#define Adr_NX90_gpio_app_gpio_app_cfg0      0xFF801400U
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg0 0xFF900200U
#define DFLT_VAL_NX90_gpio_app_cfg0          0x00000000U

#define MSK_NX90_gpio_app_cfg0_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg0_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg0_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg0_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg0_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg0_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg0_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg0_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg0_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg0_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg0_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg0_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg0_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg0_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg0_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg0': */
#define MSK_USED_BITS_NX90_gpio_app_cfg0 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg1 */
/* => GPIO_APP pin 1 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg1           0x00000004U
#define Adr_NX90_gpio_app_gpio_app_cfg1      0xFF801404U
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg1 0xFF900204U
#define DFLT_VAL_NX90_gpio_app_cfg1          0x00000000U

#define MSK_NX90_gpio_app_cfg1_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg1_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg1_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg1_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg1_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg1_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg1_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg1_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg1_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg1_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg1_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg1_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg1_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg1_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg1_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg1': */
#define MSK_USED_BITS_NX90_gpio_app_cfg1 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg2 */
/* => GPIO_APP pin 2 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg2           0x00000008U
#define Adr_NX90_gpio_app_gpio_app_cfg2      0xFF801408U
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg2 0xFF900208U
#define DFLT_VAL_NX90_gpio_app_cfg2          0x00000000U

#define MSK_NX90_gpio_app_cfg2_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg2_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg2_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg2_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg2_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg2_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg2_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg2_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg2_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg2_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg2_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg2_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg2_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg2_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg2_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg2': */
#define MSK_USED_BITS_NX90_gpio_app_cfg2 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg3 */
/* => GPIO_APP pin 3 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg3           0x0000000CU
#define Adr_NX90_gpio_app_gpio_app_cfg3      0xFF80140CU
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg3 0xFF90020CU
#define DFLT_VAL_NX90_gpio_app_cfg3          0x00000000U

#define MSK_NX90_gpio_app_cfg3_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg3_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg3_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg3_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg3_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg3_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg3_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg3_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg3_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg3_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg3_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg3_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg3_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg3_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg3_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg3': */
#define MSK_USED_BITS_NX90_gpio_app_cfg3 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg4 */
/* => GPIO_APP pin 4 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg4           0x00000010U
#define Adr_NX90_gpio_app_gpio_app_cfg4      0xFF801410U
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg4 0xFF900210U
#define DFLT_VAL_NX90_gpio_app_cfg4          0x00000000U

#define MSK_NX90_gpio_app_cfg4_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg4_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg4_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg4_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg4_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg4_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg4_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg4_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg4_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg4_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg4_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg4_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg4_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg4_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg4_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg4': */
#define MSK_USED_BITS_NX90_gpio_app_cfg4 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg5 */
/* => GPIO_APP pin 5 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg5           0x00000014U
#define Adr_NX90_gpio_app_gpio_app_cfg5      0xFF801414U
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg5 0xFF900214U
#define DFLT_VAL_NX90_gpio_app_cfg5          0x00000000U

#define MSK_NX90_gpio_app_cfg5_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg5_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg5_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg5_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg5_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg5_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg5_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg5_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg5_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg5_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg5_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg5_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg5_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg5_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg5_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg5': */
#define MSK_USED_BITS_NX90_gpio_app_cfg5 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg6 */
/* => GPIO_APP pin 6 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg6           0x00000018U
#define Adr_NX90_gpio_app_gpio_app_cfg6      0xFF801418U
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg6 0xFF900218U
#define DFLT_VAL_NX90_gpio_app_cfg6          0x00000000U

#define MSK_NX90_gpio_app_cfg6_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg6_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg6_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg6_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg6_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg6_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg6_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg6_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg6_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg6_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg6_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg6_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg6_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg6_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg6_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg6': */
#define MSK_USED_BITS_NX90_gpio_app_cfg6 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg7 */
/* => GPIO_APP pin 7 config register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg7           0x0000001CU
#define Adr_NX90_gpio_app_gpio_app_cfg7      0xFF80141CU
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg7 0xFF90021CU
#define DFLT_VAL_NX90_gpio_app_cfg7          0x00000000U

#define MSK_NX90_gpio_app_cfg7_mode               0x0000000fU
#define SRT_NX90_gpio_app_cfg7_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg7_mode          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_mode       0x00000000U
#define MSK_NX90_gpio_app_cfg7_inv                0x00000010U
#define SRT_NX90_gpio_app_cfg7_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg7_inv           0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_inv        0x00000000U
#define MSK_NX90_gpio_app_cfg7_count_ref          0x00000060U
#define SRT_NX90_gpio_app_cfg7_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg7_count_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_count_ref  0x00000000U
#define MSK_NX90_gpio_app_cfg7_blink_len          0x00000f80U
#define SRT_NX90_gpio_app_cfg7_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg7_blink_len     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_blink_len  0x00000000U
#define MSK_NX90_gpio_app_cfg7_blink_once         0x00001000U
#define SRT_NX90_gpio_app_cfg7_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg7_blink_once    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_blink_once 0x00000000U

/* all used bits of 'NX90_gpio_app_cfg7': */
#define MSK_USED_BITS_NX90_gpio_app_cfg7 0x00001fffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc0 */
/* => GPIO_APP pin 0 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc0           0x00000020U
#define Adr_NX90_gpio_app_gpio_app_tc0      0xFF801420U
#define Adr_NX90_gpio_xpic_app_gpio_app_tc0 0xFF900220U
#define DFLT_VAL_NX90_gpio_app_tc0          0x00000000U

#define MSK_NX90_gpio_app_tc0_val         0xffffffffU
#define SRT_NX90_gpio_app_tc0_val         0
#define DFLT_VAL_NX90_gpio_app_tc0_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc0_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc0': */
#define MSK_USED_BITS_NX90_gpio_app_tc0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc1 */
/* => GPIO_APP pin 1 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc1           0x00000024U
#define Adr_NX90_gpio_app_gpio_app_tc1      0xFF801424U
#define Adr_NX90_gpio_xpic_app_gpio_app_tc1 0xFF900224U
#define DFLT_VAL_NX90_gpio_app_tc1          0x00000000U

#define MSK_NX90_gpio_app_tc1_val         0xffffffffU
#define SRT_NX90_gpio_app_tc1_val         0
#define DFLT_VAL_NX90_gpio_app_tc1_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc1_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc1': */
#define MSK_USED_BITS_NX90_gpio_app_tc1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc2 */
/* => GPIO_APP pin 2 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc2           0x00000028U
#define Adr_NX90_gpio_app_gpio_app_tc2      0xFF801428U
#define Adr_NX90_gpio_xpic_app_gpio_app_tc2 0xFF900228U
#define DFLT_VAL_NX90_gpio_app_tc2          0x00000000U

#define MSK_NX90_gpio_app_tc2_val         0xffffffffU
#define SRT_NX90_gpio_app_tc2_val         0
#define DFLT_VAL_NX90_gpio_app_tc2_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc2_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc2': */
#define MSK_USED_BITS_NX90_gpio_app_tc2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc3 */
/* => GPIO_APP pin 3 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc3           0x0000002CU
#define Adr_NX90_gpio_app_gpio_app_tc3      0xFF80142CU
#define Adr_NX90_gpio_xpic_app_gpio_app_tc3 0xFF90022CU
#define DFLT_VAL_NX90_gpio_app_tc3          0x00000000U

#define MSK_NX90_gpio_app_tc3_val         0xffffffffU
#define SRT_NX90_gpio_app_tc3_val         0
#define DFLT_VAL_NX90_gpio_app_tc3_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc3_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc3': */
#define MSK_USED_BITS_NX90_gpio_app_tc3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc4 */
/* => GPIO_APP pin 4 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc4           0x00000030U
#define Adr_NX90_gpio_app_gpio_app_tc4      0xFF801430U
#define Adr_NX90_gpio_xpic_app_gpio_app_tc4 0xFF900230U
#define DFLT_VAL_NX90_gpio_app_tc4          0x00000000U

#define MSK_NX90_gpio_app_tc4_val         0xffffffffU
#define SRT_NX90_gpio_app_tc4_val         0
#define DFLT_VAL_NX90_gpio_app_tc4_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc4_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc4': */
#define MSK_USED_BITS_NX90_gpio_app_tc4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc5 */
/* => GPIO_APP pin 5 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc5           0x00000034U
#define Adr_NX90_gpio_app_gpio_app_tc5      0xFF801434U
#define Adr_NX90_gpio_xpic_app_gpio_app_tc5 0xFF900234U
#define DFLT_VAL_NX90_gpio_app_tc5          0x00000000U

#define MSK_NX90_gpio_app_tc5_val         0xffffffffU
#define SRT_NX90_gpio_app_tc5_val         0
#define DFLT_VAL_NX90_gpio_app_tc5_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc5_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc5': */
#define MSK_USED_BITS_NX90_gpio_app_tc5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc6 */
/* => GPIO_APP pin 6 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc6           0x00000038U
#define Adr_NX90_gpio_app_gpio_app_tc6      0xFF801438U
#define Adr_NX90_gpio_xpic_app_gpio_app_tc6 0xFF900238U
#define DFLT_VAL_NX90_gpio_app_tc6          0x00000000U

#define MSK_NX90_gpio_app_tc6_val         0xffffffffU
#define SRT_NX90_gpio_app_tc6_val         0
#define DFLT_VAL_NX90_gpio_app_tc6_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc6_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc6': */
#define MSK_USED_BITS_NX90_gpio_app_tc6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc7 */
/* => GPIO_APP pin 7 threshold or capture register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc7           0x0000003CU
#define Adr_NX90_gpio_app_gpio_app_tc7      0xFF80143CU
#define Adr_NX90_gpio_xpic_app_gpio_app_tc7 0xFF90023CU
#define DFLT_VAL_NX90_gpio_app_tc7          0x00000000U

#define MSK_NX90_gpio_app_tc7_val         0xffffffffU
#define SRT_NX90_gpio_app_tc7_val         0
#define DFLT_VAL_NX90_gpio_app_tc7_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_tc7_val 0x00000000U

/* all used bits of 'NX90_gpio_app_tc7': */
#define MSK_USED_BITS_NX90_gpio_app_tc7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter0_ctrl */
/* => GPIO_APP counter0 control register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter0_ctrl           0x00000040U
#define Adr_NX90_gpio_app_gpio_app_counter0_ctrl      0xFF801440U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter0_ctrl 0xFF900240U
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl          0x00000000U

#define MSK_NX90_gpio_app_counter0_ctrl_run               0x00000001U
#define SRT_NX90_gpio_app_counter0_ctrl_run               0
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_run          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_run       0x00000000U
#define MSK_NX90_gpio_app_counter0_ctrl_sym_nasym         0x00000002U
#define SRT_NX90_gpio_app_counter0_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_sym_nasym    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_sym_nasym 0x00000000U
#define MSK_NX90_gpio_app_counter0_ctrl_irq_en            0x00000004U
#define SRT_NX90_gpio_app_counter0_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_irq_en       0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_irq_en    0x00000000U
#define MSK_NX90_gpio_app_counter0_ctrl_sel_event         0x00000008U
#define SRT_NX90_gpio_app_counter0_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_sel_event    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_sel_event 0x00000000U
#define MSK_NX90_gpio_app_counter0_ctrl_once              0x00000010U
#define SRT_NX90_gpio_app_counter0_ctrl_once              4
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_once         0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_once      0x00000000U
#define MSK_NX90_gpio_app_counter0_ctrl_event_act         0x00000060U
#define SRT_NX90_gpio_app_counter0_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_event_act    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_event_act 0x00000000U
#define MSK_NX90_gpio_app_counter0_ctrl_gpio_ref          0x00000380U
#define SRT_NX90_gpio_app_counter0_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_gpio_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_gpio_ref  0x00000000U

/* all used bits of 'NX90_gpio_app_counter0_ctrl': */
#define MSK_USED_BITS_NX90_gpio_app_counter0_ctrl 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter1_ctrl */
/* => GPIO_APP counter1 control register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter1_ctrl           0x00000044U
#define Adr_NX90_gpio_app_gpio_app_counter1_ctrl      0xFF801444U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter1_ctrl 0xFF900244U
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl          0x00000000U

#define MSK_NX90_gpio_app_counter1_ctrl_run               0x00000001U
#define SRT_NX90_gpio_app_counter1_ctrl_run               0
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_run          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_run       0x00000000U
#define MSK_NX90_gpio_app_counter1_ctrl_sym_nasym         0x00000002U
#define SRT_NX90_gpio_app_counter1_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_sym_nasym    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_sym_nasym 0x00000000U
#define MSK_NX90_gpio_app_counter1_ctrl_irq_en            0x00000004U
#define SRT_NX90_gpio_app_counter1_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_irq_en       0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_irq_en    0x00000000U
#define MSK_NX90_gpio_app_counter1_ctrl_sel_event         0x00000008U
#define SRT_NX90_gpio_app_counter1_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_sel_event    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_sel_event 0x00000000U
#define MSK_NX90_gpio_app_counter1_ctrl_once              0x00000010U
#define SRT_NX90_gpio_app_counter1_ctrl_once              4
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_once         0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_once      0x00000000U
#define MSK_NX90_gpio_app_counter1_ctrl_event_act         0x00000060U
#define SRT_NX90_gpio_app_counter1_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_event_act    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_event_act 0x00000000U
#define MSK_NX90_gpio_app_counter1_ctrl_gpio_ref          0x00000380U
#define SRT_NX90_gpio_app_counter1_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_gpio_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_gpio_ref  0x00000000U

/* all used bits of 'NX90_gpio_app_counter1_ctrl': */
#define MSK_USED_BITS_NX90_gpio_app_counter1_ctrl 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter2_ctrl */
/* => GPIO_APP counter2 control register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter2_ctrl           0x00000048U
#define Adr_NX90_gpio_app_gpio_app_counter2_ctrl      0xFF801448U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter2_ctrl 0xFF900248U
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl          0x00000000U

#define MSK_NX90_gpio_app_counter2_ctrl_run               0x00000001U
#define SRT_NX90_gpio_app_counter2_ctrl_run               0
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_run          0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_run       0x00000000U
#define MSK_NX90_gpio_app_counter2_ctrl_sym_nasym         0x00000002U
#define SRT_NX90_gpio_app_counter2_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_sym_nasym    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_sym_nasym 0x00000000U
#define MSK_NX90_gpio_app_counter2_ctrl_irq_en            0x00000004U
#define SRT_NX90_gpio_app_counter2_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_irq_en       0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_irq_en    0x00000000U
#define MSK_NX90_gpio_app_counter2_ctrl_sel_event         0x00000008U
#define SRT_NX90_gpio_app_counter2_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_sel_event    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_sel_event 0x00000000U
#define MSK_NX90_gpio_app_counter2_ctrl_once              0x00000010U
#define SRT_NX90_gpio_app_counter2_ctrl_once              4
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_once         0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_once      0x00000000U
#define MSK_NX90_gpio_app_counter2_ctrl_event_act         0x00000060U
#define SRT_NX90_gpio_app_counter2_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_event_act    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_event_act 0x00000000U
#define MSK_NX90_gpio_app_counter2_ctrl_gpio_ref          0x00000380U
#define SRT_NX90_gpio_app_counter2_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_gpio_ref     0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_gpio_ref  0x00000000U

/* all used bits of 'NX90_gpio_app_counter2_ctrl': */
#define MSK_USED_BITS_NX90_gpio_app_counter2_ctrl 0x000003ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter0_max */
/* => GPIO_APP counter0 max value: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter0_max           0x0000004CU
#define Adr_NX90_gpio_app_gpio_app_counter0_max      0xFF80144CU
#define Adr_NX90_gpio_xpic_app_gpio_app_counter0_max 0xFF90024CU
#define DFLT_VAL_NX90_gpio_app_counter0_max          0x00000000U

#define MSK_NX90_gpio_app_counter0_max_val         0xffffffffU
#define SRT_NX90_gpio_app_counter0_max_val         0
#define DFLT_VAL_NX90_gpio_app_counter0_max_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_max_val 0x00000000U

/* all used bits of 'NX90_gpio_app_counter0_max': */
#define MSK_USED_BITS_NX90_gpio_app_counter0_max 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter1_max */
/* => GPIO_APP counter1 max value: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter1_max           0x00000050U
#define Adr_NX90_gpio_app_gpio_app_counter1_max      0xFF801450U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter1_max 0xFF900250U
#define DFLT_VAL_NX90_gpio_app_counter1_max          0x00000000U

#define MSK_NX90_gpio_app_counter1_max_val         0xffffffffU
#define SRT_NX90_gpio_app_counter1_max_val         0
#define DFLT_VAL_NX90_gpio_app_counter1_max_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_max_val 0x00000000U

/* all used bits of 'NX90_gpio_app_counter1_max': */
#define MSK_USED_BITS_NX90_gpio_app_counter1_max 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter2_max */
/* => GPIO_APP counter2 max value: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter2_max           0x00000054U
#define Adr_NX90_gpio_app_gpio_app_counter2_max      0xFF801454U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter2_max 0xFF900254U
#define DFLT_VAL_NX90_gpio_app_counter2_max          0x00000000U

#define MSK_NX90_gpio_app_counter2_max_val         0xffffffffU
#define SRT_NX90_gpio_app_counter2_max_val         0
#define DFLT_VAL_NX90_gpio_app_counter2_max_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_max_val 0x00000000U

/* all used bits of 'NX90_gpio_app_counter2_max': */
#define MSK_USED_BITS_NX90_gpio_app_counter2_max 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter0_cnt */
/* => GPIO_APP counter0 current value: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter0_cnt           0x00000058U
#define Adr_NX90_gpio_app_gpio_app_counter0_cnt      0xFF801458U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter0_cnt 0xFF900258U
#define DFLT_VAL_NX90_gpio_app_counter0_cnt          0x00000000U

#define MSK_NX90_gpio_app_counter0_cnt_val         0xffffffffU
#define SRT_NX90_gpio_app_counter0_cnt_val         0
#define DFLT_VAL_NX90_gpio_app_counter0_cnt_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter0_cnt_val 0x00000000U

/* all used bits of 'NX90_gpio_app_counter0_cnt': */
#define MSK_USED_BITS_NX90_gpio_app_counter0_cnt 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter1_cnt */
/* => GPIO_APP counter1 current value: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter1_cnt           0x0000005CU
#define Adr_NX90_gpio_app_gpio_app_counter1_cnt      0xFF80145CU
#define Adr_NX90_gpio_xpic_app_gpio_app_counter1_cnt 0xFF90025CU
#define DFLT_VAL_NX90_gpio_app_counter1_cnt          0x00000000U

#define MSK_NX90_gpio_app_counter1_cnt_val         0xffffffffU
#define SRT_NX90_gpio_app_counter1_cnt_val         0
#define DFLT_VAL_NX90_gpio_app_counter1_cnt_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter1_cnt_val 0x00000000U

/* all used bits of 'NX90_gpio_app_counter1_cnt': */
#define MSK_USED_BITS_NX90_gpio_app_counter1_cnt 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter2_cnt */
/* => GPIO_APP counter2 current value: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter2_cnt           0x00000060U
#define Adr_NX90_gpio_app_gpio_app_counter2_cnt      0xFF801460U
#define Adr_NX90_gpio_xpic_app_gpio_app_counter2_cnt 0xFF900260U
#define DFLT_VAL_NX90_gpio_app_counter2_cnt          0x00000000U

#define MSK_NX90_gpio_app_counter2_cnt_val         0xffffffffU
#define SRT_NX90_gpio_app_counter2_cnt_val         0
#define DFLT_VAL_NX90_gpio_app_counter2_cnt_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_counter2_cnt_val 0x00000000U

/* all used bits of 'NX90_gpio_app_counter2_cnt': */
#define MSK_USED_BITS_NX90_gpio_app_counter2_cnt 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_line */
/* => GPIO_APP line register */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_line           0x00000064U
#define Adr_NX90_gpio_app_gpio_app_line      0xFF801464U
#define Adr_NX90_gpio_xpic_app_gpio_app_line 0xFF900264U
#define DFLT_VAL_NX90_gpio_app_line          0x00000000U

#define MSK_NX90_gpio_app_line_val         0x000000ffU
#define SRT_NX90_gpio_app_line_val         0
#define DFLT_VAL_NX90_gpio_app_line_val    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_line_val 0x00000000U

/* all used bits of 'NX90_gpio_app_line': */
#define MSK_USED_BITS_NX90_gpio_app_line 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_in */
/* => GPIO_APP latched inputs register: */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_in           0x00000068U
#define Adr_NX90_gpio_app_gpio_app_in      0xFF801468U
#define Adr_NX90_gpio_xpic_app_gpio_app_in 0xFF900268U

#define MSK_NX90_gpio_app_in_val 0x000000ffU
#define SRT_NX90_gpio_app_in_val 0

/* all used bits of 'NX90_gpio_app_in': */
#define MSK_USED_BITS_NX90_gpio_app_in 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_raw */
/* => GPIO_APP Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_raw           0x0000006CU
#define Adr_NX90_gpio_app_gpio_app_irq_raw      0xFF80146CU
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_raw 0xFF90026CU
#define DFLT_VAL_NX90_gpio_app_irq_raw          0x00000000U

#define MSK_NX90_gpio_app_irq_raw_gpio_app0         0x00000001U
#define SRT_NX90_gpio_app_irq_raw_gpio_app0         0
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app0 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app1         0x00000002U
#define SRT_NX90_gpio_app_irq_raw_gpio_app1         1
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app1 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app2         0x00000004U
#define SRT_NX90_gpio_app_irq_raw_gpio_app2         2
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app2 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app3         0x00000008U
#define SRT_NX90_gpio_app_irq_raw_gpio_app3         3
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app3    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app3 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app4         0x00000010U
#define SRT_NX90_gpio_app_irq_raw_gpio_app4         4
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app4    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app4 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app5         0x00000020U
#define SRT_NX90_gpio_app_irq_raw_gpio_app5         5
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app5    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app5 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app6         0x00000040U
#define SRT_NX90_gpio_app_irq_raw_gpio_app6         6
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app6    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app6 0x00000000U
#define MSK_NX90_gpio_app_irq_raw_gpio_app7         0x00000080U
#define SRT_NX90_gpio_app_irq_raw_gpio_app7         7
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app7    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app7 0x00000000U

/* all used bits of 'NX90_gpio_app_irq_raw': */
#define MSK_USED_BITS_NX90_gpio_app_irq_raw 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_masked */
/* => GPIO_APP Masked IRQ register: */
/*    This register internally exists 2x for different system busses (address areas) it is connected to. */
/*    This allows 2 CPU to work in parallel on this module: ARM_APP, xPIC_APP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_masked           0x00000070U
#define Adr_NX90_gpio_app_gpio_app_irq_masked      0xFF801470U
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_masked 0xFF900270U

#define MSK_NX90_gpio_app_irq_masked_gpio_app0 0x00000001U
#define SRT_NX90_gpio_app_irq_masked_gpio_app0 0
#define MSK_NX90_gpio_app_irq_masked_gpio_app1 0x00000002U
#define SRT_NX90_gpio_app_irq_masked_gpio_app1 1
#define MSK_NX90_gpio_app_irq_masked_gpio_app2 0x00000004U
#define SRT_NX90_gpio_app_irq_masked_gpio_app2 2
#define MSK_NX90_gpio_app_irq_masked_gpio_app3 0x00000008U
#define SRT_NX90_gpio_app_irq_masked_gpio_app3 3
#define MSK_NX90_gpio_app_irq_masked_gpio_app4 0x00000010U
#define SRT_NX90_gpio_app_irq_masked_gpio_app4 4
#define MSK_NX90_gpio_app_irq_masked_gpio_app5 0x00000020U
#define SRT_NX90_gpio_app_irq_masked_gpio_app5 5
#define MSK_NX90_gpio_app_irq_masked_gpio_app6 0x00000040U
#define SRT_NX90_gpio_app_irq_masked_gpio_app6 6
#define MSK_NX90_gpio_app_irq_masked_gpio_app7 0x00000080U
#define SRT_NX90_gpio_app_irq_masked_gpio_app7 7

/* all used bits of 'NX90_gpio_app_irq_masked': */
#define MSK_USED_BITS_NX90_gpio_app_irq_masked 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_mask_set */
/* => GPIO_APP interrupt mask set: */
/*    The interrupt mask register internally exists 2x for different system busses (address areas) it is connected to. */
/*    This allows 2 CPU to work in parallel on this module: ARM_APP, xPIC_APP. */
/*    The inlogic_app IRQ mask enables interrupt requests for ARM_APP. */
/*    The xpic_app_system IRQ mask enables interrupt requests for xPIC_APP. */
/*    As the single bits might be changed by different software tasks, */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to gpio_app_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_mask_set           0x00000074U
#define Adr_NX90_gpio_app_gpio_app_irq_mask_set      0xFF801474U
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_mask_set 0xFF900274U
#define DFLT_VAL_NX90_gpio_app_irq_mask_set          0x00000000U

#define MSK_NX90_gpio_app_irq_mask_set_gpio_app0         0x00000001U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app0         0
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app0 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app1         0x00000002U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app1         1
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app1 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app2         0x00000004U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app2         2
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app2 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app3         0x00000008U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app3         3
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app3    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app3 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app4         0x00000010U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app4         4
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app4    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app4 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app5         0x00000020U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app5         5
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app5    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app5 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app6         0x00000040U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app6         6
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app6    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app6 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app7         0x00000080U
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app7         7
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app7    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app7 0x00000000U

/* all used bits of 'NX90_gpio_app_irq_mask_set': */
#define MSK_USED_BITS_NX90_gpio_app_irq_mask_set 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_mask_rst */
/* => GPIO_APP interrupt mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources. */
/*    Like irq_msk_set, this address exists for the following address areas: inlogic_app, xpic_app_system. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_mask_rst           0x00000078U
#define Adr_NX90_gpio_app_gpio_app_irq_mask_rst      0xFF801478U
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_mask_rst 0xFF900278U
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst          0x00000000U

#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app0         0x00000001U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app0         0
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app0 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app1         0x00000002U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app1         1
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app1 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app2         0x00000004U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app2         2
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app2 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app3         0x00000008U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app3         3
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app3    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app3 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app4         0x00000010U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app4         4
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app4    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app4 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app5         0x00000020U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app5         5
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app5    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app5 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app6         0x00000040U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app6         6
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app6    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app6 0x00000000U
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app7         0x00000080U
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app7         7
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app7    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app7 0x00000000U

/* all used bits of 'NX90_gpio_app_irq_mask_rst': */
#define MSK_USED_BITS_NX90_gpio_app_irq_mask_rst 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_raw */
/* => Counter Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    This register is accessible via address areas: inlogic_app, xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_raw           0x0000007CU
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_raw      0xFF80147CU
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_raw 0xFF90027CU
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw          0x00000000U

#define MSK_NX90_gpio_app_cnt_irq_raw_cnt0         0x00000001U
#define SRT_NX90_gpio_app_cnt_irq_raw_cnt0         0
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw_cnt0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_raw_cnt0 0x00000000U
#define MSK_NX90_gpio_app_cnt_irq_raw_cnt1         0x00000002U
#define SRT_NX90_gpio_app_cnt_irq_raw_cnt1         1
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw_cnt1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_raw_cnt1 0x00000000U
#define MSK_NX90_gpio_app_cnt_irq_raw_cnt2         0x00000004U
#define SRT_NX90_gpio_app_cnt_irq_raw_cnt2         2
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw_cnt2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_raw_cnt2 0x00000000U

/* all used bits of 'NX90_gpio_app_cnt_irq_raw': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_raw 0x00000007U

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_masked */
/* => Counter Masked IRQ register: */
/*    Read access shows status of masked IRQs (cnt_irq_raw AND cnt_irq_mask). */
/*    This register internally exists 2x for different system busses (address areas) it is connected to. */
/*    This allows 2 CPU to work in parallel on this module: ARM_APP, xPIC_APP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_masked           0x00000080U
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_masked      0xFF801480U
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_masked 0xFF900280U

#define MSK_NX90_gpio_app_cnt_irq_masked_cnt0 0x00000001U
#define SRT_NX90_gpio_app_cnt_irq_masked_cnt0 0
#define MSK_NX90_gpio_app_cnt_irq_masked_cnt1 0x00000002U
#define SRT_NX90_gpio_app_cnt_irq_masked_cnt1 1
#define MSK_NX90_gpio_app_cnt_irq_masked_cnt2 0x00000004U
#define SRT_NX90_gpio_app_cnt_irq_masked_cnt2 2

/* all used bits of 'NX90_gpio_app_cnt_irq_masked': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_masked 0x00000007U

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_mask_set */
/* => Counter interrupt mask set: */
/*    The interrupt mask register internally exists 2x for different system busses (address areas) it is connected to. */
/*    This allows 2 CPU to work in parallel on this module: ARM_APP, xPIC_APP. */
/*    The inlogic_app IRQ mask enables interrupt requests for ARM_APP. */
/*    The xpic_app_system IRQ mask enables interrupt requests for xPIC_APP. */
/*    As the single bits might be changed by different software tasks, */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to cnt_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_mask_set           0x00000084U
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_mask_set      0xFF801484U
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_mask_set 0xFF900284U
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set          0x00000000U

#define MSK_NX90_gpio_app_cnt_irq_mask_set_cnt0         0x00000001U
#define SRT_NX90_gpio_app_cnt_irq_mask_set_cnt0         0
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt0 0x00000000U
#define MSK_NX90_gpio_app_cnt_irq_mask_set_cnt1         0x00000002U
#define SRT_NX90_gpio_app_cnt_irq_mask_set_cnt1         1
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt1 0x00000000U
#define MSK_NX90_gpio_app_cnt_irq_mask_set_cnt2         0x00000004U
#define SRT_NX90_gpio_app_cnt_irq_mask_set_cnt2         2
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt2 0x00000000U

/* all used bits of 'NX90_gpio_app_cnt_irq_mask_set': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_mask_set 0x00000007U

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_mask_rst */
/* => Counter interrupt mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources. */
/*    Like cnt_irq_msk_set, this address exists for the following address areas: inlogic_app, xpic_app_system. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_mask_rst           0x00000088U
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_mask_rst      0xFF801488U
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_mask_rst 0xFF900288U
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst          0x00000000U

#define MSK_NX90_gpio_app_cnt_irq_mask_rst_cnt0         0x00000001U
#define SRT_NX90_gpio_app_cnt_irq_mask_rst_cnt0         0
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt0    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt0 0x00000000U
#define MSK_NX90_gpio_app_cnt_irq_mask_rst_cnt1         0x00000002U
#define SRT_NX90_gpio_app_cnt_irq_mask_rst_cnt1         1
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt1    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt1 0x00000000U
#define MSK_NX90_gpio_app_cnt_irq_mask_rst_cnt2         0x00000004U
#define SRT_NX90_gpio_app_cnt_irq_mask_rst_cnt2         2
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt2    0x00000000U
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt2 0x00000000U

/* all used bits of 'NX90_gpio_app_cnt_irq_mask_rst': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_mask_rst 0x00000007U


/* ===================================================================== */

/* AREA trigger_irq */
/* Area of trigger_irq_app */

/* ===================================================================== */

#define Addr_NX90_trigger_irq_app 0xFF801660U

/* --------------------------------------------------------------------- */
/* Register trigger_irq_cfg */
/* => Trigger IRQ configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_cfg             0x00000000U
#define Adr_NX90_trigger_irq_app_trigger_irq_cfg 0xFF801660U
#define Adr_NX90_trigger_irq_cfg                 0xFF801660U
#define DFLT_VAL_NX90_trigger_irq_cfg            0x00000000U

#define MSK_NX90_trigger_irq_cfg_xc_trigger_out_polarity         0x00000003U
#define SRT_NX90_trigger_irq_cfg_xc_trigger_out_polarity         0
#define DFLT_VAL_NX90_trigger_irq_cfg_xc_trigger_out_polarity    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_irq_cfg_xc_trigger_out_polarity 0x00000000U

/* all used bits of 'NX90_trigger_irq_cfg': */
#define MSK_USED_BITS_NX90_trigger_irq_cfg 0x00000003U

/* --------------------------------------------------------------------- */
/* Register trigger_irq_raw */
/* => Trigger raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_raw             0x00000004U
#define Adr_NX90_trigger_irq_app_trigger_irq_raw 0xFF801664U
#define Adr_NX90_trigger_irq_raw                 0xFF801664U
#define DFLT_VAL_NX90_trigger_irq_raw            0x00000000U

#define MSK_NX90_trigger_irq_raw_xc_trigger_out_edge         0x00000003U
#define SRT_NX90_trigger_irq_raw_xc_trigger_out_edge         0
#define DFLT_VAL_NX90_trigger_irq_raw_xc_trigger_out_edge    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_irq_raw_xc_trigger_out_edge 0x00000000U

/* all used bits of 'NX90_trigger_irq_raw': */
#define MSK_USED_BITS_NX90_trigger_irq_raw 0x00000003U

/* --------------------------------------------------------------------- */
/* Register trigger_irq_masked */
/* => Trigger masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_masked             0x00000008U
#define Adr_NX90_trigger_irq_app_trigger_irq_masked 0xFF801668U
#define Adr_NX90_trigger_irq_masked                 0xFF801668U

#define MSK_NX90_trigger_irq_masked_xc_trigger_out_edge 0x00000003U
#define SRT_NX90_trigger_irq_masked_xc_trigger_out_edge 0

/* all used bits of 'NX90_trigger_irq_masked': */
#define MSK_USED_BITS_NX90_trigger_irq_masked 0x00000003U

/* --------------------------------------------------------------------- */
/* Register trigger_irq_msk_set */
/* => Trigger IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to bod_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_msk_set             0x0000000CU
#define Adr_NX90_trigger_irq_app_trigger_irq_msk_set 0xFF80166CU
#define Adr_NX90_trigger_irq_msk_set                 0xFF80166CU
#define DFLT_VAL_NX90_trigger_irq_msk_set            0x00000000U

#define MSK_NX90_trigger_irq_msk_set_xc_trigger_out_edge         0x00000003U
#define SRT_NX90_trigger_irq_msk_set_xc_trigger_out_edge         0
#define DFLT_VAL_NX90_trigger_irq_msk_set_xc_trigger_out_edge    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_irq_msk_set_xc_trigger_out_edge 0x00000000U

/* all used bits of 'NX90_trigger_irq_msk_set': */
#define MSK_USED_BITS_NX90_trigger_irq_msk_set 0x00000003U

/* --------------------------------------------------------------------- */
/* Register trigger_irq_msk_reset */
/* => Trigger IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_msk_reset             0x00000010U
#define Adr_NX90_trigger_irq_app_trigger_irq_msk_reset 0xFF801670U
#define Adr_NX90_trigger_irq_msk_reset                 0xFF801670U
#define DFLT_VAL_NX90_trigger_irq_msk_reset            0x00000000U

#define MSK_NX90_trigger_irq_msk_reset_xc_trigger_out_edge         0x00000003U
#define SRT_NX90_trigger_irq_msk_reset_xc_trigger_out_edge         0
#define DFLT_VAL_NX90_trigger_irq_msk_reset_xc_trigger_out_edge    0x00000000U
#define DFLT_BF_VAL_NX90_trigger_irq_msk_reset_xc_trigger_out_edge 0x00000000U

/* all used bits of 'NX90_trigger_irq_msk_reset': */
#define MSK_USED_BITS_NX90_trigger_irq_msk_reset 0x00000003U


/* ===================================================================== */

/* AREA endat */
/* Area of endat0_app, endat1_app */

/* ===================================================================== */

#define Addr_NX90_endat0_app 0xFF801700U
#define Addr_NX90_endat1_app 0xFF801740U

/* --------------------------------------------------------------------- */
/* Register endat_send */
/* => The send register contains data to be transmitted to the EnDat encoder. */
/*    Mode command */
/*    MRS code/address/port address (depends on the mode command) */
/*    Parameters/instructions (depends on the mode command) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_send        0x00000000U
#define Adr_NX90_endat0_app_endat_send 0xFF801700U
#define Adr_NX90_endat1_app_endat_send 0xFF801740U
#define DFLT_VAL_NX90_endat_send       0x07000000U

#define MSK_NX90_endat_send_byte1         0x000000ffU
#define SRT_NX90_endat_send_byte1         0
#define DFLT_VAL_NX90_endat_send_byte1    0x00000000U
#define DFLT_BF_VAL_NX90_endat_send_byte1 0x00000000U
#define MSK_NX90_endat_send_byte2         0x0000ff00U
#define SRT_NX90_endat_send_byte2         8
#define DFLT_VAL_NX90_endat_send_byte2    0x00000000U
#define DFLT_BF_VAL_NX90_endat_send_byte2 0x00000000U
#define MSK_NX90_endat_send_byte3         0x00ff0000U
#define SRT_NX90_endat_send_byte3         16
#define DFLT_VAL_NX90_endat_send_byte3    0x00000000U
#define DFLT_BF_VAL_NX90_endat_send_byte3 0x00000000U
#define MSK_NX90_endat_send_byte4         0x3f000000U
#define SRT_NX90_endat_send_byte4         24
#define DFLT_VAL_NX90_endat_send_byte4    0x07000000U
#define DFLT_BF_VAL_NX90_endat_send_byte4 0x00000007U

/* all used bits of 'NX90_endat_send': */
#define MSK_USED_BITS_NX90_endat_send 0x3fffffffU

/* --------------------------------------------------------------------- */
/* Register endat_receive1_0 */
/* => Depending on the transmitted type 2.1 mode command, receive register 1 contains different data. */
/*    With EnDat type 2.2 mode commands and with SSI, the position value is always entered into receive-Reg 1. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive1_0        0x00000004U
#define Adr_NX90_endat0_app_endat_receive1_0 0xFF801704U
#define Adr_NX90_endat1_app_endat_receive1_0 0xFF801744U

#define MSK_NX90_endat_receive1_0_byte1 0x000000ffU
#define SRT_NX90_endat_receive1_0_byte1 0
#define MSK_NX90_endat_receive1_0_byte2 0x0000ff00U
#define SRT_NX90_endat_receive1_0_byte2 8
#define MSK_NX90_endat_receive1_0_byte3 0x00ff0000U
#define SRT_NX90_endat_receive1_0_byte3 16
#define MSK_NX90_endat_receive1_0_byte4 0xff000000U
#define SRT_NX90_endat_receive1_0_byte4 24

/* all used bits of 'NX90_endat_receive1_0': */
#define MSK_USED_BITS_NX90_endat_receive1_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register endat_receive1_1 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive1_1        0x00000008U
#define Adr_NX90_endat0_app_endat_receive1_1 0xFF801708U
#define Adr_NX90_endat1_app_endat_receive1_1 0xFF801748U

#define MSK_NX90_endat_receive1_1_byte5 0x000000ffU
#define SRT_NX90_endat_receive1_1_byte5 0
#define MSK_NX90_endat_receive1_1_byte6 0x0000ff00U
#define SRT_NX90_endat_receive1_1_byte6 8
#define MSK_NX90_endat_receive1_1_byte7 0x00ff0000U
#define SRT_NX90_endat_receive1_1_byte7 16

/* all used bits of 'NX90_endat_receive1_1': */
#define MSK_USED_BITS_NX90_endat_receive1_1 0x00ffffffU

/* --------------------------------------------------------------------- */
/* Register endat_receive2 */
/* => If a type 2.2 mode command was sent, receive register 2 will contain the contents of additional information 2 and its CRC. */
/*    This data is to be interpreted in accordance with the EnDat Interface Description. */
/*    In SSI protocol mode with double-word transmission, the redundant position value is stored here (right-aligned). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive2        0x0000000CU
#define Adr_NX90_endat0_app_endat_receive2 0xFF80170CU
#define Adr_NX90_endat1_app_endat_receive2 0xFF80174CU

#define MSK_NX90_endat_receive2_byte1 0x000000ffU
#define SRT_NX90_endat_receive2_byte1 0
#define MSK_NX90_endat_receive2_byte2 0x0000ff00U
#define SRT_NX90_endat_receive2_byte2 8
#define MSK_NX90_endat_receive2_byte3 0x00ff0000U
#define SRT_NX90_endat_receive2_byte3 16
#define MSK_NX90_endat_receive2_byte4 0xff000000U
#define SRT_NX90_endat_receive2_byte4 24

/* all used bits of 'NX90_endat_receive2': */
#define MSK_USED_BITS_NX90_endat_receive2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register endat_receive3 */
/* => If a type 2.2 mode command was sent, receive register 3 will contain the contents of additional information 1 and its CRC. */
/*    This data is to be interpreted in accordance with the EnDat Interface Description. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive3        0x00000010U
#define Adr_NX90_endat0_app_endat_receive3 0xFF801710U
#define Adr_NX90_endat1_app_endat_receive3 0xFF801750U

#define MSK_NX90_endat_receive3_byte1 0x000000ffU
#define SRT_NX90_endat_receive3_byte1 0
#define MSK_NX90_endat_receive3_byte2 0x0000ff00U
#define SRT_NX90_endat_receive3_byte2 8
#define MSK_NX90_endat_receive3_byte3 0x00ff0000U
#define SRT_NX90_endat_receive3_byte3 16
#define MSK_NX90_endat_receive3_byte4 0xff000000U
#define SRT_NX90_endat_receive3_byte4 24

/* all used bits of 'NX90_endat_receive3': */
#define MSK_USED_BITS_NX90_endat_receive3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register endat_conf1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_conf1        0x00000014U
#define Adr_NX90_endat0_app_endat_conf1 0xFF801714U
#define Adr_NX90_endat1_app_endat_conf1 0xFF801754U
#define DFLT_VAL_NX90_endat_conf1       0x00000df0U

#define MSK_NX90_endat_conf1_hw_strobe                   0x00000001U
#define SRT_NX90_endat_conf1_hw_strobe                   0
#define DFLT_VAL_NX90_endat_conf1_hw_strobe              0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_hw_strobe           0x00000000U
#define MSK_NX90_endat_conf1_uncond_transfer             0x00000002U
#define SRT_NX90_endat_conf1_uncond_transfer             1
#define DFLT_VAL_NX90_endat_conf1_uncond_transfer        0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_uncond_transfer     0x00000000U
#define MSK_NX90_endat_conf1_endat_cont_clk_mode         0x00000004U
#define SRT_NX90_endat_conf1_endat_cont_clk_mode         2
#define DFLT_VAL_NX90_endat_conf1_endat_cont_clk_mode    0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_endat_cont_clk_mode 0x00000000U
#define MSK_NX90_endat_conf1_f_tclk                      0x000000f0U
#define SRT_NX90_endat_conf1_f_tclk                      4
#define DFLT_VAL_NX90_endat_conf1_f_tclk                 0x000000f0U
#define DFLT_BF_VAL_NX90_endat_conf1_f_tclk              0x0000000fU
#define MSK_NX90_endat_conf1_data_word_len               0x00003f00U
#define SRT_NX90_endat_conf1_data_word_len               8
#define DFLT_VAL_NX90_endat_conf1_data_word_len          0x00000d00U
#define DFLT_BF_VAL_NX90_endat_conf1_data_word_len       0x0000000dU
#define MSK_NX90_endat_conf1_reset_window                0x00004000U
#define SRT_NX90_endat_conf1_reset_window                14
#define DFLT_VAL_NX90_endat_conf1_reset_window           0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_reset_window        0x00000000U
#define MSK_NX90_endat_conf1_auto_reset                  0x00008000U
#define SRT_NX90_endat_conf1_auto_reset                  15
#define DFLT_VAL_NX90_endat_conf1_auto_reset             0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_auto_reset          0x00000000U
#define MSK_NX90_endat_conf1_cable_prop_time             0x00ff0000U
#define SRT_NX90_endat_conf1_cable_prop_time             16
#define DFLT_VAL_NX90_endat_conf1_cable_prop_time        0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_cable_prop_time     0x00000000U
#define MSK_NX90_endat_conf1_delay_comp                  0x01000000U
#define SRT_NX90_endat_conf1_delay_comp                  24
#define DFLT_VAL_NX90_endat_conf1_delay_comp             0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_delay_comp          0x00000000U
#define MSK_NX90_endat_conf1_f_sys                       0x1c000000U
#define SRT_NX90_endat_conf1_f_sys                       26
#define DFLT_VAL_NX90_endat_conf1_f_sys                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_f_sys               0x00000000U
#define MSK_NX90_endat_conf1_ic_reset                    0x20000000U
#define SRT_NX90_endat_conf1_ic_reset                    29
#define DFLT_VAL_NX90_endat_conf1_ic_reset               0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_ic_reset            0x00000000U
#define MSK_NX90_endat_conf1_endat_ssi                   0xc0000000U
#define SRT_NX90_endat_conf1_endat_ssi                   30
#define DFLT_VAL_NX90_endat_conf1_endat_ssi              0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf1_endat_ssi           0x00000000U

/* all used bits of 'NX90_endat_conf1': */
#define MSK_USED_BITS_NX90_endat_conf1 0xfdfffff7U

/* --------------------------------------------------------------------- */
/* Register endat_conf2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_conf2        0x00000018U
#define Adr_NX90_endat0_app_endat_conf2 0xFF801718U
#define Adr_NX90_endat1_app_endat_conf2 0xFF801758U
#define DFLT_VAL_NX90_endat_conf2       0x00040000U

#define MSK_NX90_endat_conf2_timer_for_sampling_rate         0x000000ffU
#define SRT_NX90_endat_conf2_timer_for_sampling_rate         0
#define DFLT_VAL_NX90_endat_conf2_timer_for_sampling_rate    0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf2_timer_for_sampling_rate 0x00000000U
#define MSK_NX90_endat_conf2_watchdog                        0x0000ff00U
#define SRT_NX90_endat_conf2_watchdog                        8
#define DFLT_VAL_NX90_endat_conf2_watchdog                   0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf2_watchdog                0x00000000U
#define MSK_NX90_endat_conf2_t_st                            0x00070000U
#define SRT_NX90_endat_conf2_t_st                            16
#define DFLT_VAL_NX90_endat_conf2_t_st                       0x00040000U
#define DFLT_BF_VAL_NX90_endat_conf2_t_st                    0x00000004U
#define MSK_NX90_endat_conf2_filter                          0x00380000U
#define SRT_NX90_endat_conf2_filter                          19
#define DFLT_VAL_NX90_endat_conf2_filter                     0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf2_filter                  0x00000000U
#define MSK_NX90_endat_conf2_rtm                             0x00400000U
#define SRT_NX90_endat_conf2_rtm                             22
#define DFLT_VAL_NX90_endat_conf2_rtm                        0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf2_rtm                     0x00000000U
#define MSK_NX90_endat_conf2_hw_strobe_delay                 0xff000000U
#define SRT_NX90_endat_conf2_hw_strobe_delay                 24
#define DFLT_VAL_NX90_endat_conf2_hw_strobe_delay            0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf2_hw_strobe_delay         0x00000000U

/* all used bits of 'NX90_endat_conf2': */
#define MSK_USED_BITS_NX90_endat_conf2 0xff7fffffU

/* --------------------------------------------------------------------- */
/* Register endat_conf3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_conf3        0x0000001CU
#define Adr_NX90_endat0_app_endat_conf3 0xFF80171CU
#define Adr_NX90_endat1_app_endat_conf3 0xFF80175CU
#define DFLT_VAL_NX90_endat_conf3       0x000000ccU

#define MSK_NX90_endat_conf3_parity                 0x00000001U
#define SRT_NX90_endat_conf3_parity                 0
#define DFLT_VAL_NX90_endat_conf3_parity            0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf3_parity         0x00000000U
#define MSK_NX90_endat_conf3_format                 0x00000002U
#define SRT_NX90_endat_conf3_format                 1
#define DFLT_VAL_NX90_endat_conf3_format            0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf3_format         0x00000000U
#define MSK_NX90_endat_conf3_gray_to_binary         0x00000004U
#define SRT_NX90_endat_conf3_gray_to_binary         2
#define DFLT_VAL_NX90_endat_conf3_gray_to_binary    0x00000004U
#define DFLT_BF_VAL_NX90_endat_conf3_gray_to_binary 0x00000001U
#define MSK_NX90_endat_conf3_singleturn_res         0x000000f8U
#define SRT_NX90_endat_conf3_singleturn_res         3
#define DFLT_VAL_NX90_endat_conf3_singleturn_res    0x000000c8U
#define DFLT_BF_VAL_NX90_endat_conf3_singleturn_res 0x00000019U
#define MSK_NX90_endat_conf3_dw                     0x00000100U
#define SRT_NX90_endat_conf3_dw                     8
#define DFLT_VAL_NX90_endat_conf3_dw                0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf3_dw             0x00000000U
#define MSK_NX90_endat_conf3_speed                  0x00008000U
#define SRT_NX90_endat_conf3_speed                  15
#define DFLT_VAL_NX90_endat_conf3_speed             0x00000000U
#define DFLT_BF_VAL_NX90_endat_conf3_speed          0x00000000U

/* all used bits of 'NX90_endat_conf3': */
#define MSK_USED_BITS_NX90_endat_conf3 0x000081ffU

/* --------------------------------------------------------------------- */
/* Register endat_stat */
/* => The status bits are created by the sequencing controller of the interface component, as required. */
/*    Status information remains set until it is reset by the application. */
/*    The application can selectively reset status information with a write command. */
/*    This occurs by writing 1 to the selected bits. In the event of concurrent access, the internal sequencing controller has priority. */
/*    This ensures that status information is not 'lost'. */
/*    The status bits (15:11) are only valid when additional information 1 or 2 has been received. */
/*    Note on the application: */
/*    The status register should be read after each data transmission. It provides information about validity of the data contained in the receive registers. */
/*    The status bits must be reset in order that the internal sequencing controller can recognize a renewed setting of the status bits. */
/*    Note: Each bit (except for LZM, LZK, Ready for Strobe) can trigger an interrupt (output: INT1). */
/*    Masking is performed with the interrupt mask register. */
/*    If a bit that has been set (and thus has triggered an interrupt) is reset, the INT1 output changes from low to three-state if no other bit has triggered an interrupt. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_stat        0x00000020U
#define Adr_NX90_endat0_app_endat_stat 0xFF801720U
#define Adr_NX90_endat1_app_endat_stat 0xFF801760U
#define DFLT_VAL_NX90_endat_stat       0x40000400U

#define MSK_NX90_endat_stat_receive1_reg                  0x00000001U
#define SRT_NX90_endat_stat_receive1_reg                  0
#define DFLT_VAL_NX90_endat_stat_receive1_reg             0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_receive1_reg          0x00000000U
#define MSK_NX90_endat_stat_error1                        0x00000002U
#define SRT_NX90_endat_stat_error1                        1
#define DFLT_VAL_NX90_endat_stat_error1                   0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_error1                0x00000000U
#define MSK_NX90_endat_stat_crcpw_parity                  0x00000004U
#define SRT_NX90_endat_stat_crcpw_parity                  2
#define DFLT_VAL_NX90_endat_stat_crcpw_parity             0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_crcpw_parity          0x00000000U
#define MSK_NX90_endat_stat_f_type1                       0x00000008U
#define SRT_NX90_endat_stat_f_type1                       3
#define DFLT_VAL_NX90_endat_stat_f_type1                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_f_type1               0x00000000U
#define MSK_NX90_endat_stat_f_type2                       0x00000010U
#define SRT_NX90_endat_stat_f_type2                       4
#define DFLT_VAL_NX90_endat_stat_f_type2                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_f_type2               0x00000000U
#define MSK_NX90_endat_stat_mrs_adr                       0x00000020U
#define SRT_NX90_endat_stat_mrs_adr                       5
#define DFLT_VAL_NX90_endat_stat_mrs_adr                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_mrs_adr               0x00000000U
#define MSK_NX90_endat_stat_ir6                           0x00000040U
#define SRT_NX90_endat_stat_ir6                           6
#define DFLT_VAL_NX90_endat_stat_ir6                      0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_ir6                   0x00000000U
#define MSK_NX90_endat_stat_ir7                           0x00000080U
#define SRT_NX90_endat_stat_ir7                           7
#define DFLT_VAL_NX90_endat_stat_ir7                      0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_ir7                   0x00000000U
#define MSK_NX90_endat_stat_receive2_reg                  0x00000100U
#define SRT_NX90_endat_stat_receive2_reg                  8
#define DFLT_VAL_NX90_endat_stat_receive2_reg             0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_receive2_reg          0x00000000U
#define MSK_NX90_endat_stat_receive3_reg                  0x00000200U
#define SRT_NX90_endat_stat_receive3_reg                  9
#define DFLT_VAL_NX90_endat_stat_receive3_reg             0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_receive3_reg          0x00000000U
#define MSK_NX90_endat_stat_error2                        0x00000400U
#define SRT_NX90_endat_stat_error2                        10
#define DFLT_VAL_NX90_endat_stat_error2                   0x00000400U
#define DFLT_BF_VAL_NX90_endat_stat_error2                0x00000001U
#define MSK_NX90_endat_stat_crc_zi1                       0x00000800U
#define SRT_NX90_endat_stat_crc_zi1                       11
#define DFLT_VAL_NX90_endat_stat_crc_zi1                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_crc_zi1               0x00000000U
#define MSK_NX90_endat_stat_crc_zi2                       0x00001000U
#define SRT_NX90_endat_stat_crc_zi2                       12
#define DFLT_VAL_NX90_endat_stat_crc_zi2                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_crc_zi2               0x00000000U
#define MSK_NX90_endat_stat_busy                          0x00002000U
#define SRT_NX90_endat_stat_busy                          13
#define DFLT_VAL_NX90_endat_stat_busy                     0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_busy                  0x00000000U
#define MSK_NX90_endat_stat_rm                            0x00004000U
#define SRT_NX90_endat_stat_rm                            14
#define DFLT_VAL_NX90_endat_stat_rm                       0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_rm                    0x00000000U
#define MSK_NX90_endat_stat_wrn                           0x00008000U
#define SRT_NX90_endat_stat_wrn                           15
#define DFLT_VAL_NX90_endat_stat_wrn                      0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_wrn                   0x00000000U
#define MSK_NX90_endat_stat_spike                         0x00010000U
#define SRT_NX90_endat_stat_spike                         16
#define DFLT_VAL_NX90_endat_stat_spike                    0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_spike                 0x00000000U
#define MSK_NX90_endat_stat_watchdog                      0x00020000U
#define SRT_NX90_endat_stat_watchdog                      17
#define DFLT_VAL_NX90_endat_stat_watchdog                 0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_watchdog              0x00000000U
#define MSK_NX90_endat_stat_f_type3                       0x00040000U
#define SRT_NX90_endat_stat_f_type3                       18
#define DFLT_VAL_NX90_endat_stat_f_type3                  0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_f_type3               0x00000000U
#define MSK_NX90_endat_stat_delay_comp                    0x00400000U
#define SRT_NX90_endat_stat_delay_comp                    22
#define DFLT_VAL_NX90_endat_stat_delay_comp               0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_delay_comp            0x00000000U
#define MSK_NX90_endat_stat_prop_time_measurement         0x00800000U
#define SRT_NX90_endat_stat_prop_time_measurement         23
#define DFLT_VAL_NX90_endat_stat_prop_time_measurement    0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_prop_time_measurement 0x00000000U
#define MSK_NX90_endat_stat_rtm_start                     0x08000000U
#define SRT_NX90_endat_stat_rtm_start                     27
#define DFLT_VAL_NX90_endat_stat_rtm_start                0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_rtm_start             0x00000000U
#define MSK_NX90_endat_stat_rtm_stop                      0x10000000U
#define SRT_NX90_endat_stat_rtm_stop                      28
#define DFLT_VAL_NX90_endat_stat_rtm_stop                 0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_rtm_stop              0x00000000U
#define MSK_NX90_endat_stat_speed_ready                   0x20000000U
#define SRT_NX90_endat_stat_speed_ready                   29
#define DFLT_VAL_NX90_endat_stat_speed_ready              0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_speed_ready           0x00000000U
#define MSK_NX90_endat_stat_ready_for_strobe              0x40000000U
#define SRT_NX90_endat_stat_ready_for_strobe              30
#define DFLT_VAL_NX90_endat_stat_ready_for_strobe         0x40000000U
#define DFLT_BF_VAL_NX90_endat_stat_ready_for_strobe      0x00000001U
#define MSK_NX90_endat_stat_ready                         0x80000000U
#define SRT_NX90_endat_stat_ready                         31
#define DFLT_VAL_NX90_endat_stat_ready                    0x00000000U
#define DFLT_BF_VAL_NX90_endat_stat_ready                 0x00000000U

/* all used bits of 'NX90_endat_stat': */
#define MSK_USED_BITS_NX90_endat_stat 0xf8c7ffffU

/* --------------------------------------------------------------------- */
/* Register endat_int */
/* => The interrupt mask register is for the masking of the status registers interrupt sources. */
/*    All bits shown in the status register (except for LZM, LZK, Ready for Strobe) can generate an interrupt. */
/*    The bit assignments of the interrupt mask register are identical to those of the status register. */
/*    An interrupt is allowed by setting the corresponding bit to 1. */
/*    The INT output changes from three-state to low. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_int        0x00000024U
#define Adr_NX90_endat0_app_endat_int 0xFF801724U
#define Adr_NX90_endat1_app_endat_int 0xFF801764U
#define DFLT_VAL_NX90_endat_int       0x00000000U

#define MSK_NX90_endat_int_receive1_reg         0x00000001U
#define SRT_NX90_endat_int_receive1_reg         0
#define DFLT_VAL_NX90_endat_int_receive1_reg    0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_receive1_reg 0x00000000U
#define MSK_NX90_endat_int_error1               0x00000002U
#define SRT_NX90_endat_int_error1               1
#define DFLT_VAL_NX90_endat_int_error1          0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_error1       0x00000000U
#define MSK_NX90_endat_int_crcpw_parity         0x00000004U
#define SRT_NX90_endat_int_crcpw_parity         2
#define DFLT_VAL_NX90_endat_int_crcpw_parity    0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_crcpw_parity 0x00000000U
#define MSK_NX90_endat_int_f_type1              0x00000008U
#define SRT_NX90_endat_int_f_type1              3
#define DFLT_VAL_NX90_endat_int_f_type1         0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_f_type1      0x00000000U
#define MSK_NX90_endat_int_f_type2              0x00000010U
#define SRT_NX90_endat_int_f_type2              4
#define DFLT_VAL_NX90_endat_int_f_type2         0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_f_type2      0x00000000U
#define MSK_NX90_endat_int_mrs_adr              0x00000020U
#define SRT_NX90_endat_int_mrs_adr              5
#define DFLT_VAL_NX90_endat_int_mrs_adr         0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_mrs_adr      0x00000000U
#define MSK_NX90_endat_int_ir6                  0x00000040U
#define SRT_NX90_endat_int_ir6                  6
#define DFLT_VAL_NX90_endat_int_ir6             0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_ir6          0x00000000U
#define MSK_NX90_endat_int_ir7                  0x00000080U
#define SRT_NX90_endat_int_ir7                  7
#define DFLT_VAL_NX90_endat_int_ir7             0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_ir7          0x00000000U
#define MSK_NX90_endat_int_receive2_reg         0x00000100U
#define SRT_NX90_endat_int_receive2_reg         8
#define DFLT_VAL_NX90_endat_int_receive2_reg    0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_receive2_reg 0x00000000U
#define MSK_NX90_endat_int_receive3_reg         0x00000200U
#define SRT_NX90_endat_int_receive3_reg         9
#define DFLT_VAL_NX90_endat_int_receive3_reg    0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_receive3_reg 0x00000000U
#define MSK_NX90_endat_int_error2               0x00000400U
#define SRT_NX90_endat_int_error2               10
#define DFLT_VAL_NX90_endat_int_error2          0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_error2       0x00000000U
#define MSK_NX90_endat_int_crc_zi1              0x00000800U
#define SRT_NX90_endat_int_crc_zi1              11
#define DFLT_VAL_NX90_endat_int_crc_zi1         0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_crc_zi1      0x00000000U
#define MSK_NX90_endat_int_crc_zi2              0x00001000U
#define SRT_NX90_endat_int_crc_zi2              12
#define DFLT_VAL_NX90_endat_int_crc_zi2         0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_crc_zi2      0x00000000U
#define MSK_NX90_endat_int_busy                 0x00002000U
#define SRT_NX90_endat_int_busy                 13
#define DFLT_VAL_NX90_endat_int_busy            0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_busy         0x00000000U
#define MSK_NX90_endat_int_RM                   0x00004000U
#define SRT_NX90_endat_int_RM                   14
#define DFLT_VAL_NX90_endat_int_RM              0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_RM           0x00000000U
#define MSK_NX90_endat_int_wrn                  0x00008000U
#define SRT_NX90_endat_int_wrn                  15
#define DFLT_VAL_NX90_endat_int_wrn             0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_wrn          0x00000000U
#define MSK_NX90_endat_int_spike                0x00010000U
#define SRT_NX90_endat_int_spike                16
#define DFLT_VAL_NX90_endat_int_spike           0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_spike        0x00000000U
#define MSK_NX90_endat_int_watchdog             0x00020000U
#define SRT_NX90_endat_int_watchdog             17
#define DFLT_VAL_NX90_endat_int_watchdog        0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_watchdog     0x00000000U
#define MSK_NX90_endat_int_f_type3              0x00040000U
#define SRT_NX90_endat_int_f_type3              18
#define DFLT_VAL_NX90_endat_int_f_type3         0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_f_type3      0x00000000U
#define MSK_NX90_endat_int_speed_ready          0x20000000U
#define SRT_NX90_endat_int_speed_ready          29
#define DFLT_VAL_NX90_endat_int_speed_ready     0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_speed_ready  0x00000000U
#define MSK_NX90_endat_int_ready                0x80000000U
#define SRT_NX90_endat_int_ready                31
#define DFLT_VAL_NX90_endat_int_ready           0x00000000U
#define DFLT_BF_VAL_NX90_endat_int_ready        0x00000000U

/* all used bits of 'NX90_endat_int': */
#define MSK_USED_BITS_NX90_endat_int 0xa007ffffU

/* --------------------------------------------------------------------- */
/* Register endat_test1 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_test1        0x00000028U
#define Adr_NX90_endat0_app_endat_test1 0xFF801728U
#define Adr_NX90_endat1_app_endat_test1 0xFF801768U

#define MSK_NX90_endat_test1_dl_high                 0x00000001U
#define SRT_NX90_endat_test1_dl_high                 0
#define MSK_NX90_endat_test1_status_zi               0x00000006U
#define SRT_NX90_endat_test1_status_zi               1
#define MSK_NX90_endat_test1_enDat_automation_engine 0x000003f0U
#define SRT_NX90_endat_test1_enDat_automation_engine 4
#define MSK_NX90_endat_test1_ic_test_values          0xfffffc00U
#define SRT_NX90_endat_test1_ic_test_values          10

/* all used bits of 'NX90_endat_test1': */
#define MSK_USED_BITS_NX90_endat_test1 0xfffffff7U

/* --------------------------------------------------------------------- */
/* Register endat_test2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_test2        0x0000002CU
#define Adr_NX90_endat0_app_endat_test2 0xFF80172CU
#define Adr_NX90_endat1_app_endat_test2 0xFF80176CU
#define DFLT_VAL_NX90_endat_test2       0x00000000U

#define MSK_NX90_endat_test2_selection_tst_out          0x00000004U
#define SRT_NX90_endat_test2_selection_tst_out          2
#define DFLT_VAL_NX90_endat_test2_selection_tst_out     0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_selection_tst_out  0x00000000U
#define MSK_NX90_endat_test2_test_receive_reg           0x00000008U
#define SRT_NX90_endat_test2_test_receive_reg           3
#define DFLT_VAL_NX90_endat_test2_test_receive_reg      0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_test_receive_reg   0x00000000U
#define MSK_NX90_endat_test2_sel_test_mux               0x00000030U
#define SRT_NX90_endat_test2_sel_test_mux               4
#define DFLT_VAL_NX90_endat_test2_sel_test_mux          0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_sel_test_mux       0x00000000U
#define MSK_NX90_endat_test2_ic_test_mode               0x00000080U
#define SRT_NX90_endat_test2_ic_test_mode               7
#define DFLT_VAL_NX90_endat_test2_ic_test_mode          0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_ic_test_mode       0x00000000U
#define MSK_NX90_endat_test2_selection_add_info         0x00000700U
#define SRT_NX90_endat_test2_selection_add_info         8
#define DFLT_VAL_NX90_endat_test2_selection_add_info    0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_selection_add_info 0x00000000U
#define MSK_NX90_endat_test2_test_mode_divider          0x00000800U
#define SRT_NX90_endat_test2_test_mode_divider          11
#define DFLT_VAL_NX90_endat_test2_test_mode_divider     0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_test_mode_divider  0x00000000U
#define MSK_NX90_endat_test2_sel_test_mux2              0x00003000U
#define SRT_NX90_endat_test2_sel_test_mux2              12
#define DFLT_VAL_NX90_endat_test2_sel_test_mux2         0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_sel_test_mux2      0x00000000U
#define MSK_NX90_endat_test2_sel_test_mux3              0x0000c000U
#define SRT_NX90_endat_test2_sel_test_mux3              14
#define DFLT_VAL_NX90_endat_test2_sel_test_mux3         0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_sel_test_mux3      0x00000000U
#define MSK_NX90_endat_test2_ic_test_data               0xffff0000U
#define SRT_NX90_endat_test2_ic_test_data               16
#define DFLT_VAL_NX90_endat_test2_ic_test_data          0x00000000U
#define DFLT_BF_VAL_NX90_endat_test2_ic_test_data       0x00000000U

/* all used bits of 'NX90_endat_test2': */
#define MSK_USED_BITS_NX90_endat_test2 0xffffffbcU

/* --------------------------------------------------------------------- */
/* Register endat_receive4_0 */
/* => Receive register 4 contains position value 2 (Pos2), which is put together from the additional information 1 of Cycles 2, 3 and 4. */
/*    Test function: with the test register 2 bits (13:12), internal test values can be read */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive4_0        0x00000030U
#define Adr_NX90_endat0_app_endat_receive4_0 0xFF801730U
#define Adr_NX90_endat1_app_endat_receive4_0 0xFF801770U

#define MSK_NX90_endat_receive4_0_byte1 0x000000ffU
#define SRT_NX90_endat_receive4_0_byte1 0
#define MSK_NX90_endat_receive4_0_byte2 0x0000ff00U
#define SRT_NX90_endat_receive4_0_byte2 8
#define MSK_NX90_endat_receive4_0_byte3 0x00ff0000U
#define SRT_NX90_endat_receive4_0_byte3 16
#define MSK_NX90_endat_receive4_0_byte4 0xff000000U
#define SRT_NX90_endat_receive4_0_byte4 24

/* all used bits of 'NX90_endat_receive4_0': */
#define MSK_USED_BITS_NX90_endat_receive4_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register endat_receive4_1 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive4_1        0x00000034U
#define Adr_NX90_endat0_app_endat_receive4_1 0xFF801734U
#define Adr_NX90_endat1_app_endat_receive4_1 0xFF801774U

#define MSK_NX90_endat_receive4_1_byte5 0x000000ffU
#define SRT_NX90_endat_receive4_1_byte5 0
#define MSK_NX90_endat_receive4_1_byte6 0x0000ff00U
#define SRT_NX90_endat_receive4_1_byte6 8

/* all used bits of 'NX90_endat_receive4_1': */
#define MSK_USED_BITS_NX90_endat_receive4_1 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register endat_sw_strobe */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_sw_strobe        0x00000038U
#define Adr_NX90_endat0_app_endat_sw_strobe 0xFF801738U
#define Adr_NX90_endat1_app_endat_sw_strobe 0xFF801778U
#define DFLT_VAL_NX90_endat_sw_strobe       0x00000000U

#define MSK_NX90_endat_sw_strobe_sw_strobe         0xffffffffU
#define SRT_NX90_endat_sw_strobe_sw_strobe         0
#define DFLT_VAL_NX90_endat_sw_strobe_sw_strobe    0x00000000U
#define DFLT_BF_VAL_NX90_endat_sw_strobe_sw_strobe 0x00000000U

/* all used bits of 'NX90_endat_sw_strobe': */
#define MSK_USED_BITS_NX90_endat_sw_strobe 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register endat_id */
/* => The soft-macro specification (ID) is stored here. This information is helpful for automated configuration by higher-level user software. */
/*    E22:  Designates the latest EnDat 2.2 protocol generation */
/*    6:    MAZeT-internal designation (E6) */
/*    xxxx: Consecutive version number (this document is valid for all versions as of xx13.) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_id        0x0000003CU
#define Adr_NX90_endat0_app_endat_id 0xFF80173CU
#define Adr_NX90_endat1_app_endat_id 0xFF80177CU

#define MSK_NX90_endat_id_id 0xffffffffU
#define SRT_NX90_endat_id_id 0

/* all used bits of 'NX90_endat_id': */
#define MSK_USED_BITS_NX90_endat_id 0xffffffffU


/* ===================================================================== */

/* AREA endat_ctrl */
/* Area of endat_ctrl0_app, endat_ctrl1_app */

/* ===================================================================== */

#define Addr_NX90_endat_ctrl0_app 0xFF801780U
#define Addr_NX90_endat_ctrl1_app 0xFF801790U

/* --------------------------------------------------------------------- */
/* Register endat_ctrl_trigger_cfg */
/* => EnDat trigger configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_ctrl_trigger_cfg             0x00000000U
#define Adr_NX90_endat_ctrl0_app_endat_ctrl_trigger_cfg 0xFF801780U
#define Adr_NX90_endat_ctrl1_app_endat_ctrl_trigger_cfg 0xFF801790U
#define DFLT_VAL_NX90_endat_ctrl_trigger_cfg            0x00000000U

#define MSK_NX90_endat_ctrl_trigger_cfg_sel         0x0000000fU
#define SRT_NX90_endat_ctrl_trigger_cfg_sel         0
#define DFLT_VAL_NX90_endat_ctrl_trigger_cfg_sel    0x00000000U
#define DFLT_BF_VAL_NX90_endat_ctrl_trigger_cfg_sel 0x00000000U

/* all used bits of 'NX90_endat_ctrl_trigger_cfg': */
#define MSK_USED_BITS_NX90_endat_ctrl_trigger_cfg 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register endat_ctrl_trigger */
/* => EnDat trigger */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_ctrl_trigger             0x00000004U
#define Adr_NX90_endat_ctrl0_app_endat_ctrl_trigger 0xFF801784U
#define Adr_NX90_endat_ctrl1_app_endat_ctrl_trigger 0xFF801794U
#define DFLT_VAL_NX90_endat_ctrl_trigger            0x00000000U

#define MSK_NX90_endat_ctrl_trigger_manual         0x00000001U
#define SRT_NX90_endat_ctrl_trigger_manual         0
#define DFLT_VAL_NX90_endat_ctrl_trigger_manual    0x00000000U
#define DFLT_BF_VAL_NX90_endat_ctrl_trigger_manual 0x00000000U

/* all used bits of 'NX90_endat_ctrl_trigger': */
#define MSK_USED_BITS_NX90_endat_ctrl_trigger 0x00000001U

/* --------------------------------------------------------------------- */
/* Register endat_ctrl_strobe_cfg */
/* => EnDat strobe pulse form configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_ctrl_strobe_cfg             0x00000008U
#define Adr_NX90_endat_ctrl0_app_endat_ctrl_strobe_cfg 0xFF801788U
#define Adr_NX90_endat_ctrl1_app_endat_ctrl_strobe_cfg 0xFF801798U
#define DFLT_VAL_NX90_endat_ctrl_strobe_cfg            0x00000303U

#define MSK_NX90_endat_ctrl_strobe_cfg_low_len          0x000000ffU
#define SRT_NX90_endat_ctrl_strobe_cfg_low_len          0
#define DFLT_VAL_NX90_endat_ctrl_strobe_cfg_low_len     0x00000003U
#define DFLT_BF_VAL_NX90_endat_ctrl_strobe_cfg_low_len  0x00000003U
#define MSK_NX90_endat_ctrl_strobe_cfg_high_len         0x0000ff00U
#define SRT_NX90_endat_ctrl_strobe_cfg_high_len         8
#define DFLT_VAL_NX90_endat_ctrl_strobe_cfg_high_len    0x00000300U
#define DFLT_BF_VAL_NX90_endat_ctrl_strobe_cfg_high_len 0x00000003U

/* all used bits of 'NX90_endat_ctrl_strobe_cfg': */
#define MSK_USED_BITS_NX90_endat_ctrl_strobe_cfg 0x0000ffffU


/* ===================================================================== */

/* AREA canctrl */
/* Area of can_ctrl0_app, can_ctrl1_app */

/* ===================================================================== */

#define Addr_NX90_can_ctrl0_app 0xFF801900U
#define Addr_NX90_can_ctrl1_app 0xFF801980U

/* --------------------------------------------------------------------- */
/* Register canctrl_mode */
/* => CAN mode register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_mode           0x00000000U
#define Adr_NX90_can_ctrl0_app_canctrl_mode 0xFF801900U
#define Adr_NX90_can_ctrl1_app_canctrl_mode 0xFF801980U
#define DFLT_VAL_NX90_canctrl_mode          0x00000001U

#define MSK_NX90_canctrl_mode_reset_mode              0x00000001U
#define SRT_NX90_canctrl_mode_reset_mode              0
#define DFLT_VAL_NX90_canctrl_mode_reset_mode         0x00000001U
#define DFLT_BF_VAL_NX90_canctrl_mode_reset_mode      0x00000001U
#define MSK_NX90_canctrl_mode_listen_mode             0x00000002U
#define SRT_NX90_canctrl_mode_listen_mode             1
#define DFLT_VAL_NX90_canctrl_mode_listen_mode        0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_mode_listen_mode     0x00000000U
#define MSK_NX90_canctrl_mode_selftest                0x00000004U
#define SRT_NX90_canctrl_mode_selftest                2
#define DFLT_VAL_NX90_canctrl_mode_selftest           0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_mode_selftest        0x00000000U
#define MSK_NX90_canctrl_mode_acceptance_mode         0x00000008U
#define SRT_NX90_canctrl_mode_acceptance_mode         3
#define DFLT_VAL_NX90_canctrl_mode_acceptance_mode    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_mode_acceptance_mode 0x00000000U

/* all used bits of 'NX90_canctrl_mode': */
#define MSK_USED_BITS_NX90_canctrl_mode 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register canctrl_command */
/* => CAN command register */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_command           0x00000004U
#define Adr_NX90_can_ctrl0_app_canctrl_command 0xFF801904U
#define Adr_NX90_can_ctrl1_app_canctrl_command 0xFF801984U
#define DFLT_VAL_NX90_canctrl_command          0x00000000U

#define MSK_NX90_canctrl_command_tx_request              0x00000001U
#define SRT_NX90_canctrl_command_tx_request              0
#define DFLT_VAL_NX90_canctrl_command_tx_request         0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_command_tx_request      0x00000000U
#define MSK_NX90_canctrl_command_abort_tx                0x00000002U
#define SRT_NX90_canctrl_command_abort_tx                1
#define DFLT_VAL_NX90_canctrl_command_abort_tx           0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_command_abort_tx        0x00000000U
#define MSK_NX90_canctrl_command_release_rx_buf          0x00000004U
#define SRT_NX90_canctrl_command_release_rx_buf          2
#define DFLT_VAL_NX90_canctrl_command_release_rx_buf     0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_command_release_rx_buf  0x00000000U
#define MSK_NX90_canctrl_command_clr_overrun             0x00000008U
#define SRT_NX90_canctrl_command_clr_overrun             3
#define DFLT_VAL_NX90_canctrl_command_clr_overrun        0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_command_clr_overrun     0x00000000U
#define MSK_NX90_canctrl_command_self_rx_request         0x00000010U
#define SRT_NX90_canctrl_command_self_rx_request         4
#define DFLT_VAL_NX90_canctrl_command_self_rx_request    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_command_self_rx_request 0x00000000U

/* all used bits of 'NX90_canctrl_command': */
#define MSK_USED_BITS_NX90_canctrl_command 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register canctrl_status */
/* => CAN status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_status           0x00000008U
#define Adr_NX90_can_ctrl0_app_canctrl_status 0xFF801908U
#define Adr_NX90_can_ctrl1_app_canctrl_status 0xFF801988U

#define MSK_NX90_canctrl_status_rx_buf_status 0x00000001U
#define SRT_NX90_canctrl_status_rx_buf_status 0
#define MSK_NX90_canctrl_status_overrun       0x00000002U
#define SRT_NX90_canctrl_status_overrun       1
#define MSK_NX90_canctrl_status_tx_buf_status 0x00000004U
#define SRT_NX90_canctrl_status_tx_buf_status 2
#define MSK_NX90_canctrl_status_tx_complete   0x00000008U
#define SRT_NX90_canctrl_status_tx_complete   3
#define MSK_NX90_canctrl_status_rx_status     0x00000010U
#define SRT_NX90_canctrl_status_rx_status     4
#define MSK_NX90_canctrl_status_tx_status     0x00000020U
#define SRT_NX90_canctrl_status_tx_status     5
#define MSK_NX90_canctrl_status_error_status  0x00000040U
#define SRT_NX90_canctrl_status_error_status  6
#define MSK_NX90_canctrl_status_bus_status    0x00000080U
#define SRT_NX90_canctrl_status_bus_status    7

/* all used bits of 'NX90_canctrl_status': */
#define MSK_USED_BITS_NX90_canctrl_status 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_irq */
/* => CAN interrupt register */
/*    reading the register will clear all bits except rx_irq */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_irq           0x0000000CU
#define Adr_NX90_can_ctrl0_app_canctrl_irq 0xFF80190CU
#define Adr_NX90_can_ctrl1_app_canctrl_irq 0xFF80198CU

#define MSK_NX90_canctrl_irq_rx_irq          0x00000001U
#define SRT_NX90_canctrl_irq_rx_irq          0
#define MSK_NX90_canctrl_irq_tx_irq          0x00000002U
#define SRT_NX90_canctrl_irq_tx_irq          1
#define MSK_NX90_canctrl_irq_warning_irq     0x00000004U
#define SRT_NX90_canctrl_irq_warning_irq     2
#define MSK_NX90_canctrl_irq_overrun_irq     0x00000008U
#define SRT_NX90_canctrl_irq_overrun_irq     3
#define MSK_NX90_canctrl_irq_err_passive_irq 0x00000020U
#define SRT_NX90_canctrl_irq_err_passive_irq 5
#define MSK_NX90_canctrl_irq_arb_lost_irq    0x00000040U
#define SRT_NX90_canctrl_irq_arb_lost_irq    6
#define MSK_NX90_canctrl_irq_bus_error_irq   0x00000080U
#define SRT_NX90_canctrl_irq_bus_error_irq   7

/* all used bits of 'NX90_canctrl_irq': */
#define MSK_USED_BITS_NX90_canctrl_irq 0x000000efU

/* --------------------------------------------------------------------- */
/* Register canctrl_irq_en */
/* => CAN interrupt enable register */
/*    in not extended mode: acceptance_code_0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_irq_en           0x00000010U
#define Adr_NX90_can_ctrl0_app_canctrl_irq_en 0xFF801910U
#define Adr_NX90_can_ctrl1_app_canctrl_irq_en 0xFF801990U
#define DFLT_VAL_NX90_canctrl_irq_en          0x00000000U

#define MSK_NX90_canctrl_irq_en_rx_irq_en                  0x00000001U
#define SRT_NX90_canctrl_irq_en_rx_irq_en                  0
#define DFLT_VAL_NX90_canctrl_irq_en_rx_irq_en             0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_rx_irq_en          0x00000000U
#define MSK_NX90_canctrl_irq_en_tx_irq_en                  0x00000002U
#define SRT_NX90_canctrl_irq_en_tx_irq_en                  1
#define DFLT_VAL_NX90_canctrl_irq_en_tx_irq_en             0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_tx_irq_en          0x00000000U
#define MSK_NX90_canctrl_irq_en_warning_irq_en             0x00000004U
#define SRT_NX90_canctrl_irq_en_warning_irq_en             2
#define DFLT_VAL_NX90_canctrl_irq_en_warning_irq_en        0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_warning_irq_en     0x00000000U
#define MSK_NX90_canctrl_irq_en_overrun_irq_en             0x00000008U
#define SRT_NX90_canctrl_irq_en_overrun_irq_en             3
#define DFLT_VAL_NX90_canctrl_irq_en_overrun_irq_en        0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_overrun_irq_en     0x00000000U
#define MSK_NX90_canctrl_irq_en_err_passive_irq_en         0x00000020U
#define SRT_NX90_canctrl_irq_en_err_passive_irq_en         5
#define DFLT_VAL_NX90_canctrl_irq_en_err_passive_irq_en    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_err_passive_irq_en 0x00000000U
#define MSK_NX90_canctrl_irq_en_arb_lost_irq_en            0x00000040U
#define SRT_NX90_canctrl_irq_en_arb_lost_irq_en            6
#define DFLT_VAL_NX90_canctrl_irq_en_arb_lost_irq_en       0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_arb_lost_irq_en    0x00000000U
#define MSK_NX90_canctrl_irq_en_bus_error_irq_en           0x00000080U
#define SRT_NX90_canctrl_irq_en_bus_error_irq_en           7
#define DFLT_VAL_NX90_canctrl_irq_en_bus_error_irq_en      0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_irq_en_bus_error_irq_en   0x00000000U

/* all used bits of 'NX90_canctrl_irq_en': */
#define MSK_USED_BITS_NX90_canctrl_irq_en 0x000000efU

/* --------------------------------------------------------------------- */
/* Register canctrl_not_extended_acceptance_mask0 */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_not_extended_acceptance_mask0           0x00000014U
#define Adr_NX90_can_ctrl0_app_canctrl_not_extended_acceptance_mask0 0xFF801914U
#define Adr_NX90_can_ctrl1_app_canctrl_not_extended_acceptance_mask0 0xFF801994U

/* --------------------------------------------------------------------- */
/* Register canctrl_bus_timing0 */
/* => CAN bus timing register 0, only writable in reset mode */
/*    in not extended mode: acceptance_mask_0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_bus_timing0           0x00000018U
#define Adr_NX90_can_ctrl0_app_canctrl_bus_timing0 0xFF801918U
#define Adr_NX90_can_ctrl1_app_canctrl_bus_timing0 0xFF801998U
#define DFLT_VAL_NX90_canctrl_bus_timing0          0x00000000U

#define MSK_NX90_canctrl_bus_timing0_prescaler               0x000001ffU
#define SRT_NX90_canctrl_bus_timing0_prescaler               0
#define DFLT_VAL_NX90_canctrl_bus_timing0_prescaler          0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_bus_timing0_prescaler       0x00000000U
#define MSK_NX90_canctrl_bus_timing0_sync_jump_width         0x00000600U
#define SRT_NX90_canctrl_bus_timing0_sync_jump_width         9
#define DFLT_VAL_NX90_canctrl_bus_timing0_sync_jump_width    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_bus_timing0_sync_jump_width 0x00000000U

/* all used bits of 'NX90_canctrl_bus_timing0': */
#define MSK_USED_BITS_NX90_canctrl_bus_timing0 0x000007ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_bus_timing1 */
/* => CAN bus timing register 1, only writable in reset mode */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_bus_timing1           0x0000001CU
#define Adr_NX90_can_ctrl0_app_canctrl_bus_timing1 0xFF80191CU
#define Adr_NX90_can_ctrl1_app_canctrl_bus_timing1 0xFF80199CU
#define DFLT_VAL_NX90_canctrl_bus_timing1          0x00000000U

#define MSK_NX90_canctrl_bus_timing1_tseg1                0x0000003fU
#define SRT_NX90_canctrl_bus_timing1_tseg1                0
#define DFLT_VAL_NX90_canctrl_bus_timing1_tseg1           0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_bus_timing1_tseg1        0x00000000U
#define MSK_NX90_canctrl_bus_timing1_oversampling         0x00000080U
#define SRT_NX90_canctrl_bus_timing1_oversampling         7
#define DFLT_VAL_NX90_canctrl_bus_timing1_oversampling    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_bus_timing1_oversampling 0x00000000U
#define MSK_NX90_canctrl_bus_timing1_tseg2                0x00001f00U
#define SRT_NX90_canctrl_bus_timing1_tseg2                8
#define DFLT_VAL_NX90_canctrl_bus_timing1_tseg2           0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_bus_timing1_tseg2        0x00000000U

/* all used bits of 'NX90_canctrl_bus_timing1': */
#define MSK_USED_BITS_NX90_canctrl_bus_timing1 0x00001fbfU

/* --------------------------------------------------------------------- */
/* Register canctrl_not_extended_data0 */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_not_extended_data0           0x00000028U
#define Adr_NX90_can_ctrl0_app_canctrl_not_extended_data0 0xFF801928U
#define Adr_NX90_can_ctrl1_app_canctrl_not_extended_data0 0xFF8019A8U

/* --------------------------------------------------------------------- */
/* Register canctrl_arb_lost_capture */
/* => CAN arbitration lost capture register */
/*    This register contains information about the bit position of losing arbitration. */
/*    reading the register will clear all bits */
/*    in not extended mode: data1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_arb_lost_capture           0x0000002CU
#define Adr_NX90_can_ctrl0_app_canctrl_arb_lost_capture 0xFF80192CU
#define Adr_NX90_can_ctrl1_app_canctrl_arb_lost_capture 0xFF8019ACU

#define MSK_NX90_canctrl_arb_lost_capture_position 0x0000001fU
#define SRT_NX90_canctrl_arb_lost_capture_position 0

/* all used bits of 'NX90_canctrl_arb_lost_capture': */
#define MSK_USED_BITS_NX90_canctrl_arb_lost_capture 0x0000001fU

/* --------------------------------------------------------------------- */
/* Register canctrl_err_code_capture */
/* => CAN error code capture register */
/*    This register contains information about the type and location of errors on the bus. */
/*    reading the register will clear all bits */
/*    in not extended mode: data2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_err_code_capture           0x00000030U
#define Adr_NX90_can_ctrl0_app_canctrl_err_code_capture 0xFF801930U
#define Adr_NX90_can_ctrl1_app_canctrl_err_code_capture 0xFF8019B0U

#define MSK_NX90_canctrl_err_code_capture_segment   0x0000001fU
#define SRT_NX90_canctrl_err_code_capture_segment   0
#define MSK_NX90_canctrl_err_code_capture_direction 0x00000020U
#define SRT_NX90_canctrl_err_code_capture_direction 5
#define MSK_NX90_canctrl_err_code_capture_err_code  0x000000c0U
#define SRT_NX90_canctrl_err_code_capture_err_code  6

/* all used bits of 'NX90_canctrl_err_code_capture': */
#define MSK_USED_BITS_NX90_canctrl_err_code_capture 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_err_warning_limit */
/* => CAN error warning limit register, only writable in reset mode */
/*    in not extended mode: data3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_err_warning_limit           0x00000034U
#define Adr_NX90_can_ctrl0_app_canctrl_err_warning_limit 0xFF801934U
#define Adr_NX90_can_ctrl1_app_canctrl_err_warning_limit 0xFF8019B4U
#define DFLT_VAL_NX90_canctrl_err_warning_limit          0x00000060U

#define MSK_NX90_canctrl_err_warning_limit_limit         0x000000ffU
#define SRT_NX90_canctrl_err_warning_limit_limit         0
#define DFLT_VAL_NX90_canctrl_err_warning_limit_limit    0x00000060U
#define DFLT_BF_VAL_NX90_canctrl_err_warning_limit_limit 0x00000060U

/* all used bits of 'NX90_canctrl_err_warning_limit': */
#define MSK_USED_BITS_NX90_canctrl_err_warning_limit 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_rx_error_cnt */
/* => CAN RX error counter register, only writable in reset mode */
/*    The RX error counter register reflects the current value of the receive error counter. */
/*    If a bus-off event occurs, the RX error counter is initialized to logic 0. The time bus-off is valid, writing to this register has */
/*    no effect. */
/*    Note, that a CPU-forced content change of the RX error counter is only possible, if the reset mode was entered */
/*    previously. An error status change (see status register), an error warning or an error passive interrupt forced */
/*    by the new register content will not occur, until the reset mode is cancelled again. */
/*    in not extended mode: data4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_rx_error_cnt           0x00000038U
#define Adr_NX90_can_ctrl0_app_canctrl_rx_error_cnt 0xFF801938U
#define Adr_NX90_can_ctrl1_app_canctrl_rx_error_cnt 0xFF8019B8U
#define DFLT_VAL_NX90_canctrl_rx_error_cnt          0x00000000U

#define MSK_NX90_canctrl_rx_error_cnt_rx_err         0x000000ffU
#define SRT_NX90_canctrl_rx_error_cnt_rx_err         0
#define DFLT_VAL_NX90_canctrl_rx_error_cnt_rx_err    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_rx_error_cnt_rx_err 0x00000000U

/* all used bits of 'NX90_canctrl_rx_error_cnt': */
#define MSK_USED_BITS_NX90_canctrl_rx_error_cnt 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_tx_error_cnt */
/* => CAN TX error counter register, only writable in reset mode */
/*    The TX error counter register reflects the current value of the transmit error counter. */
/*    If a bus-off event occurs, the TX error counter is initialized to 127 to count the minimum */
/*    protocol-defined time (128 occurrences of the bus-free signal). Reading */
/*    the TX error counter during this time gives information about the status of the bus-off recovery. */
/*    If bus-off is active, a write access to TXERR in the range from 0 to 254 clears the bus-off flag and the controller will wait */
/*    for one occurrence of 11 consecutive recessive bits (bus-free) after the reset mode has been cleared. */
/*    Writing 255 to TXERR allows to initiate a CPU-driven bus-off event. It should be noted that a CPU-forced content change */
/*    of the TX error counter is only possible, if the reset mode was entered previously. An error or bus status change (see */
/*    status register), an error warning or an error passive interrupt forced by the new register content will not occur */
/*    until the reset mode is cancelled again. After leaving the reset mode, the new TX counter content is interpreted and the */
/*    bus-off event is performed in the same way, as if it was forced by a bus error event. That means, that the reset mode is */
/*    entered again, the TX error counter is initialized to 127, the RX counter is cleared and all concerned status and interrupt */
/*    register bits are set. */
/*    Clearing of reset mode now will perform the protocol-defined bus-off recovery sequence (waiting for 128 occurrences of */
/*    the bus-free signal). */
/*    If the reset mode is entered again before the end of bus-off recovery (TXERR > 0), bus-off keeps active and TXERR is */
/*    frozen. */
/*    in not extended mode: data5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_tx_error_cnt           0x0000003CU
#define Adr_NX90_can_ctrl0_app_canctrl_tx_error_cnt 0xFF80193CU
#define Adr_NX90_can_ctrl1_app_canctrl_tx_error_cnt 0xFF8019BCU
#define DFLT_VAL_NX90_canctrl_tx_error_cnt          0x00000000U

#define MSK_NX90_canctrl_tx_error_cnt_tx_err         0x000000ffU
#define SRT_NX90_canctrl_tx_error_cnt_tx_err         0
#define DFLT_VAL_NX90_canctrl_tx_error_cnt_tx_err    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_tx_error_cnt_tx_err 0x00000000U

/* all used bits of 'NX90_canctrl_tx_error_cnt': */
#define MSK_USED_BITS_NX90_canctrl_tx_error_cnt 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data0 */
/* => CAN data register 0 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 0 */
/*     Operating mode:   R:  Standard frame: Read RX frame information */
/*                           Extended frame: Read RX frame information */
/*                       W:  Standard frame: Write TX frame information */
/*                           Extended frame: Write TX frame information } */
/*    in not extended mode: data6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data0           0x00000040U
#define Adr_NX90_can_ctrl0_app_canctrl_data0 0xFF801940U
#define Adr_NX90_can_ctrl1_app_canctrl_data0 0xFF8019C0U
#define DFLT_VAL_NX90_canctrl_data0          0x00000000U

#define MSK_NX90_canctrl_data0_data         0x000000ffU
#define SRT_NX90_canctrl_data0_data         0
#define DFLT_VAL_NX90_canctrl_data0_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data0_data 0x00000000U

/* all used bits of 'NX90_canctrl_data0': */
#define MSK_USED_BITS_NX90_canctrl_data0 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data1 */
/* => CAN data register 1 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 1 */
/*     Operating mode:   R:  Standard frame: Read RX identifier 1 */
/*                           Extended frame: Read RX identifier 1 */
/*                       W:  Standard frame: Write TX identifier 1 */
/*                           Extended frame: Write TX identifier 1 } */
/*    in not extended mode: data7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data1           0x00000044U
#define Adr_NX90_can_ctrl0_app_canctrl_data1 0xFF801944U
#define Adr_NX90_can_ctrl1_app_canctrl_data1 0xFF8019C4U
#define DFLT_VAL_NX90_canctrl_data1          0x00000000U

#define MSK_NX90_canctrl_data1_data         0x000000ffU
#define SRT_NX90_canctrl_data1_data         0
#define DFLT_VAL_NX90_canctrl_data1_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data1_data 0x00000000U

/* all used bits of 'NX90_canctrl_data1': */
#define MSK_USED_BITS_NX90_canctrl_data1 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data2 */
/* => CAN data register 2 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 2 */
/*     Operating mode:   R:  Standard frame: Read RX identifier 2 */
/*                           Extended frame: Read RX identifier 2 */
/*                       W:  Standard frame: Write TX identifier 2 */
/*                           Extended frame: Write TX identifier 2 } */
/*    in not extended mode: data8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data2           0x00000048U
#define Adr_NX90_can_ctrl0_app_canctrl_data2 0xFF801948U
#define Adr_NX90_can_ctrl1_app_canctrl_data2 0xFF8019C8U
#define DFLT_VAL_NX90_canctrl_data2          0x00000000U

#define MSK_NX90_canctrl_data2_data         0x000000ffU
#define SRT_NX90_canctrl_data2_data         0
#define DFLT_VAL_NX90_canctrl_data2_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data2_data 0x00000000U

/* all used bits of 'NX90_canctrl_data2': */
#define MSK_USED_BITS_NX90_canctrl_data2 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data3 */
/* => CAN data register 3 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 3 */
/*     Operating mode:   R:  Standard frame: Read RX data 1 */
/*                           Extended frame: Read RX identifier 3 */
/*                       W:  Standard frame: Write TX data 1 */
/*                           Extended frame: Write TX identifier 3 } */
/*    in not extended mode: data9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data3           0x0000004CU
#define Adr_NX90_can_ctrl0_app_canctrl_data3 0xFF80194CU
#define Adr_NX90_can_ctrl1_app_canctrl_data3 0xFF8019CCU
#define DFLT_VAL_NX90_canctrl_data3          0x00000000U

#define MSK_NX90_canctrl_data3_data         0x000000ffU
#define SRT_NX90_canctrl_data3_data         0
#define DFLT_VAL_NX90_canctrl_data3_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data3_data 0x00000000U

/* all used bits of 'NX90_canctrl_data3': */
#define MSK_USED_BITS_NX90_canctrl_data3 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data4 */
/* => CAN data register 4 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 0 */
/*     Operating mode:   R:  Standard frame: Read RX data 2 */
/*                           Extended frame: Read RX identifier 4 */
/*                       W:  Standard frame: Write TX data 2 */
/*                           Extended frame: Write TX identifier 4 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data4           0x00000050U
#define Adr_NX90_can_ctrl0_app_canctrl_data4 0xFF801950U
#define Adr_NX90_can_ctrl1_app_canctrl_data4 0xFF8019D0U
#define DFLT_VAL_NX90_canctrl_data4          0x00000000U

#define MSK_NX90_canctrl_data4_data         0x000000ffU
#define SRT_NX90_canctrl_data4_data         0
#define DFLT_VAL_NX90_canctrl_data4_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data4_data 0x00000000U

/* all used bits of 'NX90_canctrl_data4': */
#define MSK_USED_BITS_NX90_canctrl_data4 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data5 */
/* => CAN data register 5 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 1 */
/*     Operating mode:   R:  Standard frame: Read RX data 3 */
/*                           Extended frame: Read RX data 1 */
/*                       W:  Standard frame: Write TX data 3 */
/*                           Extended frame: Write TX data 1 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data5           0x00000054U
#define Adr_NX90_can_ctrl0_app_canctrl_data5 0xFF801954U
#define Adr_NX90_can_ctrl1_app_canctrl_data5 0xFF8019D4U
#define DFLT_VAL_NX90_canctrl_data5          0x00000000U

#define MSK_NX90_canctrl_data5_data         0x000000ffU
#define SRT_NX90_canctrl_data5_data         0
#define DFLT_VAL_NX90_canctrl_data5_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data5_data 0x00000000U

/* all used bits of 'NX90_canctrl_data5': */
#define MSK_USED_BITS_NX90_canctrl_data5 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data6 */
/* => CAN data register 6 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 2 */
/*     Operating mode:   R:  Standard frame: Read RX data 4 */
/*                           Extended frame: Read RX data 2 */
/*                       W:  Standard frame: Write TX data 4 */
/*                           Extended frame: Write TX data 2 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data6           0x00000058U
#define Adr_NX90_can_ctrl0_app_canctrl_data6 0xFF801958U
#define Adr_NX90_can_ctrl1_app_canctrl_data6 0xFF8019D8U
#define DFLT_VAL_NX90_canctrl_data6          0x00000000U

#define MSK_NX90_canctrl_data6_data         0x000000ffU
#define SRT_NX90_canctrl_data6_data         0
#define DFLT_VAL_NX90_canctrl_data6_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data6_data 0x00000000U

/* all used bits of 'NX90_canctrl_data6': */
#define MSK_USED_BITS_NX90_canctrl_data6 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data7 */
/* => CAN data register 7 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 3 */
/*     Operating mode:   R:  Standard frame: Read RX data 5 */
/*                           Extended frame: Read RX data 3 */
/*                       W:  Standard frame: Write TX data 5 */
/*                           Extended frame: Write TX data 3 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data7           0x0000005CU
#define Adr_NX90_can_ctrl0_app_canctrl_data7 0xFF80195CU
#define Adr_NX90_can_ctrl1_app_canctrl_data7 0xFF8019DCU
#define DFLT_VAL_NX90_canctrl_data7          0x00000000U

#define MSK_NX90_canctrl_data7_data         0x000000ffU
#define SRT_NX90_canctrl_data7_data         0
#define DFLT_VAL_NX90_canctrl_data7_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data7_data 0x00000000U

/* all used bits of 'NX90_canctrl_data7': */
#define MSK_USED_BITS_NX90_canctrl_data7 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data8 */
/* => CAN data register 8 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: Read RX data 6 */
/*                           Extended frame: Read RX data 4 */
/*                       W:  Standard frame: Write TX data 6 */
/*                           Extended frame: Write TX data 4 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data8           0x00000060U
#define Adr_NX90_can_ctrl0_app_canctrl_data8 0xFF801960U
#define Adr_NX90_can_ctrl1_app_canctrl_data8 0xFF8019E0U
#define DFLT_VAL_NX90_canctrl_data8          0x00000000U

#define MSK_NX90_canctrl_data8_data         0x000000ffU
#define SRT_NX90_canctrl_data8_data         0
#define DFLT_VAL_NX90_canctrl_data8_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data8_data 0x00000000U

/* all used bits of 'NX90_canctrl_data8': */
#define MSK_USED_BITS_NX90_canctrl_data8 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data9 */
/* => CAN data register 9 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: Read RX data 7 */
/*                           Extended frame: Read RX data 5 */
/*                       W:  Standard frame: Write TX data 7 */
/*                           Extended frame: Write TX data 5 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data9           0x00000064U
#define Adr_NX90_can_ctrl0_app_canctrl_data9 0xFF801964U
#define Adr_NX90_can_ctrl1_app_canctrl_data9 0xFF8019E4U
#define DFLT_VAL_NX90_canctrl_data9          0x00000000U

#define MSK_NX90_canctrl_data9_data         0x000000ffU
#define SRT_NX90_canctrl_data9_data         0
#define DFLT_VAL_NX90_canctrl_data9_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data9_data 0x00000000U

/* all used bits of 'NX90_canctrl_data9': */
#define MSK_USED_BITS_NX90_canctrl_data9 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data10 */
/* => CAN data register 10 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: Read RX data 8 */
/*                           Extended frame: Read RX data 6 */
/*                       W:  Standard frame: Write TX data 8 */
/*                           Extended frame: Write TX data 6 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data10           0x00000068U
#define Adr_NX90_can_ctrl0_app_canctrl_data10 0xFF801968U
#define Adr_NX90_can_ctrl1_app_canctrl_data10 0xFF8019E8U
#define DFLT_VAL_NX90_canctrl_data10          0x00000000U

#define MSK_NX90_canctrl_data10_data         0x000000ffU
#define SRT_NX90_canctrl_data10_data         0
#define DFLT_VAL_NX90_canctrl_data10_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data10_data 0x00000000U

/* all used bits of 'NX90_canctrl_data10': */
#define MSK_USED_BITS_NX90_canctrl_data10 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data11 */
/* => CAN data register 11 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: reserved */
/*                           Extended frame: Read RX data 7 */
/*                       W:  Standard frame: reserved */
/*                           Extended frame: Write TX data 7 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data11           0x0000006CU
#define Adr_NX90_can_ctrl0_app_canctrl_data11 0xFF80196CU
#define Adr_NX90_can_ctrl1_app_canctrl_data11 0xFF8019ECU
#define DFLT_VAL_NX90_canctrl_data11          0x00000000U

#define MSK_NX90_canctrl_data11_data         0x000000ffU
#define SRT_NX90_canctrl_data11_data         0
#define DFLT_VAL_NX90_canctrl_data11_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data11_data 0x00000000U

/* all used bits of 'NX90_canctrl_data11': */
#define MSK_USED_BITS_NX90_canctrl_data11 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_data12 */
/* => CAN data register 12 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: reserved */
/*                           Extended frame: Read RX data 8 */
/*                       W:  Standard frame: reserved */
/*                           Extended frame: Write TX data 8 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data12           0x00000070U
#define Adr_NX90_can_ctrl0_app_canctrl_data12 0xFF801970U
#define Adr_NX90_can_ctrl1_app_canctrl_data12 0xFF8019F0U
#define DFLT_VAL_NX90_canctrl_data12          0x00000000U

#define MSK_NX90_canctrl_data12_data         0x000000ffU
#define SRT_NX90_canctrl_data12_data         0
#define DFLT_VAL_NX90_canctrl_data12_data    0x00000000U
#define DFLT_BF_VAL_NX90_canctrl_data12_data 0x00000000U

/* all used bits of 'NX90_canctrl_data12': */
#define MSK_USED_BITS_NX90_canctrl_data12 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register canctrl_rx_message_cnt */
/* => CAN RX message counter register */
/*    Reflects the number of messages available within the RXFIFO. The value is */
/*    incremented with each receive event and decremented by the release receive */
/*    buffer command. After any reset event, this register is cleared. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_rx_message_cnt           0x00000074U
#define Adr_NX90_can_ctrl0_app_canctrl_rx_message_cnt 0xFF801974U
#define Adr_NX90_can_ctrl1_app_canctrl_rx_message_cnt 0xFF8019F4U

#define MSK_NX90_canctrl_rx_message_cnt_rx_msg_cnt 0x0000007fU
#define SRT_NX90_canctrl_rx_message_cnt_rx_msg_cnt 0

/* all used bits of 'NX90_canctrl_rx_message_cnt': */
#define MSK_USED_BITS_NX90_canctrl_rx_message_cnt 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register canctrl_mode_control */
/* => CAN mode control register, only writable in reset mode */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_mode_control           0x0000007CU
#define Adr_NX90_can_ctrl0_app_canctrl_mode_control 0xFF80197CU
#define Adr_NX90_can_ctrl1_app_canctrl_mode_control 0xFF8019FCU

#define MSK_NX90_canctrl_mode_control_mode 0x00000080U
#define SRT_NX90_canctrl_mode_control_mode 7

/* all used bits of 'NX90_canctrl_mode_control': */
#define MSK_USED_BITS_NX90_canctrl_mode_control 0x00000080U


/* ===================================================================== */

/* AREA spi */
/* Area of spi0_app, spi1_app, spi2_app, spi_xpic_app */

/* ===================================================================== */

#define Addr_NX90_spi0_app     0xFF801A00U
#define Addr_NX90_spi1_app     0xFF801A40U
#define Addr_NX90_spi2_app     0xFF801A80U
#define Addr_NX90_spi_xpic_app 0xFF900380U

/* --------------------------------------------------------------------- */
/* Register spi_cr0 */
/* => spi control register 0 */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_cr0          0x00000000U
#define Adr_NX90_spi0_app_spi_cr0     0xFF801A00U
#define Adr_NX90_spi1_app_spi_cr0     0xFF801A40U
#define Adr_NX90_spi2_app_spi_cr0     0xFF801A80U
#define Adr_NX90_spi_xpic_app_spi_cr0 0xFF900380U
#define DFLT_VAL_NX90_spi_cr0         0x80080007U

#define MSK_NX90_spi_cr0_datasize                0x0000000fU
#define SRT_NX90_spi_cr0_datasize                0
#define DFLT_VAL_NX90_spi_cr0_datasize           0x00000007U
#define DFLT_BF_VAL_NX90_spi_cr0_datasize        0x00000007U
#define MSK_NX90_spi_cr0_SPO                     0x00000040U
#define SRT_NX90_spi_cr0_SPO                     6
#define DFLT_VAL_NX90_spi_cr0_SPO                0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr0_SPO             0x00000000U
#define MSK_NX90_spi_cr0_SPH                     0x00000080U
#define SRT_NX90_spi_cr0_SPH                     7
#define DFLT_VAL_NX90_spi_cr0_SPH                0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr0_SPH             0x00000000U
#define MSK_NX90_spi_cr0_sck_muladd              0x000fff00U
#define SRT_NX90_spi_cr0_sck_muladd              8
#define DFLT_VAL_NX90_spi_cr0_sck_muladd         0x00080000U
#define DFLT_BF_VAL_NX90_spi_cr0_sck_muladd      0x00000800U
#define MSK_NX90_spi_cr0_format                  0x03000000U
#define SRT_NX90_spi_cr0_format                  24
#define DFLT_VAL_NX90_spi_cr0_format             0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr0_format          0x00000000U
#define MSK_NX90_spi_cr0_filter_in               0x08000000U
#define SRT_NX90_spi_cr0_filter_in               27
#define DFLT_VAL_NX90_spi_cr0_filter_in          0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr0_filter_in       0x00000000U
#define MSK_NX90_spi_cr0_slave_sig_early         0x10000000U
#define SRT_NX90_spi_cr0_slave_sig_early         28
#define DFLT_VAL_NX90_spi_cr0_slave_sig_early    0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr0_slave_sig_early 0x00000000U
#define MSK_NX90_spi_cr0_netx100_comp            0x80000000U
#define SRT_NX90_spi_cr0_netx100_comp            31
#define DFLT_VAL_NX90_spi_cr0_netx100_comp       0x80000000U
#define DFLT_BF_VAL_NX90_spi_cr0_netx100_comp    0x00000001U

/* all used bits of 'NX90_spi_cr0': */
#define MSK_USED_BITS_NX90_spi_cr0 0x9b0fffcfU

/* --------------------------------------------------------------------- */
/* Register spi_cr1 */
/* => spi control register 1 */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_cr1          0x00000004U
#define Adr_NX90_spi0_app_spi_cr1     0xFF801A04U
#define Adr_NX90_spi1_app_spi_cr1     0xFF801A44U
#define Adr_NX90_spi2_app_spi_cr1     0xFF801A84U
#define Adr_NX90_spi_xpic_app_spi_cr1 0xFF900384U
#define DFLT_VAL_NX90_spi_cr1         0x08080000U

#define MSK_NX90_spi_cr1_LBM                 0x00000001U
#define SRT_NX90_spi_cr1_LBM                 0
#define DFLT_VAL_NX90_spi_cr1_LBM            0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_LBM         0x00000000U
#define MSK_NX90_spi_cr1_SSE                 0x00000002U
#define SRT_NX90_spi_cr1_SSE                 1
#define DFLT_VAL_NX90_spi_cr1_SSE            0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_SSE         0x00000000U
#define MSK_NX90_spi_cr1_MS                  0x00000004U
#define SRT_NX90_spi_cr1_MS                  2
#define DFLT_VAL_NX90_spi_cr1_MS             0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_MS          0x00000000U
#define MSK_NX90_spi_cr1_SOD                 0x00000008U
#define SRT_NX90_spi_cr1_SOD                 3
#define DFLT_VAL_NX90_spi_cr1_SOD            0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_SOD         0x00000000U
#define MSK_NX90_spi_cr1_fss                 0x00000700U
#define SRT_NX90_spi_cr1_fss                 8
#define DFLT_VAL_NX90_spi_cr1_fss            0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_fss         0x00000000U
#define MSK_NX90_spi_cr1_fss_static          0x00000800U
#define SRT_NX90_spi_cr1_fss_static          11
#define DFLT_VAL_NX90_spi_cr1_fss_static     0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_fss_static  0x00000000U
#define MSK_NX90_spi_cr1_tx_fifo_wm          0x000f0000U
#define SRT_NX90_spi_cr1_tx_fifo_wm          16
#define DFLT_VAL_NX90_spi_cr1_tx_fifo_wm     0x00080000U
#define DFLT_BF_VAL_NX90_spi_cr1_tx_fifo_wm  0x00000008U
#define MSK_NX90_spi_cr1_tx_fifo_clr         0x00100000U
#define SRT_NX90_spi_cr1_tx_fifo_clr         20
#define DFLT_VAL_NX90_spi_cr1_tx_fifo_clr    0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_tx_fifo_clr 0x00000000U
#define MSK_NX90_spi_cr1_rx_fifo_wm          0x0f000000U
#define SRT_NX90_spi_cr1_rx_fifo_wm          24
#define DFLT_VAL_NX90_spi_cr1_rx_fifo_wm     0x08000000U
#define DFLT_BF_VAL_NX90_spi_cr1_rx_fifo_wm  0x00000008U
#define MSK_NX90_spi_cr1_rx_fifo_clr         0x10000000U
#define SRT_NX90_spi_cr1_rx_fifo_clr         28
#define DFLT_VAL_NX90_spi_cr1_rx_fifo_clr    0x00000000U
#define DFLT_BF_VAL_NX90_spi_cr1_rx_fifo_clr 0x00000000U

/* all used bits of 'NX90_spi_cr1': */
#define MSK_USED_BITS_NX90_spi_cr1 0x1f1f0f0fU

/* --------------------------------------------------------------------- */
/* Register spi_dr */
/* => spi data register (DR) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    read access: received data byte is delivered from receive FIFO */
/*    write access: send data byte is written to send FIFO */
/*    Both, receive and transmit FIFO have a depth of 16. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_dr          0x00000008U
#define Adr_NX90_spi0_app_spi_dr     0xFF801A08U
#define Adr_NX90_spi1_app_spi_dr     0xFF801A48U
#define Adr_NX90_spi2_app_spi_dr     0xFF801A88U
#define Adr_NX90_spi_xpic_app_spi_dr 0xFF900388U
#define DFLT_VAL_NX90_spi_dr         0x00000000U

#define MSK_NX90_spi_dr_data         0x0001ffffU
#define SRT_NX90_spi_dr_data         0
#define DFLT_VAL_NX90_spi_dr_data    0x00000000U
#define DFLT_BF_VAL_NX90_spi_dr_data 0x00000000U

/* all used bits of 'NX90_spi_dr': */
#define MSK_USED_BITS_NX90_spi_dr 0x0001ffffU

/* --------------------------------------------------------------------- */
/* Register spi_sr */
/* => read only spi status register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    SPI master mode: MISO-input-data will be stored in the receive FIFO, transmit FIFO generates MOSI-output-data */
/*    SPI slave mode: MOSI-input-data will be stored in the receive FIFO, transmit FIFO generates MISO-output-data */
/*    Shows the current status of the spi interface. */
/*    Both, receive and transmit FIFO have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_sr          0x0000000CU
#define Adr_NX90_spi0_app_spi_sr     0xFF801A0CU
#define Adr_NX90_spi1_app_spi_sr     0xFF801A4CU
#define Adr_NX90_spi2_app_spi_sr     0xFF801A8CU
#define Adr_NX90_spi_xpic_app_spi_sr 0xFF90038CU

#define MSK_NX90_spi_sr_TFE              0x00000001U
#define SRT_NX90_spi_sr_TFE              0
#define MSK_NX90_spi_sr_TNF              0x00000002U
#define SRT_NX90_spi_sr_TNF              1
#define MSK_NX90_spi_sr_RNE              0x00000004U
#define SRT_NX90_spi_sr_RNE              2
#define MSK_NX90_spi_sr_RFF              0x00000008U
#define SRT_NX90_spi_sr_RFF              3
#define MSK_NX90_spi_sr_BSY              0x00000010U
#define SRT_NX90_spi_sr_BSY              4
#define MSK_NX90_spi_sr_tx_fifo_level    0x001f0000U
#define SRT_NX90_spi_sr_tx_fifo_level    16
#define MSK_NX90_spi_sr_tx_fifo_err_ovfl 0x00400000U
#define SRT_NX90_spi_sr_tx_fifo_err_ovfl 22
#define MSK_NX90_spi_sr_tx_fifo_err_undr 0x00800000U
#define SRT_NX90_spi_sr_tx_fifo_err_undr 23
#define MSK_NX90_spi_sr_rx_fifo_level    0x1f000000U
#define SRT_NX90_spi_sr_rx_fifo_level    24
#define MSK_NX90_spi_sr_rx_fifo_err_ovfl 0x40000000U
#define SRT_NX90_spi_sr_rx_fifo_err_ovfl 30
#define MSK_NX90_spi_sr_rx_fifo_err_undr 0x80000000U
#define SRT_NX90_spi_sr_rx_fifo_err_undr 31

/* all used bits of 'NX90_spi_sr': */
#define MSK_USED_BITS_NX90_spi_sr 0xdfdf001fU

/* --------------------------------------------------------------------- */
/* Register spi_cpsr */
/* => Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    spi clock prescale register */
/*    No clock predeviding is done. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_cpsr          0x00000010U
#define Adr_NX90_spi0_app_spi_cpsr     0xFF801A10U
#define Adr_NX90_spi1_app_spi_cpsr     0xFF801A50U
#define Adr_NX90_spi2_app_spi_cpsr     0xFF801A90U
#define Adr_NX90_spi_xpic_app_spi_cpsr 0xFF900390U
#define DFLT_VAL_NX90_spi_cpsr         0x00000000U

#define MSK_NX90_spi_cpsr_CPSDVSR         0x000000ffU
#define SRT_NX90_spi_cpsr_CPSDVSR         0
#define DFLT_VAL_NX90_spi_cpsr_CPSDVSR    0x00000000U
#define DFLT_BF_VAL_NX90_spi_cpsr_CPSDVSR 0x00000000U

/* all used bits of 'NX90_spi_cpsr': */
#define MSK_USED_BITS_NX90_spi_cpsr 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register spi_imsc */
/* => SPI Interrupt Mask Set and Clear register: */
/*    IRQ mask is an AND-mask: only raw interrupts with mask bit set can generate a module IRQ to CPU. */
/*    In addition, the corresponding interrupt is cleared. */
/*    Note: The functionality of this register is similar to the corresponding SQI register sqi_irq_mask. */
/*          However in contrast to this register, setting bits in sqi_irq_mask does not clear the corresponding interrupts. */
/*    Note: Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    Note: Both, receive and transmit FIFO have a depth of 16. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_imsc          0x00000014U
#define Adr_NX90_spi0_app_spi_imsc     0xFF801A14U
#define Adr_NX90_spi1_app_spi_imsc     0xFF801A54U
#define Adr_NX90_spi2_app_spi_imsc     0xFF801A94U
#define Adr_NX90_spi_xpic_app_spi_imsc 0xFF900394U
#define DFLT_VAL_NX90_spi_imsc         0x00000000U

#define MSK_NX90_spi_imsc_RORIM          0x00000001U
#define SRT_NX90_spi_imsc_RORIM          0
#define DFLT_VAL_NX90_spi_imsc_RORIM     0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_RORIM  0x00000000U
#define MSK_NX90_spi_imsc_RTIM           0x00000002U
#define SRT_NX90_spi_imsc_RTIM           1
#define DFLT_VAL_NX90_spi_imsc_RTIM      0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_RTIM   0x00000000U
#define MSK_NX90_spi_imsc_RXIM           0x00000004U
#define SRT_NX90_spi_imsc_RXIM           2
#define DFLT_VAL_NX90_spi_imsc_RXIM      0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_RXIM   0x00000000U
#define MSK_NX90_spi_imsc_TXIM           0x00000008U
#define SRT_NX90_spi_imsc_TXIM           3
#define DFLT_VAL_NX90_spi_imsc_TXIM      0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_TXIM   0x00000000U
#define MSK_NX90_spi_imsc_rxneim         0x00000010U
#define SRT_NX90_spi_imsc_rxneim         4
#define DFLT_VAL_NX90_spi_imsc_rxneim    0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_rxneim 0x00000000U
#define MSK_NX90_spi_imsc_rxfim          0x00000020U
#define SRT_NX90_spi_imsc_rxfim          5
#define DFLT_VAL_NX90_spi_imsc_rxfim     0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_rxfim  0x00000000U
#define MSK_NX90_spi_imsc_txeim          0x00000040U
#define SRT_NX90_spi_imsc_txeim          6
#define DFLT_VAL_NX90_spi_imsc_txeim     0x00000000U
#define DFLT_BF_VAL_NX90_spi_imsc_txeim  0x00000000U

/* all used bits of 'NX90_spi_imsc': */
#define MSK_USED_BITS_NX90_spi_imsc 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register spi_ris */
/* => spi interrupt state before masking register (raw interrupt) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    Both, receive and transmit FIFO have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_ris          0x00000018U
#define Adr_NX90_spi0_app_spi_ris     0xFF801A18U
#define Adr_NX90_spi1_app_spi_ris     0xFF801A58U
#define Adr_NX90_spi2_app_spi_ris     0xFF801A98U
#define Adr_NX90_spi_xpic_app_spi_ris 0xFF900398U

#define MSK_NX90_spi_ris_RORRIS  0x00000001U
#define SRT_NX90_spi_ris_RORRIS  0
#define MSK_NX90_spi_ris_RTRIS   0x00000002U
#define SRT_NX90_spi_ris_RTRIS   1
#define MSK_NX90_spi_ris_RXRIS   0x00000004U
#define SRT_NX90_spi_ris_RXRIS   2
#define MSK_NX90_spi_ris_TXRIS   0x00000008U
#define SRT_NX90_spi_ris_TXRIS   3
#define MSK_NX90_spi_ris_rxneris 0x00000010U
#define SRT_NX90_spi_ris_rxneris 4
#define MSK_NX90_spi_ris_rxfris  0x00000020U
#define SRT_NX90_spi_ris_rxfris  5
#define MSK_NX90_spi_ris_txeris  0x00000040U
#define SRT_NX90_spi_ris_txeris  6

/* all used bits of 'NX90_spi_ris': */
#define MSK_USED_BITS_NX90_spi_ris 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register spi_mis */
/* => spi interrupt status register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    Both, receive and transmit FIFO have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_mis          0x0000001CU
#define Adr_NX90_spi0_app_spi_mis     0xFF801A1CU
#define Adr_NX90_spi1_app_spi_mis     0xFF801A5CU
#define Adr_NX90_spi2_app_spi_mis     0xFF801A9CU
#define Adr_NX90_spi_xpic_app_spi_mis 0xFF90039CU

#define MSK_NX90_spi_mis_RORMIS  0x00000001U
#define SRT_NX90_spi_mis_RORMIS  0
#define MSK_NX90_spi_mis_RTMIS   0x00000002U
#define SRT_NX90_spi_mis_RTMIS   1
#define MSK_NX90_spi_mis_RXMIS   0x00000004U
#define SRT_NX90_spi_mis_RXMIS   2
#define MSK_NX90_spi_mis_TXMIS   0x00000008U
#define SRT_NX90_spi_mis_TXMIS   3
#define MSK_NX90_spi_mis_rxnemis 0x00000010U
#define SRT_NX90_spi_mis_rxnemis 4
#define MSK_NX90_spi_mis_rxfmis  0x00000020U
#define SRT_NX90_spi_mis_rxfmis  5
#define MSK_NX90_spi_mis_txemis  0x00000040U
#define SRT_NX90_spi_mis_txemis  6

/* all used bits of 'NX90_spi_mis': */
#define MSK_USED_BITS_NX90_spi_mis 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register spi_icr */
/* => spi interrupt clear register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    interrupt is cleard by writing "1" to the according bit */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_icr          0x00000020U
#define Adr_NX90_spi0_app_spi_icr     0xFF801A20U
#define Adr_NX90_spi1_app_spi_icr     0xFF801A60U
#define Adr_NX90_spi2_app_spi_icr     0xFF801AA0U
#define Adr_NX90_spi_xpic_app_spi_icr 0xFF9003A0U
#define DFLT_VAL_NX90_spi_icr         0x00000000U

#define MSK_NX90_spi_icr_RORIC          0x00000001U
#define SRT_NX90_spi_icr_RORIC          0
#define DFLT_VAL_NX90_spi_icr_RORIC     0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_RORIC  0x00000000U
#define MSK_NX90_spi_icr_RTIC           0x00000002U
#define SRT_NX90_spi_icr_RTIC           1
#define DFLT_VAL_NX90_spi_icr_RTIC      0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_RTIC   0x00000000U
#define MSK_NX90_spi_icr_RXIC           0x00000004U
#define SRT_NX90_spi_icr_RXIC           2
#define DFLT_VAL_NX90_spi_icr_RXIC      0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_RXIC   0x00000000U
#define MSK_NX90_spi_icr_TXIC           0x00000008U
#define SRT_NX90_spi_icr_TXIC           3
#define DFLT_VAL_NX90_spi_icr_TXIC      0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_TXIC   0x00000000U
#define MSK_NX90_spi_icr_rxneic         0x00000010U
#define SRT_NX90_spi_icr_rxneic         4
#define DFLT_VAL_NX90_spi_icr_rxneic    0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_rxneic 0x00000000U
#define MSK_NX90_spi_icr_rxfic          0x00000020U
#define SRT_NX90_spi_icr_rxfic          5
#define DFLT_VAL_NX90_spi_icr_rxfic     0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_rxfic  0x00000000U
#define MSK_NX90_spi_icr_txeic          0x00000040U
#define SRT_NX90_spi_icr_txeic          6
#define DFLT_VAL_NX90_spi_icr_txeic     0x00000000U
#define DFLT_BF_VAL_NX90_spi_icr_txeic  0x00000000U

/* all used bits of 'NX90_spi_icr': */
#define MSK_USED_BITS_NX90_spi_icr 0x0000007fU

/* --------------------------------------------------------------------- */
/* Register spi_dmacr */
/* => spi DMA control register */
/*    Only single transfer requests will be generated by this module. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_dmacr          0x00000028U
#define Adr_NX90_spi0_app_spi_dmacr     0xFF801A28U
#define Adr_NX90_spi1_app_spi_dmacr     0xFF801A68U
#define Adr_NX90_spi2_app_spi_dmacr     0xFF801AA8U
#define Adr_NX90_spi_xpic_app_spi_dmacr 0xFF9003A8U
#define DFLT_VAL_NX90_spi_dmacr         0x00000000U

#define MSK_NX90_spi_dmacr_RXDMAE         0x00000001U
#define SRT_NX90_spi_dmacr_RXDMAE         0
#define DFLT_VAL_NX90_spi_dmacr_RXDMAE    0x00000000U
#define DFLT_BF_VAL_NX90_spi_dmacr_RXDMAE 0x00000000U
#define MSK_NX90_spi_dmacr_TXDMAE         0x00000002U
#define SRT_NX90_spi_dmacr_TXDMAE         1
#define DFLT_VAL_NX90_spi_dmacr_TXDMAE    0x00000000U
#define DFLT_BF_VAL_NX90_spi_dmacr_TXDMAE 0x00000000U

/* all used bits of 'NX90_spi_dmacr': */
#define MSK_USED_BITS_NX90_spi_dmacr 0x00000003U

/* --------------------------------------------------------------------- */
/* Register spi_data_register */
/* => netx100/500 compliant spi data register (DR) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500 */
/*    2 data bytes with valid bits */
/*    During write-access data_byte_1 and dr_valid1 must not be used. dr_valid0 must be set. */
/*    In netx50 and later versions both, receive and transmit FIFO have a depth of 16, fill-values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500-FIFOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_data_register          0x00000030U
#define Adr_NX90_spi0_app_spi_data_register     0xFF801A30U
#define Adr_NX90_spi1_app_spi_data_register     0xFF801A70U
#define Adr_NX90_spi2_app_spi_data_register     0xFF801AB0U
#define Adr_NX90_spi_xpic_app_spi_data_register 0xFF9003B0U
#define DFLT_VAL_NX90_spi_data_register         0x00000000U

#define MSK_NX90_spi_data_register_data_byte_0         0x000000ffU
#define SRT_NX90_spi_data_register_data_byte_0         0
#define DFLT_VAL_NX90_spi_data_register_data_byte_0    0x00000000U
#define DFLT_BF_VAL_NX90_spi_data_register_data_byte_0 0x00000000U
#define MSK_NX90_spi_data_register_data_byte_1         0x0000ff00U
#define SRT_NX90_spi_data_register_data_byte_1         8
#define DFLT_VAL_NX90_spi_data_register_data_byte_1    0x00000000U
#define DFLT_BF_VAL_NX90_spi_data_register_data_byte_1 0x00000000U
#define MSK_NX90_spi_data_register_dr_valid0           0x00010000U
#define SRT_NX90_spi_data_register_dr_valid0           16
#define DFLT_VAL_NX90_spi_data_register_dr_valid0      0x00000000U
#define DFLT_BF_VAL_NX90_spi_data_register_dr_valid0   0x00000000U
#define MSK_NX90_spi_data_register_dr_valid1           0x00020000U
#define SRT_NX90_spi_data_register_dr_valid1           17
#define DFLT_VAL_NX90_spi_data_register_dr_valid1      0x00000000U
#define DFLT_BF_VAL_NX90_spi_data_register_dr_valid1   0x00000000U

/* all used bits of 'NX90_spi_data_register': */
#define MSK_USED_BITS_NX90_spi_data_register 0x0003ffffU

/* --------------------------------------------------------------------- */
/* Register spi_status_register */
/* => netx100/500 compliant spi status register (SR): */
/*    Shows the actual status of the spi interface. */
/*    Bits 24..18 show occured interrupts, */
/*    writing ones into these bits deletes the interrupts. */
/*    Writing into other bits has no effect. */
/*    In netx50 and later versions both, receive and transmit FIFO have a depth of 16, fill-values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500-FIFOs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_status_register          0x00000034U
#define Adr_NX90_spi0_app_spi_status_register     0xFF801A34U
#define Adr_NX90_spi1_app_spi_status_register     0xFF801A74U
#define Adr_NX90_spi2_app_spi_status_register     0xFF801AB4U
#define Adr_NX90_spi_xpic_app_spi_status_register 0xFF9003B4U

#define MSK_NX90_spi_status_register_SR_in_fuel_val  0x000001ffU
#define SRT_NX90_spi_status_register_SR_in_fuel_val  0
#define MSK_NX90_spi_status_register_SR_out_fuel_val 0x0003fe00U
#define SRT_NX90_spi_status_register_SR_out_fuel_val 9
#define MSK_NX90_spi_status_register_SR_in_fuel      0x00040000U
#define SRT_NX90_spi_status_register_SR_in_fuel      18
#define MSK_NX90_spi_status_register_SR_in_recdata   0x00080000U
#define SRT_NX90_spi_status_register_SR_in_recdata   19
#define MSK_NX90_spi_status_register_SR_in_full      0x00100000U
#define SRT_NX90_spi_status_register_SR_in_full      20
#define MSK_NX90_spi_status_register_SR_out_fuel     0x00200000U
#define SRT_NX90_spi_status_register_SR_out_fuel     21
#define MSK_NX90_spi_status_register_SR_out_fw       0x00400000U
#define SRT_NX90_spi_status_register_SR_out_fw       22
#define MSK_NX90_spi_status_register_SR_out_empty    0x00800000U
#define SRT_NX90_spi_status_register_SR_out_empty    23
#define MSK_NX90_spi_status_register_SR_out_full     0x01000000U
#define SRT_NX90_spi_status_register_SR_out_full     24
#define MSK_NX90_spi_status_register_SR_selected     0x02000000U
#define SRT_NX90_spi_status_register_SR_selected     25

/* all used bits of 'NX90_spi_status_register': */
#define MSK_USED_BITS_NX90_spi_status_register 0x03ffffffU

/* --------------------------------------------------------------------- */
/* Register spi_control_register */
/* => netx100/500 compliant spi control register (CR) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_control_register          0x00000038U
#define Adr_NX90_spi0_app_spi_control_register     0xFF801A38U
#define Adr_NX90_spi1_app_spi_control_register     0xFF801A78U
#define Adr_NX90_spi2_app_spi_control_register     0xFF801AB8U
#define Adr_NX90_spi_xpic_app_spi_control_register 0xFF9003B8U
#define DFLT_VAL_NX90_spi_control_register         0x00000000U

#define MSK_NX90_spi_control_register_CR_softreset           0x00000001U
#define SRT_NX90_spi_control_register_CR_softreset           0
#define DFLT_VAL_NX90_spi_control_register_CR_softreset      0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_softreset   0x00000000U
#define MSK_NX90_spi_control_register_CR_speed               0x0000001eU
#define SRT_NX90_spi_control_register_CR_speed               1
#define DFLT_VAL_NX90_spi_control_register_CR_speed          0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_speed       0x00000000U
#define MSK_NX90_spi_control_register_CR_read                0x00000040U
#define SRT_NX90_spi_control_register_CR_read                6
#define DFLT_VAL_NX90_spi_control_register_CR_read           0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_read        0x00000000U
#define MSK_NX90_spi_control_register_CR_write               0x00000080U
#define SRT_NX90_spi_control_register_CR_write               7
#define DFLT_VAL_NX90_spi_control_register_CR_write          0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_write       0x00000000U
#define MSK_NX90_spi_control_register_CR_ss                  0x00000700U
#define SRT_NX90_spi_control_register_CR_ss                  8
#define DFLT_VAL_NX90_spi_control_register_CR_ss             0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_ss          0x00000000U
#define MSK_NX90_spi_control_register_CS_mode                0x00000800U
#define SRT_NX90_spi_control_register_CS_mode                11
#define DFLT_VAL_NX90_spi_control_register_CS_mode           0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CS_mode        0x00000000U
#define MSK_NX90_spi_control_register_CR_clr_infifo          0x00100000U
#define SRT_NX90_spi_control_register_CR_clr_infifo          20
#define DFLT_VAL_NX90_spi_control_register_CR_clr_infifo     0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_clr_infifo  0x00000000U
#define MSK_NX90_spi_control_register_CR_clr_outfifo         0x00200000U
#define SRT_NX90_spi_control_register_CR_clr_outfifo         21
#define DFLT_VAL_NX90_spi_control_register_CR_clr_outfifo    0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_clr_outfifo 0x00000000U
#define MSK_NX90_spi_control_register_CR_burstdelay          0x01c00000U
#define SRT_NX90_spi_control_register_CR_burstdelay          22
#define DFLT_VAL_NX90_spi_control_register_CR_burstdelay     0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_burstdelay  0x00000000U
#define MSK_NX90_spi_control_register_CR_burst               0x0e000000U
#define SRT_NX90_spi_control_register_CR_burst               25
#define DFLT_VAL_NX90_spi_control_register_CR_burst          0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_burst       0x00000000U
#define MSK_NX90_spi_control_register_CR_ncpha               0x10000000U
#define SRT_NX90_spi_control_register_CR_ncpha               28
#define DFLT_VAL_NX90_spi_control_register_CR_ncpha          0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_ncpha       0x00000000U
#define MSK_NX90_spi_control_register_CR_cpol                0x20000000U
#define SRT_NX90_spi_control_register_CR_cpol                29
#define DFLT_VAL_NX90_spi_control_register_CR_cpol           0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_cpol        0x00000000U
#define MSK_NX90_spi_control_register_CR_ms                  0x40000000U
#define SRT_NX90_spi_control_register_CR_ms                  30
#define DFLT_VAL_NX90_spi_control_register_CR_ms             0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_ms          0x00000000U
#define MSK_NX90_spi_control_register_CR_en                  0x80000000U
#define SRT_NX90_spi_control_register_CR_en                  31
#define DFLT_VAL_NX90_spi_control_register_CR_en             0x00000000U
#define DFLT_BF_VAL_NX90_spi_control_register_CR_en          0x00000000U

/* all used bits of 'NX90_spi_control_register': */
#define MSK_USED_BITS_NX90_spi_control_register 0xfff00fdfU

/* --------------------------------------------------------------------- */
/* Register spi_interrupt_control_register */
/* => netx100/500 compliant spi interrupt control register (IR) */
/*    In netx50 and later versions both, receive and transmit FIFO have a depth of 16, fill-values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500-FIFOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_interrupt_control_register          0x0000003CU
#define Adr_NX90_spi0_app_spi_interrupt_control_register     0xFF801A3CU
#define Adr_NX90_spi1_app_spi_interrupt_control_register     0xFF801A7CU
#define Adr_NX90_spi2_app_spi_interrupt_control_register     0xFF801ABCU
#define Adr_NX90_spi_xpic_app_spi_interrupt_control_register 0xFF9003BCU
#define DFLT_VAL_NX90_spi_interrupt_control_register         0x00000000U

#define MSK_NX90_spi_interrupt_control_register_IR_in_fuel               0x000001ffU
#define SRT_NX90_spi_interrupt_control_register_IR_in_fuel               0
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_fuel          0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_fuel       0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_out_fuel              0x0003fe00U
#define SRT_NX90_spi_interrupt_control_register_IR_out_fuel              9
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_fuel         0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_fuel      0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_in_fuel_en            0x00040000U
#define SRT_NX90_spi_interrupt_control_register_IR_in_fuel_en            18
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_fuel_en       0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_fuel_en    0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_in_recdata_en         0x00080000U
#define SRT_NX90_spi_interrupt_control_register_IR_in_recdata_en         19
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_recdata_en    0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_recdata_en 0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_in_full_en            0x00100000U
#define SRT_NX90_spi_interrupt_control_register_IR_in_full_en            20
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_full_en       0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_full_en    0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_out_fuel_en           0x00200000U
#define SRT_NX90_spi_interrupt_control_register_IR_out_fuel_en           21
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_fuel_en      0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_fuel_en   0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_out_fw_en             0x00400000U
#define SRT_NX90_spi_interrupt_control_register_IR_out_fw_en             22
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_fw_en        0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_fw_en     0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_out_empty_en          0x00800000U
#define SRT_NX90_spi_interrupt_control_register_IR_out_empty_en          23
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_empty_en     0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_empty_en  0x00000000U
#define MSK_NX90_spi_interrupt_control_register_IR_out_full_en           0x01000000U
#define SRT_NX90_spi_interrupt_control_register_IR_out_full_en           24
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_full_en      0x00000000U
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_full_en   0x00000000U

/* all used bits of 'NX90_spi_interrupt_control_register': */
#define MSK_USED_BITS_NX90_spi_interrupt_control_register 0x01ffffffU


/* ===================================================================== */

/* AREA pio */
/* Area of pio_app */

/* ===================================================================== */

#define Addr_NX90_pio_app 0xFF801AC0U

/* --------------------------------------------------------------------- */
/* Register pio_in */
/* => PIO input line status register. */
/*    Each PIO input status can also be read from dedicated PIOx input state register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_in     0x00000000U
#define Adr_NX90_pio_app_pio_in 0xFF801AC0U
#define Adr_NX90_pio_in         0xFF801AC0U

#define MSK_NX90_pio_in_val 0x000000ffU
#define SRT_NX90_pio_in_val 0

/* all used bits of 'NX90_pio_in': */
#define MSK_USED_BITS_NX90_pio_in 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register pio_out */
/* => PIO output drive level line register. */
/*    Each PIOs output drive level can also be programmed by dedicated PIOx output drive level register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_out     0x00000004U
#define Adr_NX90_pio_app_pio_out 0xFF801AC4U
#define Adr_NX90_pio_out         0xFF801AC4U
#define DFLT_VAL_NX90_pio_out    0x00000000U

#define MSK_NX90_pio_out_val         0x000000ffU
#define SRT_NX90_pio_out_val         0
#define DFLT_VAL_NX90_pio_out_val    0x00000000U
#define DFLT_BF_VAL_NX90_pio_out_val 0x00000000U

/* all used bits of 'NX90_pio_out': */
#define MSK_USED_BITS_NX90_pio_out 0x000000ffU

/* --------------------------------------------------------------------- */
/* Register pio_oe */
/* => PIO output enable line register. */
/*    Each PIOs output enable can also be programmed by dedicated PIOx output enable register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_oe     0x00000008U
#define Adr_NX90_pio_app_pio_oe 0xFF801AC8U
#define Adr_NX90_pio_oe         0xFF801AC8U
#define DFLT_VAL_NX90_pio_oe    0x00000000U

#define MSK_NX90_pio_oe_val         0x000000ffU
#define SRT_NX90_pio_oe_val         0
#define DFLT_VAL_NX90_pio_oe_val    0x00000000U
#define DFLT_BF_VAL_NX90_pio_oe_val 0x00000000U

/* all used bits of 'NX90_pio_oe': */
#define MSK_USED_BITS_NX90_pio_oe 0x000000ffU


/* ===================================================================== */

/* AREA biss */
/* Area of biss0_app, biss1_app */

/* ===================================================================== */

#define Addr_NX90_biss0_app 0xFF801B00U
#define Addr_NX90_biss1_app 0xFF801C00U

/* --------------------------------------------------------------------- */
/* Register biss_scdata0_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata0_0       0x00000000U
#define Adr_NX90_biss0_app_biss_scdata0_0 0xFF801B00U
#define Adr_NX90_biss1_app_biss_scdata0_0 0xFF801C00U
#define DFLT_VAL_NX90_biss_scdata0_0      0x00000000U

#define MSK_NX90_biss_scdata0_0_SCDATA0_0         0xffffffffU
#define SRT_NX90_biss_scdata0_0_SCDATA0_0         0
#define DFLT_VAL_NX90_biss_scdata0_0_SCDATA0_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata0_0_SCDATA0_0 0x00000000U

/* all used bits of 'NX90_biss_scdata0_0': */
#define MSK_USED_BITS_NX90_biss_scdata0_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata0_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata0_1       0x00000004U
#define Adr_NX90_biss0_app_biss_scdata0_1 0xFF801B04U
#define Adr_NX90_biss1_app_biss_scdata0_1 0xFF801C04U
#define DFLT_VAL_NX90_biss_scdata0_1      0x00000000U

#define MSK_NX90_biss_scdata0_1_SCDATA0_1         0xffffffffU
#define SRT_NX90_biss_scdata0_1_SCDATA0_1         0
#define DFLT_VAL_NX90_biss_scdata0_1_SCDATA0_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata0_1_SCDATA0_1 0x00000000U

/* all used bits of 'NX90_biss_scdata0_1': */
#define MSK_USED_BITS_NX90_biss_scdata0_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata1_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata1_0       0x00000008U
#define Adr_NX90_biss0_app_biss_scdata1_0 0xFF801B08U
#define Adr_NX90_biss1_app_biss_scdata1_0 0xFF801C08U
#define DFLT_VAL_NX90_biss_scdata1_0      0x00000000U

#define MSK_NX90_biss_scdata1_0_SCDATA1_0         0xffffffffU
#define SRT_NX90_biss_scdata1_0_SCDATA1_0         0
#define DFLT_VAL_NX90_biss_scdata1_0_SCDATA1_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata1_0_SCDATA1_0 0x00000000U

/* all used bits of 'NX90_biss_scdata1_0': */
#define MSK_USED_BITS_NX90_biss_scdata1_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata1_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata1_1       0x0000000CU
#define Adr_NX90_biss0_app_biss_scdata1_1 0xFF801B0CU
#define Adr_NX90_biss1_app_biss_scdata1_1 0xFF801C0CU
#define DFLT_VAL_NX90_biss_scdata1_1      0x00000000U

#define MSK_NX90_biss_scdata1_1_SCDATA1_1         0xffffffffU
#define SRT_NX90_biss_scdata1_1_SCDATA1_1         0
#define DFLT_VAL_NX90_biss_scdata1_1_SCDATA1_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata1_1_SCDATA1_1 0x00000000U

/* all used bits of 'NX90_biss_scdata1_1': */
#define MSK_USED_BITS_NX90_biss_scdata1_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata2_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata2_0       0x00000010U
#define Adr_NX90_biss0_app_biss_scdata2_0 0xFF801B10U
#define Adr_NX90_biss1_app_biss_scdata2_0 0xFF801C10U
#define DFLT_VAL_NX90_biss_scdata2_0      0x00000000U

#define MSK_NX90_biss_scdata2_0_SCDATA2_0         0xffffffffU
#define SRT_NX90_biss_scdata2_0_SCDATA2_0         0
#define DFLT_VAL_NX90_biss_scdata2_0_SCDATA2_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata2_0_SCDATA2_0 0x00000000U

/* all used bits of 'NX90_biss_scdata2_0': */
#define MSK_USED_BITS_NX90_biss_scdata2_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata2_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata2_1       0x00000014U
#define Adr_NX90_biss0_app_biss_scdata2_1 0xFF801B14U
#define Adr_NX90_biss1_app_biss_scdata2_1 0xFF801C14U
#define DFLT_VAL_NX90_biss_scdata2_1      0x00000000U

#define MSK_NX90_biss_scdata2_1_SCDATA2_1         0xffffffffU
#define SRT_NX90_biss_scdata2_1_SCDATA2_1         0
#define DFLT_VAL_NX90_biss_scdata2_1_SCDATA2_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata2_1_SCDATA2_1 0x00000000U

/* all used bits of 'NX90_biss_scdata2_1': */
#define MSK_USED_BITS_NX90_biss_scdata2_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata3_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata3_0       0x00000018U
#define Adr_NX90_biss0_app_biss_scdata3_0 0xFF801B18U
#define Adr_NX90_biss1_app_biss_scdata3_0 0xFF801C18U
#define DFLT_VAL_NX90_biss_scdata3_0      0x00000000U

#define MSK_NX90_biss_scdata3_0_SCDATA3_0         0xffffffffU
#define SRT_NX90_biss_scdata3_0_SCDATA3_0         0
#define DFLT_VAL_NX90_biss_scdata3_0_SCDATA3_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata3_0_SCDATA3_0 0x00000000U

/* all used bits of 'NX90_biss_scdata3_0': */
#define MSK_USED_BITS_NX90_biss_scdata3_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata3_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata3_1       0x0000001CU
#define Adr_NX90_biss0_app_biss_scdata3_1 0xFF801B1CU
#define Adr_NX90_biss1_app_biss_scdata3_1 0xFF801C1CU
#define DFLT_VAL_NX90_biss_scdata3_1      0x00000000U

#define MSK_NX90_biss_scdata3_1_SCDATA3_1         0xffffffffU
#define SRT_NX90_biss_scdata3_1_SCDATA3_1         0
#define DFLT_VAL_NX90_biss_scdata3_1_SCDATA3_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata3_1_SCDATA3_1 0x00000000U

/* all used bits of 'NX90_biss_scdata3_1': */
#define MSK_USED_BITS_NX90_biss_scdata3_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata4_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata4_0       0x00000020U
#define Adr_NX90_biss0_app_biss_scdata4_0 0xFF801B20U
#define Adr_NX90_biss1_app_biss_scdata4_0 0xFF801C20U
#define DFLT_VAL_NX90_biss_scdata4_0      0x00000000U

#define MSK_NX90_biss_scdata4_0_SCDATA4_0         0xffffffffU
#define SRT_NX90_biss_scdata4_0_SCDATA4_0         0
#define DFLT_VAL_NX90_biss_scdata4_0_SCDATA4_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata4_0_SCDATA4_0 0x00000000U

/* all used bits of 'NX90_biss_scdata4_0': */
#define MSK_USED_BITS_NX90_biss_scdata4_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata4_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata4_1       0x00000024U
#define Adr_NX90_biss0_app_biss_scdata4_1 0xFF801B24U
#define Adr_NX90_biss1_app_biss_scdata4_1 0xFF801C24U
#define DFLT_VAL_NX90_biss_scdata4_1      0x00000000U

#define MSK_NX90_biss_scdata4_1_SCDATA4_1         0xffffffffU
#define SRT_NX90_biss_scdata4_1_SCDATA4_1         0
#define DFLT_VAL_NX90_biss_scdata4_1_SCDATA4_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata4_1_SCDATA4_1 0x00000000U

/* all used bits of 'NX90_biss_scdata4_1': */
#define MSK_USED_BITS_NX90_biss_scdata4_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata5_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata5_0       0x00000028U
#define Adr_NX90_biss0_app_biss_scdata5_0 0xFF801B28U
#define Adr_NX90_biss1_app_biss_scdata5_0 0xFF801C28U
#define DFLT_VAL_NX90_biss_scdata5_0      0x00000000U

#define MSK_NX90_biss_scdata5_0_SCDATA5_0         0xffffffffU
#define SRT_NX90_biss_scdata5_0_SCDATA5_0         0
#define DFLT_VAL_NX90_biss_scdata5_0_SCDATA5_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata5_0_SCDATA5_0 0x00000000U

/* all used bits of 'NX90_biss_scdata5_0': */
#define MSK_USED_BITS_NX90_biss_scdata5_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata5_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata5_1       0x0000002CU
#define Adr_NX90_biss0_app_biss_scdata5_1 0xFF801B2CU
#define Adr_NX90_biss1_app_biss_scdata5_1 0xFF801C2CU
#define DFLT_VAL_NX90_biss_scdata5_1      0x00000000U

#define MSK_NX90_biss_scdata5_1_SCDATA5_1         0xffffffffU
#define SRT_NX90_biss_scdata5_1_SCDATA5_1         0
#define DFLT_VAL_NX90_biss_scdata5_1_SCDATA5_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata5_1_SCDATA5_1 0x00000000U

/* all used bits of 'NX90_biss_scdata5_1': */
#define MSK_USED_BITS_NX90_biss_scdata5_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata6_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata6_0       0x00000030U
#define Adr_NX90_biss0_app_biss_scdata6_0 0xFF801B30U
#define Adr_NX90_biss1_app_biss_scdata6_0 0xFF801C30U
#define DFLT_VAL_NX90_biss_scdata6_0      0x00000000U

#define MSK_NX90_biss_scdata6_0_SCDATA6_0         0xffffffffU
#define SRT_NX90_biss_scdata6_0_SCDATA6_0         0
#define DFLT_VAL_NX90_biss_scdata6_0_SCDATA6_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata6_0_SCDATA6_0 0x00000000U

/* all used bits of 'NX90_biss_scdata6_0': */
#define MSK_USED_BITS_NX90_biss_scdata6_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata6_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata6_1       0x00000034U
#define Adr_NX90_biss0_app_biss_scdata6_1 0xFF801B34U
#define Adr_NX90_biss1_app_biss_scdata6_1 0xFF801C34U
#define DFLT_VAL_NX90_biss_scdata6_1      0x00000000U

#define MSK_NX90_biss_scdata6_1_SCDATA6_1         0xffffffffU
#define SRT_NX90_biss_scdata6_1_SCDATA6_1         0
#define DFLT_VAL_NX90_biss_scdata6_1_SCDATA6_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata6_1_SCDATA6_1 0x00000000U

/* all used bits of 'NX90_biss_scdata6_1': */
#define MSK_USED_BITS_NX90_biss_scdata6_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata7_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata7_0       0x00000038U
#define Adr_NX90_biss0_app_biss_scdata7_0 0xFF801B38U
#define Adr_NX90_biss1_app_biss_scdata7_0 0xFF801C38U
#define DFLT_VAL_NX90_biss_scdata7_0      0x00000000U

#define MSK_NX90_biss_scdata7_0_SCDATA7_0         0xffffffffU
#define SRT_NX90_biss_scdata7_0_SCDATA7_0         0
#define DFLT_VAL_NX90_biss_scdata7_0_SCDATA7_0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata7_0_SCDATA7_0 0x00000000U

/* all used bits of 'NX90_biss_scdata7_0': */
#define MSK_USED_BITS_NX90_biss_scdata7_0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_scdata7_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata7_1       0x0000003CU
#define Adr_NX90_biss0_app_biss_scdata7_1 0xFF801B3CU
#define Adr_NX90_biss1_app_biss_scdata7_1 0xFF801C3CU
#define DFLT_VAL_NX90_biss_scdata7_1      0x00000000U

#define MSK_NX90_biss_scdata7_1_SCDATA7_1         0xffffffffU
#define SRT_NX90_biss_scdata7_1_SCDATA7_1         0
#define DFLT_VAL_NX90_biss_scdata7_1_SCDATA7_1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_scdata7_1_SCDATA7_1 0x00000000U

/* all used bits of 'NX90_biss_scdata7_1': */
#define MSK_USED_BITS_NX90_biss_scdata7_1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata0       0x00000080U
#define Adr_NX90_biss0_app_biss_rdata0 0xFF801B80U
#define Adr_NX90_biss1_app_biss_rdata0 0xFF801C80U
#define DFLT_VAL_NX90_biss_rdata0      0x00000000U

#define MSK_NX90_biss_rdata0_RDATA0         0xffffffffU
#define SRT_NX90_biss_rdata0_RDATA0         0
#define DFLT_VAL_NX90_biss_rdata0_RDATA0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata0_RDATA0 0x00000000U

/* all used bits of 'NX90_biss_rdata0': */
#define MSK_USED_BITS_NX90_biss_rdata0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata1       0x00000084U
#define Adr_NX90_biss0_app_biss_rdata1 0xFF801B84U
#define Adr_NX90_biss1_app_biss_rdata1 0xFF801C84U
#define DFLT_VAL_NX90_biss_rdata1      0x00000000U

#define MSK_NX90_biss_rdata1_RDATA1         0xffffffffU
#define SRT_NX90_biss_rdata1_RDATA1         0
#define DFLT_VAL_NX90_biss_rdata1_RDATA1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata1_RDATA1 0x00000000U

/* all used bits of 'NX90_biss_rdata1': */
#define MSK_USED_BITS_NX90_biss_rdata1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata2       0x00000088U
#define Adr_NX90_biss0_app_biss_rdata2 0xFF801B88U
#define Adr_NX90_biss1_app_biss_rdata2 0xFF801C88U
#define DFLT_VAL_NX90_biss_rdata2      0x00000000U

#define MSK_NX90_biss_rdata2_RDATA2         0xffffffffU
#define SRT_NX90_biss_rdata2_RDATA2         0
#define DFLT_VAL_NX90_biss_rdata2_RDATA2    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata2_RDATA2 0x00000000U

/* all used bits of 'NX90_biss_rdata2': */
#define MSK_USED_BITS_NX90_biss_rdata2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata3       0x0000008CU
#define Adr_NX90_biss0_app_biss_rdata3 0xFF801B8CU
#define Adr_NX90_biss1_app_biss_rdata3 0xFF801C8CU
#define DFLT_VAL_NX90_biss_rdata3      0x00000000U

#define MSK_NX90_biss_rdata3_RDATA3         0xffffffffU
#define SRT_NX90_biss_rdata3_RDATA3         0
#define DFLT_VAL_NX90_biss_rdata3_RDATA3    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata3_RDATA3 0x00000000U

/* all used bits of 'NX90_biss_rdata3': */
#define MSK_USED_BITS_NX90_biss_rdata3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata4 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata4       0x00000090U
#define Adr_NX90_biss0_app_biss_rdata4 0xFF801B90U
#define Adr_NX90_biss1_app_biss_rdata4 0xFF801C90U
#define DFLT_VAL_NX90_biss_rdata4      0x00000000U

#define MSK_NX90_biss_rdata4_RDATA4         0xffffffffU
#define SRT_NX90_biss_rdata4_RDATA4         0
#define DFLT_VAL_NX90_biss_rdata4_RDATA4    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata4_RDATA4 0x00000000U

/* all used bits of 'NX90_biss_rdata4': */
#define MSK_USED_BITS_NX90_biss_rdata4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata5 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata5       0x00000094U
#define Adr_NX90_biss0_app_biss_rdata5 0xFF801B94U
#define Adr_NX90_biss1_app_biss_rdata5 0xFF801C94U
#define DFLT_VAL_NX90_biss_rdata5      0x00000000U

#define MSK_NX90_biss_rdata5_RDATA5         0xffffffffU
#define SRT_NX90_biss_rdata5_RDATA5         0
#define DFLT_VAL_NX90_biss_rdata5_RDATA5    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata5_RDATA5 0x00000000U

/* all used bits of 'NX90_biss_rdata5': */
#define MSK_USED_BITS_NX90_biss_rdata5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata6 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata6       0x00000098U
#define Adr_NX90_biss0_app_biss_rdata6 0xFF801B98U
#define Adr_NX90_biss1_app_biss_rdata6 0xFF801C98U
#define DFLT_VAL_NX90_biss_rdata6      0x00000000U

#define MSK_NX90_biss_rdata6_RDATA6         0xffffffffU
#define SRT_NX90_biss_rdata6_RDATA6         0
#define DFLT_VAL_NX90_biss_rdata6_RDATA6    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata6_RDATA6 0x00000000U

/* all used bits of 'NX90_biss_rdata6': */
#define MSK_USED_BITS_NX90_biss_rdata6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata7 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata7       0x0000009CU
#define Adr_NX90_biss0_app_biss_rdata7 0xFF801B9CU
#define Adr_NX90_biss1_app_biss_rdata7 0xFF801C9CU
#define DFLT_VAL_NX90_biss_rdata7      0x00000000U

#define MSK_NX90_biss_rdata7_RDATA7         0xffffffffU
#define SRT_NX90_biss_rdata7_RDATA7         0
#define DFLT_VAL_NX90_biss_rdata7_RDATA7    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata7_RDATA7 0x00000000U

/* all used bits of 'NX90_biss_rdata7': */
#define MSK_USED_BITS_NX90_biss_rdata7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata8 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata8       0x000000A0U
#define Adr_NX90_biss0_app_biss_rdata8 0xFF801BA0U
#define Adr_NX90_biss1_app_biss_rdata8 0xFF801CA0U
#define DFLT_VAL_NX90_biss_rdata8      0x00000000U

#define MSK_NX90_biss_rdata8_RDATA8         0xffffffffU
#define SRT_NX90_biss_rdata8_RDATA8         0
#define DFLT_VAL_NX90_biss_rdata8_RDATA8    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata8_RDATA8 0x00000000U

/* all used bits of 'NX90_biss_rdata8': */
#define MSK_USED_BITS_NX90_biss_rdata8 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata9 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata9       0x000000A4U
#define Adr_NX90_biss0_app_biss_rdata9 0xFF801BA4U
#define Adr_NX90_biss1_app_biss_rdata9 0xFF801CA4U
#define DFLT_VAL_NX90_biss_rdata9      0x00000000U

#define MSK_NX90_biss_rdata9_RDATA9         0xffffffffU
#define SRT_NX90_biss_rdata9_RDATA9         0
#define DFLT_VAL_NX90_biss_rdata9_RDATA9    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata9_RDATA9 0x00000000U

/* all used bits of 'NX90_biss_rdata9': */
#define MSK_USED_BITS_NX90_biss_rdata9 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata10 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata10       0x000000A8U
#define Adr_NX90_biss0_app_biss_rdata10 0xFF801BA8U
#define Adr_NX90_biss1_app_biss_rdata10 0xFF801CA8U
#define DFLT_VAL_NX90_biss_rdata10      0x00000000U

#define MSK_NX90_biss_rdata10_RDATA10         0xffffffffU
#define SRT_NX90_biss_rdata10_RDATA10         0
#define DFLT_VAL_NX90_biss_rdata10_RDATA10    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata10_RDATA10 0x00000000U

/* all used bits of 'NX90_biss_rdata10': */
#define MSK_USED_BITS_NX90_biss_rdata10 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata11 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata11       0x000000ACU
#define Adr_NX90_biss0_app_biss_rdata11 0xFF801BACU
#define Adr_NX90_biss1_app_biss_rdata11 0xFF801CACU
#define DFLT_VAL_NX90_biss_rdata11      0x00000000U

#define MSK_NX90_biss_rdata11_RDATA11         0xffffffffU
#define SRT_NX90_biss_rdata11_RDATA11         0
#define DFLT_VAL_NX90_biss_rdata11_RDATA11    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata11_RDATA11 0x00000000U

/* all used bits of 'NX90_biss_rdata11': */
#define MSK_USED_BITS_NX90_biss_rdata11 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata12 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata12       0x000000B0U
#define Adr_NX90_biss0_app_biss_rdata12 0xFF801BB0U
#define Adr_NX90_biss1_app_biss_rdata12 0xFF801CB0U
#define DFLT_VAL_NX90_biss_rdata12      0x00000000U

#define MSK_NX90_biss_rdata12_RDATA12         0xffffffffU
#define SRT_NX90_biss_rdata12_RDATA12         0
#define DFLT_VAL_NX90_biss_rdata12_RDATA12    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata12_RDATA12 0x00000000U

/* all used bits of 'NX90_biss_rdata12': */
#define MSK_USED_BITS_NX90_biss_rdata12 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata13 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata13       0x000000B4U
#define Adr_NX90_biss0_app_biss_rdata13 0xFF801BB4U
#define Adr_NX90_biss1_app_biss_rdata13 0xFF801CB4U
#define DFLT_VAL_NX90_biss_rdata13      0x00000000U

#define MSK_NX90_biss_rdata13_RDATA13         0xffffffffU
#define SRT_NX90_biss_rdata13_RDATA13         0
#define DFLT_VAL_NX90_biss_rdata13_RDATA13    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata13_RDATA13 0x00000000U

/* all used bits of 'NX90_biss_rdata13': */
#define MSK_USED_BITS_NX90_biss_rdata13 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata14 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata14       0x000000B8U
#define Adr_NX90_biss0_app_biss_rdata14 0xFF801BB8U
#define Adr_NX90_biss1_app_biss_rdata14 0xFF801CB8U
#define DFLT_VAL_NX90_biss_rdata14      0x00000000U

#define MSK_NX90_biss_rdata14_RDATA14         0xffffffffU
#define SRT_NX90_biss_rdata14_RDATA14         0
#define DFLT_VAL_NX90_biss_rdata14_RDATA14    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata14_RDATA14 0x00000000U

/* all used bits of 'NX90_biss_rdata14': */
#define MSK_USED_BITS_NX90_biss_rdata14 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_rdata15 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata15       0x000000BCU
#define Adr_NX90_biss0_app_biss_rdata15 0xFF801BBCU
#define Adr_NX90_biss1_app_biss_rdata15 0xFF801CBCU
#define DFLT_VAL_NX90_biss_rdata15      0x00000000U

#define MSK_NX90_biss_rdata15_RDATA15         0xffffffffU
#define SRT_NX90_biss_rdata15_RDATA15         0
#define DFLT_VAL_NX90_biss_rdata15_RDATA15    0x00000000U
#define DFLT_BF_VAL_NX90_biss_rdata15_RDATA15 0x00000000U

/* all used bits of 'NX90_biss_rdata15': */
#define MSK_USED_BITS_NX90_biss_rdata15 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc0       0x000000C0U
#define Adr_NX90_biss0_app_biss_sc0 0xFF801BC0U
#define Adr_NX90_biss1_app_biss_sc0 0xFF801CC0U
#define DFLT_VAL_NX90_biss_sc0      0x00000000U

#define MSK_NX90_biss_sc0_SCDLEN0            0x0000003fU
#define SRT_NX90_biss_sc0_SCDLEN0            0
#define DFLT_VAL_NX90_biss_sc0_SCDLEN0       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc0_SCDLEN0    0x00000000U
#define MSK_NX90_biss_sc0_ENSCD0             0x00000040U
#define SRT_NX90_biss_sc0_ENSCD0             6
#define DFLT_VAL_NX90_biss_sc0_ENSCD0        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc0_ENSCD0     0x00000000U
#define MSK_NX90_biss_sc0_LSTOP0             0x00000080U
#define SRT_NX90_biss_sc0_LSTOP0             7
#define DFLT_VAL_NX90_biss_sc0_LSTOP0        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc0_LSTOP0     0x00000000U
#define MSK_NX90_biss_sc0_SCRCPOLY0          0x00007f00U
#define SRT_NX90_biss_sc0_SCRCPOLY0          8
#define DFLT_VAL_NX90_biss_sc0_SCRCPOLY0     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc0_SCRCPOLY0  0x00000000U
#define MSK_NX90_biss_sc0_SELCRCS0           0x00008000U
#define SRT_NX90_biss_sc0_SELCRCS0           15
#define DFLT_VAL_NX90_biss_sc0_SELCRCS0      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc0_SELCRCS0   0x00000000U
#define MSK_NX90_biss_sc0_SCRCSTART0         0xffff0000U
#define SRT_NX90_biss_sc0_SCRCSTART0         16
#define DFLT_VAL_NX90_biss_sc0_SCRCSTART0    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc0_SCRCSTART0 0x00000000U

/* all used bits of 'NX90_biss_sc0': */
#define MSK_USED_BITS_NX90_biss_sc0 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc1       0x000000C4U
#define Adr_NX90_biss0_app_biss_sc1 0xFF801BC4U
#define Adr_NX90_biss1_app_biss_sc1 0xFF801CC4U
#define DFLT_VAL_NX90_biss_sc1      0x00000000U

#define MSK_NX90_biss_sc1_SCDLEN1            0x0000003fU
#define SRT_NX90_biss_sc1_SCDLEN1            0
#define DFLT_VAL_NX90_biss_sc1_SCDLEN1       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc1_SCDLEN1    0x00000000U
#define MSK_NX90_biss_sc1_ENSCD1             0x00000040U
#define SRT_NX90_biss_sc1_ENSCD1             6
#define DFLT_VAL_NX90_biss_sc1_ENSCD1        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc1_ENSCD1     0x00000000U
#define MSK_NX90_biss_sc1_LSTOP1             0x00000080U
#define SRT_NX90_biss_sc1_LSTOP1             7
#define DFLT_VAL_NX90_biss_sc1_LSTOP1        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc1_LSTOP1     0x00000000U
#define MSK_NX90_biss_sc1_SCRCPOLY1          0x00007f00U
#define SRT_NX90_biss_sc1_SCRCPOLY1          8
#define DFLT_VAL_NX90_biss_sc1_SCRCPOLY1     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc1_SCRCPOLY1  0x00000000U
#define MSK_NX90_biss_sc1_SELCRCS1           0x00008000U
#define SRT_NX90_biss_sc1_SELCRCS1           15
#define DFLT_VAL_NX90_biss_sc1_SELCRCS1      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc1_SELCRCS1   0x00000000U
#define MSK_NX90_biss_sc1_SCRCSTART1         0xffff0000U
#define SRT_NX90_biss_sc1_SCRCSTART1         16
#define DFLT_VAL_NX90_biss_sc1_SCRCSTART1    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc1_SCRCSTART1 0x00000000U

/* all used bits of 'NX90_biss_sc1': */
#define MSK_USED_BITS_NX90_biss_sc1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc2       0x000000C8U
#define Adr_NX90_biss0_app_biss_sc2 0xFF801BC8U
#define Adr_NX90_biss1_app_biss_sc2 0xFF801CC8U
#define DFLT_VAL_NX90_biss_sc2      0x00000000U

#define MSK_NX90_biss_sc2_SCDLEN2            0x0000003fU
#define SRT_NX90_biss_sc2_SCDLEN2            0
#define DFLT_VAL_NX90_biss_sc2_SCDLEN2       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc2_SCDLEN2    0x00000000U
#define MSK_NX90_biss_sc2_ENSCD2             0x00000040U
#define SRT_NX90_biss_sc2_ENSCD2             6
#define DFLT_VAL_NX90_biss_sc2_ENSCD2        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc2_ENSCD2     0x00000000U
#define MSK_NX90_biss_sc2_LSTOP2             0x00000080U
#define SRT_NX90_biss_sc2_LSTOP2             7
#define DFLT_VAL_NX90_biss_sc2_LSTOP2        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc2_LSTOP2     0x00000000U
#define MSK_NX90_biss_sc2_SCRCPOLY2          0x00007f00U
#define SRT_NX90_biss_sc2_SCRCPOLY2          8
#define DFLT_VAL_NX90_biss_sc2_SCRCPOLY2     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc2_SCRCPOLY2  0x00000000U
#define MSK_NX90_biss_sc2_SELCRCS2           0x00008000U
#define SRT_NX90_biss_sc2_SELCRCS2           15
#define DFLT_VAL_NX90_biss_sc2_SELCRCS2      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc2_SELCRCS2   0x00000000U
#define MSK_NX90_biss_sc2_SCRCSTART2         0xffff0000U
#define SRT_NX90_biss_sc2_SCRCSTART2         16
#define DFLT_VAL_NX90_biss_sc2_SCRCSTART2    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc2_SCRCSTART2 0x00000000U

/* all used bits of 'NX90_biss_sc2': */
#define MSK_USED_BITS_NX90_biss_sc2 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc3       0x000000CCU
#define Adr_NX90_biss0_app_biss_sc3 0xFF801BCCU
#define Adr_NX90_biss1_app_biss_sc3 0xFF801CCCU
#define DFLT_VAL_NX90_biss_sc3      0x00000000U

#define MSK_NX90_biss_sc3_SCDLEN3            0x0000003fU
#define SRT_NX90_biss_sc3_SCDLEN3            0
#define DFLT_VAL_NX90_biss_sc3_SCDLEN3       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc3_SCDLEN3    0x00000000U
#define MSK_NX90_biss_sc3_ENSCD3             0x00000040U
#define SRT_NX90_biss_sc3_ENSCD3             6
#define DFLT_VAL_NX90_biss_sc3_ENSCD3        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc3_ENSCD3     0x00000000U
#define MSK_NX90_biss_sc3_LSTOP3             0x00000080U
#define SRT_NX90_biss_sc3_LSTOP3             7
#define DFLT_VAL_NX90_biss_sc3_LSTOP3        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc3_LSTOP3     0x00000000U
#define MSK_NX90_biss_sc3_SCRCPOLY3          0x00007f00U
#define SRT_NX90_biss_sc3_SCRCPOLY3          8
#define DFLT_VAL_NX90_biss_sc3_SCRCPOLY3     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc3_SCRCPOLY3  0x00000000U
#define MSK_NX90_biss_sc3_SELCRCS3           0x00008000U
#define SRT_NX90_biss_sc3_SELCRCS3           15
#define DFLT_VAL_NX90_biss_sc3_SELCRCS3      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc3_SELCRCS3   0x00000000U
#define MSK_NX90_biss_sc3_SCRCSTART3         0xffff0000U
#define SRT_NX90_biss_sc3_SCRCSTART3         16
#define DFLT_VAL_NX90_biss_sc3_SCRCSTART3    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc3_SCRCSTART3 0x00000000U

/* all used bits of 'NX90_biss_sc3': */
#define MSK_USED_BITS_NX90_biss_sc3 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc4 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc4       0x000000D0U
#define Adr_NX90_biss0_app_biss_sc4 0xFF801BD0U
#define Adr_NX90_biss1_app_biss_sc4 0xFF801CD0U
#define DFLT_VAL_NX90_biss_sc4      0x00000000U

#define MSK_NX90_biss_sc4_SCDLEN4            0x0000003fU
#define SRT_NX90_biss_sc4_SCDLEN4            0
#define DFLT_VAL_NX90_biss_sc4_SCDLEN4       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc4_SCDLEN4    0x00000000U
#define MSK_NX90_biss_sc4_ENSCD4             0x00000040U
#define SRT_NX90_biss_sc4_ENSCD4             6
#define DFLT_VAL_NX90_biss_sc4_ENSCD4        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc4_ENSCD4     0x00000000U
#define MSK_NX90_biss_sc4_LSTOP4             0x00000080U
#define SRT_NX90_biss_sc4_LSTOP4             7
#define DFLT_VAL_NX90_biss_sc4_LSTOP4        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc4_LSTOP4     0x00000000U
#define MSK_NX90_biss_sc4_SCRCPOLY4          0x00007f00U
#define SRT_NX90_biss_sc4_SCRCPOLY4          8
#define DFLT_VAL_NX90_biss_sc4_SCRCPOLY4     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc4_SCRCPOLY4  0x00000000U
#define MSK_NX90_biss_sc4_SELCRCS4           0x00008000U
#define SRT_NX90_biss_sc4_SELCRCS4           15
#define DFLT_VAL_NX90_biss_sc4_SELCRCS4      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc4_SELCRCS4   0x00000000U
#define MSK_NX90_biss_sc4_SCRCSTART4         0xffff0000U
#define SRT_NX90_biss_sc4_SCRCSTART4         16
#define DFLT_VAL_NX90_biss_sc4_SCRCSTART4    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc4_SCRCSTART4 0x00000000U

/* all used bits of 'NX90_biss_sc4': */
#define MSK_USED_BITS_NX90_biss_sc4 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc5 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc5       0x000000D4U
#define Adr_NX90_biss0_app_biss_sc5 0xFF801BD4U
#define Adr_NX90_biss1_app_biss_sc5 0xFF801CD4U
#define DFLT_VAL_NX90_biss_sc5      0x00000000U

#define MSK_NX90_biss_sc5_SCDLEN5            0x0000003fU
#define SRT_NX90_biss_sc5_SCDLEN5            0
#define DFLT_VAL_NX90_biss_sc5_SCDLEN5       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc5_SCDLEN5    0x00000000U
#define MSK_NX90_biss_sc5_ENSCD5             0x00000040U
#define SRT_NX90_biss_sc5_ENSCD5             6
#define DFLT_VAL_NX90_biss_sc5_ENSCD5        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc5_ENSCD5     0x00000000U
#define MSK_NX90_biss_sc5_LSTOP5             0x00000080U
#define SRT_NX90_biss_sc5_LSTOP5             7
#define DFLT_VAL_NX90_biss_sc5_LSTOP5        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc5_LSTOP5     0x00000000U
#define MSK_NX90_biss_sc5_SCRCPOLY5          0x00007f00U
#define SRT_NX90_biss_sc5_SCRCPOLY5          8
#define DFLT_VAL_NX90_biss_sc5_SCRCPOLY5     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc5_SCRCPOLY5  0x00000000U
#define MSK_NX90_biss_sc5_SELCRCS5           0x00008000U
#define SRT_NX90_biss_sc5_SELCRCS5           15
#define DFLT_VAL_NX90_biss_sc5_SELCRCS5      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc5_SELCRCS5   0x00000000U
#define MSK_NX90_biss_sc5_SCRCSTART5         0xffff0000U
#define SRT_NX90_biss_sc5_SCRCSTART5         16
#define DFLT_VAL_NX90_biss_sc5_SCRCSTART5    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc5_SCRCSTART5 0x00000000U

/* all used bits of 'NX90_biss_sc5': */
#define MSK_USED_BITS_NX90_biss_sc5 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc6 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc6       0x000000D8U
#define Adr_NX90_biss0_app_biss_sc6 0xFF801BD8U
#define Adr_NX90_biss1_app_biss_sc6 0xFF801CD8U
#define DFLT_VAL_NX90_biss_sc6      0x00000000U

#define MSK_NX90_biss_sc6_SCDLEN6            0x0000003fU
#define SRT_NX90_biss_sc6_SCDLEN6            0
#define DFLT_VAL_NX90_biss_sc6_SCDLEN6       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc6_SCDLEN6    0x00000000U
#define MSK_NX90_biss_sc6_ENSCD6             0x00000040U
#define SRT_NX90_biss_sc6_ENSCD6             6
#define DFLT_VAL_NX90_biss_sc6_ENSCD6        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc6_ENSCD6     0x00000000U
#define MSK_NX90_biss_sc6_LSTOP6             0x00000080U
#define SRT_NX90_biss_sc6_LSTOP6             7
#define DFLT_VAL_NX90_biss_sc6_LSTOP6        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc6_LSTOP6     0x00000000U
#define MSK_NX90_biss_sc6_SCRCPOLY6          0x00007f00U
#define SRT_NX90_biss_sc6_SCRCPOLY6          8
#define DFLT_VAL_NX90_biss_sc6_SCRCPOLY6     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc6_SCRCPOLY6  0x00000000U
#define MSK_NX90_biss_sc6_SELCRCS6           0x00008000U
#define SRT_NX90_biss_sc6_SELCRCS6           15
#define DFLT_VAL_NX90_biss_sc6_SELCRCS6      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc6_SELCRCS6   0x00000000U
#define MSK_NX90_biss_sc6_SCRCSTART6         0xffff0000U
#define SRT_NX90_biss_sc6_SCRCSTART6         16
#define DFLT_VAL_NX90_biss_sc6_SCRCSTART6    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc6_SCRCSTART6 0x00000000U

/* all used bits of 'NX90_biss_sc6': */
#define MSK_USED_BITS_NX90_biss_sc6 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_sc7 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc7       0x000000DCU
#define Adr_NX90_biss0_app_biss_sc7 0xFF801BDCU
#define Adr_NX90_biss1_app_biss_sc7 0xFF801CDCU
#define DFLT_VAL_NX90_biss_sc7      0x00000000U

#define MSK_NX90_biss_sc7_SCDLEN7            0x0000003fU
#define SRT_NX90_biss_sc7_SCDLEN7            0
#define DFLT_VAL_NX90_biss_sc7_SCDLEN7       0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc7_SCDLEN7    0x00000000U
#define MSK_NX90_biss_sc7_ENSC7              0x00000040U
#define SRT_NX90_biss_sc7_ENSC7              6
#define DFLT_VAL_NX90_biss_sc7_ENSC7         0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc7_ENSC7      0x00000000U
#define MSK_NX90_biss_sc7_LSTOP7             0x00000080U
#define SRT_NX90_biss_sc7_LSTOP7             7
#define DFLT_VAL_NX90_biss_sc7_LSTOP7        0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc7_LSTOP7     0x00000000U
#define MSK_NX90_biss_sc7_SCRCPOLY7          0x00007f00U
#define SRT_NX90_biss_sc7_SCRCPOLY7          8
#define DFLT_VAL_NX90_biss_sc7_SCRCPOLY7     0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc7_SCRCPOLY7  0x00000000U
#define MSK_NX90_biss_sc7_SELCRCS7           0x00008000U
#define SRT_NX90_biss_sc7_SELCRCS7           15
#define DFLT_VAL_NX90_biss_sc7_SELCRCS7      0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc7_SELCRCS7   0x00000000U
#define MSK_NX90_biss_sc7_SCRCSTART7         0xffff0000U
#define SRT_NX90_biss_sc7_SCRCSTART7         16
#define DFLT_VAL_NX90_biss_sc7_SCRCSTART7    0x00000000U
#define DFLT_BF_VAL_NX90_biss_sc7_SCRCSTART7 0x00000000U

/* all used bits of 'NX90_biss_sc7': */
#define MSK_USED_BITS_NX90_biss_sc7 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_ccc0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ccc0       0x000000E0U
#define Adr_NX90_biss0_app_biss_ccc0 0xFF801BE0U
#define Adr_NX90_biss1_app_biss_ccc0 0xFF801CE0U
#define DFLT_VAL_NX90_biss_ccc0      0x00000000U

#define MSK_NX90_biss_ccc0_REGADR         0x007f0000U
#define SRT_NX90_biss_ccc0_REGADR         16
#define DFLT_VAL_NX90_biss_ccc0_REGADR    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc0_REGADR 0x00000000U
#define MSK_NX90_biss_ccc0_WNR            0x00800000U
#define SRT_NX90_biss_ccc0_WNR            23
#define DFLT_VAL_NX90_biss_ccc0_WNR       0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc0_WNR    0x00000000U
#define MSK_NX90_biss_ccc0_REGNUM         0x3f000000U
#define SRT_NX90_biss_ccc0_REGNUM         24
#define DFLT_VAL_NX90_biss_ccc0_REGNUM    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc0_REGNUM 0x00000000U

/* all used bits of 'NX90_biss_ccc0': */
#define MSK_USED_BITS_NX90_biss_ccc0 0x3fff0000U

/* --------------------------------------------------------------------- */
/* Register biss_ccc1_mc0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ccc1_mc0       0x000000E4U
#define Adr_NX90_biss0_app_biss_ccc1_mc0 0xFF801BE4U
#define Adr_NX90_biss1_app_biss_ccc1_mc0 0xFF801CE4U
#define DFLT_VAL_NX90_biss_ccc1_mc0      0x00000000U

#define MSK_NX90_biss_ccc1_mc0_CHSEL              0x00000003U
#define SRT_NX90_biss_ccc1_mc0_CHSEL              0
#define DFLT_VAL_NX90_biss_ccc1_mc0_CHSEL         0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_CHSEL      0x00000000U
#define MSK_NX90_biss_ccc1_mc0_HOLDCDM            0x00000100U
#define SRT_NX90_biss_ccc1_mc0_HOLDCDM            8
#define DFLT_VAL_NX90_biss_ccc1_mc0_HOLDCDM       0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_HOLDCDM    0x00000000U
#define MSK_NX90_biss_ccc1_mc0_EN_MO              0x00000200U
#define SRT_NX90_biss_ccc1_mc0_EN_MO              9
#define DFLT_VAL_NX90_biss_ccc1_mc0_EN_MO         0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_EN_MO      0x00000000U
#define MSK_NX90_biss_ccc1_mc0_IDA_TEST           0x00000800U
#define SRT_NX90_biss_ccc1_mc0_IDA_TEST           11
#define DFLT_VAL_NX90_biss_ccc1_mc0_IDA_TEST      0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_IDA_TEST   0x00000000U
#define MSK_NX90_biss_ccc1_mc0_CMD                0x00003000U
#define SRT_NX90_biss_ccc1_mc0_CMD                12
#define DFLT_VAL_NX90_biss_ccc1_mc0_CMD           0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_CMD        0x00000000U
#define MSK_NX90_biss_ccc1_mc0_REGVERS            0x00004000U
#define SRT_NX90_biss_ccc1_mc0_REGVERS            14
#define DFLT_VAL_NX90_biss_ccc1_mc0_REGVERS       0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_REGVERS    0x00000000U
#define MSK_NX90_biss_ccc1_mc0_CTS                0x00008000U
#define SRT_NX90_biss_ccc1_mc0_CTS                15
#define DFLT_VAL_NX90_biss_ccc1_mc0_CTS           0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_CTS        0x00000000U
#define MSK_NX90_biss_ccc1_mc0_FREQS              0x001f0000U
#define SRT_NX90_biss_ccc1_mc0_FREQS              16
#define DFLT_VAL_NX90_biss_ccc1_mc0_FREQS         0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_FREQS      0x00000000U
#define MSK_NX90_biss_ccc1_mc0_FREQR              0x00e00000U
#define SRT_NX90_biss_ccc1_mc0_FREQR              21
#define DFLT_VAL_NX90_biss_ccc1_mc0_FREQR         0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_FREQR      0x00000000U
#define MSK_NX90_biss_ccc1_mc0_SINGLEBANK         0x01000000U
#define SRT_NX90_biss_ccc1_mc0_SINGLEBANK         24
#define DFLT_VAL_NX90_biss_ccc1_mc0_SINGLEBANK    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_SINGLEBANK 0x00000000U
#define MSK_NX90_biss_ccc1_mc0_NOCRC              0x02000000U
#define SRT_NX90_biss_ccc1_mc0_NOCRC              25
#define DFLT_VAL_NX90_biss_ccc1_mc0_NOCRC         0x00000000U
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_NOCRC      0x00000000U

/* all used bits of 'NX90_biss_ccc1_mc0': */
#define MSK_USED_BITS_NX90_biss_ccc1_mc0 0x03fffb03U

/* --------------------------------------------------------------------- */
/* Register biss_mc1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_mc1       0x000000E8U
#define Adr_NX90_biss0_app_biss_mc1 0xFF801BE8U
#define Adr_NX90_biss1_app_biss_mc1 0xFF801CE8U
#define DFLT_VAL_NX90_biss_mc1      0x00000000U

#define MSK_NX90_biss_mc1_FREQAGS          0x000000ffU
#define SRT_NX90_biss_mc1_FREQAGS          0
#define DFLT_VAL_NX90_biss_mc1_FREQAGS     0x00000000U
#define DFLT_BF_VAL_NX90_biss_mc1_FREQAGS  0x00000000U
#define MSK_NX90_biss_mc1_MO_BUSY          0x0000ff00U
#define SRT_NX90_biss_mc1_MO_BUSY          8
#define DFLT_VAL_NX90_biss_mc1_MO_BUSY     0x00000000U
#define DFLT_BF_VAL_NX90_biss_mc1_MO_BUSY  0x00000000U
#define MSK_NX90_biss_mc1_REVISION         0x00ff0000U
#define SRT_NX90_biss_mc1_REVISION         16
#define DFLT_VAL_NX90_biss_mc1_REVISION    0x00000000U
#define DFLT_BF_VAL_NX90_biss_mc1_REVISION 0x00000000U
#define MSK_NX90_biss_mc1_VERSION          0xff000000U
#define SRT_NX90_biss_mc1_VERSION          24
#define DFLT_VAL_NX90_biss_mc1_VERSION     0x00000000U
#define DFLT_BF_VAL_NX90_biss_mc1_VERSION  0x00000000U

/* all used bits of 'NX90_biss_mc1': */
#define MSK_USED_BITS_NX90_biss_mc1 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register biss_cc_sl */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_cc_sl       0x000000ECU
#define Adr_NX90_biss0_app_biss_cc_sl 0xFF801BECU
#define Adr_NX90_biss1_app_biss_cc_sl 0xFF801CECU
#define DFLT_VAL_NX90_biss_cc_sl      0x00000001U

#define MSK_NX90_biss_cc_sl_cc_sl_reserved1         0x0000000fU
#define SRT_NX90_biss_cc_sl_cc_sl_reserved1         0
#define DFLT_VAL_NX90_biss_cc_sl_cc_sl_reserved1    0x00000001U
#define DFLT_BF_VAL_NX90_biss_cc_sl_cc_sl_reserved1 0x00000001U
#define MSK_NX90_biss_cc_sl_SLAVELOC5               0x00000010U
#define SRT_NX90_biss_cc_sl_SLAVELOC5               4
#define DFLT_VAL_NX90_biss_cc_sl_SLAVELOC5          0x00000000U
#define DFLT_BF_VAL_NX90_biss_cc_sl_SLAVELOC5       0x00000000U
#define MSK_NX90_biss_cc_sl_CFGCH1                  0x00000300U
#define SRT_NX90_biss_cc_sl_CFGCH1                  8
#define DFLT_VAL_NX90_biss_cc_sl_CFGCH1             0x00000000U
#define DFLT_BF_VAL_NX90_biss_cc_sl_CFGCH1          0x00000000U
#define MSK_NX90_biss_cc_sl_CFGCH2                  0x00000c00U
#define SRT_NX90_biss_cc_sl_CFGCH2                  10
#define DFLT_VAL_NX90_biss_cc_sl_CFGCH2             0x00000000U
#define DFLT_BF_VAL_NX90_biss_cc_sl_CFGCH2          0x00000000U
#define MSK_NX90_biss_cc_sl_ACTnSENS                0xff000000U
#define SRT_NX90_biss_cc_sl_ACTnSENS                24
#define DFLT_VAL_NX90_biss_cc_sl_ACTnSENS           0x00000000U
#define DFLT_BF_VAL_NX90_biss_cc_sl_ACTnSENS        0x00000000U

/* all used bits of 'NX90_biss_cc_sl': */
#define MSK_USED_BITS_NX90_biss_cc_sl 0xff000f1fU

/* --------------------------------------------------------------------- */
/* Register biss_status0 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_status0       0x000000F0U
#define Adr_NX90_biss0_app_biss_status0 0xFF801BF0U
#define Adr_NX90_biss1_app_biss_status0 0xFF801CF0U

#define MSK_NX90_biss_status0_EOT               0x00000001U
#define SRT_NX90_biss_status0_EOT               0
#define MSK_NX90_biss_status0_status0_reserved1 0x00000002U
#define SRT_NX90_biss_status0_status0_reserved1 1
#define MSK_NX90_biss_status0_REGEND            0x00000004U
#define SRT_NX90_biss_status0_REGEND            2
#define MSK_NX90_biss_status0_nREGERR           0x00000008U
#define SRT_NX90_biss_status0_nREGERR           3
#define MSK_NX90_biss_status0_nSCDERR           0x00000010U
#define SRT_NX90_biss_status0_nSCDERR           4
#define MSK_NX90_biss_status0_nDELAYERR         0x00000020U
#define SRT_NX90_biss_status0_nDELAYERR         5
#define MSK_NX90_biss_status0_nAGSERR           0x00000040U
#define SRT_NX90_biss_status0_nAGSERR           6
#define MSK_NX90_biss_status0_nERR              0x00000080U
#define SRT_NX90_biss_status0_nERR              7
#define MSK_NX90_biss_status0_SVALID0           0x00000200U
#define SRT_NX90_biss_status0_SVALID0           9
#define MSK_NX90_biss_status0_SVALID1           0x00000800U
#define SRT_NX90_biss_status0_SVALID1           11
#define MSK_NX90_biss_status0_SVALID2           0x00002000U
#define SRT_NX90_biss_status0_SVALID2           13
#define MSK_NX90_biss_status0_SVALID3           0x00008000U
#define SRT_NX90_biss_status0_SVALID3           15
#define MSK_NX90_biss_status0_SVALID4           0x00020000U
#define SRT_NX90_biss_status0_SVALID4           17
#define MSK_NX90_biss_status0_SVALID5           0x00080000U
#define SRT_NX90_biss_status0_SVALID5           19
#define MSK_NX90_biss_status0_SVALID6           0x00200000U
#define SRT_NX90_biss_status0_SVALID6           21
#define MSK_NX90_biss_status0_SVALID7           0x00800000U
#define SRT_NX90_biss_status0_SVALID7           23
#define MSK_NX90_biss_status0_REGBYTES          0x3f000000U
#define SRT_NX90_biss_status0_REGBYTES          24
#define MSK_NX90_biss_status0_CDSSEL            0x40000000U
#define SRT_NX90_biss_status0_CDSSEL            30
#define MSK_NX90_biss_status0_CDMTIMEOUT        0x80000000U
#define SRT_NX90_biss_status0_CDMTIMEOUT        31

/* all used bits of 'NX90_biss_status0': */
#define MSK_USED_BITS_NX90_biss_status0 0xffaaaaffU

/* --------------------------------------------------------------------- */
/* Register biss_ir */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ir       0x000000F4U
#define Adr_NX90_biss0_app_biss_ir 0xFF801BF4U
#define Adr_NX90_biss1_app_biss_ir 0xFF801CF4U
#define DFLT_VAL_NX90_biss_ir      0x00000000U

#define MSK_NX90_biss_ir_AGS              0x00000001U
#define SRT_NX90_biss_ir_AGS              0
#define DFLT_VAL_NX90_biss_ir_AGS         0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_AGS      0x00000000U
#define MSK_NX90_biss_ir_INSTR            0x0000000eU
#define SRT_NX90_biss_ir_INSTR            1
#define DFLT_VAL_NX90_biss_ir_INSTR       0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_INSTR    0x00000000U
#define MSK_NX90_biss_ir_INIT             0x00000010U
#define SRT_NX90_biss_ir_INIT             4
#define DFLT_VAL_NX90_biss_ir_INIT        0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_INIT     0x00000000U
#define MSK_NX90_biss_ir_SWBANK           0x00000020U
#define SRT_NX90_biss_ir_SWBANK           5
#define DFLT_VAL_NX90_biss_ir_SWBANK      0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_SWBANK   0x00000000U
#define MSK_NX90_biss_ir_HOLDBANK         0x00000040U
#define SRT_NX90_biss_ir_HOLDBANK         6
#define DFLT_VAL_NX90_biss_ir_HOLDBANK    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_HOLDBANK 0x00000000U
#define MSK_NX90_biss_ir_BREAK            0x00000080U
#define SRT_NX90_biss_ir_BREAK            7
#define DFLT_VAL_NX90_biss_ir_BREAK       0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_BREAK    0x00000000U
#define MSK_NX90_biss_ir_CLKENI           0x00000100U
#define SRT_NX90_biss_ir_CLKENI           8
#define DFLT_VAL_NX90_biss_ir_CLKENI      0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_CLKENI   0x00000000U
#define MSK_NX90_biss_ir_ENTEST           0x00000200U
#define SRT_NX90_biss_ir_ENTEST           9
#define DFLT_VAL_NX90_biss_ir_ENTEST      0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_ENTEST   0x00000000U
#define MSK_NX90_biss_ir_CFGIF            0x00000c00U
#define SRT_NX90_biss_ir_CFGIF            10
#define DFLT_VAL_NX90_biss_ir_CFGIF       0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_CFGIF    0x00000000U
#define MSK_NX90_biss_ir_MAFS             0x00001000U
#define SRT_NX90_biss_ir_MAFS             12
#define DFLT_VAL_NX90_biss_ir_MAFS        0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_MAFS     0x00000000U
#define MSK_NX90_biss_ir_MAVS             0x00002000U
#define SRT_NX90_biss_ir_MAVS             13
#define DFLT_VAL_NX90_biss_ir_MAVS        0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_MAVS     0x00000000U
#define MSK_NX90_biss_ir_MAFO             0x00004000U
#define SRT_NX90_biss_ir_MAFO             14
#define DFLT_VAL_NX90_biss_ir_MAFO        0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_MAFO     0x00000000U
#define MSK_NX90_biss_ir_MAVO             0x00008000U
#define SRT_NX90_biss_ir_MAVO             15
#define DFLT_VAL_NX90_biss_ir_MAVO        0x00000000U
#define DFLT_BF_VAL_NX90_biss_ir_MAVO     0x00000000U

/* all used bits of 'NX90_biss_ir': */
#define MSK_USED_BITS_NX90_biss_ir 0x0000ffffU

/* --------------------------------------------------------------------- */
/* Register biss_status1 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_status1       0x000000F8U
#define Adr_NX90_biss0_app_biss_status1 0xFF801BF8U
#define Adr_NX90_biss1_app_biss_status1 0xFF801CF8U

#define MSK_NX90_biss_status1_SL1         0x00000001U
#define SRT_NX90_biss_status1_SL1         0
#define MSK_NX90_biss_status1_CDS1        0x00000002U
#define SRT_NX90_biss_status1_CDS1        1
#define MSK_NX90_biss_status1_SWBANKFAILS 0x01000000U
#define SRT_NX90_biss_status1_SWBANKFAILS 24

/* all used bits of 'NX90_biss_status1': */
#define MSK_USED_BITS_NX90_biss_status1 0x01000003U


/* ===================================================================== */

/* AREA biss_ctrl */
/* Area of biss_ctrl0_app, biss_ctrl1_app */

/* ===================================================================== */

#define Addr_NX90_biss_ctrl0_app 0xFF801D00U
#define Addr_NX90_biss_ctrl1_app 0xFF801D20U

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_trigger_cfg */
/* => BiSS trigger configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_trigger_cfg            0x00000000U
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_trigger_cfg 0xFF801D00U
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_trigger_cfg 0xFF801D20U
#define DFLT_VAL_NX90_biss_ctrl_trigger_cfg           0x00000000U

#define MSK_NX90_biss_ctrl_trigger_cfg_sel         0x0000000fU
#define SRT_NX90_biss_ctrl_trigger_cfg_sel         0
#define DFLT_VAL_NX90_biss_ctrl_trigger_cfg_sel    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_trigger_cfg_sel 0x00000000U

/* all used bits of 'NX90_biss_ctrl_trigger_cfg': */
#define MSK_USED_BITS_NX90_biss_ctrl_trigger_cfg 0x0000000fU

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_trigger */
/* => BiSS trigger */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_trigger            0x00000004U
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_trigger 0xFF801D04U
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_trigger 0xFF801D24U
#define DFLT_VAL_NX90_biss_ctrl_trigger           0x00000000U

#define MSK_NX90_biss_ctrl_trigger_manual         0x00000001U
#define SRT_NX90_biss_ctrl_trigger_manual         0
#define DFLT_VAL_NX90_biss_ctrl_trigger_manual    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_trigger_manual 0x00000000U

/* all used bits of 'NX90_biss_ctrl_trigger': */
#define MSK_USED_BITS_NX90_biss_ctrl_trigger 0x00000001U

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_raw */
/* => BiSS raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_raw            0x00000008U
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_raw 0xFF801D08U
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_raw 0xFF801D28U
#define DFLT_VAL_NX90_biss_ctrl_irq_raw           0x00000000U

#define MSK_NX90_biss_ctrl_irq_raw_eot         0x00000001U
#define SRT_NX90_biss_ctrl_irq_raw_eot         0
#define DFLT_VAL_NX90_biss_ctrl_irq_raw_eot    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_raw_eot 0x00000000U
#define MSK_NX90_biss_ctrl_irq_raw_err         0x00000002U
#define SRT_NX90_biss_ctrl_irq_raw_err         1
#define DFLT_VAL_NX90_biss_ctrl_irq_raw_err    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_raw_err 0x00000000U

/* all used bits of 'NX90_biss_ctrl_irq_raw': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_raw 0x00000003U

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_masked */
/* => BiSS masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_masked            0x0000000CU
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_masked 0xFF801D0CU
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_masked 0xFF801D2CU

#define MSK_NX90_biss_ctrl_irq_masked_eot 0x00000001U
#define SRT_NX90_biss_ctrl_irq_masked_eot 0
#define MSK_NX90_biss_ctrl_irq_masked_err 0x00000002U
#define SRT_NX90_biss_ctrl_irq_masked_err 1

/* all used bits of 'NX90_biss_ctrl_irq_masked': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_masked 0x00000003U

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_msk_set */
/* => BiSS IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to mtgy_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_msk_set            0x00000010U
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_msk_set 0xFF801D10U
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_msk_set 0xFF801D30U
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_set           0x00000000U

#define MSK_NX90_biss_ctrl_irq_msk_set_eot         0x00000001U
#define SRT_NX90_biss_ctrl_irq_msk_set_eot         0
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_set_eot    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_set_eot 0x00000000U
#define MSK_NX90_biss_ctrl_irq_msk_set_err         0x00000002U
#define SRT_NX90_biss_ctrl_irq_msk_set_err         1
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_set_err    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_set_err 0x00000000U

/* all used bits of 'NX90_biss_ctrl_irq_msk_set': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_msk_set 0x00000003U

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_msk_reset */
/* => BiSS IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_msk_reset            0x00000014U
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_msk_reset 0xFF801D14U
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_msk_reset 0xFF801D34U
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_reset           0x00000000U

#define MSK_NX90_biss_ctrl_irq_msk_reset_eot         0x00000001U
#define SRT_NX90_biss_ctrl_irq_msk_reset_eot         0
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_reset_eot    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_reset_eot 0x00000000U
#define MSK_NX90_biss_ctrl_irq_msk_reset_err         0x00000002U
#define SRT_NX90_biss_ctrl_irq_msk_reset_err         1
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_reset_err    0x00000000U
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_reset_err 0x00000000U

/* all used bits of 'NX90_biss_ctrl_irq_msk_reset': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_msk_reset 0x00000003U


/* ===================================================================== */

/* Area of io_link_xpic_app */

/* ===================================================================== */

#define Addr_NX90_io_link_xpic_app 0xFF900400U

/* ===================================================================== */

/* AREA xlink */
/* Area of xlink0, xlink1, xlink2, xlink3, xlink4, xlink5, xlink6, xlink7 */

/* ===================================================================== */

#define Addr_NX90_xlink0 0xFF900400U
#define Addr_NX90_xlink1 0xFF900410U
#define Addr_NX90_xlink2 0xFF900420U
#define Addr_NX90_xlink3 0xFF900430U
#define Addr_NX90_xlink4 0xFF900440U
#define Addr_NX90_xlink5 0xFF900450U
#define Addr_NX90_xlink6 0xFF900460U
#define Addr_NX90_xlink7 0xFF900470U

/* --------------------------------------------------------------------- */
/* Register xlink_cfg */
/* => configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_cfg    0x00000000U
#define Adr_NX90_xlink0_xlink_cfg 0xFF900400U
#define Adr_NX90_xlink1_xlink_cfg 0xFF900410U
#define Adr_NX90_xlink2_xlink_cfg 0xFF900420U
#define Adr_NX90_xlink3_xlink_cfg 0xFF900430U
#define Adr_NX90_xlink4_xlink_cfg 0xFF900440U
#define Adr_NX90_xlink5_xlink_cfg 0xFF900450U
#define Adr_NX90_xlink6_xlink_cfg 0xFF900460U
#define Adr_NX90_xlink7_xlink_cfg 0xFF900470U
#define DFLT_VAL_NX90_xlink_cfg   0xb4a0001bU

#define MSK_NX90_xlink_cfg_rate_inc           0x0000ffffU
#define SRT_NX90_xlink_cfg_rate_inc           0
#define DFLT_VAL_NX90_xlink_cfg_rate_inc      0x0000001bU
#define DFLT_BF_VAL_NX90_xlink_cfg_rate_inc   0x0000001bU
#define MSK_NX90_xlink_cfg_xlink_en           0x00010000U
#define SRT_NX90_xlink_cfg_xlink_en           16
#define DFLT_VAL_NX90_xlink_cfg_xlink_en      0x00000000U
#define DFLT_BF_VAL_NX90_xlink_cfg_xlink_en   0x00000000U
#define MSK_NX90_xlink_cfg_fb_en              0x00020000U
#define SRT_NX90_xlink_cfg_fb_en              17
#define DFLT_VAL_NX90_xlink_cfg_fb_en         0x00000000U
#define DFLT_BF_VAL_NX90_xlink_cfg_fb_en      0x00000000U
#define MSK_NX90_xlink_cfg_bclk2oe_en         0x00040000U
#define SRT_NX90_xlink_cfg_bclk2oe_en         18
#define DFLT_VAL_NX90_xlink_cfg_bclk2oe_en    0x00000000U
#define DFLT_BF_VAL_NX90_xlink_cfg_bclk2oe_en 0x00000000U
#define MSK_NX90_xlink_cfg_cnt_da             0x00080000U
#define SRT_NX90_xlink_cfg_cnt_da             19
#define DFLT_VAL_NX90_xlink_cfg_cnt_da        0x00000000U
#define DFLT_BF_VAL_NX90_xlink_cfg_cnt_da     0x00000000U
#define MSK_NX90_xlink_cfg_bits2rec           0x00f00000U
#define SRT_NX90_xlink_cfg_bits2rec           20
#define DFLT_VAL_NX90_xlink_cfg_bits2rec      0x00a00000U
#define DFLT_BF_VAL_NX90_xlink_cfg_bits2rec   0x0000000aU
#define MSK_NX90_xlink_cfg_start_spl          0x0f000000U
#define SRT_NX90_xlink_cfg_start_spl          24
#define DFLT_VAL_NX90_xlink_cfg_start_spl     0x04000000U
#define DFLT_BF_VAL_NX90_xlink_cfg_start_spl  0x00000004U
#define MSK_NX90_xlink_cfg_end_spl            0xf0000000U
#define SRT_NX90_xlink_cfg_end_spl            28
#define DFLT_VAL_NX90_xlink_cfg_end_spl       0xb0000000U
#define DFLT_BF_VAL_NX90_xlink_cfg_end_spl    0x0000000bU

/* all used bits of 'NX90_xlink_cfg': */
#define MSK_USED_BITS_NX90_xlink_cfg 0xffffffffU

/* --------------------------------------------------------------------- */
/* Register xlink_tx */
/* => xlink transmit register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_tx    0x00000004U
#define Adr_NX90_xlink0_xlink_tx 0xFF900404U
#define Adr_NX90_xlink1_xlink_tx 0xFF900414U
#define Adr_NX90_xlink2_xlink_tx 0xFF900424U
#define Adr_NX90_xlink3_xlink_tx 0xFF900434U
#define Adr_NX90_xlink4_xlink_tx 0xFF900444U
#define Adr_NX90_xlink5_xlink_tx 0xFF900454U
#define Adr_NX90_xlink6_xlink_tx 0xFF900464U
#define Adr_NX90_xlink7_xlink_tx 0xFF900474U
#define DFLT_VAL_NX90_xlink_tx   0x00030000U

#define MSK_NX90_xlink_tx_hold            0x0000ffffU
#define SRT_NX90_xlink_tx_hold            0
#define DFLT_VAL_NX90_xlink_tx_hold       0x00000000U
#define DFLT_BF_VAL_NX90_xlink_tx_hold    0x00000000U
#define MSK_NX90_xlink_tx_rdy_ro          0x00010000U
#define SRT_NX90_xlink_tx_rdy_ro          16
#define DFLT_VAL_NX90_xlink_tx_rdy_ro     0x00010000U
#define DFLT_BF_VAL_NX90_xlink_tx_rdy_ro  0x00000001U
#define MSK_NX90_xlink_tx_idle_ro         0x00020000U
#define SRT_NX90_xlink_tx_idle_ro         17
#define DFLT_VAL_NX90_xlink_tx_idle_ro    0x00020000U
#define DFLT_BF_VAL_NX90_xlink_tx_idle_ro 0x00000001U

/* all used bits of 'NX90_xlink_tx': */
#define MSK_USED_BITS_NX90_xlink_tx 0x0003ffffU

/* --------------------------------------------------------------------- */
/* Register xlink_rx */
/* => xlink RX register */
/*    writing to the register, reset the ready bit, the overflow bit and the sampling error bit */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_rx    0x00000008U
#define Adr_NX90_xlink0_xlink_rx 0xFF900408U
#define Adr_NX90_xlink1_xlink_rx 0xFF900418U
#define Adr_NX90_xlink2_xlink_rx 0xFF900428U
#define Adr_NX90_xlink3_xlink_rx 0xFF900438U
#define Adr_NX90_xlink4_xlink_rx 0xFF900448U
#define Adr_NX90_xlink5_xlink_rx 0xFF900458U
#define Adr_NX90_xlink6_xlink_rx 0xFF900468U
#define Adr_NX90_xlink7_xlink_rx 0xFF900478U
#define DFLT_VAL_NX90_xlink_rx   0x0000ffffU

#define MSK_NX90_xlink_rx_hold_ro            0x0000ffffU
#define SRT_NX90_xlink_rx_hold_ro            0
#define DFLT_VAL_NX90_xlink_rx_hold_ro       0x0000ffffU
#define DFLT_BF_VAL_NX90_xlink_rx_hold_ro    0x0000ffffU
#define MSK_NX90_xlink_rx_rdy_ro             0x00010000U
#define SRT_NX90_xlink_rx_rdy_ro             16
#define DFLT_VAL_NX90_xlink_rx_rdy_ro        0x00000000U
#define DFLT_BF_VAL_NX90_xlink_rx_rdy_ro     0x00000000U
#define MSK_NX90_xlink_rx_rxd_ro             0x00080000U
#define SRT_NX90_xlink_rx_rxd_ro             19
#define DFLT_VAL_NX90_xlink_rx_rxd_ro        0x00000000U
#define DFLT_BF_VAL_NX90_xlink_rx_rxd_ro     0x00000000U
#define MSK_NX90_xlink_rx_ovf_err_ro         0x00100000U
#define SRT_NX90_xlink_rx_ovf_err_ro         20
#define DFLT_VAL_NX90_xlink_rx_ovf_err_ro    0x00000000U
#define DFLT_BF_VAL_NX90_xlink_rx_ovf_err_ro 0x00000000U
#define MSK_NX90_xlink_rx_spl_err_ro         0x00200000U
#define SRT_NX90_xlink_rx_spl_err_ro         21
#define DFLT_VAL_NX90_xlink_rx_spl_err_ro    0x00000000U
#define DFLT_BF_VAL_NX90_xlink_rx_spl_err_ro 0x00000000U

/* all used bits of 'NX90_xlink_rx': */
#define MSK_USED_BITS_NX90_xlink_rx 0x0039ffffU

/* --------------------------------------------------------------------- */
/* Register xlink_stat */
/* => xlink status register & io control */
/*    writing to this register set the bit clock counter to zero! */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_stat    0x0000000CU
#define Adr_NX90_xlink0_xlink_stat 0xFF90040CU
#define Adr_NX90_xlink1_xlink_stat 0xFF90041CU
#define Adr_NX90_xlink2_xlink_stat 0xFF90042CU
#define Adr_NX90_xlink3_xlink_stat 0xFF90043CU
#define Adr_NX90_xlink4_xlink_stat 0xFF90044CU
#define Adr_NX90_xlink5_xlink_stat 0xFF90045CU
#define Adr_NX90_xlink6_xlink_stat 0xFF90046CU
#define Adr_NX90_xlink7_xlink_stat 0xFF90047CU
#define DFLT_VAL_NX90_xlink_stat   0x01000000U

#define MSK_NX90_xlink_stat_bit_cnt_ro         0x0000ffffU
#define SRT_NX90_xlink_stat_bit_cnt_ro         0
#define DFLT_VAL_NX90_xlink_stat_bit_cnt_ro    0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_bit_cnt_ro 0x00000000U
#define MSK_NX90_xlink_stat_bit_clk_ro         0x00010000U
#define SRT_NX90_xlink_stat_bit_clk_ro         16
#define DFLT_VAL_NX90_xlink_stat_bit_clk_ro    0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_bit_clk_ro 0x00000000U
#define MSK_NX90_xlink_stat_txo_ro             0x00020000U
#define SRT_NX90_xlink_stat_txo_ro             17
#define DFLT_VAL_NX90_xlink_stat_txo_ro        0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_txo_ro     0x00000000U
#define MSK_NX90_xlink_stat_rxo_ro             0x00040000U
#define SRT_NX90_xlink_stat_rxo_ro             18
#define DFLT_VAL_NX90_xlink_stat_rxo_ro        0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_rxo_ro     0x00000000U
#define MSK_NX90_xlink_stat_txoe_ro            0x00080000U
#define SRT_NX90_xlink_stat_txoe_ro            19
#define DFLT_VAL_NX90_xlink_stat_txoe_ro       0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_txoe_ro    0x00000000U
#define MSK_NX90_xlink_stat_io_mode            0x00100000U
#define SRT_NX90_xlink_stat_io_mode            20
#define DFLT_VAL_NX90_xlink_stat_io_mode       0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_io_mode    0x00000000U
#define MSK_NX90_xlink_stat_set_tx             0x00200000U
#define SRT_NX90_xlink_stat_set_tx             21
#define DFLT_VAL_NX90_xlink_stat_set_tx        0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_set_tx     0x00000000U
#define MSK_NX90_xlink_stat_set_txoe           0x00400000U
#define SRT_NX90_xlink_stat_set_txoe           22
#define DFLT_VAL_NX90_xlink_stat_set_txoe      0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_set_txoe   0x00000000U
#define MSK_NX90_xlink_stat_set_wakeup         0x00800000U
#define SRT_NX90_xlink_stat_set_wakeup         23
#define DFLT_VAL_NX90_xlink_stat_set_wakeup    0x00000000U
#define DFLT_BF_VAL_NX90_xlink_stat_set_wakeup 0x00000000U
#define MSK_NX90_xlink_stat_filter_en          0x01000000U
#define SRT_NX90_xlink_stat_filter_en          24
#define DFLT_VAL_NX90_xlink_stat_filter_en     0x01000000U
#define DFLT_BF_VAL_NX90_xlink_stat_filter_en  0x00000001U

/* all used bits of 'NX90_xlink_stat': */
#define MSK_USED_BITS_NX90_xlink_stat 0x01ffffffU


/* ===================================================================== */

/* Area of io_link_irq */

/* ===================================================================== */

#define Addr_NX90_io_link_irq 0xFF900480U

/* --------------------------------------------------------------------- */
/* Register io_link_irq_raw */
/* => IO-Link raw interrupts: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_raw         0x00000000U
#define Adr_NX90_io_link_irq_io_link_irq_raw 0xFF900480U
#define Adr_NX90_io_link_irq_raw             0xFF900480U
#define DFLT_VAL_NX90_io_link_irq_raw        0x00000000U

#define MSK_NX90_io_link_irq_raw_xlink0_tx_next          0x00000001U
#define SRT_NX90_io_link_irq_raw_xlink0_tx_next          0
#define DFLT_VAL_NX90_io_link_irq_raw_xlink0_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink0_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink0_rx_next          0x00000002U
#define SRT_NX90_io_link_irq_raw_xlink0_rx_next          1
#define DFLT_VAL_NX90_io_link_irq_raw_xlink0_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink0_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink0_shift_en         0x00000004U
#define SRT_NX90_io_link_irq_raw_xlink0_shift_en         2
#define DFLT_VAL_NX90_io_link_irq_raw_xlink0_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink0_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink1_tx_next          0x00000010U
#define SRT_NX90_io_link_irq_raw_xlink1_tx_next          4
#define DFLT_VAL_NX90_io_link_irq_raw_xlink1_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink1_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink1_rx_next          0x00000020U
#define SRT_NX90_io_link_irq_raw_xlink1_rx_next          5
#define DFLT_VAL_NX90_io_link_irq_raw_xlink1_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink1_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink1_shift_en         0x00000040U
#define SRT_NX90_io_link_irq_raw_xlink1_shift_en         6
#define DFLT_VAL_NX90_io_link_irq_raw_xlink1_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink1_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink2_tx_next          0x00000100U
#define SRT_NX90_io_link_irq_raw_xlink2_tx_next          8
#define DFLT_VAL_NX90_io_link_irq_raw_xlink2_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink2_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink2_rx_next          0x00000200U
#define SRT_NX90_io_link_irq_raw_xlink2_rx_next          9
#define DFLT_VAL_NX90_io_link_irq_raw_xlink2_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink2_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink2_shift_en         0x00000400U
#define SRT_NX90_io_link_irq_raw_xlink2_shift_en         10
#define DFLT_VAL_NX90_io_link_irq_raw_xlink2_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink2_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink3_tx_next          0x00001000U
#define SRT_NX90_io_link_irq_raw_xlink3_tx_next          12
#define DFLT_VAL_NX90_io_link_irq_raw_xlink3_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink3_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink3_rx_next          0x00002000U
#define SRT_NX90_io_link_irq_raw_xlink3_rx_next          13
#define DFLT_VAL_NX90_io_link_irq_raw_xlink3_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink3_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink3_shift_en         0x00004000U
#define SRT_NX90_io_link_irq_raw_xlink3_shift_en         14
#define DFLT_VAL_NX90_io_link_irq_raw_xlink3_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink3_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink4_tx_next          0x00010000U
#define SRT_NX90_io_link_irq_raw_xlink4_tx_next          16
#define DFLT_VAL_NX90_io_link_irq_raw_xlink4_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink4_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink4_rx_next          0x00020000U
#define SRT_NX90_io_link_irq_raw_xlink4_rx_next          17
#define DFLT_VAL_NX90_io_link_irq_raw_xlink4_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink4_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink4_shift_en         0x00040000U
#define SRT_NX90_io_link_irq_raw_xlink4_shift_en         18
#define DFLT_VAL_NX90_io_link_irq_raw_xlink4_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink4_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink5_tx_next          0x00100000U
#define SRT_NX90_io_link_irq_raw_xlink5_tx_next          20
#define DFLT_VAL_NX90_io_link_irq_raw_xlink5_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink5_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink5_rx_next          0x00200000U
#define SRT_NX90_io_link_irq_raw_xlink5_rx_next          21
#define DFLT_VAL_NX90_io_link_irq_raw_xlink5_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink5_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink5_shift_en         0x00400000U
#define SRT_NX90_io_link_irq_raw_xlink5_shift_en         22
#define DFLT_VAL_NX90_io_link_irq_raw_xlink5_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink5_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink6_tx_next          0x01000000U
#define SRT_NX90_io_link_irq_raw_xlink6_tx_next          24
#define DFLT_VAL_NX90_io_link_irq_raw_xlink6_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink6_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink6_rx_next          0x02000000U
#define SRT_NX90_io_link_irq_raw_xlink6_rx_next          25
#define DFLT_VAL_NX90_io_link_irq_raw_xlink6_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink6_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink6_shift_en         0x04000000U
#define SRT_NX90_io_link_irq_raw_xlink6_shift_en         26
#define DFLT_VAL_NX90_io_link_irq_raw_xlink6_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink6_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink7_tx_next          0x10000000U
#define SRT_NX90_io_link_irq_raw_xlink7_tx_next          28
#define DFLT_VAL_NX90_io_link_irq_raw_xlink7_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink7_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink7_rx_next          0x20000000U
#define SRT_NX90_io_link_irq_raw_xlink7_rx_next          29
#define DFLT_VAL_NX90_io_link_irq_raw_xlink7_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink7_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_raw_xlink7_shift_en         0x40000000U
#define SRT_NX90_io_link_irq_raw_xlink7_shift_en         30
#define DFLT_VAL_NX90_io_link_irq_raw_xlink7_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink7_shift_en 0x00000000U

/* all used bits of 'NX90_io_link_irq_raw': */
#define MSK_USED_BITS_NX90_io_link_irq_raw 0x77777777U

/* --------------------------------------------------------------------- */
/* Register io_link_irq_masked */
/* => IO-Link Masked IRQ register */
/*    Shows status of masked IRQs (as connected to ARM/xPIC) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_masked         0x00000004U
#define Adr_NX90_io_link_irq_io_link_irq_masked 0xFF900484U
#define Adr_NX90_io_link_irq_masked             0xFF900484U

#define MSK_NX90_io_link_irq_masked_xlink0_tx_next  0x00000001U
#define SRT_NX90_io_link_irq_masked_xlink0_tx_next  0
#define MSK_NX90_io_link_irq_masked_xlink0_rx_next  0x00000002U
#define SRT_NX90_io_link_irq_masked_xlink0_rx_next  1
#define MSK_NX90_io_link_irq_masked_xlink0_shift_en 0x00000004U
#define SRT_NX90_io_link_irq_masked_xlink0_shift_en 2
#define MSK_NX90_io_link_irq_masked_xlink1_tx_next  0x00000010U
#define SRT_NX90_io_link_irq_masked_xlink1_tx_next  4
#define MSK_NX90_io_link_irq_masked_xlink1_rx_next  0x00000020U
#define SRT_NX90_io_link_irq_masked_xlink1_rx_next  5
#define MSK_NX90_io_link_irq_masked_xlink1_shift_en 0x00000040U
#define SRT_NX90_io_link_irq_masked_xlink1_shift_en 6
#define MSK_NX90_io_link_irq_masked_xlink2_tx_next  0x00000100U
#define SRT_NX90_io_link_irq_masked_xlink2_tx_next  8
#define MSK_NX90_io_link_irq_masked_xlink2_rx_next  0x00000200U
#define SRT_NX90_io_link_irq_masked_xlink2_rx_next  9
#define MSK_NX90_io_link_irq_masked_xlink2_shift_en 0x00000400U
#define SRT_NX90_io_link_irq_masked_xlink2_shift_en 10
#define MSK_NX90_io_link_irq_masked_xlink3_tx_next  0x00001000U
#define SRT_NX90_io_link_irq_masked_xlink3_tx_next  12
#define MSK_NX90_io_link_irq_masked_xlink3_rx_next  0x00002000U
#define SRT_NX90_io_link_irq_masked_xlink3_rx_next  13
#define MSK_NX90_io_link_irq_masked_xlink3_shift_en 0x00004000U
#define SRT_NX90_io_link_irq_masked_xlink3_shift_en 14
#define MSK_NX90_io_link_irq_masked_xlink4_tx_next  0x00010000U
#define SRT_NX90_io_link_irq_masked_xlink4_tx_next  16
#define MSK_NX90_io_link_irq_masked_xlink4_rx_next  0x00020000U
#define SRT_NX90_io_link_irq_masked_xlink4_rx_next  17
#define MSK_NX90_io_link_irq_masked_xlink4_shift_en 0x00040000U
#define SRT_NX90_io_link_irq_masked_xlink4_shift_en 18
#define MSK_NX90_io_link_irq_masked_xlink5_tx_next  0x00100000U
#define SRT_NX90_io_link_irq_masked_xlink5_tx_next  20
#define MSK_NX90_io_link_irq_masked_xlink5_rx_next  0x00200000U
#define SRT_NX90_io_link_irq_masked_xlink5_rx_next  21
#define MSK_NX90_io_link_irq_masked_xlink5_shift_en 0x00400000U
#define SRT_NX90_io_link_irq_masked_xlink5_shift_en 22
#define MSK_NX90_io_link_irq_masked_xlink6_tx_next  0x01000000U
#define SRT_NX90_io_link_irq_masked_xlink6_tx_next  24
#define MSK_NX90_io_link_irq_masked_xlink6_rx_next  0x02000000U
#define SRT_NX90_io_link_irq_masked_xlink6_rx_next  25
#define MSK_NX90_io_link_irq_masked_xlink6_shift_en 0x04000000U
#define SRT_NX90_io_link_irq_masked_xlink6_shift_en 26
#define MSK_NX90_io_link_irq_masked_xlink7_tx_next  0x10000000U
#define SRT_NX90_io_link_irq_masked_xlink7_tx_next  28
#define MSK_NX90_io_link_irq_masked_xlink7_rx_next  0x20000000U
#define SRT_NX90_io_link_irq_masked_xlink7_rx_next  29
#define MSK_NX90_io_link_irq_masked_xlink7_shift_en 0x40000000U
#define SRT_NX90_io_link_irq_masked_xlink7_shift_en 30

/* all used bits of 'NX90_io_link_irq_masked': */
#define MSK_USED_BITS_NX90_io_link_irq_masked 0x77777777U

/* --------------------------------------------------------------------- */
/* Register io_link_irq_msk_set */
/* => IO-Link interrupt mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to io_link_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_msk_set         0x00000008U
#define Adr_NX90_io_link_irq_io_link_irq_msk_set 0xFF900488U
#define Adr_NX90_io_link_irq_msk_set             0xFF900488U
#define DFLT_VAL_NX90_io_link_irq_msk_set        0x00000000U

#define MSK_NX90_io_link_irq_msk_set_xlink0_tx_next          0x00000001U
#define SRT_NX90_io_link_irq_msk_set_xlink0_tx_next          0
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink0_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink0_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink0_rx_next          0x00000002U
#define SRT_NX90_io_link_irq_msk_set_xlink0_rx_next          1
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink0_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink0_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink0_shift_en         0x00000004U
#define SRT_NX90_io_link_irq_msk_set_xlink0_shift_en         2
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink0_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink0_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink1_tx_next          0x00000010U
#define SRT_NX90_io_link_irq_msk_set_xlink1_tx_next          4
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink1_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink1_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink1_rx_next          0x00000020U
#define SRT_NX90_io_link_irq_msk_set_xlink1_rx_next          5
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink1_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink1_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink1_shift_en         0x00000040U
#define SRT_NX90_io_link_irq_msk_set_xlink1_shift_en         6
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink1_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink1_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink2_tx_next          0x00000100U
#define SRT_NX90_io_link_irq_msk_set_xlink2_tx_next          8
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink2_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink2_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink2_rx_next          0x00000200U
#define SRT_NX90_io_link_irq_msk_set_xlink2_rx_next          9
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink2_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink2_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink2_shift_en         0x00000400U
#define SRT_NX90_io_link_irq_msk_set_xlink2_shift_en         10
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink2_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink2_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink3_tx_next          0x00001000U
#define SRT_NX90_io_link_irq_msk_set_xlink3_tx_next          12
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink3_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink3_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink3_rx_next          0x00002000U
#define SRT_NX90_io_link_irq_msk_set_xlink3_rx_next          13
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink3_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink3_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink3_shift_en         0x00004000U
#define SRT_NX90_io_link_irq_msk_set_xlink3_shift_en         14
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink3_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink3_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink4_tx_next          0x00010000U
#define SRT_NX90_io_link_irq_msk_set_xlink4_tx_next          16
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink4_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink4_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink4_rx_next          0x00020000U
#define SRT_NX90_io_link_irq_msk_set_xlink4_rx_next          17
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink4_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink4_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink4_shift_en         0x00040000U
#define SRT_NX90_io_link_irq_msk_set_xlink4_shift_en         18
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink4_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink4_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink5_tx_next          0x00100000U
#define SRT_NX90_io_link_irq_msk_set_xlink5_tx_next          20
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink5_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink5_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink5_rx_next          0x00200000U
#define SRT_NX90_io_link_irq_msk_set_xlink5_rx_next          21
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink5_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink5_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink5_shift_en         0x00400000U
#define SRT_NX90_io_link_irq_msk_set_xlink5_shift_en         22
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink5_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink5_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink6_tx_next          0x01000000U
#define SRT_NX90_io_link_irq_msk_set_xlink6_tx_next          24
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink6_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink6_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink6_rx_next          0x02000000U
#define SRT_NX90_io_link_irq_msk_set_xlink6_rx_next          25
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink6_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink6_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink6_shift_en         0x04000000U
#define SRT_NX90_io_link_irq_msk_set_xlink6_shift_en         26
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink6_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink6_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink7_tx_next          0x10000000U
#define SRT_NX90_io_link_irq_msk_set_xlink7_tx_next          28
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink7_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink7_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink7_rx_next          0x20000000U
#define SRT_NX90_io_link_irq_msk_set_xlink7_rx_next          29
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink7_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink7_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_set_xlink7_shift_en         0x40000000U
#define SRT_NX90_io_link_irq_msk_set_xlink7_shift_en         30
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink7_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink7_shift_en 0x00000000U

/* all used bits of 'NX90_io_link_irq_msk_set': */
#define MSK_USED_BITS_NX90_io_link_irq_msk_set 0x77777777U

/* --------------------------------------------------------------------- */
/* Register io_link_irq_msk_reset */
/* => IO-Link interrupt mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_msk_reset         0x0000000CU
#define Adr_NX90_io_link_irq_io_link_irq_msk_reset 0xFF90048CU
#define Adr_NX90_io_link_irq_msk_reset             0xFF90048CU
#define DFLT_VAL_NX90_io_link_irq_msk_reset        0x00000000U

#define MSK_NX90_io_link_irq_msk_reset_xlink0_tx_next          0x00000001U
#define SRT_NX90_io_link_irq_msk_reset_xlink0_tx_next          0
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink0_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink0_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink0_rx_next          0x00000002U
#define SRT_NX90_io_link_irq_msk_reset_xlink0_rx_next          1
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink0_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink0_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink0_shift_en         0x00000004U
#define SRT_NX90_io_link_irq_msk_reset_xlink0_shift_en         2
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink0_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink0_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink1_tx_next          0x00000010U
#define SRT_NX90_io_link_irq_msk_reset_xlink1_tx_next          4
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink1_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink1_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink1_rx_next          0x00000020U
#define SRT_NX90_io_link_irq_msk_reset_xlink1_rx_next          5
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink1_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink1_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink1_shift_en         0x00000040U
#define SRT_NX90_io_link_irq_msk_reset_xlink1_shift_en         6
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink1_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink1_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink2_tx_next          0x00000100U
#define SRT_NX90_io_link_irq_msk_reset_xlink2_tx_next          8
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink2_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink2_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink2_rx_next          0x00000200U
#define SRT_NX90_io_link_irq_msk_reset_xlink2_rx_next          9
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink2_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink2_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink2_shift_en         0x00000400U
#define SRT_NX90_io_link_irq_msk_reset_xlink2_shift_en         10
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink2_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink2_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink3_tx_next          0x00001000U
#define SRT_NX90_io_link_irq_msk_reset_xlink3_tx_next          12
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink3_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink3_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink3_rx_next          0x00002000U
#define SRT_NX90_io_link_irq_msk_reset_xlink3_rx_next          13
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink3_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink3_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink3_shift_en         0x00004000U
#define SRT_NX90_io_link_irq_msk_reset_xlink3_shift_en         14
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink3_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink3_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink4_tx_next          0x00010000U
#define SRT_NX90_io_link_irq_msk_reset_xlink4_tx_next          16
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink4_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink4_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink4_rx_next          0x00020000U
#define SRT_NX90_io_link_irq_msk_reset_xlink4_rx_next          17
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink4_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink4_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink4_shift_en         0x00040000U
#define SRT_NX90_io_link_irq_msk_reset_xlink4_shift_en         18
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink4_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink4_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink5_tx_next          0x00100000U
#define SRT_NX90_io_link_irq_msk_reset_xlink5_tx_next          20
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink5_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink5_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink5_rx_next          0x00200000U
#define SRT_NX90_io_link_irq_msk_reset_xlink5_rx_next          21
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink5_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink5_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink5_shift_en         0x00400000U
#define SRT_NX90_io_link_irq_msk_reset_xlink5_shift_en         22
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink5_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink5_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink6_tx_next          0x01000000U
#define SRT_NX90_io_link_irq_msk_reset_xlink6_tx_next          24
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink6_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink6_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink6_rx_next          0x02000000U
#define SRT_NX90_io_link_irq_msk_reset_xlink6_rx_next          25
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink6_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink6_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink6_shift_en         0x04000000U
#define SRT_NX90_io_link_irq_msk_reset_xlink6_shift_en         26
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink6_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink6_shift_en 0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink7_tx_next          0x10000000U
#define SRT_NX90_io_link_irq_msk_reset_xlink7_tx_next          28
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink7_tx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink7_tx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink7_rx_next          0x20000000U
#define SRT_NX90_io_link_irq_msk_reset_xlink7_rx_next          29
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink7_rx_next     0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink7_rx_next  0x00000000U
#define MSK_NX90_io_link_irq_msk_reset_xlink7_shift_en         0x40000000U
#define SRT_NX90_io_link_irq_msk_reset_xlink7_shift_en         30
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink7_shift_en    0x00000000U
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink7_shift_en 0x00000000U

/* all used bits of 'NX90_io_link_irq_msk_reset': */
#define MSK_USED_BITS_NX90_io_link_irq_msk_reset 0x77777777U


/* ===================================================================== */

/* Area of debug_slave */

/* ===================================================================== */

#define Addr_NX90_debug_slave 0xFFFF8000U

/* ===================================================================== */

/* AREA xc_extbus_sel */
/* Area of  */

/* ===================================================================== */


/* --------------------------------------------------------------------- */
/* Register xc_extbus_sel_ctrl */
/* => External XC-bus-selection register - FPGA/EVA-Board version only!!! */
/*    Bus coding: */
/*    0000 : PHY1 */
/*    0001 : PHY2 */
/*    0010 : MMC */
/*    0011 : ProfiBus */
/*    0100 : CAN */
/*    0101 : ASI */
/*    1111 : nothing selected */
/*    Each XC-block can be assigned to one of these busses by setting the according bit-arear to the */
/*    value, the bus is coded with. */
/*    NO bus MUST be assigned to more than one XC-Block! */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xc_extbus_sel_ctrl  0x00000000U
#define DFLT_VAL_NX90_xc_extbus_sel_ctrl 0x00000010U

#define MSK_NX90_xc_extbus_sel_ctrl_xmac0_sel         0x0000000fU
#define SRT_NX90_xc_extbus_sel_ctrl_xmac0_sel         0
#define DFLT_VAL_NX90_xc_extbus_sel_ctrl_xmac0_sel    0x00000000U
#define DFLT_BF_VAL_NX90_xc_extbus_sel_ctrl_xmac0_sel 0x00000000U
#define MSK_NX90_xc_extbus_sel_ctrl_xmac1_sel         0x000000f0U
#define SRT_NX90_xc_extbus_sel_ctrl_xmac1_sel         4
#define DFLT_VAL_NX90_xc_extbus_sel_ctrl_xmac1_sel    0x00000010U
#define DFLT_BF_VAL_NX90_xc_extbus_sel_ctrl_xmac1_sel 0x00000001U

/* all used bits of 'NX90_xc_extbus_sel_ctrl': */
#define MSK_USED_BITS_NX90_xc_extbus_sel_ctrl 0x000000ffU




/*********************************************************************/
/* area structure definitions                                        */
/*********************************************************************/


typedef struct NX90_CM4_MISC_CTRL_AREA_Ttag
{
  volatile uint32_t  ulCm4_misc_ctrl_cpu_info;
  volatile uint32_t  ulCm4_misc_ctrl_fpu_irq_raw;
  volatile uint32_t  ulCm4_misc_ctrl_fpu_irq_masked;
  volatile uint32_t  ulCm4_misc_ctrl_fpu_irq_msk_set;
  volatile uint32_t  ulCm4_misc_ctrl_fpu_irq_msk_reset;
} NX90_CM4_MISC_CTRL_AREA_T;

typedef struct NX90_DMAC_CH_AREA_Ttag
{
  volatile uint32_t  ulDmac_chsrc_ad;
  volatile uint32_t  ulDmac_chdest_ad;
  volatile uint32_t  ulDmac_chlink;
  volatile uint32_t  ulDmac_chctrl;
  volatile uint32_t  ulDmac_chcfg;
} NX90_DMAC_CH_AREA_T;

typedef struct NX90_DMAC_REG_AREA_Ttag
{
  volatile uint32_t  ulDmac_int_status;
  volatile uint32_t  ulDmac_inttc_status;
  volatile uint32_t  ulDmac_inttc_clear;
  volatile uint32_t  ulDmac_interr_status;
  volatile uint32_t  ulDmac_interr_clear;
  volatile uint32_t  ulDmac_rawinttc_status;
  volatile uint32_t  ulDmac_rawinterr_status;
  volatile uint32_t  ulDmac_enabled_channel;
  volatile uint32_t  ulDmac_softb_req;
  volatile uint32_t  ulDmac_softs_req;
  volatile uint32_t  ulDmac_softlb_req;
  volatile uint32_t  ulDmac_softls_req;
  volatile uint32_t  ulDmac_config;
  volatile uint32_t  ulDmac_sync;
} NX90_DMAC_REG_AREA_T;

typedef struct NX90_UART_AREA_Ttag
{
  volatile uint32_t  ulUartdr;
  volatile uint32_t  ulUartrsr;
  volatile uint32_t  ulUartlcr_h;
  volatile uint32_t  ulUartlcr_m;
  volatile uint32_t  ulUartlcr_l;
  volatile uint32_t  ulUartcr;
  volatile uint32_t  ulUartfr;
  volatile uint32_t  ulUartiir;
  volatile uint32_t  ulUartilpr;
  volatile uint32_t  ulUartrts;
  volatile uint32_t  ulUartforerun;
  volatile uint32_t  ulUarttrail;
  volatile uint32_t  ulUartdrvout;
  volatile uint32_t  ulUartcr_2;
  volatile uint32_t  ulUartrxiflsel;
  volatile uint32_t  ulUarttxiflsel;
} NX90_UART_AREA_T;

typedef struct NX90_I2C_AREA_Ttag
{
  volatile uint32_t  ulI2c_mcr;
  volatile uint32_t  ulI2c_scr;
  volatile uint32_t  ulI2c_cmd;
  volatile uint32_t  ulI2c_mdr;
  volatile uint32_t  ulI2c_sdr;
  volatile uint32_t  ulI2c_mfifo_cr;
  volatile uint32_t  ulI2c_sfifo_cr;
  volatile uint32_t  ulI2c_sr;
  volatile uint32_t  ulI2c_irqmsk;
  volatile uint32_t  ulI2c_irqsr;
  volatile uint32_t  ulI2c_irqmsked;
  volatile uint32_t  ulI2c_dmacr;
  volatile uint32_t  ulI2c_pio;
} NX90_I2C_AREA_T;

typedef struct NX90_MLED_CTRL_AREA_Ttag
{
  volatile uint32_t  ulMled_ctrl_cfg;
  volatile uint32_t aulMled_ctrl_output_sel[8];
  volatile uint32_t aulMled_ctrl_output_on_time[8];
  volatile uint32_t  ulMled_ctrl_line0;
} NX90_MLED_CTRL_AREA_T;

typedef struct NX90_ECC_CTRL_AREA_Ttag
{
  volatile uint32_t aulEcc_ctrl_intram_ctrl[8];
  volatile uint32_t  ulEcc_ctrl_intramhs_ctrl;
  volatile uint32_t aulEcc_ctrl_xc0_rpec_pram_ctrl[2];
  volatile uint32_t aulEcc_ctrl_xc0_tpec_pram_ctrl[2];
  volatile uint32_t aulEcc_ctrl_xc0_dpram_ctrl[2];
  volatile uint32_t aulEcc_ctrl_xc0_rpu_ram_ctrl[2];
  volatile uint32_t aulEcc_ctrl_xc0_tpu_ram_ctrl[2];
  volatile uint32_t  ulEcc_ctrl_xc0_pfifo_ctrl;
  volatile uint32_t aulEcc_ctrl_xpic_pram_ctrl[2];
  volatile uint32_t aulEcc_ctrl_xpic_dram_ctrl[2];
  volatile uint32_t aulEcc_ctrl_iflash_ctrl[3];
  volatile uint32_t aulEcc_ctrl_intram_addr_sbe[8];
  volatile uint32_t  ulEcc_ctrl_intramhs_addr_sbe;
  volatile uint32_t aulEcc_ctrl_xc0_rpec_pram_addr_sbe[2];
  volatile uint32_t aulEcc_ctrl_xc0_tpec_pram_addr_sbe[2];
  volatile uint32_t aulEcc_ctrl_xc0_rpu_ram_addr_sbe[2];
  volatile uint32_t aulEcc_ctrl_xc0_tpu_ram_addr_sbe[2];
  volatile uint32_t aulEcc_ctrl_xpic_pram_addr_sbe[2];
  volatile uint32_t aulEcc_ctrl_xpic_dram_addr_sbe[2];
  volatile uint32_t aulEcc_ctrl_iflash_addr_sbe[3];
  volatile uint32_t aulEcc_ctrl_intram_addr_dbe[8];
  volatile uint32_t  ulEcc_ctrl_intramhs_addr_dbe;
  volatile uint32_t aulEcc_ctrl_xc0_rpec_pram_addr_dbe[2];
  volatile uint32_t aulEcc_ctrl_xc0_tpec_pram_addr_dbe[2];
  volatile uint32_t aulEcc_ctrl_xc0_rpu_ram_addr_dbe[2];
  volatile uint32_t aulEcc_ctrl_xc0_tpu_ram_addr_dbe[2];
  volatile uint32_t aulEcc_ctrl_xpic_pram_addr_dbe[2];
  volatile uint32_t aulEcc_ctrl_xpic_dram_addr_dbe[2];
  volatile uint32_t aulEcc_ctrl_iflash_addr_dbe[3];
  volatile uint32_t  ulEcc_ctrl_status_sbe;
  volatile uint32_t  ulEcc_ctrl_status_dbe;
} NX90_ECC_CTRL_AREA_T;

typedef struct NX90_GPIO_AREA_Ttag
{
  volatile uint32_t aulGpio_cfg[4];
  volatile uint32_t aulGpio_tc[4];
  volatile uint32_t  ulGpio_counter0_ctrl;
  volatile uint32_t  ulGpio_counter0_max;
  volatile uint32_t  ulGpio_counter0_cnt;
  volatile uint32_t  ulGpio_line;
  volatile uint32_t  ulGpio_in;
  volatile uint32_t  ulGpio_irq_raw;
  volatile uint32_t  ulGpio_irq_masked;
  volatile uint32_t  ulGpio_irq_mask_set;
  volatile uint32_t  ulGpio_irq_mask_rst;
  volatile uint32_t  ulGpio_cnt_irq_raw;
  volatile uint32_t  ulGpio_cnt_irq_masked;
  volatile uint32_t  ulGpio_cnt_irq_mask_set;
  volatile uint32_t  ulGpio_cnt_irq_mask_rst;
} NX90_GPIO_AREA_T;

typedef struct NX90_BLINK_AREA_Ttag
{
  volatile uint32_t  ulBlink_enable;
  volatile uint32_t  ulBlink_config0;
  volatile uint32_t  ulBlink_seq0;
  volatile uint32_t  ulBlink_config1;
  volatile uint32_t  ulBlink_seq1;
  volatile uint32_t  ulBlink_config2;
  volatile uint32_t  ulBlink_seq2;
  volatile uint32_t  ulBlink_config3;
  volatile uint32_t  ulBlink_seq3;
} NX90_BLINK_AREA_T;

typedef struct NX90_INTLOGIC_SYSTIME_LT_AREA_Ttag
{
  volatile uint32_t  ulIntlogic_lt_systime_com_ns;
  volatile uint32_t  ulIntlogic_lt_systime_com_s;
  volatile uint32_t  ulIntlogic_lt_systime_com_uc_ns;
  volatile uint32_t  ulIntlogic_lt_systime_com_uc_s;
  volatile uint32_t  ulIntlogic_lt_systime_app_ns;
  volatile uint32_t  ulIntlogic_lt_systime_app_s;
  volatile uint32_t  ulIntlogic_lt_systimes_latch;
} NX90_INTLOGIC_SYSTIME_LT_AREA_T;

typedef struct NX90_ARM_TIMER_AREA_Ttag
{
  volatile uint32_t aulTimer_config_timer[3];
  volatile uint32_t aulTimer_preload_timer[3];
  volatile uint32_t aulTimer_timer[3];
  volatile uint32_t  ulTimer_systime_s;
  volatile uint32_t  ulTimer_systime_ns;
  volatile uint32_t  ulTimer_compare_systime_s_value;
  volatile uint32_t  ulTimer_irq_raw;
  volatile uint32_t  ulTimer_irq_masked;
  volatile uint32_t  ulTimer_irq_msk_set;
  volatile uint32_t  ulTimer_irq_msk_reset;
  volatile uint32_t  ulTimer_systime_config;
} NX90_ARM_TIMER_AREA_T;

typedef struct NX90_SYSTIME_AREA_Ttag
{
  volatile uint32_t  ulSystime_s;
  volatile uint32_t  ulSystime_ns;
  volatile uint32_t  ulSystime_border;
  volatile uint32_t  ulSystime_count_value;
} NX90_SYSTIME_AREA_T;

typedef struct NX90_HS_IRQ_REG_AREA_Ttag
{
  volatile uint32_t  ulHs_irq_set_raw;
  volatile uint32_t  ulHs_irq_reset_raw;
  volatile uint32_t  ulHs_irq_set_mask;
  volatile uint32_t  ulHs_irq_reset_mask;
  volatile uint32_t  ulHs_irq_masked;
} NX90_HS_IRQ_REG_AREA_T;

typedef struct NX90_WATCHDOG_AREA_Ttag
{
  volatile uint32_t  ulNetx_sys_wdg_ctrl;
  volatile uint32_t  ulNetx_sys_wdg;
  volatile uint32_t  ulNetx_sys_wdg_irq_timeout;
  volatile uint32_t  ulNetx_sys_wdg_res_timeout;
  volatile uint32_t  ulNetx_sys_wdg_irq_raw;
  volatile uint32_t  ulNetx_sys_wdg_irq_masked;
  volatile uint32_t  ulNetx_sys_wdg_irq_msk_set;
  volatile uint32_t  ulNetx_sys_wdg_irq_msk_reset;
} NX90_WATCHDOG_AREA_T;

typedef struct NX90_INT_PHY_CFG_AREA_Ttag
{
  volatile uint32_t  ulInt_phy_cfg_phy_ctrl;
  volatile uint32_t  ulInt_phy_cfg_status;
  volatile uint32_t  ulInt_phy_cfg_i2c_write;
  volatile uint32_t  ulInt_phy_cfg_i2c_read;
  volatile uint32_t  ulInt_phy_cfg_debug;
  volatile uint32_t  ulInt_phy_cfg_irq_raw;
  volatile uint32_t  ulInt_phy_cfg_irq_masked;
  volatile uint32_t  ulInt_phy_cfg_irq_mask_set;
  volatile uint32_t  ulInt_phy_cfg_irq_mask_reset;
} NX90_INT_PHY_CFG_AREA_T;

typedef struct NX90_ASIC_CTRL_COM_AREA_Ttag
{
  volatile uint32_t aulAsic_ctrl_com_system_calibration[2];
  volatile uint32_t  ulAsic_ctrl_com_system_ctrl;
  volatile uint32_t  ulAsic_ctrl_com_netx_lock;
} NX90_ASIC_CTRL_COM_AREA_T;

typedef struct NX90_LVDS2MII_AREA_Ttag
{
  volatile uint32_t  ulLvds2mii_cfg;
  volatile uint32_t  ulLvds2mii_tune_cfg;
  volatile uint32_t  ulLvds2mii_pad_cfg;
  volatile uint32_t  ulLvds2mii_status;
  volatile uint32_t  ulLvds2mii_irq_raw;
  volatile uint32_t  ulLvds2mii_irq_masked;
  volatile uint32_t  ulLvds2mii_irq_msk_set;
  volatile uint32_t  ulLvds2mii_irq_msk_reset;
  volatile uint32_t aulLvds2mii_debug_data[8];
  volatile uint32_t  ulLvds2mii_debug_clk_phase;
  volatile uint32_t  ulLvds2mii_debug_edge_good_range;
  volatile uint32_t  ulLvds2mii_debug_edge_quality;
  volatile uint32_t  ulLvds2mii_debug_edge_count;
  volatile uint32_t  ulLvds2mii_debug_posedge_good_cnt;
  volatile uint32_t  ulLvds2mii_debug_negedge_good_cnt;
  volatile uint32_t  ulLvds2mii_debug_clock_offset_check;
  volatile uint32_t  ulLvds2mii_debug_check_one_clock_phase;
  volatile uint32_t  ulLvds2mii_debug_check_one_clock_phase_result;
} NX90_LVDS2MII_AREA_T;

typedef struct NX90_DPM_AREA_Ttag
{
  volatile uint32_t  ulDpm_cfg0x0;
  volatile uint32_t  ulDpm_if_cfg;
  volatile uint32_t aulDpm_pio_cfg[2];
  volatile uint32_t  ulDpm_addr_cfg;
  volatile uint32_t  ulDpm_timing_cfg;
  volatile uint32_t  ulDpm_rdy_cfg;
  volatile uint32_t  ulDpm_status;
  volatile uint32_t  ulDpm_status_err_reset;
  volatile uint32_t  ulDpm_status_err_addr;
  volatile uint32_t  ulDpm_misc_cfg;
  volatile uint32_t  ulDpm_io_cfg_misc;
  volatile uint32_t aulReserved0[2];
  volatile uint32_t  ulDpm_tunnel_cfg;
  volatile uint32_t  ulDpm_itbaddr;
  volatile uint32_t  ulDpm_win1_end;
  volatile uint32_t  ulDpm_win1_map;
  volatile uint32_t  ulDpm_win2_end;
  volatile uint32_t  ulDpm_win2_map;
  volatile uint32_t  ulDpm_win3_end;
  volatile uint32_t  ulDpm_win3_map;
  volatile uint32_t  ulDpm_win4_end;
  volatile uint32_t  ulDpm_win4_map;
  volatile uint32_t aulReserved1[8];
  volatile uint32_t aulDpm_irq_raw[2];
  volatile uint32_t aulDpm_irq_host_sirq_mask_set[2];
  volatile uint32_t aulDpm_irq_host_sirq_mask_reset[2];
  volatile uint32_t aulDpm_irq_host_sirq_masked[2];
  volatile uint32_t aulDpm_irq_host_dirq_mask_set[2];
  volatile uint32_t aulDpm_irq_host_dirq_mask_reset[2];
  volatile uint32_t aulDpm_irq_host_dirq_masked[2];
  volatile uint32_t  ulDpm_sw_irq;
  volatile uint32_t  ulDpm_crc;
  volatile uint32_t  ulDpm_reserved_netx50_wgd_host_timeout;
  volatile uint32_t  ulDpm_reserved_netx50_wgd_host_trigger;
  volatile uint32_t  ulDpm_reserved_netx50_wgd_netx_timeout;
  volatile uint32_t  ulDpm_sys_sta_bigend16;
  volatile uint32_t  ulDpm_reserved_netx50_timer_ctrl;
  volatile uint32_t  ulDpm_reserved_netx50_timer_start_val;
  volatile uint32_t  ulDpm_sys_sta;
  volatile uint32_t  ulDpm_reset_request;
  volatile uint32_t  ulDpm_firmware_irq_raw;
  volatile uint32_t aulReserved2[3];
  volatile uint32_t  ulDpm_firmware_irq_mask;
  volatile uint32_t  ulDpm_netx_version_bigend16;
  volatile uint32_t aulReserved3[1];
  volatile uint32_t  ulDpm_netx_version;
} NX90_DPM_AREA_T;

typedef struct NX90_IDPM_AREA_Ttag
{
  volatile uint32_t  ulIdpm_cfg0x0;
  volatile uint32_t aulReserved0[3];
  volatile uint32_t  ulIdpm_addr_cfg;
  volatile uint32_t aulReserved1[2];
  volatile uint32_t  ulIdpm_status;
  volatile uint32_t aulReserved2[6];
  volatile uint32_t  ulIdpm_tunnel_cfg;
  volatile uint32_t  ulIdpm_itbaddr;
  volatile uint32_t  ulIdpm_win1_end;
  volatile uint32_t  ulIdpm_win1_map;
  volatile uint32_t  ulIdpm_win2_end;
  volatile uint32_t  ulIdpm_win2_map;
  volatile uint32_t  ulIdpm_win3_end;
  volatile uint32_t  ulIdpm_win3_map;
  volatile uint32_t  ulIdpm_win4_end;
  volatile uint32_t  ulIdpm_win4_map;
  volatile uint32_t aulReserved3[8];
  volatile uint32_t  ulIdpm_irq_raw;
  volatile uint32_t  ulIdpm_irq_host_mask_set;
  volatile uint32_t  ulIdpm_irq_host_mask_reset;
  volatile uint32_t  ulIdpm_irq_host_masked;
  volatile uint32_t aulReserved4[12];
  volatile uint32_t  ulIdpm_sw_irq;
  volatile uint32_t aulReserved5[5];
  volatile uint32_t  ulIdpm_sys_sta;
  volatile uint32_t  ulIdpm_reset_request;
  volatile uint32_t  ulIdpm_firmware_irq_raw;
  volatile uint32_t aulReserved6[3];
  volatile uint32_t  ulIdpm_firmware_irq_mask;
  volatile uint32_t aulReserved7[2];
  volatile uint32_t  ulIdpm_netx_version;
} NX90_IDPM_AREA_T;

typedef struct NX90_IFLASH_CFG_AREA_Ttag
{
  volatile uint32_t  ulBuffer_read_ahead_instructions;
  volatile uint32_t  ulBuffer_read_ahead_data;
  volatile uint32_t  ulIflash_signals_cfg;
  volatile uint32_t  ulIflash_mode_cfg;
  volatile uint32_t  ulIflash_access;
  volatile uint32_t  ulIflash_yadr;
  volatile uint32_t  ulIflash_xadr;
  volatile uint32_t aulIflash_din[5];
  volatile uint32_t  ulIflash_reset;
  volatile uint32_t aulIflash_red_cfg[2];
  volatile uint32_t  ulIflash_ifren_cfg;
  volatile uint32_t  ulIflash_din4_ecc;
  volatile uint32_t  ulIflash_special_cfg;
  volatile uint32_t  ulIflash_protection_info;
  volatile uint32_t  ulIflash_write_protection_main;
} NX90_IFLASH_CFG_AREA_T;

typedef struct NX90_HANDSHAKE_CTRL_AREA_Ttag
{
  volatile uint32_t  ulHandshake_base_addr;
  volatile uint32_t  ulHandshake_cfg;
  volatile uint32_t aulReserved0[2];
  volatile uint32_t  ulHandshake_dpm_irq_raw_clear;
  volatile uint32_t  ulHandshake_dpm_irq_masked;
  volatile uint32_t  ulHandshake_dpm_irq_msk_set;
  volatile uint32_t  ulHandshake_dpm_irq_msk_reset;
  volatile uint32_t  ulHandshake_arm_irq_raw_clear;
  volatile uint32_t  ulHandshake_arm_irq_masked;
  volatile uint32_t  ulHandshake_arm_irq_msk_set;
  volatile uint32_t  ulHandshake_arm_irq_msk_reset;
  volatile uint32_t  ulHandshake_xpic_irq_raw_clear;
  volatile uint32_t  ulHandshake_xpic_irq_masked;
  volatile uint32_t  ulHandshake_xpic_irq_msk_set;
  volatile uint32_t  ulHandshake_xpic_irq_msk_reset;
  volatile uint32_t aulReserved1[16];
  volatile uint32_t aulHandshake_hsc_ctrl[16];
  struct
  {
    volatile uint32_t  ulCtrl;
    volatile uint32_t  ulStatus_ctrl_netx;
    volatile uint32_t  ulStatus_ctrl_host;
    volatile uint32_t  ulWin_map;
  } asHandshake_buf_man[2];
} NX90_HANDSHAKE_CTRL_AREA_T;

typedef struct NX90_BIST_CTRL_AREA_Ttag
{
  volatile uint32_t aulBist_ctrl_ctrl[3];
  volatile uint32_t aulBist_ctrl_stat[3];
} NX90_BIST_CTRL_AREA_T;

typedef struct NX90_CRC_AREA_Ttag
{
  volatile uint32_t  ulCrc_crc;
  volatile uint32_t  ulCrc_data_in;
  volatile uint32_t  ulCrc_polynomial;
  volatile uint32_t  ulCrc_config;
} NX90_CRC_AREA_T;

typedef struct NX90_IFLASH_GLOBAL_TIMINGS_AREA_Ttag
{
  volatile uint32_t  ulWait_5us;
  volatile uint32_t  ulWait_10us;
  volatile uint32_t  ulWait_20us;
  volatile uint32_t  ulWait_100us;
  volatile uint32_t  ulWait_20ms;
} NX90_IFLASH_GLOBAL_TIMINGS_AREA_T;

typedef struct NX90_HASH_AREA_Ttag
{
  volatile uint32_t  ulHash_din;
  volatile uint32_t  ulHash_cfg;
  volatile uint32_t  ulHash_stat;
  volatile uint32_t  ulHash_debug_info;
  volatile uint32_t  ulHash_irq_raw;
  volatile uint32_t  ulHash_irq_masked;
  volatile uint32_t  ulHash_irq_msk_set;
  volatile uint32_t  ulHash_irq_msk_reset;
  volatile uint32_t aulHash_dout[16];
} NX90_HASH_AREA_T;

typedef struct NX90_AES_AREA_Ttag
{
  volatile uint32_t  ulAes_cfg;
  volatile uint32_t  ulAes_stat;
  volatile uint32_t  ulAes_irq_raw;
  volatile uint32_t  ulAes_irq_masked;
  volatile uint32_t  ulAes_irq_msk_set;
  volatile uint32_t  ulAes_irq_msk_reset;
  volatile uint32_t aulAes_key[8];
  volatile uint32_t  ulAes_din;
  volatile uint32_t  ulAes_dout;
} NX90_AES_AREA_T;

typedef struct NX90_RANDOM_AREA_Ttag
{
  volatile uint32_t  ulRandom_init;
  volatile uint32_t  ulRandom_random;
} NX90_RANDOM_AREA_T;

typedef struct NX90_MTGY_AREA_Ttag
{
  volatile uint32_t  ulMtgy_cmd;
  volatile uint32_t  ulMtgy_stat;
  volatile uint32_t  ulMtgy_irq_raw;
  volatile uint32_t  ulMtgy_irq_masked;
  volatile uint32_t  ulMtgy_irq_msk_set;
  volatile uint32_t  ulMtgy_irq_msk_reset;
  volatile uint32_t aulReserved0[1018];
  volatile uint32_t aulMtgy_op_tc[128];
  volatile uint32_t aulMtgy_op_ts[128];
  volatile uint32_t aulMtgy_op_p[128];
  volatile uint32_t aulMtgy_op_b[128];
  volatile uint32_t aulMtgy_op_a[128];
  volatile uint32_t aulMtgy_op_e[128];
  volatile uint32_t aulMtgy_op_x[128];
} NX90_MTGY_AREA_T;

typedef struct NX90_XPEC_AREA_Ttag
{
  volatile uint32_t aulXpec_r[8];
  volatile uint32_t  ulXpec_stat_bits_shared;
  volatile uint32_t  ulRange_urtx_count;
  volatile uint32_t  ulRange45;
  volatile uint32_t  ulRange67;
  volatile uint32_t aulTimer[4];
  volatile uint32_t  ulUrx_count;
  volatile uint32_t  ulUtx_count;
  volatile uint32_t  ulXpec_pc;
  volatile uint32_t  ulZero;
  volatile uint32_t  ulXpec_config;
  volatile uint32_t  ulEc_maska;
  volatile uint32_t  ulEc_maskb;
  volatile uint32_t aulEc_mask[10];
  volatile uint32_t  ulTimer4;
  volatile uint32_t  ulTimer5;
  volatile uint32_t  ulIrq;
  volatile uint32_t  ulXpec_systime_ns;
  volatile uint32_t  ulFifo_data;
  volatile uint32_t  ulXpec_systime_s;
  volatile uint32_t  ulDatach_data;
  volatile uint32_t aulXpec_sr[16];
  volatile uint32_t aulStatcfg[2];
  volatile uint32_t  ulDatach_wr_cfg;
  volatile uint32_t  ulDatach_rd_cfg;
  volatile uint32_t aulUrtx[2];
  volatile uint32_t  ulSysch_data;
  volatile uint32_t  ulSysch_addr;
} NX90_XPEC_AREA_T;

typedef struct NX90_XMAC_AREA_Ttag
{
  volatile uint32_t aulXmac_sr[16];
  volatile uint32_t  ulXmac_status_shared0;
  volatile uint32_t  ulXmac_config_shared0;
  volatile uint32_t  ulXmac_io_oe_shared0;
  volatile uint32_t  ulXmac_status_shared1;
  volatile uint32_t  ulXmac_config_shared1;
  volatile uint32_t  ulXmac_io_oe_shared1;
  volatile uint32_t aulReserved0[6];
  volatile uint32_t aulXmac_urx_utx[2];
  volatile uint32_t aulReserved1[2];
  volatile uint32_t  ulXmac_urx;
  volatile uint32_t  ulXmac_utx;
  volatile uint32_t  ulXmac_rx;
  volatile uint32_t  ulXmac_other_rx;
  volatile uint32_t  ulXmac_rx_hw;
  volatile uint32_t  ulXmac_rx_hw_count;
  volatile uint32_t  ulXmac_tx;
  volatile uint32_t  ulXmac_tx_hw;
  volatile uint32_t  ulXmac_tx_hw_count;
  volatile uint32_t  ulXmac_tx_sent;
  volatile uint32_t  ulXmac_rpu_pc;
  volatile uint32_t  ulXmac_rpu_jmp_latch;
  volatile uint32_t  ulXmac_tpu_pc;
  volatile uint32_t  ulXmac_tpu_jmp_latch;
  volatile uint32_t aulXmac_wr[10];
  volatile uint32_t  ulXmac_sys_time;
  volatile uint32_t  ulXmac_sys_time_upper;
  volatile uint32_t  ulXmac_sys_time_uc;
  volatile uint32_t  ulXmac_sys_time_uc_upper;
  volatile uint32_t aulXmac_cmp_status[5];
  volatile uint32_t  ulXmac_alu_flags;
  volatile uint32_t  ulXmac_status_int;
  volatile uint32_t  ulXmac_stat_bits;
  volatile uint32_t  ulXmac_stat_bits_shared_lower;
  volatile uint32_t  ulXmac_stat_bits_shared_upper;
  volatile uint32_t  ulXmac_status_mii;
  volatile uint32_t  ulXmac_status_mii2;
  volatile uint32_t  ulXmac_other_status_mii2;
  volatile uint32_t  ulXmac_config_mii;
  volatile uint32_t  ulXmac_config_rx_nibble_fifo;
  volatile uint32_t  ulXmac_config_tx_nibble_fifo;
  volatile uint32_t  ulXmac_config_sbu;
  volatile uint32_t  ulXmac_config_sbu2;
  volatile uint32_t  ulXmac_sbu_rate_mul_add;
  volatile uint32_t  ulXmac_sbu_rate_mul_start;
  volatile uint32_t  ulXmac_sbu_rate_mul;
  volatile uint32_t  ulXmac_start_sample_pos;
  volatile uint32_t  ulXmac_stop_sample_pos;
  volatile uint32_t  ulXmac_config_obu;
  volatile uint32_t  ulXmac_config_obu2;
  volatile uint32_t  ulXmac_obu_rate_mul_add;
  volatile uint32_t  ulXmac_obu_rate_mul_start;
  volatile uint32_t  ulXmac_obu_rate_mul;
  volatile uint32_t  ulXmac_start_trans_pos;
  volatile uint32_t  ulXmac_stop_trans_pos;
  volatile uint32_t  ulXmac_rpu_count1;
  volatile uint32_t  ulXmac_rpu_count2;
  volatile uint32_t  ulXmac_tpu_count1;
  volatile uint32_t  ulXmac_tpu_count2;
  volatile uint32_t  ulXmac_rx_count;
  volatile uint32_t  ulXmac_tx_count;
  volatile uint32_t  ulXmac_rpm_mask0;
  volatile uint32_t  ulXmac_rpm_val0;
  volatile uint32_t  ulXmac_rpm_mask1;
  volatile uint32_t  ulXmac_rpm_val1;
  volatile uint32_t  ulXmac_tpm_mask0;
  volatile uint32_t  ulXmac_tpm_val0;
  volatile uint32_t  ulXmac_tpm_mask1;
  volatile uint32_t  ulXmac_tpm_val1;
  volatile uint32_t aulReserved2[8];
  volatile uint32_t  ulXmac_rx_crc32_l;
  volatile uint32_t  ulXmac_rx_crc32_h;
  volatile uint32_t  ulXmac_rx_crc32_cfg;
  volatile uint32_t  ulXmac_tx_crc32_l;
  volatile uint32_t  ulXmac_tx_crc32_h;
  volatile uint32_t  ulXmac_tx_crc32_cfg;
  volatile uint32_t  ulXmac_rx_crc_polynomial_l;
  volatile uint32_t  ulXmac_rx_crc_polynomial_h;
  volatile uint32_t  ulXmac_rx_crc_l;
  volatile uint32_t  ulXmac_rx_crc_h;
  volatile uint32_t  ulXmac_rx_crc_cfg;
  volatile uint32_t  ulXmac_tx_crc_polynomial_l;
  volatile uint32_t  ulXmac_tx_crc_polynomial_h;
  volatile uint32_t  ulXmac_tx_crc_l;
  volatile uint32_t  ulXmac_tx_crc_h;
  volatile uint32_t  ulXmac_tx_crc_cfg;
} NX90_XMAC_AREA_T;

typedef struct NX90_POINTER_FIFO_AREA_Ttag
{
  volatile uint32_t aulPfifo[32];
  volatile uint32_t aulPfifo_border[32];
  volatile uint32_t  ulPfifo_reset;
  volatile uint32_t  ulPfifo_full;
  volatile uint32_t  ulPfifo_empty;
  volatile uint32_t  ulPfifo_overflow;
  volatile uint32_t  ulPfifo_underrun;
  volatile uint32_t aulReserved2[27];
  volatile uint32_t aulPfifo_fill_level[32];
} NX90_POINTER_FIFO_AREA_T;

typedef struct NX90_FMMUSM_AREA_Ttag
{
  struct
  {
    volatile uint32_t  ulCfg_log_startaddr;
    volatile uint32_t  ulCfg_length;
    volatile uint32_t  ulCfg_phys_startaddr;
    volatile uint32_t  ulCfg_enable;
  } asFmmu[8];
  struct
  {
    volatile uint32_t  ulCfg_adr_len;
    volatile uint32_t  ulCfg_mode;
  } asSm[8];
  volatile uint32_t aulReserved0[4];
  volatile uint32_t  ulPhys_addr_offset;
  volatile uint32_t  ulPhys_last_addr;
  volatile uint32_t  ulFmmusm_xpec_nr;
  volatile uint32_t aulReserved1[9];
  volatile uint32_t  ulFmmusm_read_addr_in;
  volatile uint32_t  ulFmmusm_write_addr_in;
  volatile uint32_t  ulSm_read_addr_out;
  volatile uint32_t  ulSm_write_addr_out;
  volatile uint32_t  ulFmmu_read_bit_rol_pos;
  volatile uint32_t  ulFmmu_read_bit_mask;
  volatile uint32_t  ulFmmu_write_bit_rol_pos;
  volatile uint32_t  ulFmmu_write_bit_mask;
  volatile uint32_t  ulFmmusm_len_en;
  volatile uint32_t  ulFmmusm_status_out;
  volatile uint32_t  ulSm_buf_statcfg;
  volatile uint32_t  ulSm_read_event;
  volatile uint32_t  ulSm_write_event;
  volatile uint32_t  ulSm_first_byte_addressed;
  volatile uint32_t  ulSm_last_byte_addressed;
  volatile uint32_t  ulSm_served;
} NX90_FMMUSM_AREA_T;

typedef struct NX90_TRIGGER_SAMPLE_UNIT_AREA_Ttag
{
  volatile uint32_t  ulTrigger_sample_config;
  volatile uint32_t  ulTrigger_sample_status;
  volatile uint32_t  ulTrigger_sample_irq;
  volatile uint32_t  ulTrigger_activate;
  volatile uint32_t  ulTrigger_impulse_length;
  volatile uint32_t aulTrigger__starttime_ns[2];
  volatile uint32_t aulTrigger__cyc_time[2];
  volatile uint32_t  ulSample_mode;
  struct
  {
    volatile uint32_t  ulPos_systime_ns;
    volatile uint32_t  ulNeg_systime_ns;
  } asSample_[2];
  volatile uint32_t  ulTrigger_offset;
  volatile uint32_t  ulSync1_interval;
} NX90_TRIGGER_SAMPLE_UNIT_AREA_T;

typedef struct NX90_XC_EXTERNAL_CONFIG_AREA_Ttag
{
  struct
  {
    volatile uint32_t  ulClk_rate_mul_add;
    volatile uint32_t  ulClk_div;
  } asFb[2];
} NX90_XC_EXTERNAL_CONFIG_AREA_T;

typedef struct NX90_BUF_MAN_AREA_Ttag
{
  volatile uint32_t aulBuf_man_rpec[2];
  volatile uint32_t  ulBuf_man;
} NX90_BUF_MAN_AREA_T;

typedef struct NX90_XPEC_IRQ_REGISTERS_AREA_Ttag
{
  volatile uint32_t aulXc0_irq_xpec[2];
} NX90_XPEC_IRQ_REGISTERS_AREA_T;

typedef struct NX90_XC_DEBUG_AREA_Ttag
{
  volatile uint32_t  ulXc_debug_config;
} NX90_XC_DEBUG_AREA_T;

typedef struct NX90_XC_START_STOP_AREA_Ttag
{
  volatile uint32_t  ulXc_start_stop_ctrl;
  volatile uint32_t  ulXc_hold_status;
} NX90_XC_START_STOP_AREA_T;

typedef struct NX90_PHY_CTRL_AREA_Ttag
{
  volatile uint32_t  ulInt_phy_ctrl_miimu;
  volatile uint32_t  ulInt_phy_ctrl_miimu_sw;
  volatile uint32_t  ulInt_phy_ctrl_led;
  volatile uint32_t  ulInt_phy_ctrl_enhanced_link_detection;
} NX90_PHY_CTRL_AREA_T;

typedef struct NX90_XC_SYSTIME_CONFIG_AREA_Ttag
{
  volatile uint32_t  ulXc_systime_config;
} NX90_XC_SYSTIME_CONFIG_AREA_T;

typedef struct NX90_XPIC_AREA_Ttag
{
  volatile uint32_t aulXpic_r[8];
  volatile uint32_t aulXpic_usr[5];
  volatile uint32_t  ulXpic_pc;
  volatile uint32_t  ulXpic_stat;
  volatile uint32_t  ulXpic_zero;
} NX90_XPIC_AREA_T;

typedef struct NX90_XPIC_DEBUG_AREA_Ttag
{
  volatile uint32_t  ulXpic_hold_pc;
  struct
  {
    volatile uint32_t  ulAddr;
    volatile uint32_t  ulAddr_mask;
    volatile uint32_t  ulData;
    volatile uint32_t  ulData_mask;
    volatile uint32_t  ulContr;
    volatile uint32_t  ulContr_mask;
  } asXpic_break[2];
  volatile uint32_t  ulXpic_break_last_pc;
  volatile uint32_t  ulXpic_break_status;
  volatile uint32_t  ulXpic_break_irq_raw;
  volatile uint32_t  ulXpic_break_irq_masked;
  volatile uint32_t  ulXpic_break_irq_msk_set;
  volatile uint32_t  ulXpic_break_irq_msk_reset;
  volatile uint32_t  ulXpic_break_own_irq_masked;
  volatile uint32_t  ulXpic_break_own_irq_msk_set;
  volatile uint32_t  ulXpic_break_own_irq_msk_reset;
  volatile uint32_t  ulXpic_break_return_fiq_pc;
  volatile uint32_t  ulXpic_break_return_irq_pc;
  volatile uint32_t  ulXpic_irq_status;
} NX90_XPIC_DEBUG_AREA_T;

typedef struct NX90_XPIC_VIC_AREA_Ttag
{
  volatile uint32_t  ulXpic_vic_config;
  volatile uint32_t aulXpic_vic_raw_intr[3];
  volatile uint32_t aulXpic_vic_softint_set[3];
  volatile uint32_t aulXpic_vic_softint_reset[3];
  volatile uint32_t  ulXpic_vic_fiq_addr;
  volatile uint32_t  ulXpic_vic_irq_addr;
  volatile uint32_t  ulXpic_vic_vector_addr;
  volatile uint32_t  ulXpic_vic_table_base_addr;
  volatile uint32_t  ulXpic_vic_fiq_vect_config;
  volatile uint32_t aulXpic_vic_vect_config[16];
  volatile uint32_t aulXpic_vic_default[3];
  volatile uint32_t aulXpic_vic_fiq_default[3];
} NX90_XPIC_VIC_AREA_T;

typedef struct NX90_XPIC_WDG_AREA_Ttag
{
  volatile uint32_t  ulXpic_wdg_trig;
  volatile uint32_t  ulXpic_wdg_counter;
  volatile uint32_t  ulXpic_wdg_xpic_irq_timeout;
  volatile uint32_t  ulXpic_wdg_arm_irq_timeout;
  volatile uint32_t  ulXpic_wdg_irq_raw;
  volatile uint32_t  ulXpic_wdg_irq_masked;
  volatile uint32_t  ulXpic_wdg_irq_msk_set;
  volatile uint32_t  ulXpic_wdg_irq_msk_reset;
} NX90_XPIC_WDG_AREA_T;

typedef struct NX90_SR_AREA_Ttag
{
  volatile uint32_t aulSr_sr[16];
  volatile uint32_t aulSr_statcfg[2];
} NX90_SR_AREA_T;

typedef struct NX90_XC_STATCFG_SHARED_AREA_Ttag
{
  volatile uint32_t  ulSr_stat_bits_shared;
} NX90_XC_STATCFG_SHARED_AREA_T;

typedef struct NX90_NFIFO_AREA_Ttag
{
  volatile uint32_t  ulNfifo_config;
  volatile uint32_t aulReserved0[2];
  volatile uint32_t  ulNfifo_irq_raw;
  volatile uint32_t  ulNfifo_irq_arm_app_masked;
  volatile uint32_t  ulNfifo_irq_arm_app_msk_set;
  volatile uint32_t  ulNfifo_irq_arm_app_msk_reset;
  volatile uint32_t  ulNfifo_irq_arm_com_masked;
  volatile uint32_t  ulNfifo_irq_arm_com_msk_set;
  volatile uint32_t  ulNfifo_irq_arm_com_msk_reset;
  volatile uint32_t  ulNfifo_irq_xpic_app_masked;
  volatile uint32_t  ulNfifo_irq_xpic_app_msk_set;
  volatile uint32_t  ulNfifo_irq_xpic_app_msk_reset;
  volatile uint32_t  ulNfifo_irq_xpic_com_masked;
  volatile uint32_t  ulNfifo_irq_xpic_com_msk_set;
  volatile uint32_t  ulNfifo_irq_xpic_com_msk_reset;
  volatile uint32_t aulReserved1[6];
  volatile uint32_t aulNfifo_irq_observe[10];
  volatile uint32_t aulNfifo_fifo[992];
} NX90_NFIFO_AREA_T;

typedef struct NX90_PAD_CTRL_AREA_Ttag
{
  volatile uint32_t  ulPad_ctrl_rdy_n;
  volatile uint32_t  ulPad_ctrl_run_n;
  volatile uint32_t aulPad_ctrl_mled[4];
  volatile uint32_t aulPad_ctrl_com_io[4];
  volatile uint32_t  ulPad_ctrl_mii0_rxclk;
  volatile uint32_t aulPad_ctrl_mii0_rxd[4];
  volatile uint32_t  ulPad_ctrl_mii0_rxdv;
  volatile uint32_t  ulPad_ctrl_mii0_rxer;
  volatile uint32_t  ulPad_ctrl_mii0_txclk;
  volatile uint32_t aulPad_ctrl_mii0_txd[4];
  volatile uint32_t  ulPad_ctrl_mii0_txen;
  volatile uint32_t  ulPad_ctrl_mii0_col;
  volatile uint32_t  ulPad_ctrl_mii0_crs;
  volatile uint32_t  ulPad_ctrl_phy0_led_link_in;
  volatile uint32_t  ulPad_ctrl_mii1_rxclk;
  volatile uint32_t aulPad_ctrl_mii1_rxd[4];
  volatile uint32_t  ulPad_ctrl_mii1_rxdv;
  volatile uint32_t  ulPad_ctrl_mii1_rxer;
  volatile uint32_t  ulPad_ctrl_mii1_txclk;
  volatile uint32_t aulPad_ctrl_mii1_txd[4];
  volatile uint32_t  ulPad_ctrl_mii1_txen;
  volatile uint32_t  ulPad_ctrl_mii1_col;
  volatile uint32_t  ulPad_ctrl_mii1_crs;
  volatile uint32_t  ulPad_ctrl_phy1_led_link_in;
  volatile uint32_t  ulPad_ctrl_mii_mdc;
  volatile uint32_t  ulPad_ctrl_mii_mdio;
  volatile uint32_t  ulPad_ctrl_rst_out_n;
  volatile uint32_t  ulPad_ctrl_clk25out;
  volatile uint32_t aulPad_ctrl_mmio[8];
  volatile uint32_t  ulPad_ctrl_sqi_clk;
  volatile uint32_t  ulPad_ctrl_sqi_cs0n;
  volatile uint32_t  ulPad_ctrl_sqi_mosi;
  volatile uint32_t  ulPad_ctrl_sqi_miso;
  volatile uint32_t  ulPad_ctrl_sqi_sio2;
  volatile uint32_t  ulPad_ctrl_sqi_sio3;
  volatile uint32_t aulPad_ctrl_hif_a[18];
  volatile uint32_t aulPad_ctrl_hif_d[16];
  volatile uint32_t  ulPad_ctrl_hif_bhen;
  volatile uint32_t  ulPad_ctrl_hif_csn;
  volatile uint32_t  ulPad_ctrl_hif_rdn;
  volatile uint32_t  ulPad_ctrl_hif_wrn;
  volatile uint32_t  ulPad_ctrl_hif_rdy;
  volatile uint32_t  ulPad_ctrl_hif_dirq;
  volatile uint32_t  ulPad_ctrl_hif_sdclk;
} NX90_PAD_CTRL_AREA_T;

typedef struct NX90_ASIC_CTRL_AREA_Ttag
{
  struct
  {
    volatile uint32_t  ulConfig;
    volatile uint32_t  ulMask;
  } asIo_config[9];
  volatile uint32_t  ulPhy_ctrl0;
  volatile uint32_t  ulPhy_ctrl0_mask;
  struct
  {
    volatile uint32_t  ulEnable;
    volatile uint32_t  ulMask;
  } asClock_enable[2];
  volatile uint32_t  ulReset_ctrl;
  volatile uint32_t  ulAhbl_master_ready;
  volatile uint32_t aulReserved0[3];
  volatile uint32_t  ulSystem_status;
  volatile uint32_t  ulSystime_feth_ctrl;
  volatile uint32_t  ulSystime_gpio_com_ctrl;
  volatile uint32_t  ulSystime_gpio_app_ctrl;
  volatile uint32_t  ulOnly_porn;
  volatile uint32_t  ulOnly_porn_rom;
  volatile uint32_t  ulNetx_version;
  volatile uint32_t  ulNetx_status;
  volatile uint32_t  ulRdy_run_cfg;
  volatile uint32_t  ulFirewall_cfg_hifmem_sdram;
  volatile uint32_t  ulFirewall_cfg_hifmem_amem;
  volatile uint32_t  ulFirewall_cfg_sqirom;
  volatile uint32_t  ulFirewall_cfg_crypt;
  volatile uint32_t  ulMisc_asic_ctrl;
  volatile uint32_t  ulNetx_lic_id;
  volatile uint32_t aulNetx_lic_flags[2];
  volatile uint32_t aulNetx_lic_errors[2];
  volatile uint32_t  ulAsic_ctrl_access_key;
  volatile uint32_t aulReserved1[1];
  volatile uint32_t  ulAsic_ctrl_irq_raw;
  volatile uint32_t  ulAsic_ctrl_irq_masked;
  volatile uint32_t  ulAsic_ctrl_irq_mask_set;
  volatile uint32_t  ulAsic_ctrl_irq_mask_reset;
} NX90_ASIC_CTRL_AREA_T;

typedef struct NX90_MMIO_CTRL_AREA_Ttag
{
  volatile uint32_t aulMmio_cfg[16];
  volatile uint32_t  ulMmio_pio_out_line_cfg0;
  volatile uint32_t  ulMmio_pio_out_line_set_cfg0;
  volatile uint32_t  ulMmio_pio_out_line_reset_cfg0;
  volatile uint32_t  ulMmio_pio_oe_line_cfg0;
  volatile uint32_t  ulMmio_pio_oe_line_set_cfg0;
  volatile uint32_t  ulMmio_pio_oe_line_reset_cfg0;
  volatile uint32_t  ulMmio_in_line_status0;
  volatile uint32_t  ulMmio_is_pio_status0;
} NX90_MMIO_CTRL_AREA_T;

typedef struct NX90_GLOBAL_BUF_MAN_AREA_Ttag
{
  volatile uint32_t aulGlobal_read_buffer_[8];
  volatile uint32_t aulGlobal_write_buffer_[8];
} NX90_GLOBAL_BUF_MAN_AREA_T;

typedef struct NX90_HIF_IO_CTRL_AREA_Ttag
{
  volatile uint32_t  ulHif_io_cfg;
  volatile uint32_t  ulHif_pio_cfg;
  volatile uint32_t aulHif_pio_out[2];
  volatile uint32_t aulHif_pio_oe[2];
  volatile uint32_t aulHif_pio_in[2];
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulHif_pio_irq_raw;
  volatile uint32_t  ulHif_pio_irq_arm_mask_set;
  volatile uint32_t  ulHif_pio_irq_arm_mask_reset;
  volatile uint32_t  ulHif_pio_irq_arm_masked;
  volatile uint32_t  ulHif_pio_irq_xpic_mask_set;
  volatile uint32_t  ulHif_pio_irq_xpic_mask_reset;
  volatile uint32_t  ulHif_pio_irq_xpic_masked;
} NX90_HIF_IO_CTRL_AREA_T;

typedef struct NX90_EXT_ASYNCMEM_CTRL_AREA_Ttag
{
  volatile uint32_t aulExtsram_ctrl[4];
  volatile uint32_t  ulExt_cs0_apm_ctrl;
  volatile uint32_t aulReserved0[3];
  volatile uint32_t  ulExt_rdy_cfg;
  volatile uint32_t  ulExt_rdy_status;
} NX90_EXT_ASYNCMEM_CTRL_AREA_T;

typedef struct NX90_EXT_SDRAM_CTRL_AREA_Ttag
{
  volatile uint32_t  ulSdram_general_ctrl;
  volatile uint32_t  ulSdram_timing_ctrl;
  volatile uint32_t  ulSdram_mr;
} NX90_EXT_SDRAM_CTRL_AREA_T;

typedef struct NX90_EXTMEM_PRIORITY_CTRL_AREA_Ttag
{
  volatile uint32_t  ulExtmem_prio_timslot_ctrl;
  volatile uint32_t  ulExtmem_prio_accesstime_ctrl;
} NX90_EXTMEM_PRIORITY_CTRL_AREA_T;

typedef struct NX90_ABORT_AREA_Ttag
{
  volatile uint32_t  ulAbort_base;
  volatile uint32_t aulReserved0[2];
  volatile uint32_t  ulAbort_end;
} NX90_ABORT_AREA_T;

typedef struct NX90_SQI_AREA_Ttag
{
  volatile uint32_t aulSqi_cr[2];
  volatile uint32_t  ulSqi_dr;
  volatile uint32_t  ulSqi_sr;
  volatile uint32_t  ulSqi_tcr;
  volatile uint32_t  ulSqi_irq_mask;
  volatile uint32_t  ulSqi_irq_raw;
  volatile uint32_t  ulSqi_irq_masked;
  volatile uint32_t  ulSqi_irq_clear;
  volatile uint32_t  ulSqi_dmacr;
  volatile uint32_t  ulSqi_pio_out;
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulSqi_pio_oe;
  volatile uint32_t  ulSqi_pio_in;
  volatile uint32_t  ulSqi_sqirom_cfg;
} NX90_SQI_AREA_T;

typedef struct NX90_SAMPLE_AT_PORN_STAT_AREA_Ttag
{
  volatile uint32_t aulSample_at_porn_stat_in[2];
} NX90_SAMPLE_AT_PORN_STAT_AREA_T;

typedef struct NX90_ADC_SEQ_AREA_Ttag
{
  volatile uint32_t  ulAdc_seq_start;
  volatile uint32_t  ulAdc_seq_cfg;
  volatile uint32_t  ulAdc_seq_cfg_clock;
  volatile uint32_t  ulAdc_seq_status;
  volatile uint32_t aulAdc_seq_adc_data[2];
  volatile uint32_t  ulAdc_seq_debug;
  volatile uint32_t  ulAdc_seq_irq_raw;
  volatile uint32_t  ulAdc_seq_irq_masked;
  volatile uint32_t  ulAdc_seq_irq_mask_set;
  volatile uint32_t  ulAdc_seq_irq_mask_reset;
} NX90_ADC_SEQ_AREA_T;

typedef struct NX90_MIIMU_AREA_Ttag
{
  volatile uint32_t  ulMiimu;
  volatile uint32_t  ulMiimu_sw;
} NX90_MIIMU_AREA_T;

typedef struct NX90_ETH_AREA_Ttag
{
  volatile uint32_t  ulEth_config;
  volatile uint32_t  ulEth_tx_config;
  volatile uint32_t  ulEth_status;
  volatile uint32_t  ulEth_tx_data;
  volatile uint32_t  ulEth_rx_data;
  volatile uint32_t  ulEth_tx_len;
  volatile uint32_t  ulEth_rx_len_stat;
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulEth_rx_systime_ns;
  volatile uint32_t  ulEth_tx_systime_ns;
  volatile uint32_t  ulEth_irq_raw;
  volatile uint32_t  ulEth_irq_masked;
  volatile uint32_t  ulEth_irq_msk_set;
  volatile uint32_t  ulEth_irq_msk_reset;
} NX90_ETH_AREA_T;

typedef struct NX90_DMAC_MUX_AREA_Ttag
{
  volatile uint32_t aulDmac_mux_peripheral_input_sel[6];
} NX90_DMAC_MUX_AREA_T;

typedef struct NX90_MLED_CTRL_APP_AREA_Ttag
{
  volatile uint32_t  ulMled_ctrl_app_cfg;
  volatile uint32_t aulMled_ctrl_app_output_sel[16];
  volatile uint32_t aulMled_ctrl_app_output_on_time[16];
  volatile uint32_t  ulMled_ctrl_app_line0;
} NX90_MLED_CTRL_APP_AREA_T;

typedef struct NX90_GPIO_APP_AREA_Ttag
{
  volatile uint32_t aulGpio_app_cfg[8];
  volatile uint32_t aulGpio_app_tc[8];
  volatile uint32_t aulGpio_app_counter_ctrl[3];
  volatile uint32_t aulGpio_app_counter_max[3];
  volatile uint32_t aulGpio_app_counter_cnt[3];
  volatile uint32_t  ulGpio_app_line;
  volatile uint32_t  ulGpio_app_in;
  volatile uint32_t  ulGpio_app_irq_raw;
  volatile uint32_t  ulGpio_app_irq_masked;
  volatile uint32_t  ulGpio_app_irq_mask_set;
  volatile uint32_t  ulGpio_app_irq_mask_rst;
  volatile uint32_t  ulGpio_app_cnt_irq_raw;
  volatile uint32_t  ulGpio_app_cnt_irq_masked;
  volatile uint32_t  ulGpio_app_cnt_irq_mask_set;
  volatile uint32_t  ulGpio_app_cnt_irq_mask_rst;
} NX90_GPIO_APP_AREA_T;

typedef struct NX90_TRIGGER_IRQ_AREA_Ttag
{
  volatile uint32_t  ulTrigger_irq_cfg;
  volatile uint32_t  ulTrigger_irq_raw;
  volatile uint32_t  ulTrigger_irq_masked;
  volatile uint32_t  ulTrigger_irq_msk_set;
  volatile uint32_t  ulTrigger_irq_msk_reset;
} NX90_TRIGGER_IRQ_AREA_T;

typedef struct NX90_ENDAT_AREA_Ttag
{
  volatile uint32_t  ulEndat_send;
  volatile uint32_t aulEndat_receive1_[2];
  volatile uint32_t  ulEndat_receive2;
  volatile uint32_t  ulEndat_receive3;
  volatile uint32_t  ulEndat_conf1;
  volatile uint32_t  ulEndat_conf2;
  volatile uint32_t  ulEndat_conf3;
  volatile uint32_t  ulEndat_stat;
  volatile uint32_t  ulEndat_int;
  volatile uint32_t  ulEndat_test1;
  volatile uint32_t  ulEndat_test2;
  volatile uint32_t aulEndat_receive4_[2];
  volatile uint32_t  ulEndat_sw_strobe;
  volatile uint32_t  ulEndat_id;
} NX90_ENDAT_AREA_T;

typedef struct NX90_ENDAT_CTRL_AREA_Ttag
{
  volatile uint32_t  ulEndat_ctrl_trigger_cfg;
  volatile uint32_t  ulEndat_ctrl_trigger;
  volatile uint32_t  ulEndat_ctrl_strobe_cfg;
} NX90_ENDAT_CTRL_AREA_T;

typedef struct NX90_CANCTRL_AREA_Ttag
{
  volatile uint32_t  ulCanctrl_mode;
  volatile uint32_t  ulCanctrl_command;
  volatile uint32_t  ulCanctrl_status;
  volatile uint32_t  ulCanctrl_irq;
  volatile uint32_t  ulCanctrl_irq_en;
  volatile uint32_t  ulCanctrl_not_extended_acceptance_mask0;
  volatile uint32_t aulCanctrl_bus_timing[2];
  volatile uint32_t aulReserved0[2];
  volatile uint32_t  ulCanctrl_not_extended_data0;
  volatile uint32_t  ulCanctrl_arb_lost_capture;
  volatile uint32_t  ulCanctrl_err_code_capture;
  volatile uint32_t  ulCanctrl_err_warning_limit;
  volatile uint32_t  ulCanctrl_rx_error_cnt;
  volatile uint32_t  ulCanctrl_tx_error_cnt;
  volatile uint32_t aulCanctrl_data[13];
  volatile uint32_t  ulCanctrl_rx_message_cnt;
  volatile uint32_t aulReserved1[1];
  volatile uint32_t  ulCanctrl_mode_control;
} NX90_CANCTRL_AREA_T;

typedef struct NX90_SPI_AREA_Ttag
{
  volatile uint32_t aulSpi_cr[2];
  volatile uint32_t  ulSpi_dr;
  volatile uint32_t  ulSpi_sr;
  volatile uint32_t  ulSpi_cpsr;
  volatile uint32_t  ulSpi_imsc;
  volatile uint32_t  ulSpi_ris;
  volatile uint32_t  ulSpi_mis;
  volatile uint32_t  ulSpi_icr;
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulSpi_dmacr;
  volatile uint32_t aulReserved1[1];
  volatile uint32_t  ulSpi_data_register;
  volatile uint32_t  ulSpi_status_register;
  volatile uint32_t  ulSpi_control_register;
  volatile uint32_t  ulSpi_interrupt_control_register;
} NX90_SPI_AREA_T;

typedef struct NX90_PIO_AREA_Ttag
{
  volatile uint32_t  ulPio_in;
  volatile uint32_t  ulPio_out;
  volatile uint32_t  ulPio_oe;
} NX90_PIO_AREA_T;

typedef struct NX90_BISS_AREA_Ttag
{
  volatile uint32_t aulBiss_scdata0_[2];
  volatile uint32_t aulBiss_scdata1_[2];
  volatile uint32_t aulBiss_scdata2_[2];
  volatile uint32_t aulBiss_scdata3_[2];
  volatile uint32_t aulBiss_scdata4_[2];
  volatile uint32_t aulBiss_scdata5_[2];
  volatile uint32_t aulBiss_scdata6_[2];
  volatile uint32_t aulBiss_scdata7_[2];
  volatile uint32_t aulReserved0[16];
  volatile uint32_t aulBiss_rdata[16];
  volatile uint32_t aulBiss_sc[8];
  volatile uint32_t  ulBiss_ccc0;
  volatile uint32_t  ulBiss_ccc1_mc0;
  volatile uint32_t  ulBiss_mc1;
  volatile uint32_t  ulBiss_cc_sl;
  volatile uint32_t  ulBiss_status0;
  volatile uint32_t  ulBiss_ir;
  volatile uint32_t  ulBiss_status1;
} NX90_BISS_AREA_T;

typedef struct NX90_BISS_CTRL_AREA_Ttag
{
  volatile uint32_t  ulBiss_ctrl_trigger_cfg;
  volatile uint32_t  ulBiss_ctrl_trigger;
  volatile uint32_t  ulBiss_ctrl_irq_raw;
  volatile uint32_t  ulBiss_ctrl_irq_masked;
  volatile uint32_t  ulBiss_ctrl_irq_msk_set;
  volatile uint32_t  ulBiss_ctrl_irq_msk_reset;
} NX90_BISS_CTRL_AREA_T;

typedef struct NX90_XLINK_AREA_Ttag
{
  volatile uint32_t  ulXlink_cfg;
  volatile uint32_t  ulXlink_tx;
  volatile uint32_t  ulXlink_rx;
  volatile uint32_t  ulXlink_stat;
} NX90_XLINK_AREA_T;

typedef struct NX90_IO_LINK_IRQ_AREA_Ttag
{
  volatile uint32_t  ulIo_link_irq_raw;
  volatile uint32_t  ulIo_link_irq_masked;
  volatile uint32_t  ulIo_link_irq_msk_set;
  volatile uint32_t  ulIo_link_irq_msk_reset;
} NX90_IO_LINK_IRQ_AREA_T;

typedef struct NX90_XC_EXTBUS_SEL_AREA_Ttag
{
  volatile uint32_t  ulXc_extbus_sel_ctrl;
} NX90_XC_EXTBUS_SEL_AREA_T;


#endif
